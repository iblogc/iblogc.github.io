{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README","path":"README","modified":1,"renderable":0},{"_id":"source/avatar.png","path":"avatar.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/headimg.jpg","path":"headimg.jpg","modified":1,"renderable":0},{"_id":"source/iblogc.jpg","path":"iblogc.jpg","modified":1,"renderable":0},{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":1,"renderable":0},{"_id":"source/logo.png","path":"logo.png","modified":1,"renderable":0},{"_id":"source/media/Git工作流图示.jpg","path":"media/Git工作流图示.jpg","modified":1,"renderable":0},{"_id":"source/media/Synergy-Ubuntu客户端配置首页.png","path":"media/Synergy-Ubuntu客户端配置首页.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端启动.png","path":"media/Synergy-Windows服务端启动.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-01.png","path":"media/Synergy-Windows服务端添加客户端-01.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-02.png","path":"media/Synergy-Windows服务端添加客户端-02.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-03.png","path":"media/Synergy-Windows服务端添加客户端-03.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端配置首页.png","path":"media/Synergy-Windows服务端配置首页.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-logo.png","path":"media/Synergy-logo.png","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-01.png","path":"media/chrome-add-to-homescreen-01.png","modified":1,"renderable":0},{"_id":"source/media/django-commands.png","path":"media/django-commands.png","modified":1,"renderable":0},{"_id":"source/media/materialdesign-goals-landingimage_large_mdpi.png","path":"media/materialdesign-goals-landingimage_large_mdpi.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-auth.png","path":"media/ngrok-auth.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-iblogc.png","path":"media/ngrok-iblogc.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-start-iblogc-django-weixin.png","path":"media/ngrok-start-iblogc-django-weixin.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-start-iblogc.png","path":"media/ngrok-start-iblogc.png","modified":1,"renderable":0},{"_id":"source/media/nrok-web-interface.png","path":"media/nrok-web-interface.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-14.10-15.04-01.png","path":"media/ubuntu-14.10-15.04-01.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-15.04-info.png","path":"media/ubuntu-15.04-info.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-15.04-logo.jpg","path":"media/ubuntu-15.04-logo.jpg","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_144.png","path":"res/ic_launcher_144.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_192.png","path":"res/ic_launcher_192.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_32.png","path":"res/ic_launcher_32.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_48.png","path":"res/ic_launcher_48.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_72.png","path":"res/ic_launcher_72.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_96.png","path":"res/ic_launcher_96.png","modified":1,"renderable":0},{"_id":"source/res/微依LOGO.JPG","path":"res/微依LOGO.JPG","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-02.png","path":"media/chrome-add-to-homescreen-02.png","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-04.png","path":"media/chrome-add-to-homescreen-04.png","modified":1,"renderable":0},{"_id":"source/media/git-reset_drbfhd.png","path":"media/git-reset_drbfhd.png","modified":1,"renderable":0},{"_id":"source/media/花木兰/1.jpg","path":"media/花木兰/1.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/10.jpg","path":"media/花木兰/10.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/15.jpg","path":"media/花木兰/15.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/2.jpg","path":"media/花木兰/2.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/5.jpg","path":"media/花木兰/5.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/7.jpg","path":"media/花木兰/7.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/8.jpg","path":"media/花木兰/8.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/9.jpg","path":"media/花木兰/9.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/13.jpg","path":"media/花木兰/13.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/4.jpg","path":"media/花木兰/4.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/6.jpg","path":"media/花木兰/6.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"source/media/花木兰/14.jpg","path":"media/花木兰/14.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/3.jpg","path":"media/花木兰/3.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/11.jpg","path":"media/花木兰/11.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/LICENSE","path":"lib/pangu/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/README.md","path":"lib/pangu/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"source/media/花木兰/12.jpeg","path":"media/花木兰/12.jpeg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","path":"lib/fancybox/source/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","path":"lib/fancybox/source/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/dist/pangu.js","path":"lib/pangu/dist/pangu.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/dist/pangu.js.map","path":"lib/pangu/dist/pangu.js.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js","path":"lib/pangu/dist/pangu.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js.map","path":"lib/pangu/dist/pangu.min.js.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/example.js","path":"lib/pjax/example/example.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/forms.html","path":"lib/pjax/example/forms.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/index.html","path":"lib/pjax/example/index.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page2.html","path":"lib/pjax/example/page2.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/example/page3.html","path":"lib/pjax/example/page3.html","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","path":"lib/pjax/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","path":"lib/pjax/lib/eval-script.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","path":"lib/pjax/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","path":"lib/pjax/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","path":"lib/pjax/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","path":"lib/pjax/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","path":"lib/pjax/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","path":"lib/pjax/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","path":"lib/pjax/lib/switches-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/switches.js","path":"lib/pjax/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","path":"lib/pjax/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/setup.js","path":"lib/pjax/tests/setup.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/test.ts","path":"lib/pjax/tests/test.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"source/media/git-lg效果图.png","path":"media/git-lg效果图.png","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","path":"lib/pjax/lib/events/off.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","path":"lib/pjax/lib/events/on.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","path":"lib/pjax/lib/events/trigger.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","path":"lib/pjax/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","path":"lib/pjax/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","path":"lib/pjax/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","path":"lib/pjax/lib/proto/log.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","path":"lib/pjax/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","path":"lib/pjax/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","path":"lib/pjax/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","path":"lib/pjax/lib/util/noop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","path":"lib/pjax/lib/util/extend.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","path":"lib/pjax/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","path":"lib/pjax/tests/lib/abort-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","path":"lib/pjax/tests/lib/eval-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","path":"lib/pjax/tests/lib/execute-scripts.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","path":"lib/pjax/tests/lib/events.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","path":"lib/pjax/tests/lib/foreach-els.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","path":"lib/pjax/tests/lib/foreach-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","path":"lib/pjax/tests/lib/is-supported.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","path":"lib/pjax/tests/lib/parse-options.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","path":"lib/pjax/tests/lib/send-request.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","path":"lib/pjax/tests/lib/switch-selectors.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","path":"lib/pjax/tests/lib/switches.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","path":"lib/pjax/tests/lib/uniqueid.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","path":"lib/pjax/tests/lib/proto/attach-form.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","path":"lib/pjax/tests/lib/proto/attach-link.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","path":"lib/pjax/tests/lib/proto/handle-response.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","path":"lib/pjax/tests/lib/proto/parse-element.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","path":"lib/pjax/tests/lib/util/clone.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","path":"lib/pjax/tests/lib/util/contains.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","path":"lib/pjax/tests/lib/util/extend.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","path":"lib/pjax/tests/lib/util/noop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","path":"lib/pjax/tests/lib/util/update-query-string.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"fd87ee4026bc85238878c7bd4138f0b924132c6a","modified":1584064780608},{"_id":"source/404.html","hash":"0cc1ab165059bc3bcb1bc958af23c4c7ffb7460a","modified":1529324544517},{"_id":"source/CNAME","hash":"12429add85bfdc53322e275c4b2e8e1cf86ae660","modified":1446990516000},{"_id":"source/README","hash":"d001ba1bb6097331b01adcdd63dceac23fba917f","modified":1451124952000},{"_id":"source/avatar.png","hash":"4a2f19c786849c7ba5a0ca788a8c5362111dd7e6","modified":1441035990000},{"_id":"source/favicon.ico","hash":"7e52610aa79be8b2715cdc796ff70888027a096c","modified":1445444294000},{"_id":"source/googlec83004d17e7bf8d6.html","hash":"10c653130166f31a58fc384d410ad91874d7baa5","modified":1487294435000},{"_id":"source/headimg.jpg","hash":"c410e4e6ca6620fa70f61b8fea8993898c5fe4f4","modified":1429893902000},{"_id":"source/iblogc.jpg","hash":"b59417411922e40c352142a1a4045ac08be14954","modified":1483156220000},{"_id":"source/leancloud.memo","hash":"8fdbce05ab725473a023b5b7aef7ac8d143c9bd2","modified":1585020725606},{"_id":"source/logo.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1442072976000},{"_id":"source/manifest.json","hash":"77c4fff75be5fc7fd0ee805b375735b1ae908f4c","modified":1442077082000},{"_id":"themes/next/.DS_Store","hash":"a2709dfea738ff4172c68cbbc932039b0e0469cb","modified":1570873179544},{"_id":"themes/next/.all-contributorsrc","hash":"a03f0ccb9b6798679dc2a77e5c395a167ce388c2","modified":1575025512999},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1568699013420},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1568699013420},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1568699013426},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1568699013427},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1568699013428},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1575025513008},{"_id":"themes/next/_config.yml","hash":"429ff40e9ee0ea7a891784b1a183ba1d7b6e1bf3","modified":1585029078260},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1527752362676},{"_id":"themes/next/gulpfile.js","hash":"94e80ca87826b90744618b00d08bc7e5eefbaef4","modified":1575025513018},{"_id":"themes/next/package.json","hash":"aca29ae07d4d4164ac260c2ae1e27d2ce6cd7ffe","modified":1575025513082},{"_id":"source/.MWebMetaData/ImgUpload-10E65E2EFD72AEFA2491EE39E1690E62.data","hash":"1cdfd593dce962d93f4f2a1020dde944fc579e21","modified":1486617742000},{"_id":"source/.MWebMetaData/ImgUpload-4343841817E225355D1D64A18A4C557C.data","hash":"fa71971a176effc61c890c4653e501e550261509","modified":1486617643000},{"_id":"source/.MWebMetaData/ImgUpload-4F325A0CBB65C2523A44DEE8C7DF3E55.data","hash":"bedf1b408202952998fbed8ebf9ae680f0b2f933","modified":1486617938000},{"_id":"source/.MWebMetaData/ImgUpload-6576429E75439F2D83C93768E6EDC17A.data","hash":"c5094a5a54b98584618e6b8820215db07e5a711c","modified":1486617816000},{"_id":"source/.MWebMetaData/ImgUpload-77630AE8D727906DFF25439D8E5EF403.data","hash":"4dba00bbbbe9cc203c115745420494a5d6b26d7a","modified":1486617792000},{"_id":"source/.MWebMetaData/ImgUpload-7BB6093676AD8DF842448D125F968F87.data","hash":"961a4fd6562abbd9cbc2b85588b03151bbffba06","modified":1486617854000},{"_id":"source/.MWebMetaData/ImgUpload-EDADC824820B5778AAA70749BA5F44B9.data","hash":"0ce9bbf02eb54d695db7a50e9786e1ef884089bc","modified":1486617915000},{"_id":"source/.MWebMetaData/ImgUpload-FE88F7274F26B024F9A036EEEBC4C4FC.data","hash":"d8e50680f6d7ecbd026001e37422ddd33d9004c3","modified":1486617877000},{"_id":"source/_posts/.DS_Store","hash":"2b76496a5a3e0beba941ec0d4d9401f2a6c43eec","modified":1583895484716},{"_id":"source/_posts/Apache-Rewrite.md","hash":"2d0a6661a4983592866449fc8bf2b7048b9ee90c","modified":1579247869478},{"_id":"source/_posts/Gitee2Gitea.md","hash":"5574017926300d0b35afd2889273545fd1c692d6","modified":1585030527492},{"_id":"source/_posts/Github-Pages-Gitcafe-Pages绑定自定义域名.md","hash":"5dc136e43c1fc7e289614cca50f13ade3525c7da","modified":1579247754741},{"_id":"source/_posts/Git命令使用指南.md","hash":"5c5a57131054df8133a2d925f0ec3daca33704a6","modified":1579247759340},{"_id":"source/_posts/SpringWebFlux.md","hash":"c42d69fd7bd84048eb216dc8b35a4675633f74bd","modified":1579245306398},{"_id":"source/_posts/UC和QQ浏览器私有META.md","hash":"19e818518dcc6fb8d4ee1bda2dc0e708971cf3cf","modified":1585020538980},{"_id":"source/_posts/WebFlux中mongo操作-Aggregation.md","hash":"2fe749985df9b11cffc0c2a11a149d6395d07aa9","modified":1579248092735},{"_id":"source/_posts/WebFlux中mongo操作-Transaction.md","hash":"01f0cbd2f987e52c66de5ec4eaa5a290168f0412","modified":1579248096430},{"_id":"source/_posts/adoption-cat-Hua-Mulan.md","hash":"45ebe88754f230b29c45b8a3bc5d1394e98ef9e2","modified":1579247890992},{"_id":"source/_posts/android真机调试常用命令.md","hash":"5078cb30b21aec86a000d2ee722be763071273a8","modified":1563256248949},{"_id":"source/_posts/awesome-software.md","hash":"d23d27b59e2a6435ea3a23a07e80abe6eea0ed39","modified":1585818285988},{"_id":"source/_posts/chrome-add-to-homescreen.md","hash":"d7623f8ca78a009781dd0e5a955ff72fd5e6a02d","modified":1579247861851},{"_id":"source/_posts/chrome扩展-插件-应用推荐.md","hash":"5ad65121c2c1bc544beb054cb40713dc9a95da1f","modified":1579247853175},{"_id":"source/_posts/curl常用命令.md","hash":"641cee924cb6cf2ce40da33fa0a5e9b195535db9","modified":1579247848928},{"_id":"source/_posts/django-rest-framework之版本号version.md","hash":"d0d5520a93f1e1d3cb852151f3604bac1cb200ea","modified":1579247823785},{"_id":"source/_posts/django-rest-framework使用问题及解决方法.md","hash":"7bc81354dbe1d8e9adb5a31d6de658ab3255216e","modified":1579247828102},{"_id":"source/_posts/django-rest-framework入门笔记及跳坑记录.md","hash":"1486aeb94560a9314a7f6d656f0ecca80adb6c6e","modified":1579247831568},{"_id":"source/_posts/django-rest-framework接口单元测试.md","hash":"047d947c2803f7524ab6003669c75586cd10b2b9","modified":1579247842316},{"_id":"source/_posts/django-rest-framework里的api请求频率控制.md","hash":"61c92e2d1e1dc02560034414ca593edb32b27b5d","modified":1579247837325},{"_id":"source/_posts/django内置的flatpages应用.md","hash":"061b683eb5522c0a9ebc950b0f13111efa95f038","modified":1579247807960},{"_id":"source/_posts/django字段选项related-name和related-query-name.md","hash":"b176b664284c8fc60534b8895a1fa934fddb369f","modified":1579247801859},{"_id":"source/_posts/duoshuo-comments-ua.md","hash":"da90b6d44602e5013b149bfb1147d0d8ab67163d","modified":1481210984000},{"_id":"source/_posts/git-alias.md","hash":"a4e0172b9aaf9b04fd00c17bab4e3f2777ab0c80","modified":1579247786918},{"_id":"source/_posts/git-patch的简单运用.md","hash":"9fa1ad53c688b16b5734e872c4a952a0817f9d45","modified":1579247779486},{"_id":"source/_posts/git-reset.md","hash":"2543ba593c7c33375e5a4f0a9605e697ed5e8fa8","modified":1579419667687},{"_id":"source/_posts/git-stash的简单运用.md","hash":"cbb3c6e325c9d093e2cca96a6f347fc1b78e21af","modified":1579247766503},{"_id":"source/_posts/git常用命令.md","hash":"acec7dc7f9b61bfc9650a8d51f1b0973590a7803","modified":1579247763339},{"_id":"source/_posts/hello-world.md","hash":"009870b7ef0d285731a9cf7055ae9a9f168ddd3b","modified":1415538100000},{"_id":"source/_posts/js笔记.md","hash":"53612b253a7b55b11bd65e63ccdf787e1b634256","modified":1579247725756},{"_id":"source/_posts/mac远程连接windows.md","hash":"991960d1c914da6bfa431e839e32710faa27590e","modified":1502873923000},{"_id":"source/_posts/material-design资源.md","hash":"8ef4bf47523bcf1fb8e91c65a2688776b635d731","modified":1579247701986},{"_id":"source/_posts/npm入门命令.md","hash":"2cbbb3dbfd906bb30189eb4bf45722c04f1ad151","modified":1579247682950},{"_id":"source/_posts/pip常用命令.md","hash":"90ed9b4a9b77d9489797009925e771008c76f4b8","modified":1579245387113},{"_id":"source/_posts/python中的UUID.md","hash":"4c66f97feb0c66add3898eb560186ff1987f9d5e","modified":1579247667888},{"_id":"source/_posts/ubuntu从14-10升级到15-04.md","hash":"87a55d814e4f1316d4fa7133e089d930b10dc8e7","modified":1579247638888},{"_id":"source/_posts/ubuntu安装JDK8.md","hash":"82b3e79b6aa7ab6386a1ce4fa40b27ac7d2f21db","modified":1579247647657},{"_id":"source/_posts/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.md","hash":"e18c45a74cb3a1a9824390c424f1ebaf4c7a5d90","modified":1579247655070},{"_id":"source/_posts/ubuntu更新NV显卡驱动.md","hash":"22de89da4bbf834d9a8dc94a2bb41fff4e241bc3","modified":1579247609601},{"_id":"source/_posts/ubuntu运行shadowsocks客户端.md","hash":"6ebbe13f7f1778ee9497019931e92772bbf07161","modified":1579247601486},{"_id":"source/_posts/xy-problem.md","hash":"c55a8613bb6d578f9a649611d206c2bc2f747ac9","modified":1442925696000},{"_id":"source/_posts/使用alembic进行数据库版本管理.md","hash":"b30175a899bf3d37e56f5f2c9e50d1e1fa57496e","modified":1583299349004},{"_id":"source/_posts/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.md","hash":"144c14b37faf2ce65ef16cc8e8adbd804002bd1b","modified":1548916061625},{"_id":"source/_posts/使用synergy实现多台电脑共享一套键鼠.md","hash":"8a3e4e6d2f40c254b305144a1617eb1638a3b558","modified":1579248002978},{"_id":"source/_posts/使用virtualenv创建独立的python运行环境.md","hash":"1d2a348e02ab23faf2bde963bce9c242b856b86f","modified":1579247998300},{"_id":"source/_posts/内网穿透工具frp客户端自定义子域名访问配置.md","hash":"7e2a5ff177b0d7e8cd190b8c20ecf7c6d3a5949d","modified":1554780380218},{"_id":"source/_posts/在centos7使用mysql-nginx-gunicorn+supervisor部署django.md","hash":"4c39629c0aab7d8624584f9fef0da9227f1697e4","modified":1579247955669},{"_id":"source/_posts/在macos上更改jenkins默认用户解决权限问题.md","hash":"e499bc6fb8a2538790931b8abbe063084f557dc7","modified":1579247913377},{"_id":"source/_posts/电影《小黄人》中文预告片.md","hash":"0275322b16b97c999fa76facdda08aeb183b0fae","modified":1579248019665},{"_id":"source/about/index.md","hash":"4061bcc469e36b456e3dabe1e19e9742b56bf268","modified":1486205718000},{"_id":"source/categories/index.md","hash":"2035cc420d663db2ed8ca4425b6ff37c88df5597","modified":1445444294000},{"_id":"source/guestbook/index.md","hash":"2245f1676e475139b1ba1dd4dc9d464798b8e4c4","modified":1445444294000},{"_id":"source/history/index.md","hash":"35258ede9ef6f06cc404969b5e0956cc4cd77936","modified":1451121744000},{"_id":"source/instagram/index.md","hash":"ac6bc6d53ca00344bcffe201de2cfd26de2c8d96","modified":1441986780000},{"_id":"source/media/.DS_Store","hash":"d4425aaa2c5733d1f1b8417b9693f444e0279096","modified":1568965571742},{"_id":"source/media/Git工作流图示.jpg","hash":"ff47b8fe4f51e3f8e8786aecaac828a31687cc33","modified":1561714645882},{"_id":"source/media/Synergy-Ubuntu客户端配置首页.png","hash":"6be912785635eab8d50d9c6a8fbf936bb837a2f6","modified":1561714706304},{"_id":"source/media/Synergy-Windows服务端启动.png","hash":"e2e474b0d53b4d3ef9b8fb73b890bf4e222df819","modified":1561714707292},{"_id":"source/media/Synergy-Windows服务端添加客户端-01.png","hash":"06b483ef17ba74aa9fa3b1fcdcf014a1034cd463","modified":1561714708780},{"_id":"source/media/Synergy-Windows服务端添加客户端-02.png","hash":"8d5f9f631dd86d330f7ac29ffba7a068250bb365","modified":1561714708346},{"_id":"source/media/Synergy-Windows服务端添加客户端-03.png","hash":"de178e92103cc351e61b0c6fe51c0947d8931dad","modified":1561714709883},{"_id":"source/media/Synergy-Windows服务端配置首页.png","hash":"32a75306f6b436bb5c21395b3df0f91dfd1b0675","modified":1561714712899},{"_id":"source/media/Synergy-logo.png","hash":"93a0b5041c5d8991e0f8d54eb78e4bc9333ea983","modified":1561714716535},{"_id":"source/media/chrome-add-to-homescreen-01.png","hash":"eda787be416140cc44ce3315e92b8d5a1484e6aa","modified":1561714432714},{"_id":"source/media/django-commands.png","hash":"b5440646c7f0c08d36d9f8ec318a1478b96357c1","modified":1561714415778},{"_id":"source/media/materialdesign-goals-landingimage_large_mdpi.png","hash":"6be66328478c4f7f493851e8111d7fefd632a17e","modified":1561714655665},{"_id":"source/media/ngrok-auth.png","hash":"fa87d4245d014a27ef0a1ab3ea8a596652e40d05","modified":1561714657583},{"_id":"source/media/ngrok-iblogc.png","hash":"8f0b03810f6707c8c52bc328eadb301a832884e0","modified":1561714654616},{"_id":"source/media/ngrok-start-iblogc-django-weixin.png","hash":"76d9a641237ca6be00317d1ccced0d190cebde66","modified":1561714721713},{"_id":"source/media/ngrok-start-iblogc.png","hash":"4193180dd1b54527291695864f99f229bcdb59bf","modified":1561714721697},{"_id":"source/media/nrok-web-interface.png","hash":"30a1c7cac707cc34a7f14073d81ee196806f2e92","modified":1561714720340},{"_id":"source/media/ubuntu-14.10-15.04-01.png","hash":"aae6d385e821ca525d44467e703e006dba8e16fd","modified":1561714711151},{"_id":"source/media/ubuntu-15.04-info.png","hash":"bfac826b50887ba62d060f5916412d16b2cdafca","modified":1561714714297},{"_id":"source/media/ubuntu-15.04-logo.jpg","hash":"c7cd03bf4f445f6d30ce4c4dfc8b75d8f49ac1f7","modified":1561714708458},{"_id":"source/plan/index.md","hash":"29e1502bd5e73f4f5978d8a1c332590cfb700188","modified":1440084534000},{"_id":"source/res/ic_launcher_144.png","hash":"2d6ff7004c2b0a5216aaa4a793c0652f9774c954","modified":1442072976000},{"_id":"source/res/ic_launcher_192.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1442072976000},{"_id":"source/res/ic_launcher_32.png","hash":"82904aaf780efcd29c36e3342b6c5b7dab6d4cd4","modified":1442073308000},{"_id":"source/res/ic_launcher_48.png","hash":"f01f57128c1a4ede6ab10db40b691710ce4ad88c","modified":1442072976000},{"_id":"source/res/ic_launcher_72.png","hash":"09b49bb09e024f154c285f2bd1cf128ed61846c7","modified":1442072976000},{"_id":"source/res/ic_launcher_96.png","hash":"88f3d836089f20390c874ce1ed80279d9ab4b045","modified":1442072976000},{"_id":"source/res/微依LOGO.JPG","hash":"870b497e38687960db98cc169db502324255269e","modified":1412860078000},{"_id":"source/tags/index.md","hash":"abbf020ebc57365b801dd23a2c32b857064f652b","modified":1445444294000},{"_id":"source/thanks/index.md","hash":"76733c5fd0b63f625b71c8eceecc461db1bfefca","modified":1486571227000},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"6070278c2e3b31bc1e40c485f66da5336bd2cbb0","modified":1570870072334},{"_id":"themes/next/.git/FETCH_HEAD","hash":"9d78179723465a03cf460f21bbf8077279ea1e8d","modified":1585940434933},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527752362653},{"_id":"themes/next/.git/ORIG_HEAD","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1575025513152},{"_id":"themes/next/.git/config","hash":"48d964952b48d65144611a7364293f938110d180","modified":1570870146860},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527752340644},{"_id":"themes/next/.git/index","hash":"73ee2a66e821fd722cc48c284f7b265b2d68ce6d","modified":1575025514401},{"_id":"themes/next/.git/packed-refs","hash":"e277289607b97219cf350f6a9de7e6cbb9c9e510","modified":1527752362650},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1575025513002},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"fb80bb52a76dc9100d9524456f73c7a263c85437","modified":1575025513003},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"88780daa3db837a34fe3ed90cc61cc578b5760ed","modified":1575025513006},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1568699013424},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1568699013424},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1568699013424},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1568699013424},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1575025513006},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1568699013425},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1575025513007},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1575025513007},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1568699013426},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1527752362677},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1575025513010},{"_id":"themes/next/docs/AUTHORS.md","hash":"44c3b963d877c6cbc3a720ed4e266532db3c12ac","modified":1575025513010},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1575025513011},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1575025513011},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1575025513011},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1568699013696},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1575025513012},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1575025513012},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1575025513018},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1575025513019},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1575025513019},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1575025513019},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1575025513019},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1575025513020},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1575025513020},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1575025513021},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1575025513021},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1575025513022},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1575025513023},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1575025513024},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1575025513025},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1575025513026},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1575025513026},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1575025513029},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1575025513030},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1575025513030},{"_id":"themes/next/languages/zh-CN.yml","hash":"7c2273ccec71ff45bd9d77aa339433b139f1f574","modified":1575025513030},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1575025513032},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1575025513032},{"_id":"themes/next/layout/.DS_Store","hash":"fc72a4b88001021b879f62342e237710c02d7e18","modified":1568718349333},{"_id":"themes/next/layout/_layout.swig","hash":"86b8ebdb69d23e50004392706461ee48836d8629","modified":1585940478172},{"_id":"themes/next/layout/archive.swig","hash":"72b4e0786668bc61c11eafa12da5d75272b93b61","modified":1575025513077},{"_id":"themes/next/layout/category.swig","hash":"38433a9de15f019267c9130e243e14343fb9bc3d","modified":1575025513077},{"_id":"themes/next/layout/index.swig","hash":"531dfd069a5497c37817360097e1cb0d8ba515f4","modified":1575025513077},{"_id":"themes/next/layout/page.swig","hash":"f038deec70adfecb0a87256ba8c319d4781925a5","modified":1575025513081},{"_id":"themes/next/layout/post.swig","hash":"0c3b34a6832b8e33574edc17095344f9e0bea74f","modified":1575025513082},{"_id":"themes/next/layout/tag.swig","hash":"153fb65e710a9643634aea4813431e92c11d09fe","modified":1575025513082},{"_id":"source/_posts/django1-9文档阅读笔记.md","hash":"fae40e5862a68d36994ef0e2ff151ce557efb63b","modified":1579247815500},{"_id":"source/media/chrome-add-to-homescreen-02.png","hash":"cedf1fd253b592f7587e1d4a5bbeece98603c45d","modified":1561714433822},{"_id":"source/media/chrome-add-to-homescreen-04.png","hash":"9a087913f791b6d68db35c5515cbc1ff9d085cb4","modified":1568772703449},{"_id":"source/media/git-reset_drbfhd.png","hash":"eedef60b857f50b5f96044a833e59b0f0c9a2480","modified":1568772706497},{"_id":"source/media/花木兰/.DS_Store","hash":"117379538af2d644592ea60bb15f46faabedc94b","modified":1568976727935},{"_id":"source/media/花木兰/1.jpg","hash":"ef361dbf85290e019e14d8f2288a419b73c69a83","modified":1568732649000},{"_id":"source/media/花木兰/10.jpg","hash":"76e51f260de7d0c9c086b55501a2db063551250f","modified":1568732597000},{"_id":"source/media/花木兰/15.jpg","hash":"bab4a1a38176708e256460ae5f1d3ba89e055219","modified":1568732650000},{"_id":"source/media/花木兰/2.jpg","hash":"4993fb89246274e1069405492c9b03c0eaa7ba4b","modified":1568732622000},{"_id":"source/media/花木兰/5.jpg","hash":"a43adae2646d182e809721e1b5f82219c352d344","modified":1568732644000},{"_id":"source/media/花木兰/7.jpg","hash":"b2ed67a3f11b2c5eb8f59cec94a45048db67b277","modified":1568732649000},{"_id":"source/media/花木兰/8.jpg","hash":"caea2805302864c8164c0c740526eb4536f0969b","modified":1568732597000},{"_id":"source/media/花木兰/9.jpg","hash":"9521454ddaaff69aad26a76280c2f04ea5d8e35b","modified":1568732597000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527752340646},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527752340644},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527752340646},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527752340648},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527752340648},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527752340646},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527752340649},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527752340645},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527752340647},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527752340648},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527752340649},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527752340643},{"_id":"themes/next/.git/logs/HEAD","hash":"97dc5f1f124fe8bf78c801ca4314fa8ae178c915","modified":1575025513155},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"2bb989a73168ff9e67722814fb30590cde36548f","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"17f900aa124af0c9317d0b26429e14af43482b64","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"f1bd86cc5a310997e9f18abc115eaf62dd1c8095","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"6fda3f0e0b9968562d6bd81d8d87e9a7b5c24b36","modified":1575025513005},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1575025513013},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1575025513013},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1575025513014},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1575025513014},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1575025513015},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1575025513015},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ca39e510b43ea1efe7e5feeca2243375e55eff5c","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1575025513017},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1575025513017},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1575025513017},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1575025513018},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1bb927e0560d3d3c95369da461911cced5bd537b","modified":1575025513033},{"_id":"themes/next/layout/_macro/post.swig","hash":"20ef46756b2a8026cc85e7830e5414fe749d1391","modified":1575025513034},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e92b9b2518c2ff0bd767a375fe33a65643ec8537","modified":1575025513035},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1575025513038},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9d9a5d6a2f0d4f65fe57c3737c91ecaf276c1f5c","modified":1575025513040},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1575025513051},{"_id":"themes/next/layout/_partials/post-edit 2.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1568699013000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1575025513051},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1575025513056},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1568699013456},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1575025513057},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1575025513058},{"_id":"themes/next/layout/_scripts/three.swig","hash":"eee4d26b5c0bb7872a21346151c38612a9b76d0b","modified":1575025513065},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"d3448044776dd23abd42b09ef0f26827f95efdf5","modified":1575025513066},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1568699013460},{"_id":"themes/next/layout/_third-party/facebook-sdk 2.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1568699013000},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1575025513070},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1575025513070},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1568699013466},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"65f94b115c42d33e6a90b1f8e62075c6d4ac60c1","modified":1575025513071},{"_id":"themes/next/layout/_third-party/vkontakte-api 2.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1568699013000},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1575025513076},{"_id":"themes/next/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1575025513083},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1575025513092},{"_id":"themes/next/scripts/filters/excerpt 2.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1568699013000},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1575025513092},{"_id":"themes/next/scripts/filters/exturl 2.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1568699013000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1575025513093},{"_id":"themes/next/scripts/filters/lazyload 2.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1568699013000},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"8b5951c5b1d80aaff6213a220ef0d43ad5261458","modified":1579248049613},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1568699013474},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1575025513094},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1575025513095},{"_id":"themes/next/scripts/helpers/next-inject 2.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1568699013000},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1575025513098},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1575025513099},{"_id":"themes/next/scripts/helpers/next-js 2.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1568699013000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1575025513099},{"_id":"themes/next/scripts/helpers/next-vendors 2.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1568699013000},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1568699013476},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1568699013476},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1575025513099},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1568699013476},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1575025513101},{"_id":"themes/next/scripts/tags/include-raw 2.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1568699013000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1575025513104},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1568699013478},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1568699013479},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1568699013479},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1568699013479},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1568699013480},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1568699013479},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1568699013616},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527752362850},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527752362850},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568699013617},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527752362851},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527752362851},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527752362852},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527752362852},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527752362852},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527752362853},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527752362853},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527752362853},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527752362854},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527752362855},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527752362856},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527752362856},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1568699013617},{"_id":"themes/next/source/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1575025513147},{"_id":"themes/next/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1575025513147},{"_id":"themes/next/source/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1575025513148},{"_id":"themes/next/source/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1575025513148},{"_id":"themes/next/source/js/utils.js","hash":"6aa2f859eee9791a2a41d3cf58403dd19714fbfb","modified":1575025513149},{"_id":"themes/next/source/lib/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527768460327},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1568699013621},{"_id":"source/media/花木兰/13.jpg","hash":"5508a140aa87367e33490ac596ac93cba3e7a6d9","modified":1568732622000},{"_id":"source/media/花木兰/4.jpg","hash":"d63c2a35981e67a91aac052f490fca5202f36d55","modified":1568732597000},{"_id":"source/media/花木兰/6.jpg","hash":"1f44e894a046df81bb1b7405b28b6ccb8f03779d","modified":1568732622000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527752362835},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527752362835},{"_id":"source/media/花木兰/14.jpg","hash":"9e043c958be8797c8196ba9b4992ad6002ed3a7f","modified":1568732597000},{"_id":"source/media/花木兰/3.jpg","hash":"bc11442dd01b439c8dbe9589887fdeafa0a79483","modified":1568732598000},{"_id":"themes/next/.git/refs/heads/coding","hash":"2e600ec033244e3a6c20404d85d009a9577b12a8","modified":1568697931042},{"_id":"themes/next/.git/refs/heads/master","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1570870072336},{"_id":"themes/next/.git/refs/heads/origin","hash":"2e600ec033244e3a6c20404d85d009a9577b12a8","modified":1568697906484},{"_id":"themes/next/.git/refs/tags/v6.4.0","hash":"48dd2138567e9dd832f6adcbdf2e1945f999a59a","modified":1548916311453},{"_id":"themes/next/.git/refs/tags/v6.4.1","hash":"ac845fb35dc632c804d5d2eebcd731ad4d4ddfac","modified":1548916311454},{"_id":"themes/next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1548916311456},{"_id":"themes/next/.git/refs/tags/v6.5.0","hash":"b6c2091da7683b424070a8dd6d7e377dec7c8ea0","modified":1548916311455},{"_id":"themes/next/.git/refs/tags/v6.7.0","hash":"b857a6c4428702973dc7b67a5c2a1e248653b49c","modified":1548916311457},{"_id":"themes/next/.git/refs/tags/v6.4.2","hash":"106bd960739a3bbb6142bd76625fcba8991d7abd","modified":1548916311455},{"_id":"themes/next/.git/refs/tags/v7.0.0","hash":"2d4536d7701746b3624fa92eeddeb943c32094d8","modified":1551440729477},{"_id":"themes/next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1551440729428},{"_id":"themes/next/.git/refs/tags/v7.1.0","hash":"d4eb8a8fc73617512e52707a8696a911b067f12f","modified":1561715404557},{"_id":"themes/next/.git/refs/tags/v7.1.1","hash":"9a421ea6943f449d6efad94759fbf056fb880391","modified":1561715404559},{"_id":"themes/next/.git/refs/tags/v7.1.2","hash":"5da254a35926656e17cb71d94eaee61c2610ed37","modified":1561715404560},{"_id":"themes/next/.git/refs/tags/v7.2.0","hash":"2a50b758ec214ed4b5a33e8d12624f75ab9e5fac","modified":1563240952433},{"_id":"themes/next/.git/refs/tags/v7.3.0","hash":"b5e6ac477dd2020ebef248726ece844afb8d2624","modified":1568697628072},{"_id":"themes/next/.git/refs/tags/v7.4.0","hash":"1f4233a1de644e88922e010592393339ab082fd9","modified":1568697628073},{"_id":"themes/next/.git/refs/tags/v7.4.1","hash":"dfca465bfc3833228507b73b8fff5568a51c5016","modified":1570869290079},{"_id":"themes/next/.git/objects/00/6a4b0f7c94ad38e67af78c5492d810e8027bd3","hash":"bc7ba60567086c3bcf7ca7362057e54fbab6f99a","modified":1568881985892},{"_id":"themes/next/.git/objects/00/82a46d49f27d50e803d7c7b841f17b6d118059","hash":"7e70498b56004948222904c429a656098d0fa923","modified":1568877235787},{"_id":"themes/next/.git/objects/00/848791fdd0ec3518720fed4b10bf754ebbb1c1","hash":"ee580017278563bc746f75b168708403c0aa49e4","modified":1563764364458},{"_id":"themes/next/.git/objects/01/34bf2741e2df87b0250fb040b0eaf434db37a3","hash":"9496573ae950c8c22a17546b317a919933b0ec22","modified":1563764364860},{"_id":"themes/next/.git/objects/02/3eb642398336a0560eda940b84b3c7f54d8c04","hash":"f779a21049de20c4777cf32af34829f1e26777da","modified":1563764364452},{"_id":"themes/next/.git/objects/05/c2309c6f3c9801f19da5bef36dbb90dd7593a3","hash":"80db52bbe8af01a6e13ceb3b9216a1f40b5317c7","modified":1568697710071},{"_id":"themes/next/.git/objects/06/3ac6cbacb5ca8974e20ffec8303cce91965d5c","hash":"87d78b081622184c605cb1d19c2c0f9fc6c85196","modified":1563416717989},{"_id":"themes/next/.git/objects/06/de0bdd625a6592fd4902d56fcad2f589216fc3","hash":"e47a6dbf7a561549316bfcad75ff94c6e08cf58c","modified":1568877235806},{"_id":"themes/next/.git/objects/08/4d87ae7a5176402e6e184386a56483132898c2","hash":"fb638e989a8db62c305ee1b3478d02b766ca9d31","modified":1564113948829},{"_id":"themes/next/.git/objects/09/818fe6e682f2f526b4594eb88e6e7d1d26733d","hash":"fc05f50746293d2b313a6603334a3e3acb5a167f","modified":1568707757352},{"_id":"themes/next/.git/objects/0a/722ded5d9658467bf888146321873bbd03e77a","hash":"3c5d03744b8fe54ae34a2c289fe8cf2c9c2e8072","modified":1568877235795},{"_id":"themes/next/.git/objects/0a/7454610904c600bb62aeb7afca6b105849f52e","hash":"4263cbc3a872c1c7fcc8366f8fcfaf262dbef070","modified":1568979149799},{"_id":"themes/next/.git/objects/0a/d9c1140090071e5556e16ab405b171092fbcca","hash":"136497ba2a36a98b889bd1b15882535be6ec9eed","modified":1575024955984},{"_id":"themes/next/.git/objects/0b/8b297b324bd9f40bded5f15c8a90e5de1ca503","hash":"2640ecd520e9ff97a3fc096e824a3b15256f9d9a","modified":1563764368381},{"_id":"themes/next/.git/objects/0b/a6216e1f6b0139945bef07c76b21d7462d4b8f","hash":"c3b0f6d96ad59399347d4464ea56f0f7b8568230","modified":1563416717978},{"_id":"themes/next/.git/objects/0b/f71a91886a379a05f210898c8c3069f293a22a","hash":"81546589f64e464b1b785e478899c7bf5932bd40","modified":1568877235789},{"_id":"themes/next/.git/objects/0c/3c619f3db528f9d798e7120da8e09a0e788e0f","hash":"792e89c7574b32d3b7a8f65e172229b8e13afd20","modified":1575024956016},{"_id":"themes/next/.git/objects/0c/89ae8d819c689a02138655f577550c23b3adb5","hash":"eb2cda273449907899706f4eeb51ada48c06f8d6","modified":1563764364850},{"_id":"themes/next/.git/objects/0d/4ed91c7d0ab85cdc739ed5b3a1acfa977466d9","hash":"0cb6bc4868e874f11478d6f23918b4e340912f2b","modified":1564113948818},{"_id":"themes/next/.git/objects/0d/c7500763dc66a2f0cd4c605b2034fc5215dbef","hash":"67a72c2e0bf5a4cb579a31e5e5a1990d517fa7e2","modified":1568877235802},{"_id":"themes/next/.git/objects/0e/5bb4b42c606dfada4d1e2ffe18eb64464db5e9","hash":"2bf11b88147bab896257c0928152e55344bdda38","modified":1568770502674},{"_id":"themes/next/.git/objects/0e/c4aef32d5082f8b82974aeadda976930284b1e","hash":"0edff2c5fe01b73daf4b9711e969619b8874bf4f","modified":1568979149798},{"_id":"themes/next/.git/objects/0e/d7b2aa90ba3c50afdb46ad29da2fedf76e54f2","hash":"24172d3bb958142cbf5d1522d335f07400b020e6","modified":1568700998276},{"_id":"themes/next/.git/objects/0f/19281440713376daa8dc321c633fa3bf99b229","hash":"958f234f09b2a422dde06a0d791038d3afaa8997","modified":1563764364844},{"_id":"themes/next/.git/objects/0f/5e875a36ca406aff87ad0571281d5fec905329","hash":"4e17c72eaa41b7ff6d3c2a8663b1f305799193d5","modified":1563793628469},{"_id":"themes/next/.git/objects/0f/9daedd9da865da9aac8eb7c5a0ca13cae3fd5e","hash":"2344809f6b9971e32f976a3fe64a8538c715ac4d","modified":1564113948824},{"_id":"themes/next/.git/objects/10/012b572d2ac73c76e767b857ff314024a35642","hash":"ff023c299dee1a3154fecdd20636cc06b4e79135","modified":1563764368380},{"_id":"themes/next/.git/objects/10/332b548976e48696e7edf9e71a7a5cb39d9fd6","hash":"4fdfc883ce47bf04b56235358ad8451ac1630dcb","modified":1568958704214},{"_id":"themes/next/.git/objects/10/5e842e63704a0e9ca082132dbdd84ceeaaaf72","hash":"42ded98a6b6c55b220acdf8a38e9026547e7a7bb","modified":1563764364434},{"_id":"themes/next/.git/objects/10/ecc09f36beefaa7218f3f75e5cfe68fcc86234","hash":"e067755b827ae1a646a84aee06f6ce18e919e5ef","modified":1563764364387},{"_id":"themes/next/.git/objects/11/0d47d1f6152558c1bfbc8e708f81c59311f1a2","hash":"401b9be2493016826885f26049c2985a26df5e46","modified":1563764368408},{"_id":"themes/next/.git/objects/11/b621e8aced5893b88ffda3e42870f22fa90a7e","hash":"c091b0b203c83759829e08928dca34c0ac3fb51e","modified":1568707757358},{"_id":"themes/next/.git/objects/12/00d8c553d97c02ef11e6efbfe6eeb5c8489ba8","hash":"deb94c01be176abd96a40aa50b2d144014cd996c","modified":1575024975419},{"_id":"themes/next/.git/objects/12/e3cfeb152379dbe5426449c16663b7e0730987","hash":"780c68620cbfa8088bce78ffcf7c0d10f20a5787","modified":1568877235795},{"_id":"themes/next/.git/objects/12/449bb68ce675d21a30bd9497794a986aa57a27","hash":"ebef6d8c6e7db602c82cda9fefb17de963e1bd8d","modified":1564113948828},{"_id":"themes/next/.git/objects/13/bd92d1c9a55aad1cc0ccf5fd9dbf73c35b12a3","hash":"503e2811c7da5a3713d23a2b5c5e986c8aa7b592","modified":1575026261742},{"_id":"themes/next/.git/objects/14/138be441636b7fd37c057df6c7f67684dae02e","hash":"c73e176153c2e2cdc87820240aba9ce99c4876d9","modified":1563764364405},{"_id":"themes/next/.git/objects/14/c00cf75d65004c96c263eaad603f587da01897","hash":"6cade938fbd606cd910a2466fc2426556c7ab539","modified":1575024975386},{"_id":"themes/next/.git/objects/15/d5474e6363c6f3002896772dc5e8d8034679ad","hash":"8efb1016de85e3c8891c6de26a2bd4502a3e1975","modified":1563764364469},{"_id":"themes/next/.git/objects/17/ab6bb3d5502a65f136a9dd70abda307fbafc6a","hash":"4ffe701e661e66d68de0006ddc3535ca0b1b2aa5","modified":1568697710066},{"_id":"themes/next/.git/objects/18/3e5b1bae84f6d07c6071270c1c46da16fd9082","hash":"d166cf0960a1b19a92c521b27e2da71606f1db23","modified":1563416717954},{"_id":"themes/next/.git/objects/18/5371957b2fc699a3e5b4dfed3580bdc77d993c","hash":"7c1f2d174a2dab7aa957e584ebaebde3503b14c7","modified":1563764368379},{"_id":"themes/next/.git/objects/18/78f9250a9d063ad45f366056e9453687295a4e","hash":"3cbeb5382b8526ab08ea3e49b0ab93f60b2f36a0","modified":1568697710068},{"_id":"themes/next/.git/objects/19/4144d19b3f3bef501a80454807112186e38ddc","hash":"fc260336b1297b9c3e9dcd77a6ed308685f5f761","modified":1564113948868},{"_id":"themes/next/.git/objects/19/ad4ee0719f9bacbb01a9d8f5a6d35a2314cbee","hash":"9334aa9d1bfa8486303cfca0f375b59a40dcc105","modified":1563764364930},{"_id":"themes/next/.git/objects/1a/12d82efe284056630638a8f58fdbc5a918d451","hash":"f93121fd5affb075e6868fd944f7934a21547b33","modified":1564113948832},{"_id":"themes/next/.git/objects/1a/b2553f729cef80f280a4d9282a6c10817619bd","hash":"a840175b6dc36917d05c197fd68bb30332bfb6e8","modified":1568958704200},{"_id":"themes/next/.git/objects/1a/f7d05a375dba8ff035ee97f8027cf3a8c5120a","hash":"050ed5ec5bfeb9cc56d63561398739dbc4c50979","modified":1568958704213},{"_id":"themes/next/.git/objects/1b/6bf0d0059993db80a9506650bd2207dc2ea80e","hash":"2bf6dea8d42636853b1de6e033f38dbdaa1b6175","modified":1568958704218},{"_id":"themes/next/.git/objects/1c/5a282573676436b6b0615d5ed51ea0027dcece","hash":"f6bf5d98f71290fa673a1309490fe4bd6cc1d70e","modified":1568877235774},{"_id":"themes/next/.git/objects/1d/1b32f4bf83b41c59dab6a0542f54258aeba359","hash":"5b77800792671d9f9b720303d4847608186d46d3","modified":1564113948867},{"_id":"themes/next/.git/objects/1e/188cc209ad8dbbb70e3315fdac0d9b6b3e58af","hash":"a45fe20a84701aecd3d4fca2df2f883c6fee9525","modified":1568958704219},{"_id":"themes/next/.git/objects/1e/a61e7639b56918c6b35fbdeb4db6448b406f39","hash":"820d71718176fc59f5a29dd55330f1482eec1958","modified":1564113948821},{"_id":"themes/next/.git/objects/1f/96bb0a35d7b794595b476e24cc3b8d8a0d759c","hash":"7ce1ab1a12f7db1d9940db31334d61e0fe7c2ee0","modified":1575026262203},{"_id":"themes/next/.git/objects/20/55c89f63748acf486a115c1d6ec013cc392db1","hash":"2a118640b6c0f6c5bd2e312fd8ce6a018b7b1f3a","modified":1563776837396},{"_id":"themes/next/.git/objects/20/bd28601d6962125b74e580c84d2f15471aec0a","hash":"f036e8562f57eece13712654ad03c6d8372225bb","modified":1568877235772},{"_id":"themes/next/.git/objects/22/d89a53811dc498622bb3dd0088d6f808cbfbcc","hash":"4bfbf526e3b4decb199c7f89b436f11cb7a85af2","modified":1575024975384},{"_id":"themes/next/.git/objects/22/e22b93409c7668dec12eb7890c41508ae2372a","hash":"76011328bca245edd6e20c031880c1038e19b8c0","modified":1563764364402},{"_id":"themes/next/.git/objects/23/00f450297c7b9109914f032e866b873888f219","hash":"750a4630d09268032c68a9b18ed940b93bdf1d93","modified":1563764364866},{"_id":"themes/next/.git/objects/23/01ed790b1a8705dbdfcfb499640e61aa5dc401","hash":"7d5c5d82136c63b4c4a7684bac8fb2ff67e08635","modified":1563764368401},{"_id":"themes/next/.git/objects/24/3f71f6e8ebea649cdb703205d4196cfce1b1a1","hash":"7e60524a1d6a2ffd48464605475218b67fc3be35","modified":1564113948875},{"_id":"themes/next/.git/objects/24/7be490fd36146d87bb5bb0d638ee8fbd3b947e","hash":"2866625659cf05716fe4540c5c99f4420f27169a","modified":1570870072328},{"_id":"themes/next/.git/objects/24/b0df9bc5e425658b51501cbbd8715719e14906","hash":"176e54baa55e39369188ba94fe6c86bcd3217a6e","modified":1563776837391},{"_id":"themes/next/.git/objects/24/e2b6e2283568b15561982fee60e7716535a3fd","hash":"70185b0ca23cc3d1e2e9ff0fef926ebc7993ac54","modified":1568770502669},{"_id":"themes/next/.git/objects/25/c4ccc91abef8228fe721b146565a58409c718b","hash":"c444fe79c651c4c35047ad541f85bd2dc306b735","modified":1575026262190},{"_id":"themes/next/.git/objects/26/37c53ab3ea8104a3ab5b2b8921b55eba2f42a8","hash":"87d50cd9f4010df4e9fb86f544e589d2bef8a83d","modified":1568877235773},{"_id":"themes/next/.git/objects/26/ec9a3e341f8d9e76a454ade0eada5634b71ae0","hash":"8a2dea4c84ee7b69d33f7e9cb51cd6eef5f9b468","modified":1570870072331},{"_id":"themes/next/.git/objects/27/5369bab73f1b44e386ae054d04bc9ce3a2dd03","hash":"807022ce5cbf26faf91ddccbad821ffcf62adf0c","modified":1563776837392},{"_id":"themes/next/.git/objects/27/60bb8529880bb7179588418812d084991b2104","hash":"2fc41c4a12cee32e8bd7e79a05e9aff8cfe215f2","modified":1563764364444},{"_id":"themes/next/.git/objects/27/b4fddfd68843ac875ff246f625714f7ae481c6","hash":"7d28f05d0a50cb8b8a5e442bdaf66e034433461c","modified":1568979149805},{"_id":"themes/next/.git/objects/2b/3f69c5140737d0e283b5a2c4179f59e4680ae5","hash":"ded5cd2065be0e888dacf222944551bd1b5bb363","modified":1564113948830},{"_id":"themes/next/.git/objects/2d/25626f733f70beaf5e577b91c32862c58a94ab","hash":"4baa0c9cda7fef8b02ea23bbca5b945f02c72e24","modified":1563764364424},{"_id":"themes/next/.git/objects/2b/ec5f7529eab4480ad19066d2bf4ff59186c382","hash":"1bfff9b032c8cb2fd3a64d06e2a4b5a49dc849e3","modified":1568770502671},{"_id":"themes/next/.git/objects/2d/34d302f740218f293419233422933fbeeb24a8","hash":"81d8efa4e012ba26359ebac071efaff9a1b9a6a5","modified":1575026262206},{"_id":"themes/next/.git/objects/2d/72fa055daf57e09421f77fe181f217eeebc12c","hash":"741b9d8a13d25f7ef65806c7ecbcc9b516cb7802","modified":1568697710065},{"_id":"themes/next/.git/objects/2d/7c46efb4a40c1979de04a0c1a074c328428980","hash":"de1423acbe944274fd5bdf88902a219ffd563eb3","modified":1564113948822},{"_id":"themes/next/.git/objects/2d/bb794cb415a2038fa98ae60cb057090acc802f","hash":"ad9eb23775e5b6002e2fb576a80f6592cfcab09a","modified":1575024975420},{"_id":"themes/next/.git/objects/2e/ec252d1649526fb651244eaf04af961432ee62","hash":"ab91f6bd32f4c8f65bb770d1a2d55fb3efcdccd5","modified":1563764368387},{"_id":"themes/next/.git/objects/30/7f060cc0ecf2d14a59386568aa2b0d5aa5a1ad","hash":"902ae80c79f57db2e7ebc6b6d76d95d0d0e9c02b","modified":1563764368391},{"_id":"themes/next/.git/objects/30/e85560c69c58c514b8db0a201a80f322ba9083","hash":"0dc8ffebfd800c2251c0c63020df2fde47c40584","modified":1568877235789},{"_id":"themes/next/.git/objects/31/d5f0ffdcd0d3a016e9cd1342ef13a435a01a9b","hash":"66d216b8d0c8e050e185fe9edb42f38b28f8471f","modified":1563764368393},{"_id":"themes/next/.git/objects/31/e2c9bf385a4687604d7a7f47f007fb1d3537b9","hash":"2415d1d9ce9bb1b47237c84cad5f7543b30be9e0","modified":1568877235801},{"_id":"themes/next/.git/objects/31/f3fcc880b86b7bf33ee59abc98dbcffe92eca0","hash":"2354238f5bfc0f07d141a55423814e11cf59428c","modified":1568877235803},{"_id":"themes/next/.git/objects/31/fa32e1e96f03c5a140385cc13293a0c54fcf7d","hash":"82341932dcecefd84964841a3120609cbd6ed529","modified":1568958704207},{"_id":"themes/next/.git/objects/32/b5521f30e7a7173cd615b412d96190f85cbad4","hash":"3c9de5aab4de409a23c1d929720f85cc4d124bf5","modified":1568877235797},{"_id":"themes/next/.git/objects/36/228d8af238cdf3875e8e728953d18d67c375fe","hash":"2fb5f734bc69599c3c393a78d388e2014ee7e33c","modified":1568877235787},{"_id":"themes/next/.git/objects/33/2efd42e60ea2f2e1906230b4c9bb957afaf425","hash":"86481246914055e7e97f9275d205211d5810aecf","modified":1564113948825},{"_id":"themes/next/.git/objects/35/af4b88a23d5b5cd53505410ced9968925d96aa","hash":"360f79bba3ea0a44f89b56785a9e53e9dc842700","modified":1563764368389},{"_id":"themes/next/.git/objects/36/654d5872435fe113c12d864c1ba7240683d4a4","hash":"3ca02bddf69a02d666b0269df13ee709b79ea0ce","modified":1568877235791},{"_id":"themes/next/.git/objects/36/bb47be4618724d365dfcb4dbd5b0adc2780040","hash":"fd1db3c868542169be563a9ee1765e501a112f36","modified":1564113948819},{"_id":"themes/next/.git/objects/34/70c90833de68e1b1d084eb60cbdf7281316511","hash":"8cb1b03e5eec19c74c9c7aa63bc5b35058a78b8d","modified":1575024975418},{"_id":"themes/next/.git/objects/37/c7e1567a1bf6d0817588005bcfc071e06914b8","hash":"5671e14e997897c58e4c97083f8c309ae0534890","modified":1575024975428},{"_id":"themes/next/.git/objects/3b/ea3d6e8097cc72e329d28ffb795e74816823e3","hash":"30a492d68af502f7dcf4dbcfa1c2ac4a53c16a85","modified":1563776837397},{"_id":"themes/next/.git/objects/3f/7d8a51268d92a47e5ed0bd25e6dbf5dcf5b307","hash":"762cd511fec9e36214833effa0b772f151a3270b","modified":1575026262185},{"_id":"themes/next/.git/objects/3c/408f8c563a00668c15b1d53b3290b9136bb615","hash":"54449f3eb70913f18873933e5463816a7eab280c","modified":1564113948816},{"_id":"themes/next/.git/objects/3f/c187cd05cc61d8ea7a58c563a4b7c909a15cec","hash":"f96896bd7da51e1c1b4152202d18baefd565853d","modified":1564113948826},{"_id":"themes/next/.git/objects/40/f9584bf4f39d050ddaa9f26002d075ebedfd45","hash":"1f05903c8ab6797c2cc09155d4109fc6e7f24bc3","modified":1563416717987},{"_id":"themes/next/.git/objects/40/9620b2d4019d84188bf637b9182bf6281f5dd0","hash":"93881b99b5aa6284f129152b770f81e67439fb6c","modified":1570870072335},{"_id":"themes/next/.git/objects/40/a86c679a80d47da2e019c17006c46a4e19fed3","hash":"a85a52e79927ab8c7ac94f4db196de8e05cc4146","modified":1575024975577},{"_id":"themes/next/.git/objects/41/3ba52e6bd00b5bcb85fc4cb0eb84c61f4a8f12","hash":"d2feabd20cb3ec8d4850c4c831b2510b84a5843f","modified":1575024975129},{"_id":"themes/next/.git/objects/41/4b14d0f615271dc19becc94b084f8cf31a46f9","hash":"4da6069139a420af65aaf80ecf84c5576cb66968","modified":1575024975579},{"_id":"themes/next/.git/objects/41/f0d1cfaedbcc7a12d3243550f732ca8409a36f","hash":"ecc153e7f52e679684cfd53b097e6c793e774ffc","modified":1563764368406},{"_id":"themes/next/.git/objects/41/de77cdff0e169a58120c603254b5d06f0ae1d2","hash":"767f7e3603986d620c445afb52d6d8265042f911","modified":1563764364856},{"_id":"themes/next/.git/objects/42/4d9aa40c81ed4234246d3282debe2780768abf","hash":"817cb71d14176d5cdc35fb5d439305b7afe9dcf0","modified":1563764364414},{"_id":"themes/next/.git/objects/43/8c98e22d58a0d1e1f281c860986788c193b60a","hash":"b1df33f4eafe18bbe5d52608bf2b0880faeb22a3","modified":1575024975618},{"_id":"themes/next/.git/objects/44/1ccba4ea697ee39fe58dacfca1e453eb9b1748","hash":"8267f57476d7dc8290f09d6eff62ad5b2f49229e","modified":1563764368399},{"_id":"themes/next/.git/objects/44/593a6c4456110b160e830fcada526ac3fbe149","hash":"2d37ff8c7bd48d225d5d96e6259a1e94b5fbbdde","modified":1575024975571},{"_id":"themes/next/.git/objects/45/e4db431dad5aa8ab2fec57e72b4cf2b32e7437","hash":"40a1ac2cf6d73a7160ea88486efb2d6aa96bfe10","modified":1563776837390},{"_id":"themes/next/.git/objects/46/52e41ddcd9a7b2ac891cf7cee6b10efaaac0bd","hash":"babc10380024c4fe51aa2100fc334504242bb442","modified":1568979149806},{"_id":"themes/next/.git/objects/46/dccb317d34c65ec0e38602dd3f8759c993d7cd","hash":"3d592d6af59bf0120cc41ae1d38993868b6e58c0","modified":1575024975421},{"_id":"themes/next/.git/objects/48/218e31d6bf8e4a2d4897ed61f2e8fcb374e0f2","hash":"6f0073e044441215233678207cc0411700224d44","modified":1568877235801},{"_id":"themes/next/.git/objects/49/02e5033551d32e0a260942fd755a3c85c03256","hash":"ced6cd2aa88bf5680f940c931393eb06cc818476","modified":1564113948817},{"_id":"themes/next/.git/objects/47/f3432cb07b113fd4b6033e69a94e023e6c960d","hash":"98a8d99bf86df12f4e69f8ce6b42755e5f97e57c","modified":1563764364431},{"_id":"themes/next/.git/objects/49/6787205225cf9b746d37e27c5b8c9747e63a13","hash":"b01f160c9192ac1c265e7dce6e5982b78de1e393","modified":1575024975409},{"_id":"themes/next/.git/objects/48/bda0db0a95d10bb1cad3d8eb520b3402789380","hash":"d660a83d0ea34c2e4c7b58d8b36121880b1fc608","modified":1568881985889},{"_id":"themes/next/.git/objects/4a/6bfbd4495f8222b3c41303ae8ae2fcb0069db0","hash":"858d7204aa88c9bdccca9c24ad915d40befc1bdb","modified":1575024975408},{"_id":"themes/next/.git/objects/4b/67377f48acce92312f9c04b850aa4e5b5140a4","hash":"da9a9e3aef03d6f08a189d617279285ffdca8dcd","modified":1575024975409},{"_id":"themes/next/.git/objects/4b/9309704148d69822e001cb60d7da97432db603","hash":"eb28ee55d54f4f07fff7b8b1b6911bedf02fe8b6","modified":1575026262205},{"_id":"themes/next/.git/objects/4b/b0f077223710dad6016f6609bba17843e67d96","hash":"d62ad9959f4dfd943806cf03a87ef64dfb7543e7","modified":1568700786141},{"_id":"themes/next/.git/objects/4b/f2b124f4d22a672a95e15aa13b9653b1172552","hash":"2e9ecdfcaaae48e5b4f8098c80e6158c5d62c108","modified":1568713902280},{"_id":"themes/next/.git/objects/4c/ca7a1785c50aa117cdf872ac2aa780f69da200","hash":"f515e2e0c1a975660109fe2fec13a54f0035e4af","modified":1568713902274},{"_id":"themes/next/.git/objects/50/9a6e9bd1ae2064308c0fd37ba12612b26ea9ec","hash":"820aa58aa7dfc36f77197614ad5970e26e645648","modified":1568877235807},{"_id":"themes/next/.git/objects/51/590d67ff093a14ba5aae2ec1e27a04813af16a","hash":"7954999d7d669c092c5e4eebe6ca92cde579d08f","modified":1568877235792},{"_id":"themes/next/.git/objects/51/c259bad9eea71e3660eecf05c61b3ecdbef6a0","hash":"f82d61ac024d60ee8193eeac66c65c4b40071624","modified":1563416717968},{"_id":"themes/next/.git/objects/51/2512a9edeb7a452c98296f8127f918a3e95c1e","hash":"f5a47a3ccf86e4e41ebb869ecbd1937a0934a30e","modified":1563764364862},{"_id":"themes/next/.git/objects/51/d133f2ddf1419c752fe75c28b1978c28b46800","hash":"b28df5b40ed7b6a89bbec5fe6bb6b4389db0b620","modified":1563776837389},{"_id":"themes/next/.git/objects/51/f20fe14b5ad53587053887e0c51df3e95dc414","hash":"93333836c5075857310a9f0cbe091e95e900a3f6","modified":1563416717974},{"_id":"themes/next/.git/objects/52/7ff05fb0d0cb4a35c073e3aaf2cabb957753a6","hash":"e996c4904d70eaa9934d63909310d2aad2884806","modified":1568697710064},{"_id":"themes/next/.git/objects/52/83fad5a443a353252b21b95a4c5706bbb24a9e","hash":"d3f72aff7c33d1627abce8b14b61e48cff1a9aa5","modified":1563764364395},{"_id":"themes/next/.git/objects/52/cad0540865bb3d6f413d29ef37702efea770f0","hash":"8de4bd37f317ed2d5773ecff4ba1bcbf08a9bfb2","modified":1568979149799},{"_id":"themes/next/.git/objects/53/15be8742b7377762e08b696a61042188245f2e","hash":"999e4e0e7a5f526da3d1659fe67d1aa661e54f09","modified":1568770502675},{"_id":"themes/next/.git/objects/55/035bf62c935c281ef7a4b1cc6955bfacda51ec","hash":"792e1955eb875570af278559ce0f11afa144d7fd","modified":1568877235793},{"_id":"themes/next/.git/objects/55/71e17a1709b909db0bc0f46329ba4735d3d6d9","hash":"ff40668788a6ce644b7dacd361c4c7a64b57a2f1","modified":1575024975619},{"_id":"themes/next/.git/objects/55/de03e35e3ebfd515b03c3a5ef48b85b73c4a77","hash":"ecc84d8a352edeb5c77e504f48080cabf25d3f34","modified":1563764368405},{"_id":"themes/next/.git/objects/55/b4fa653a808e1a3d26beb3214474063016ddd1","hash":"3d406dd49aa20743aa3919e2f3dc1840a986bff7","modified":1568877235798},{"_id":"themes/next/.git/objects/56/c165803ae47dfc5a3aaadbf5c74aa3482bc021","hash":"eb9e86fffcc41410eef679aef8d4245cbcdc6d9d","modified":1568958704216},{"_id":"themes/next/.git/objects/57/e7348c5a2342c58795feb5f5e50a1aa40f3cef","hash":"fa124044486d5ed246ff24115596e6a8cde3035b","modified":1563764364860},{"_id":"themes/next/.git/objects/56/e8e73e5bef0c81a28cb188253732004b44cdd6","hash":"d04102da65b39007774f94a9f3fb6c985655ddc1","modified":1568713902276},{"_id":"themes/next/.git/objects/58/5d062d0d85f20db688e9c8364c7eed6f8d69f4","hash":"79611b1c6aa2ae2fd516540c824e2164d2ac5df9","modified":1564113948817},{"_id":"themes/next/.git/objects/59/af5c6c518f82eb987152b9dd1712f7f7ac2d15","hash":"09c58aa38c159d4e2169edea2bef6e0bc789cec2","modified":1564113948831},{"_id":"themes/next/.git/objects/59/336032dc6fc4d910b356c54290dcd329933738","hash":"b6c0395ee408ed007989292129f23b3feb951561","modified":1563416717964},{"_id":"themes/next/.git/objects/59/c6210d74e9c05a9ab6dad8685c664f379a3956","hash":"91ba98b760d9f26d9bf3b54e327c9454a7c605d8","modified":1563416717986},{"_id":"themes/next/.git/objects/58/762aa715b0596978b7ff884120ef65fc14e6e4","hash":"bad6be2f6807b738315a28799809dc0bc0e34ff5","modified":1570870072327},{"_id":"themes/next/.git/objects/57/cbdc4bdbfd677840f1f315c2565049938c9577","hash":"c831cc65a23e37406486db52b82d51e8842eef05","modified":1563764364463},{"_id":"themes/next/.git/objects/59/f465a752c117c6e7b027e3bd1e9e4049c4fb71","hash":"9c2067e4d5605979b2cb9558290ea708ea85474c","modified":1563793628470},{"_id":"themes/next/.git/objects/59/cc27e61c6aac5020ef22b70c234e81b0d4b29e","hash":"67b5375e71aaa2c5f2d0e654f1f2fdde2132e0a2","modified":1575026262241},{"_id":"themes/next/.git/objects/5a/6d3aa87796f402dea4c43ea7432af612ae5c88","hash":"00bf1c9db198c0bd1a4db2efefa6bd2add50cf28","modified":1568877235775},{"_id":"themes/next/.git/objects/5a/d3da6d908e0ea9f066fada6c6e394ac13f669f","hash":"a050d3608093fd73c7db643aa8f4b95699b8c84a","modified":1568707757352},{"_id":"themes/next/.git/objects/5b/bf23a0122c8632bff7aa0c083855bf9a45b328","hash":"b8dca8ffb80246029250e2b87dbde0d52b7e5b5a","modified":1575024975425},{"_id":"themes/next/.git/objects/5d/311fffceec3eb793c2fee89bc156c244ef6692","hash":"c870837bada87d5217c950bd7a0a5cf344d8d8fa","modified":1575026262200},{"_id":"themes/next/.git/objects/5d/cf2e642cb95d8bfdb4e139046da979abe5e034","hash":"4b5e0376821b9fbee874e4f2fbcdafb3b70a13e3","modified":1564113948827},{"_id":"themes/next/.git/objects/5f/0e8de535bc78570ddfb7582cf426822dd56004","hash":"078694db893af2240a65d21b9f99452e68d81251","modified":1568958704208},{"_id":"themes/next/.git/objects/5f/857292ae6d8140ce39858ae0f647266f33c73a","hash":"4f2753a5fe3fe6d74985910b48c07ad3478d831b","modified":1568700998521},{"_id":"themes/next/.git/objects/60/645c2db9bcb67c183f4a3e471da312eb631ad4","hash":"a0df4019ef1cb40f54f5ae54d08766e6cac7696c","modified":1563764368411},{"_id":"themes/next/.git/objects/60/df313fd016e5b693dfecad30e6b142967ef625","hash":"8cdf410c4da9ee816e1fa8e80f01164a5e462bea","modified":1575026262186},{"_id":"themes/next/.git/objects/60/8bc78dcec37cd0b5c9c2328c4e741d1dc416ca","hash":"1edf186f3b2d28ce0e7323e764f2040c8ecbe08e","modified":1568707757357},{"_id":"themes/next/.git/objects/61/70c7c3ccf34d6c0270a944c1e5535a81851e34","hash":"29759b3e66254568837c8aa16afd03ffddedf599","modified":1568700998273},{"_id":"themes/next/.git/objects/63/41e5fe6e7bc5d0defcb96619cd2daaef41ee2e","hash":"5fd3d8a4e4c936edaf76cc9ae6cd1eee8c11d7d8","modified":1575024975399},{"_id":"themes/next/.git/objects/64/e82856f227fd222cb820db92f24f8b38c6bc05","hash":"cad6f1cfa86e211b1074a233e7f5d77f61c5771e","modified":1563764364442},{"_id":"themes/next/.git/objects/65/89169394f2dd8a2d02f17b7f43fcb8e0fc3984","hash":"65ff85e331a1177c5a0792db73502e3f0d650f5a","modified":1568877235780},{"_id":"themes/next/.git/objects/66/917a9b08f24f989e152d94e7d4d28181a96722","hash":"8e01546cd21bc274ef6ae8281a1cfc3d0adadaa4","modified":1568958704210},{"_id":"themes/next/.git/objects/67/052798c570823a456425a4eb8e66bc57194cba","hash":"5306664229962c512dd6d29af3d2a449e6db5b1e","modified":1563764364863},{"_id":"themes/next/.git/objects/67/9c97d0ca159a9b898b452a904eea517222fc75","hash":"d13d1e69d1d8119f85ce33d92f9d7ffe7f8cac69","modified":1563764364474},{"_id":"themes/next/.git/objects/67/bf3522f4206dbd13a7c6b4840bdd2a073cbae0","hash":"acc1f4d439bc233227adc11a38389be0096513e5","modified":1575024956006},{"_id":"themes/next/.git/objects/67/d367ba011ee2eae7e7b27cf1a0b76376bb327e","hash":"283e147fe7b66315b1126784356d5b05000f754d","modified":1563764368390},{"_id":"themes/next/.git/objects/68/19aee5bfca1c6221d73a3d08476dd28de79122","hash":"4d7828acaf9a178575e0bc45706df8e2ef04b64a","modified":1575026262240},{"_id":"themes/next/.git/objects/6a/580f645d9906b301ca269a1623df68b11b1cf4","hash":"a2cf58c500a238cbfc66a3d92b0804d176c0c2b2","modified":1575026262188},{"_id":"themes/next/.git/objects/6c/0668df46e89b4f7a14ee17d6f68a3d3bf3ea9a","hash":"5495f96f28b7deca97d726cea24301855dd3d885","modified":1564113948871},{"_id":"themes/next/.git/objects/6c/8f35c0b37a0c51ecb1e1d3ac8450ffd2ab3812","hash":"bc02e41bf2c7dc843161e0a5361a891229ad0d32","modified":1563764368407},{"_id":"themes/next/.git/objects/6e/48129d2e5781d7aeef3d70415165fe4a5a1a72","hash":"70a8b1a20a6386132736af54b18dfe8b14487100","modified":1575024975406},{"_id":"themes/next/.git/objects/6e/9f3dfe31ab5f04ab14ee3b877e6462379fc6f8","hash":"e30f19cd72a49decdce83482ecf134d43034513d","modified":1568958704214},{"_id":"themes/next/.git/objects/6a/9293cfed7a1d68985fc1fdd3b2d117832ede9b","hash":"ef383f47bed86cd07c4758c1b43954102f81544a","modified":1564113948873},{"_id":"themes/next/.git/objects/6d/880f80f65c35c28c58c8c49e98f8a404221385","hash":"5f9fac2925acfd43373576f320c491932bde56a5","modified":1575025083169},{"_id":"themes/next/.git/objects/6e/6c1e663f288a739ebb1220f09d1f9e06a49bc5","hash":"f644443568541763ca9adbd6d1997321bfa96f44","modified":1568958704211},{"_id":"themes/next/.git/objects/6f/5ff546a39e515effc1f865edee9ed6d878ef7b","hash":"074201607f957da734decf893e8325c00b85a6df","modified":1568700784097},{"_id":"themes/next/.git/objects/6f/65ec56340d3e02dff3163df42b68d6d5d6f02d","hash":"98913b468160ec7445c0c5ab39a72d30d7987d5e","modified":1575026262199},{"_id":"themes/next/.git/objects/6f/dfbf1981cb55e0e7d200cd53da7ae1d5ee0561","hash":"e6b70082d92860a93cd536d46210ba7c20468f14","modified":1575026262187},{"_id":"themes/next/.git/objects/6f/7c1fb738a0321b11130542b0fa61401a300eac","hash":"1919cd241055e1e6efa6e4eb73666affbe267f39","modified":1568699013705},{"_id":"themes/next/.git/objects/70/d58bfb2bea61263b843012769b54419dfd9359","hash":"1aef2832d0878f96b1b594724d5cd65b54f09f9f","modified":1575024975391},{"_id":"themes/next/.git/objects/71/e7f637cc6785210d5b0c7ebf494dc8f8fe9373","hash":"cba9704471504d5f5759f277373fad885d9319d3","modified":1564113948820},{"_id":"themes/next/.git/objects/72/3fb9162c8b3c9a3f1ae94f83e6a54f75efe367","hash":"a960aca39f3a9170470547a3aec11ac8a217dd45","modified":1568958704212},{"_id":"themes/next/.git/objects/73/025fc78b2704125f2adb9d1f1054e4c805ab29","hash":"e8a76f5fab67ff69054570baf7a4d737da7d174d","modified":1564113948831},{"_id":"themes/next/.git/objects/73/99e27bd83e47eb46a60baaeb47583b262feaac","hash":"a5fe3ed9b8c2d9be0aed85216ace01e841cf6d3f","modified":1575024975623},{"_id":"themes/next/.git/objects/75/b312bebde4146db8143befecf40ff57789155d","hash":"818979961615958f0e3d0f903d1407b29a5f76e0","modified":1568877235791},{"_id":"themes/next/.git/objects/75/e607be33c891bd3852bf758b63b945b7608270","hash":"fd3da910aeba0862c2ca19097eb1dd2c84d8f3c2","modified":1568697710067},{"_id":"themes/next/.git/objects/76/66ee8dee91aa1193a0e4dc6d2246057482e752","hash":"65b8bc4f67a473c1ff33f20b9afd7eba2470298d","modified":1564113948869},{"_id":"themes/next/.git/objects/77/45c6730454d459e52db3db563f5872f8396288","hash":"0bc54bbe3621ca82b769185bc2b6cb440e86bf10","modified":1568699013692},{"_id":"themes/next/.git/objects/73/e1fc706306e763376cadc475637bfdd7cc23e3","hash":"42c70d5cb1d8811089c42d12ec88a91793c8dd42","modified":1568770502676},{"_id":"themes/next/.git/objects/77/f762e5c46dbc2ef671d451bd6f315e4f2e6f15","hash":"9ad66c482c7b80750f1291f3175c3db4c8e56b98","modified":1563764364449},{"_id":"themes/next/.git/objects/78/453161c82dae101b6abf8dfe65530a7ca1f2ad","hash":"4fc0cdc2d697f6b10420a168e320cf538413dd72","modified":1575024975585},{"_id":"themes/next/.git/objects/78/65c7cd3df9eb1655a4075cbad8ca4b809bb2cd","hash":"32f091c3ba75022e63f8f0056efd8cd7634124c7","modified":1568979149800},{"_id":"themes/next/.git/objects/78/ab4ae3e9f688858eb40f5886e15455f4b38a59","hash":"dabc1c52b688c01833f5f09807bc4e258dbcb67d","modified":1563764364448},{"_id":"themes/next/.git/objects/79/8f94e2969f2d064cbb38ae4b93bf67ed3399ae","hash":"ad0b95da1110b1e3037dd9a1539a391558c6c2d9","modified":1564113948877},{"_id":"themes/next/.git/objects/7a/ba6c4499b82e20ca6dc4edbd559a7efdc7a4d0","hash":"d4f3970752e15163ed4a061b83741380ff6dd283","modified":1563776837393},{"_id":"themes/next/.git/objects/7b/01ac4f2ec7a5a7c6f752300efca2d131a1ceb8","hash":"7f9c6807315ca029269e5f88f42f644e3d15be35","modified":1568707757357},{"_id":"themes/next/.git/objects/7b/a0818142e6c455744dc29b49bd297309920b69","hash":"a90dc0037bc0837e35c25aa997ca81893758a866","modified":1575024975383},{"_id":"themes/next/.git/objects/7c/2ecb1c05ada60c9aa0014add9af19fbacd11a0","hash":"e8e8119aaa93718bb7b4740531bf895384acb459","modified":1564113948872},{"_id":"themes/next/.git/objects/7d/135c57a231a1230275cda05f5f5770efd8679f","hash":"f63db2f63dfdac489f45d3da368f1a6fcfc6106f","modified":1564113948871},{"_id":"themes/next/.git/objects/7d/62e76fc5506cf04d40b5bf6a9e2d385bf44933","hash":"4c3cf35d5f42ffa3d48c38ca09fb111707a7accd","modified":1568707757355},{"_id":"themes/next/.git/objects/7c/6f80511016095f431f1ee16852aa3af7378035","hash":"38b4fc8bb1eed0c01a4afeb97bd07e95548cffbc","modified":1563764368378},{"_id":"themes/next/.git/objects/7d/a80c80fcafa1d3b32267053e215b0e39b76351","hash":"61b48ab71348d3df03713f949568ac769d435491","modified":1563764368409},{"_id":"themes/next/.git/objects/7d/d834bfbd046933da68b80c016627d8012a054b","hash":"192d7e3c9250ca2cb892f290c793ed27c9520728","modified":1568877235799},{"_id":"themes/next/.git/objects/7e/1fc76822fe8ff0b90f24859b4405f26efdc450","hash":"ac420b7d0ff8541f957d295bc71d3740dfc8d3ee","modified":1564113948873},{"_id":"themes/next/.git/objects/7f/07c1b0a5a93b934b9efa3dbe79ad1159ae5a3b","hash":"070084d9cd751ef602a88f57c899c600044412f0","modified":1568707757354},{"_id":"themes/next/.git/objects/7e/9e9eb61a27853a2d01426500f4949ec78406a9","hash":"e507184d6a05c51b29934b76e89ae6406da8e885","modified":1563764368386},{"_id":"themes/next/.git/objects/7f/cd0f7c4d6cf4c494e9fd92b7c329623e78b608","hash":"4e57107ddefd81e4c1720b02f62fcb0bf0a9ee6d","modified":1568877235780},{"_id":"themes/next/.git/objects/80/01d052406d23dbf72ca4eb5ecfd6b4107be0e0","hash":"9f21f67b33b7c1416e8f337aa4fefa6b5c705d99","modified":1563764364476},{"_id":"themes/next/.git/objects/82/1753dd06beb7c506f9fb090779c2f9e257850c","hash":"27ad89e5ee2da2427e89b7fec2932411cfe5529f","modified":1563764364399},{"_id":"themes/next/.git/objects/83/ac74f84d572ae69bff4ef76e96a42cf341eff6","hash":"83f074c74bcce2f864e68cd96cac39922312e0f1","modified":1568979149803},{"_id":"themes/next/.git/objects/86/5407f23242cd5aa111551c17d98c9e88de21d8","hash":"7177f982609194ff81155d36c5852d7b202edeca","modified":1563776837394},{"_id":"themes/next/.git/objects/85/ed5532f2aa0004b4eeffe7508cc2769f814551","hash":"a167ac8c494b266000c51104059b6eb71e480fbc","modified":1563764364401},{"_id":"themes/next/.git/objects/86/f1d0a3f18d3d630c0e3f1a2c3293b9b16a44ff","hash":"65cf508280fa145cbd86bf53aecc7462afc5bbcd","modified":1568958704204},{"_id":"themes/next/.git/objects/87/df5ac15f36febd87ffc028e8161d79eaad1541","hash":"d53dfcfded4ae4ce8d1683d9aba420a6833312fe","modified":1575024975404},{"_id":"themes/next/.git/objects/88/cd69ff24fa6110b8a9e88358b4f024dcec5fb1","hash":"76d938cc6f7e644573bd5d0924b3ee57d7842fcc","modified":1568958704206},{"_id":"themes/next/.git/objects/88/d467118f872c1b01525ef8ffbab19e3e2b0a9b","hash":"f9f3e46b761b529ba40a5f190fb58a8e32f7b952","modified":1568877235807},{"_id":"themes/next/.git/objects/89/e9c00a9a22fd7bfe48c492fbb8b41350b9f6bc","hash":"4981cd336c79d670d91e25454b876efb7804a282","modified":1568713902275},{"_id":"themes/next/.git/objects/8b/3aa245125301334308a16ae6c95bbdecf36461","hash":"f1367c5d35412d06cbdd6916d248f5309d9c2bcd","modified":1563764364871},{"_id":"themes/next/.git/objects/8c/ad95ae7e73dd3e1bbd381e7ccfefb64ff1b8bd","hash":"27f86386f70ec6aaacb47b3429ed3bc312da3fcf","modified":1575026262188},{"_id":"themes/next/.git/objects/8c/af91743ccf87ae94a435c588ab4ba510d26e17","hash":"bd8cb78d598003d4663a72afeae1130dcd875870","modified":1575024975386},{"_id":"themes/next/.git/objects/8c/b44ea303a644f512387da63b853b33b374862a","hash":"f189ba2cd5c6024c05937f72c390d327b3f800a4","modified":1568958704201},{"_id":"themes/next/.git/objects/8c/e3d4cb24f78cf4040313403dd7b333e0a080fc","hash":"1ce798ed76869864246177bf30b1e00941f2ed6f","modified":1568958704199},{"_id":"themes/next/.git/objects/8d/400d5bec760e13fd2e4f673415d0c894de3cfc","hash":"05690727bf8ebfdd8a7d06550a7939215a7188c4","modified":1563416717970},{"_id":"themes/next/.git/objects/8d/c20e89de07fa30bca1f8f95e73c29eb7e2d285","hash":"b8b3ff518bb30c015dca7f33fcecf3537383661f","modified":1563764364932},{"_id":"themes/next/.git/objects/90/06eaf4009a7894ea49ff05bb71a2959dbad735","hash":"838ca465205ef1f78c6f4434b065c25cdc258c64","modified":1575024975397},{"_id":"themes/next/.git/objects/90/786916eafe2dc6155641f271408494e452c85f","hash":"5faf2a56cee5d0afe07ef01ad76a0bd8bf08bac5","modified":1563764368394},{"_id":"themes/next/.git/objects/90/c78b508d54d2b399bfab30361709a9015d1e73","hash":"e39350c5e6c9364893f768d79b42e16510b6688f","modified":1568877235786},{"_id":"themes/next/.git/objects/91/a1e344192fa311d76f7f0cc94d013cb567a3fe","hash":"361c7d1e325e9018e61b11adffc2172c491750bc","modified":1563764368395},{"_id":"themes/next/.git/objects/91/e0e0cb7d86b82a4291e849c063334cbf047269","hash":"0b20eb8442a7dd982ae93a4766e7f9db2e1efd18","modified":1563764364846},{"_id":"themes/next/.git/objects/92/7b89c5863dcf1980b1b0789f165f3866503745","hash":"3b6c9e85acd8c280d6a1ed97343a5d955e3b35e9","modified":1568877235776},{"_id":"themes/next/.git/objects/92/df92af21911c2ca69e44d3334f55051c089d82","hash":"d0d4d49bc4985bbf76943911ba958c886ab247b4","modified":1563764368404},{"_id":"themes/next/.git/objects/93/1719cb13c3a321d2658aac90bdc8de994b431a","hash":"916ddc12ea637a03a793cf984b2d1a62f7fdbc48","modified":1563764364389},{"_id":"themes/next/.git/objects/93/d8321e2af88bc6c5fdc27f4de4c18f32f7ea7b","hash":"558b7e80273001a658a6edf1f64d794c08e8d7c1","modified":1563764364851},{"_id":"themes/next/.git/objects/93/eec05fd6b7cafe9941dfb25ec4977cdc49722b","hash":"e23dd85e094ad0370ea653b8f7c5cf87d1674b40","modified":1575024975410},{"_id":"themes/next/.git/objects/94/0da615283024ed30c2944cf6f64482e87f45cd","hash":"0013f48d6a20c65d1e2736baf539df078ba773a9","modified":1575026262236},{"_id":"themes/next/.git/objects/95/88d94f8dfc572292993117091b2c70bba4ac48","hash":"49bcc360ca2bffa1f514fa0c870542df1b714ec0","modified":1575024975398},{"_id":"themes/next/.git/objects/96/136f47c7625c841cc07425ed6cf7d09f9d580c","hash":"6544689f0f7d5eb1b8fff4ac8abdb199cf60089f","modified":1575024975393},{"_id":"themes/next/.git/objects/9b/f28db8c3c6621106ee15d26bef24df36345470","hash":"0f2d37c8709a98e9f9a88d990dbd829a7b45411b","modified":1575026262242},{"_id":"themes/next/.git/objects/9d/a9a3c7b880afab5153ad0519b10ccf3b5cdbaa","hash":"3622e023e1f0ceb90fbd5d30d5edb70367447e9f","modified":1568877235778},{"_id":"themes/next/.git/objects/9e/05fd889dd464cd5eb69a71c34a819fb40987ce","hash":"09ded9ce529f7240922e4e15f6a3037063394722","modified":1575024975426},{"_id":"themes/next/.git/objects/9e/b7e69f354d2125c258847b61f8bc847dc00c0b","hash":"e0c8880207871cced5c2668cce82a198cbcfefad","modified":1563416717983},{"_id":"themes/next/.git/objects/9e/a6f8849c14e144d4728953b90248dbe626f6fb","hash":"877212fab3f3366ebbef5ac0e7a981e1a46a38e7","modified":1575026261742},{"_id":"themes/next/.git/objects/9f/2d56af713bf873d59f11d525b1f5676c502a60","hash":"8fdfbd5bb941de5247fa6c4128f0cae28efe4318","modified":1564113948819},{"_id":"themes/next/.git/objects/9f/b98b42140cfce34d8585e0a8911199acb74cb3","hash":"3cfda529e4d189d7647b70f89abeeabf26e1d021","modified":1568697710063},{"_id":"themes/next/.git/objects/9f/fe472576a140454cdd7ef1b03b7489b881559a","hash":"902785a3882136295975a4e91ea7b60781c9a0f4","modified":1575024975626},{"_id":"themes/next/.git/objects/a2/8349f7a8564b9e1e8279c06a4b9111008b4719","hash":"487d2dc2f077a554d969c0ace028ee37735305a8","modified":1563764364472},{"_id":"themes/next/.git/objects/a3/4343be15975b1684bcd9536718a6096d29b6e9","hash":"8812a70ad761dbb8f6e51751cc29e3297fe61025","modified":1563764364453},{"_id":"themes/next/.git/objects/a4/660de9b55502aec9bd6fc484a7a33244a5e409","hash":"8a7f5745757517f3da585143c3466d547d9774ab","modified":1563764364931},{"_id":"themes/next/.git/objects/a4/1f9ccf77f646c81a14d73bd73dda5ef546e687","hash":"5972e3214a3631ef2dee36e72f16ca18c21cee2f","modified":1563416717984},{"_id":"themes/next/.git/objects/a4/7a4f3d18a871c74043913829567ca2cc4d806a","hash":"2fc27299ac779ae88259e11b833fec8807c12197","modified":1563764364413},{"_id":"themes/next/.git/objects/a4/b95027d6e69be0f87e0c44e4dc5d71afc9359f","hash":"64ea7bb70f16f8517339b92d0827341ae0e8891d","modified":1563416717969},{"_id":"themes/next/.git/objects/a7/9aa446ed8d2b9a44d82e28bbae5320a2eb7b36","hash":"26069102d8064d77cd1f25d11fd68f668f954da6","modified":1568877235775},{"_id":"themes/next/.git/objects/a7/a9caddae015e1baa88a0e267f969b4ed83bca5","hash":"11a22048a59381836bbe7c3bc4d2493a3266f35e","modified":1568877235800},{"_id":"themes/next/.git/objects/a9/cdc6f133e8852124782521edeefb286b9e569b","hash":"789c1ced724e9acbf0b8cf9991f72222df2b5766","modified":1568877235777},{"_id":"themes/next/.git/objects/aa/92411e8507ac989c862ea52f4116606c38b4cf","hash":"1c9dd9d27fe3a1fa496c49ed2ae4afed31e9abd1","modified":1563764364397},{"_id":"themes/next/.git/objects/ab/99c42d64f3a8cb8e6c521e27dc68beafd5c3f6","hash":"0d6e952766a6c73408d394bdad920a9cd6b6409e","modified":1575026262202},{"_id":"themes/next/.git/objects/ac/2b09d1ef240e415f95b5fc5e13862dbe72848f","hash":"587e18d12868fd11a4fed3c2972c89f92cfbc60c","modified":1563764364418},{"_id":"themes/next/.git/objects/aa/65360aadd8e7992a030043a3a91c37a872f9b1","hash":"a9925943ef880fc296e4c27d99f1588dcb874ab4","modified":1575026262197},{"_id":"themes/next/.git/objects/ac/2e0ddca7c998b8d4bfd0d1794bf9b412a497b3","hash":"9d46242b5b4d3515153b3c95ca9f0d87d931548a","modified":1563764364854},{"_id":"themes/next/.git/objects/ac/f126a0783fdedca425514186ceba5ba0ccfb87","hash":"4b463231cfc116bc4dd4410a1e46ac48e8fdbfaf","modified":1563764368392},{"_id":"themes/next/.git/objects/ac/79293a5284f3bbafd3fee41a077cbf83228564","hash":"41f86c74a4eb0da1add37cd48172bd72d0542f00","modified":1568881985887},{"_id":"themes/next/.git/objects/ad/187498f30d4fbccccb16e8fe7c9aca752fdf05","hash":"72061bd89fb13cf4849cc3998b247d2de4cf8be7","modified":1568958704217},{"_id":"themes/next/.git/objects/ae/62180db56709f3c6171613e34b99c669fd5693","hash":"218fb2968ed9598ac9ef8634014060cf94a5abf7","modified":1568701020351},{"_id":"themes/next/.git/objects/ae/c13412f4c444d345dc9d9c2217ea20a0a94ea8","hash":"6b25cff4dd9ab95ac28690af15b5a35a88de273c","modified":1575024975621},{"_id":"themes/next/.git/objects/af/2cabaed44c899dea29c9f6ca2cbf7a0300b373","hash":"04fc105682de44a96f2172df1a9e55284061bab4","modified":1575024975422},{"_id":"themes/next/.git/objects/af/d37198704664afcbc3980325d56c00024229fa","hash":"5162829d4d67a0e62998eada36d1ed065392286e","modified":1563764364401},{"_id":"themes/next/.git/objects/b0/b62bf57cfda053c939542918ec7f9b72a9443c","hash":"96900e35384368fb0211a56a211e514aff323461","modified":1568877235799},{"_id":"themes/next/.git/objects/b1/f578a6a672fed82d50a8536714191135ababe5","hash":"8d2869d3b2ca99b3322345bf89237983a6e03157","modified":1568877235773},{"_id":"themes/next/.git/objects/b2/4b0e70106a71874632ab023331c44e0847111c","hash":"2319373e3fcdf56d580e887f6c3b4bb5dfc2cc59","modified":1575026262193},{"_id":"themes/next/.git/objects/b3/408f0064d95adb10ecaa61b1b48e9dd7af50a3","hash":"7adf4d0b0b0bdeca1aa0bc138e029a4409c4deeb","modified":1568707757350},{"_id":"themes/next/.git/objects/b4/6b19ad097d252f171a9193d84c528c1bb6582e","hash":"bd9c6da2eca649392c81e8d7f78b2f87720877d2","modified":1568770502676},{"_id":"themes/next/.git/objects/b5/33ea6c433eb9f7e57a42d0eb0bc880fcdb298b","hash":"d619aab24323a3019b5c357f32b2e6d92c9cb90e","modified":1563416717972},{"_id":"themes/next/.git/objects/b5/5431d27085bfa63cf15fd7a742f44db98ee7b1","hash":"2920ce651887283c5ce9fb0de9a6dfb289c083ef","modified":1568958704220},{"_id":"themes/next/.git/objects/b6/bafbd8b8c950c87fde75222d060ffa703b39a3","hash":"021bddac1a470eb6db29ff5f84877d37bcde8fc0","modified":1568877235805},{"_id":"themes/next/.git/objects/b9/2bc6020a588d3535412e069d96737d2c39cd28","hash":"78c8ca3566d3741fe183d5ccda124f640e4ce895","modified":1563764364466},{"_id":"themes/next/.git/objects/b9/7f16bd201ca1fc7ea9f5a453ce9e734586c6ed","hash":"7ce6238a479e392476210b0c6767a180393d68b5","modified":1563764364854},{"_id":"themes/next/.git/objects/b8/fc504bb03ffa88a796dd789f0ed2dae334f74c","hash":"a9f92a46e49840c408a89b4b469c2169f20ed1d6","modified":1568881985895},{"_id":"themes/next/.git/objects/ba/2f28c9e01ab89e8d52140289e5917d027d4146","hash":"b7bfa1772ae9d2703a80a2e9809144166228a502","modified":1564113948822},{"_id":"themes/next/.git/objects/bd/4e7c64b362ad53c9a718ea824f95a137395f79","hash":"720bc1c1d14b043d7f0cc39f690cfa33ea59ecce","modified":1563764364396},{"_id":"themes/next/.git/objects/bc/05293612c7624f97e287d42164c115fdbd38bd","hash":"af52229161c671252d822a1e08111445e3039664","modified":1563764364392},{"_id":"themes/next/.git/objects/bd/210db3d2f332868585440622cf09f17c1d3263","hash":"422403f5d6681808648ebb719c9d01a55c83dd05","modified":1575024956003},{"_id":"themes/next/.git/objects/be/d97508ea043101aee9c2045036c2cbdea56fd1","hash":"fb34122e199312dde2ad0a623d33702012bb87d4","modified":1563764368388},{"_id":"themes/next/.git/objects/c1/c3fc77de5dc4a0e9495c6e6018b633ed0f7c29","hash":"dc80c0a8fa6cdf9217a81f2c396cd5a1e59342ac","modified":1563764364398},{"_id":"themes/next/.git/objects/c0/53be712b8194c44888a1f3c68fcd7ada377a0f","hash":"c04eb9c89a16a95829aca4f5ddd5c3c77f4bb547","modified":1568958704205},{"_id":"themes/next/.git/objects/c1/e228bdeae6f958ea1a5ce6c3e70d59fa3ea07f","hash":"c50cc80a7b82e7c0b79723c987107d8e984949ec","modified":1575024975394},{"_id":"themes/next/.git/objects/c2/897420ffc7ba7c95b6985881f8df4d8970d8d3","hash":"61b95bdb0a4c0d86b26d539bcfe115143d7068ef","modified":1563764364861},{"_id":"themes/next/.git/objects/c4/4f3afb7f1e122ec33a40839e0b913c0dd43cd0","hash":"8cd72a1a77528cd7a63b5cfcda7cee303d093b5d","modified":1563764364454},{"_id":"themes/next/.git/objects/c4/895757764c03d61ba62f3e3a57c0ae42257844","hash":"3a98b1ac52ce48163bfd8e6cbadbda99cf4ed0e4","modified":1563416717958},{"_id":"themes/next/.git/objects/c3/7cf2294dc274bd4e34edaf39765efd0b1554c4","hash":"6c4b9f634e513df5168b10f3ff1e890f58e5f46f","modified":1568877235790},{"_id":"themes/next/.git/objects/c4/e2aeae3d8943348786f1dd039603bbac831628","hash":"14f17936c2c1e07c2ef0ed4b79448867b8b897d6","modified":1563764368410},{"_id":"themes/next/.git/objects/c5/9d85c49707c4791cf939bff5e7f3c6fcbf04dd","hash":"414c31597409991451ffd64c4138f35f4646014c","modified":1568877235784},{"_id":"themes/next/.git/objects/c5/6e974435b61b6496a62c77e2799aadb08140dd","hash":"fde790b9bfb0c38c9b895858bb40a2a8382484f0","modified":1568877235794},{"_id":"themes/next/.git/objects/c9/86f980c1b83145010735302f0882fdb3cce203","hash":"fb97f18ab14694b1c49b6540a1eb877c913982c2","modified":1568979149802},{"_id":"themes/next/.git/objects/ca/83cc85ea5d9167194d8632d3e7bf9a53678dff","hash":"dd3f9b5b499575d68f441dd0fc6efee1278914f2","modified":1563764368409},{"_id":"themes/next/.git/objects/ca/947b63b967eb163936ae74eaef763080251f3c","hash":"d92d4628e0a085858554420d5fad61c9450066f5","modified":1570870072330},{"_id":"themes/next/.git/objects/ca/b692abd173401b7e271ade4f7d697cf2aa71a4","hash":"9675683d021802360f3d3269591a4705853433f7","modified":1563764364439},{"_id":"themes/next/.git/objects/cb/340b74b0d98618babe8f0268334c9420ea00c6","hash":"26208a7f1ac5ba76dd3c49705996e0a5c856bcb9","modified":1568958704219},{"_id":"themes/next/.git/objects/cb/3d2efc77bc3f8038885978edbb4e56e077e80e","hash":"9ebf36fd1fb2b4d6484aa710c6b7a801c14d4021","modified":1568707757349},{"_id":"themes/next/.git/objects/cb/cbeaeb37fb6be73a23318ca03c0741fcb9536f","hash":"78395f491ee4c4bf400f86052001d860c98f438d","modified":1575026262192},{"_id":"themes/next/.git/objects/ce/5132b9badd2fa412d684d0cf89d341768b1a77","hash":"3fee09f95cac716b33b45933472c8432764c083f","modified":1563793628468},{"_id":"themes/next/.git/objects/ce/841b7b4c4fe3803f677ffe58c457960442d095","hash":"347094a6654e172870e859527d9560d84a0aea5a","modified":1575025041962},{"_id":"themes/next/.git/objects/ce/a32c78ba302a9fb1306fb37defa6b16453ce38","hash":"457789a3f8a622b3e1447974c133cea18f5a0563","modified":1570870072325},{"_id":"themes/next/.git/objects/ce/beddba9bbfcb2277b1151d779d7987b80a98da","hash":"e757328f9f09b8ea96be22e6110fa59dde676c64","modified":1568958704223},{"_id":"themes/next/.git/objects/cf/5f986d89872bf957e2d578818db3366e56a7eb","hash":"8376c1a57e52889a4a236517adc2a8c6df4226d2","modified":1575024975128},{"_id":"themes/next/.git/objects/cf/d1d0c655670ab8a24c8b217416c85750ecd028","hash":"d6338518ba424d041eb0fcd5b0cf0d4d21652541","modified":1563416717961},{"_id":"themes/next/.git/objects/d0/54f2582877dc3e6c98406ce82fb7a3d38b6cd7","hash":"45f7ab6367aa1b96033f526b3bc77cf02ca88540","modified":1563764364410},{"_id":"themes/next/.git/objects/d0/c52baa06b84cee56235b4aae58a906415c3588","hash":"7c8049fc9d8ed42430d83f2cfd7178c29efcf7cf","modified":1563764364851},{"_id":"themes/next/.git/objects/d0/e52164b8ae0f66014f7f1465284ea04903a97d","hash":"3f646938339b732cefd036091829835e2c904321","modified":1563764364393},{"_id":"themes/next/.git/objects/d1/38463eb1a5d10f6fe07a759d55e7ed97176fcd","hash":"7af496441aa464f6b00355843ad0a9e97eacf2a8","modified":1563764364459},{"_id":"themes/next/.git/objects/d1/ee0605a3f7c2c5eb3c7a31fcc74d7778d53f0a","hash":"78aa4654f0978db9aeb75db207280fa962cceebe","modified":1563764364870},{"_id":"themes/next/.git/objects/d1/f0ac5e3201de3db97c38eb507a088b4cbf9907","hash":"ab9b9e5f050228473bbd7027ba2711e525ed884a","modified":1575024975623},{"_id":"themes/next/.git/objects/d2/1b3d791e1f7649d5d9b5e8b79c11996b7cc509","hash":"30a1d235892e98ce640d39e645efdacff6ff586c","modified":1563776837398},{"_id":"themes/next/.git/objects/d2/9e5a518bef564e077f6e7899338dee51bb0ead","hash":"951accc6daef7a1cf4917e9198d0243cf12614db","modified":1568877235804},{"_id":"themes/next/.git/objects/d2/d8e3298af71347890adef7daf2818cf59e4561","hash":"155b3ccb6f816b2df2429b852dddd8effb5df3a2","modified":1563793628471},{"_id":"themes/next/.git/objects/d3/a05ea90520366171ef5d040afa227c3658178f","hash":"3cfe28f4490bf0ca72a3b3c1b5f809e1cdc83c77","modified":1568958704222},{"_id":"themes/next/.git/objects/d3/aaa83689289f20364bd7307ac9d6b2b73b422e","hash":"cf3fb607a10e2384cab76a21a76365eccf6cbf00","modified":1563764364428},{"_id":"themes/next/.git/objects/d4/a8e1fa14e33ed82c94f8f5cad2eb5d379f38f6","hash":"250ef13d9c12b6635b330f8982ff29da2179ccd4","modified":1563764364852},{"_id":"themes/next/.git/objects/d4/eeb18a9b99d8a984740d26a407465ff694cc6f","hash":"333e97dfa8b12ea4daa83265e9e768e85839ea03","modified":1563416717956},{"_id":"themes/next/.git/objects/d5/7f9b4300a7fb42b21f3a187f1bd0ad96af4855","hash":"e2e6c2aa165ffcf476684ae3d49abd7d48375fc4","modified":1575026262203},{"_id":"themes/next/.git/objects/d6/50fb40968dc51a3b315583cdd9b98f274ba82c","hash":"bb324d67b8de4ede95419d75c5a9ec02fc801b85","modified":1575024975616},{"_id":"themes/next/.git/objects/d7/babf55d946f165041d60e989f213dd9bfb560e","hash":"27dd318cfd6214d16a978044deeb2087689eabe7","modified":1575026262207},{"_id":"themes/next/.git/objects/d9/da1d12945e1e11f760c714e115d0bc45dbfc23","hash":"e8283a7bf9e675e2549525a1a06627228c8ff6cc","modified":1564113948874},{"_id":"themes/next/.git/objects/d8/24e2095d0a27ac7408b1cd2ae29aff99dfa866","hash":"b3c4d888eee25faeaa08108068755cb613866770","modified":1568700998274},{"_id":"themes/next/.git/objects/da/8082966589be8347aed0ac21f0da7d4946dea7","hash":"813855c3449d13679c9b196b866247c0bf921991","modified":1568877235778},{"_id":"themes/next/.git/objects/da/a5e0eaeacb637cff30374694de5272ad569b6e","hash":"daddbd61370d35093513780e9b017c66020c8d92","modified":1563764364388},{"_id":"themes/next/.git/objects/db/cc7ad4f755c294374fecc0d5ed5aa6203a068b","hash":"2273d7fbc7e12ab6f423c1a22b3336466c440337","modified":1568958704202},{"_id":"themes/next/.git/objects/dc/d640c18314a817b25ab9ba3aa013a65535b1e4","hash":"1a6cfac295deb35ff2d4d4d3856faa6b38e41124","modified":1568877235783},{"_id":"themes/next/.git/objects/dc/da0a40d9bd4f551f750c37ac982228d14f2618","hash":"384e113b1626080acff147612c4616ad6ba0fba7","modified":1568979149798},{"_id":"themes/next/.git/objects/dd/7b3be62bd3715ccb347288786dfa14b2ed3ced","hash":"342fb511ba45eb747dd321f31912387295180898","modified":1564113948826},{"_id":"themes/next/.git/objects/de/b556c7e017728e635a587c5b852630b7ca98c0","hash":"fc598ced5901b19c9c8cbe929008640055dc766a","modified":1564113948823},{"_id":"themes/next/.git/objects/e1/abfa09463540b2bda06f122ed67271a87ed9a6","hash":"e8174eee3d0439f31f2bc5e8de45778beaa15404","modified":1563416717960},{"_id":"themes/next/.git/objects/e2/51bc2598462207cf75e9aba70ba10c6ce135c8","hash":"cddf421bbf43c4368f650ad83241bad5477e9036","modified":1575024975626},{"_id":"themes/next/.git/objects/e2/fe9a7aff84e0a661ac354a97b334a44d382851","hash":"3b16126780960949963fa0d59dbe122313a69ed8","modified":1563764364845},{"_id":"themes/next/.git/objects/e3/5240722f4f830e735c4ed7f8b30025d2367c13","hash":"e29890285826951210de1d559227c761492ffc78","modified":1563764368413},{"_id":"themes/next/.git/objects/e5/0fce7896880ee973e1439b4077ab57519b9426","hash":"85406b7dbf354b2c15ba8e43fd7b8acc456bd76b","modified":1575024975392},{"_id":"themes/next/.git/objects/e3/6a5d3c2757a21fa19819f2375b4eb04e0bdc5a","hash":"450d057ff5f1f3a3eb1dee666beaf3ecfb8df088","modified":1575024975617},{"_id":"themes/next/.git/objects/e5/36c11c58c8fa88fff0524543a55651fb00ec04","hash":"a1b0ac7cd8ffa42342adceb5ed1e6621c307acc9","modified":1568770502669},{"_id":"themes/next/.git/objects/e5/9c9ffa4a10ecaf4fd2609822818712dd7c602a","hash":"015be50a2704da98eb7bc85f01928e3af0ddb7fd","modified":1575024975618},{"_id":"themes/next/.git/objects/e6/693fdd32202bd11baf0a52d1ed2635467f7a24","hash":"d912414c14867ead3a96b9a977c7ef91cfaa1f67","modified":1563764364394},{"_id":"themes/next/.git/objects/e6/aa031809bc27bd727d3e2c0867db1b493b0052","hash":"4df310c469931359bcb89f8aeb3000764f942f98","modified":1568707757347},{"_id":"themes/next/.git/objects/e6/a779517ea43dc7079d46df03b1c3dfcd584ad1","hash":"b3c4fd9c633028ceab6460bf3c1537f5296f5f1f","modified":1568770502672},{"_id":"themes/next/.git/objects/e9/030b5a358534afce53a0da4b981b7fb924d5f9","hash":"50eae1a832720829fd7ee0c5b52e88b92e0038a5","modified":1575024975385},{"_id":"themes/next/.git/objects/e8/ae0b73a8c156d0f6dbd31b5573a4b4d3839649","hash":"1b0f2aa3daf70862932d3a8c776079087ee98905","modified":1563776837396},{"_id":"themes/next/.git/objects/ea/3685330ed9d6e1af98b5c296ccd517553c6a24","hash":"8bb5486c8c1480dba298a728fce59d5aca60909b","modified":1568877235804},{"_id":"themes/next/.git/objects/eb/e044bec9ec775db124212048c42170ce872352","hash":"abaf876009c450b118bef81376b3411902e26170","modified":1568877235796},{"_id":"themes/next/.git/objects/ed/898330e009f01de7b2c2ee496c05e6b49e8abb","hash":"61650ee178bbe0de47953092c12c6606de1b41a2","modified":1563764364859},{"_id":"themes/next/.git/objects/ed/c6307ba230980e68a7d501060d32a71f718129","hash":"f4039effe59cbecf3198f0eeb9795d5d966f0019","modified":1564113948876},{"_id":"themes/next/.git/objects/ed/f1a08e923ceed88552075462850e6bf41723aa","hash":"13ae993ed09ffe8ed7ac770b939b821cb25dcd37","modified":1568699013680},{"_id":"themes/next/.git/objects/f1/2ff04ba9cab7e3c59d369a0f3563b34e080331","hash":"e69374a685150efd4e03286cc30256f89acc570c","modified":1575024975393},{"_id":"themes/next/.git/objects/f0/f4118e04486b8f51654e30f6f93cb8cc1edec0","hash":"520dad0cb564c1428ecea2a14718b65d545bdd48","modified":1563764364443},{"_id":"themes/next/.git/objects/f1/b0d93a461c9457155923c4386672f260d10dc6","hash":"61e82a81d567e57becb1c7e6b43827691836f860","modified":1575024975411},{"_id":"themes/next/.git/objects/f2/6b04198361819281bc26dd2f5d1781f70b871e","hash":"c4fa3427f8392871c515210b1cf1ce17ef77ed11","modified":1575024975412},{"_id":"themes/next/.git/objects/f3/af20ce5a80a63a1b90fcefefae32c59a6edd06","hash":"bf634f7d0ea39aaf1d7e0e9893279d145ec3df27","modified":1568881985891},{"_id":"themes/next/.git/objects/f4/40bab5595f6b7fb39d7acd9298e802c55f20ce","hash":"07aba4e20c8f1aeec088d1f5e40c739ad7aed70a","modified":1575026262238},{"_id":"themes/next/.git/objects/f4/a21c668be777f1a7fbe7c50c2ab12189e680f3","hash":"aed311f366e81cfb39c32abf27c787f97571bf6c","modified":1575026261743},{"_id":"themes/next/.git/objects/f5/bd0f9aef60c62e77c06dae3a685e1f2ae5032d","hash":"11a895463503d1399cfa3a15beab845dc2364e3f","modified":1568958704224},{"_id":"themes/next/.git/objects/f7/14546ad37e47c5f5a7a93ee91b335f3ace1861","hash":"4e2de4c2a2281f4002f05fd5261e3fc7af985299","modified":1563416717971},{"_id":"themes/next/.git/objects/f6/b667010a192139898ef8d430b5fc3d19c804a5","hash":"b31797245b3936afd5274c6911e5dc10d3d2b293","modified":1568701020348},{"_id":"themes/next/.git/objects/f7/68dc576cc244db4c78d423b4ea74fcfab7cb80","hash":"bccb45afb3f89747da57a163a3c0cdf21358a382","modified":1563416717959},{"_id":"themes/next/.git/objects/f8/849f07b839359aa08fc64dbf760f046315460f","hash":"d710b9d85947114749cb84fabf089f11b191fe24","modified":1563764368403},{"_id":"themes/next/.git/objects/f9/7e3320862185f38712c6e7b3e26ed907165a68","hash":"6e4c85bac5c2c1284d59bdbe0b587d369ce82757","modified":1563793628469},{"_id":"themes/next/.git/objects/f9/e906014897d76b2cc67a1b9baa101f9d8968e0","hash":"a6fe15a8e52732ec255a46e2427a0d3d456cd0f7","modified":1563764364929},{"_id":"themes/next/.git/objects/fa/0c97336b0378d6d9f384403058f25415880976","hash":"cb237aa8f8cd30a2d4c569c75aa36dca6274d4f3","modified":1568877235788},{"_id":"themes/next/.git/objects/fa/6ed20f001caee83c087f7a6174a844a9db8ab7","hash":"f98e2ee2f835c7b560d0eda089e33ea73a4f4c41","modified":1563764364477},{"_id":"themes/next/.git/objects/fa/e31fec3a70b8638627d488e4152cb7c2ecdf02","hash":"c865ab4cf769c8be3d94c54d3fed434fe999ea7d","modified":1568713902279},{"_id":"themes/next/.git/objects/fb/4438b28c70e9cf3cf4ceaf860e17671c15b9a1","hash":"c1a7eec4c22e6f56f4d1e5ddb53f9ddc84d8d3c1","modified":1575026262243},{"_id":"themes/next/.git/objects/fc/426768d158df6ea124adc956ab4e75f23594ac","hash":"dcad0b068e5241859121b6c86aa79cfccb0fa31c","modified":1568979149807},{"_id":"themes/next/.git/objects/fc/b185ab8a05b5f5dea8a4bc1983a8af74e1afc3","hash":"c74b847805604d653829985586dcfb0af59b9de2","modified":1568958704209},{"_id":"themes/next/.git/objects/fc/c73be09ab378aec4157ecdd1df78120f5c8664","hash":"6d5b98681b7575978ba83fde83934a8df4c09169","modified":1575024975130},{"_id":"themes/next/.git/objects/fd/c5b6a762417b34e8a2ea7d6c875415e7c83848","hash":"5b4dec95dce1e8b66dbdfe6df7647ae81a7b76c9","modified":1563764364447},{"_id":"themes/next/.git/objects/fe/396b022079cd3c6b5b2ca1a71aee2d82270fed","hash":"a7426f1faebe2c3eb82eb8b152da38a73a59e801","modified":1563764364849},{"_id":"themes/next/.git/objects/fe/a2082332b93e1277cbad3c4a5ef80f36e20374","hash":"b748653b9eac3b4b9499277119c17ae8576f8f1b","modified":1575024975423},{"_id":"themes/next/.git/objects/ff/0527eb25fc4c84a8896cdd36ea5f34520a7f74","hash":"ee7156ae2cd402f9045c2e5c3e5267592c41d186","modified":1563764364478},{"_id":"themes/next/.git/objects/ff/c3b96631971e19a864109b881f68aefce2c1c7","hash":"9e9d713fc93896760fe781db8fa89eed20085082","modified":1568881985893},{"_id":"themes/next/.git/objects/pack/pack-1362b7cbdeeba0642c99fbbee839596f6a264eb0.idx","hash":"e0d65e0dcc7a9dc84db76f6c3a679cb3f9e0be50","modified":1568711617867},{"_id":"themes/next/.git/objects/pack/pack-1362b7cbdeeba0642c99fbbee839596f6a264eb0.pack","hash":"63ecfe5c0e944c861a937295e381e19fc77f0c53","modified":1568711617867},{"_id":"themes/next/.git/objects/pack/pack-4868790d7fd1ea02f203a1b873e8502451af29cf.idx","hash":"56f7ca8e61c43cbb5b3821f78e08bf0d85d47de6","modified":1570869289939},{"_id":"themes/next/.git/objects/pack/pack-4c752d21db198528757c62a956ddb236042de4cc.idx","hash":"218531feec405db6a3d439dcf8f117a50ac709e2","modified":1548916311354},{"_id":"themes/next/.git/objects/pack/pack-4c854c77e07c3fa78cddcec06a11dad413f6d394.idx","hash":"7b59996f62fca2fe1a4ea0c23fbc33e7a2a5e4ec","modified":1563240952354},{"_id":"themes/next/.git/objects/pack/pack-507a3d81c9dbe0363decaecc36bfbbfc205794ff.idx","hash":"b8d1894faef7e8648d26d3274312af2781d1db59","modified":1585029823357},{"_id":"themes/next/.git/objects/pack/pack-726ba2b8db3d7b1abf88ce21cd910711ec66a27b.idx","hash":"7a23c44017a235442b6fcee8aa00839c7f426e93","modified":1583303076073},{"_id":"themes/next/.git/objects/pack/pack-79c614ceef5cabd04eeea647221a50af3dca214e.idx","hash":"152f8f387a4f1291f7723f438a03eeee5c3bdf8d","modified":1564053168610},{"_id":"themes/next/.git/objects/pack/pack-7cd11b464fded3e757fd7a571cc9ebd54f5d70b8.idx","hash":"32df61cac3b9a450355492fa2487cccd43d1ccaa","modified":1577246287372},{"_id":"themes/next/.git/objects/pack/pack-81f2208af4bdd073662b2e220f02dcf41c1ac227.idx","hash":"260cbb093f43f1cd492c4a11596f06b64c375be2","modified":1585029398576},{"_id":"themes/next/.git/objects/pack/pack-83662d50c8a83f83c2d989c84ec89eb276ac4621.idx","hash":"67c56810404e22f2bde8fa5d57f83b70ea18cb91","modified":1551440729389},{"_id":"themes/next/.git/objects/pack/pack-8d9dfe92fa051c4613133f9b52675d4c8feb1a53.idx","hash":"c75647b9858f26f14cdb521d09e1bb3418567fe6","modified":1583302435252},{"_id":"themes/next/.git/objects/pack/pack-aff469b76c4e023f358e156fbe84f453e35d1357.idx","hash":"deac61445e64f95272af47750fdf522424066b70","modified":1583304477701},{"_id":"themes/next/.git/objects/pack/pack-bdf41ff59ba66aeaae645c349268eea3e9ffff07.idx","hash":"0922e0715898636d4d06dce5b99af6b175bb670d","modified":1575024955305},{"_id":"themes/next/.git/objects/pack/pack-c4aeb6e7fed0d119c52d371bb803993c0bce7ae1.idx","hash":"d3211572a24548a65666980d68e11ec9d160f8a0","modified":1583304661085},{"_id":"themes/next/.git/objects/pack/pack-d63e129f5fbf3ec102fe448bdb8d2c00e04620fa.idx","hash":"7f5182947897818ac5505475c289d835c919a0fa","modified":1564108273771},{"_id":"themes/next/.git/objects/pack/pack-d63e129f5fbf3ec102fe448bdb8d2c00e04620fa.pack","hash":"027cd0e348a6eaf03457dd4030ba0b832cc6925c","modified":1564108273771},{"_id":"themes/next/.git/objects/pack/pack-f8ffd978128d538fe0bf5a338fbdef85dde14844.idx","hash":"794e2c52ceafad60d9e40805ebdf5b0a1c1d22f0","modified":1561715404475},{"_id":"themes/next/layout/_macro/menu/menu-badge 2.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1568699013000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1575025513033},{"_id":"themes/next/layout/_macro/menu/menu-item 2.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1568699013000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1575025513033},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter 2.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics 2.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/index 2.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics 2.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/tencent-mta 2.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1575025513036},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0edd29b972aceecccb65b3e63d79c01f6639d0c5","modified":1575025513040},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"9718d372887f4b0ee952da42d10b2f736d0fc6de","modified":1575025513042},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6236a874b93ac1be56fc21df8534a7ae8acffcfc","modified":1575025513042},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e0767e09a632264f189570e95ccf70fb1dad9110","modified":1575025513044},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"1ba4cd71b826186b7f782bd06258f2ec52a2b491","modified":1575025513045},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"c3a484d7bb15b55e4e48d412b0b30981168be6f3","modified":1575025513048},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1568699013452},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1575025513050},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"b68ccb90e2ee42bd98c93fc030a29d38689dd55c","modified":1575025513052},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1575025513053},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f05225f7d0ada3853c425899b515056b96ca49bf","modified":1575025513053},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"90a0869c6cc351d92fc97bf42fdc6e1bfa6bc513","modified":1575025513054},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1575025513054},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1568699013455},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1568699013455},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1568699013455},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"4e71b26d91ab750791f3be6035a946eb96ca7b34","modified":1575025513055},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1575025513057},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1575025513058},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1575025513065},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1568699013458},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1568699013458},{"_id":"themes/next/layout/_third-party/analytics/application-insights 2.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1568699013000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1575025513066},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1568699013459},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1575025513066},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1575025513066},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1575025513067},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1568699013461},{"_id":"themes/next/layout/_third-party/chat/index 2.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1568699013000},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1575025513067},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1568699013461},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1568699013462},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1575025513067},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1575025513068},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1575025513069},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1568699013463},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ab937195168a0e8a911bf5730307f680e6d521e9","modified":1575025513070},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1575025513071},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"b9d7a99534e9c2608765b958eae3b5c50f5e4889","modified":1575025513071},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1575025513071},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1575025513072},{"_id":"themes/next/layout/_third-party/search/index 2.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1568699013000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1575025513072},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1568699013466},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1568699013682},{"_id":"themes/next/layout/_third-party/tags/index 2.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1568699013000},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1575025513072},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1575025513076},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1575025513076},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b710d896fccd34657a70244645470e476a4e069f","modified":1575025513083},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1568699013470},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1575025513087},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1575025513088},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1568699013471},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1568699013472},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1575025513089},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1575025513089},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1568699013472},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1575025513091},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1568699013473},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1575025513092},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1575025513092},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1568699013551},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1568699013551},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1575025513136},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1575025513144},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"14e4bd0bd702c7a7f83bf7d529fade2d0634c2f1","modified":1575025513145},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1e99dfbe7736acfee59d6f54dbd6b33ddfe2fe8a","modified":1575025513145},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1575025513146},{"_id":"themes/next/source/css/_variables/base.styl","hash":"639b65a486154cf1f70c31f3fff440ce022255c0","modified":1575025513146},{"_id":"themes/next/source/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1575025513149},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1575025513149},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527762077878},{"_id":"themes/next/source/lib/Han/README.md","hash":"572a02d6dfcb37f35eb47339862da6fddae00826","modified":1527762077878},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766406256},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"bf7819cbb879bb82ec1097513d8f799df8835e0f","modified":1527766406256},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527766406257},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766851795},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"07e86d67c508a3f974c45ff61cd0760d79bcebc5","modified":1527766851796},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527766851796},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1527765617926},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1527765617927},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1527765617928},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1527765617928},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1527765884742},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527765884742},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"a79e7b87a27497922f34e1013d7299f838badc79","modified":1527765884743},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1527765884743},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527752362874},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527752362874},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527752362877},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527752362874},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527752362878},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527746142163},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527746142164},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527765966667},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1527765966667},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527765966668},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527765966668},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527765966668},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527765966669},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527765966669},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527765966671},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527765966671},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527765966673},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527765966673},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527765966675},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527765966676},{"_id":"themes/next/source/lib/pangu/LICENSE","hash":"41ba9068d26515f43fa44a3f975f016c06171ef4","modified":1527762043722},{"_id":"themes/next/source/lib/pangu/README.md","hash":"07eeb2e7ecec3f182d898fe3ec737d1aca634b82","modified":1527762043722},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"c064a6369e31f846061fec42fd20c94cd34baebf","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"cdbc258b29270771e1846aeacc67198d0aed5447","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"af77252405d1ae97b1d4139b53f2684b64d87596","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"0948420e18b2cec89c40093da5c7c14fa4c9bc5d","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"4482a245ac2c867102490c71d0fcbb502be0e3e5","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/README.md","hash":"51abff31a95ce17360dbf1f43807d3eb75023c98","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/package.json","hash":"2ca53bb41de64dca00d8b0fc9ef6249fba445a8f","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"d37d773dbb45633fb4df1e8b75b8e0830cf2cf31","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"7cd20a50053da5563cf1a24c10401a13e6eab4e6","modified":1568702634081},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766422633},{"_id":"themes/next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1527766422634},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527766422636},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527766422636},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527766422637},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527752362894},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527752362895},{"_id":"source/media/花木兰/11.jpg","hash":"9bce83bca3d73ac859f1fff522dc7fe95a1afd3e","modified":1568732650000},{"_id":"themes/next/.git/objects/47/9ebe65f2f12a808ce324ef15a5bd63aaeb4404","hash":"940c3a07527396c2b8ea4dc3b68cd22f792a12f2","modified":1575024975442},{"_id":"themes/next/.git/objects/f2/a16842aea74cc3266f92a2aa1ed2e796baced9","hash":"cfc305a8d277f0b8da357fffbbe6577f26e3edda","modified":1575024975615},{"_id":"themes/next/.git/objects/fb/8161640a4ab81e3ff45b15652efb008945f494","hash":"edd8334b3e50f633f796af2c532bb0693fb25bd6","modified":1575026262231},{"_id":"themes/next/.git/objects/pack/pack-3ed9fd21e5decb57cbe7d733be85bf5e38e391ee.idx","hash":"05a19ca78d508cc64e8f1096cab127dbaf34fb67","modified":1568697627967},{"_id":"themes/next/.git/objects/pack/pack-83662d50c8a83f83c2d989c84ec89eb276ac4621.pack","hash":"f93c6f7adcb62ac267545da426962a646be9f6b8","modified":1551440729388},{"_id":"themes/next/.git/objects/pack/pack-866c7527085bf5b3bb71a2d719241d45025577fc.idx","hash":"558c37a256b1742c1ec15bc196b661b66cbb1e67","modified":1579248795333},{"_id":"themes/next/.git/objects/pack/pack-90166903e8ef7b86526be4c1292de80ef12f49d5.idx","hash":"39aa81567219ab0fa4936dcfe5786aaff062bb7e","modified":1583896242007},{"_id":"themes/next/.git/objects/pack/pack-a4fcdc916028901217fe01bd511cf84f276c99f5.idx","hash":"64f7a99a28035044407ec604bc020ca660c4aa96","modified":1527752362625},{"_id":"themes/next/.git/objects/pack/pack-d96767940915332ee1a61ed8c6daf68518b281ef.idx","hash":"dc6f01494d1bc3ee2eff98d6298c59709153137d","modified":1583299845099},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527746142163},{"_id":"source/media/花木兰/12.jpeg","hash":"0eb646ba221674f9de605fe2332b3845afdad7e6","modified":1568958874153},{"_id":"themes/next/.git/logs/refs/heads/coding","hash":"7e344f79fae0538387a7e3035e22241ffa2bddcb","modified":1568697931043},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"60c6c2c5a19be185c71ded162bbaafa27fdf34e1","modified":1570870072337},{"_id":"themes/next/.git/logs/refs/heads/origin","hash":"a0b111e349fac89067e432c89f8065cc5290dc18","modified":1568697906486},{"_id":"themes/next/.git/refs/remotes/origin/GP","hash":"a64be7df71eebe97aa06c6729b56cd802f2637e1","modified":1561715404516},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527752362652},{"_id":"themes/next/.git/refs/remotes/origin/can","hash":"036e7c1319c0badc0cdb9d95be4c96c36e45cd0b","modified":1570869289996},{"_id":"themes/next/.git/refs/remotes/origin/coding-pages","hash":"edcc94c0eda5afa7b06406043c3c372c6de3282e","modified":1585029823594},{"_id":"themes/next/.git/refs/remotes/origin/count","hash":"556a4cc5100e75fee5d724fbb3f0c15d89a77bf9","modified":1563416718029},{"_id":"themes/next/.git/refs/remotes/origin/disqus","hash":"d2a0aa8c3cca094867aa6d869fb602bb643c7e69","modified":1570869289998},{"_id":"themes/next/.git/refs/remotes/origin/escape","hash":"9eff621dda1bcdafee862e0df712319ee522c778","modified":1568713902307},{"_id":"themes/next/.git/refs/remotes/origin/font","hash":"59274b8353ab2e23b9da6c6da0f65a6df2a6cd3e","modified":1564113948919},{"_id":"themes/next/.git/refs/remotes/origin/ext-font","hash":"d3e2535508cf9325242984449d7b4b167b47dc5f","modified":1564113948918},{"_id":"themes/next/.git/refs/remotes/origin/font-refactoring","hash":"565b214aef0038b43fc7e0290c27211c681343db","modified":1564053168640},{"_id":"themes/next/.git/refs/remotes/origin/front-matter","hash":"1dea2bedc4dd5b9887971666bf1f7935dae7a052","modified":1570869290000},{"_id":"themes/next/.git/refs/remotes/origin/gitcafe-pages","hash":"b90fbe87951190677ca5d0fdafe6266be5cca3fb","modified":1570870202707},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"6317d945be222c0a6107591c4034a1c7c57b51d0","modified":1575024955352},{"_id":"themes/next/.git/refs/remotes/origin/muse","hash":"aedbc329a894e34ed4deb0613cd9830f9c9d5fd3","modified":1564108273801},{"_id":"themes/next/.git/refs/remotes/origin/next","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1570870174538},{"_id":"themes/next/.git/refs/remotes/origin/njk","hash":"c5d205b2e0c216b7063648d6b78efbb13217a759","modified":1570869290001},{"_id":"themes/next/.git/refs/remotes/origin/preview-image","hash":"d8b09c15354a25f12289ca63414b2883f443d626","modified":1568697628020},{"_id":"themes/next/.git/refs/remotes/origin/router","hash":"6fb7c881e4ccf5db8d1617d158edf662b5b8c986","modified":1563793628509},{"_id":"themes/next/.git/refs/remotes/origin/script","hash":"5bded4508498e690d80a90f962fc313cf536085d","modified":1570869290002},{"_id":"themes/next/.git/refs/remotes/origin/search","hash":"7529119f15a86e24c82e992447a6d2b36f078a5c","modified":1564108273801},{"_id":"themes/next/.git/refs/remotes/origin/src","hash":"72b37d3ef6d0f4c2bdf47b7b3733cdee0060ba57","modified":1585029823597},{"_id":"themes/next/.git/refs/remotes/origin/style","hash":"eb23dbe99f9875cfa20b2cd20a3343de28522c79","modified":1570869290006},{"_id":"themes/next/.git/refs/remotes/origin/three","hash":"5617d255aaf98a202f4b6632d56952319d7f0d89","modified":1568697628025},{"_id":"themes/next/.git/refs/remotes/origin/v6.x","hash":"81f1073f2bd2f1e1b3e13e260043918e8c458cae","modified":1548916311408},{"_id":"themes/next/.git/refs/remotes/origin/warn","hash":"023f16a67197bc9e6f298bad21b8f04897623bfd","modified":1564053168642},{"_id":"themes/next/.git/objects/pack/pack-79c614ceef5cabd04eeea647221a50af3dca214e.pack","hash":"335088aa3dd1c2a69002910468dbeaf37485c51e","modified":1564053168610},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1575025513104},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1575025513105},{"_id":"themes/next/source/css/_common/components/buttons 2.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1575025513107},{"_id":"themes/next/source/css/_common/components/comments 2.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1575025513108},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1575025513110},{"_id":"themes/next/source/css/_common/components/pagination 2.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1575025513120},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1575025513125},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1575025513126},{"_id":"themes/next/source/css/_common/components/scrollbar 2.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1575025513126},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b6b9dc8a350e51ad7b8bb08141a61fc2fd7466fc","modified":1575025513133},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"cb25eed35117be256ea7a573fec2cdfb66901dbb","modified":1575025513133},{"_id":"themes/next/source/css/_common/scaffolding/helpers 2.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1568699013000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/mobile 2.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1568699013000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1575025513135},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1575025513135},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c42802ecca44d4ea435c26700070a65375edfd7c","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_base 2.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_logo 2.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"73fe940abb0787a19f505fb614aafe73c8a24f08","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"dc2a3217f9b50cf42c4262c9e486281203eaef83","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e859283440617f18f1ad298f7f1218aafa9b39d5","modified":1575025513140},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1575025513140},{"_id":"themes/next/source/css/_schemes/Muse/_logo 2.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1575025513141},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b22583b7340c2686a46aefeeed086540b08324a3","modified":1575025513141},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1568699013602},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1575025513142},{"_id":"themes/next/source/css/_schemes/Pisces/_brand 2.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1575025513142},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2ab9e0499f241d1b91e2f7722072d23c95104e1f","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ac523812bebb13cde268dc3cde65d0b7c6862e30","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44ac3dff65c1bd3fe47feeed8e58aa00c9f2fb7b","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"3bcb47b9b9ea671e0a3cba6a821045d3434734cb","modified":1575025513144},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1575025513144},{"_id":"themes/next/source/lib/Han/.git/FETCH_HEAD","hash":"537c3549cfa4afbdc8521eb28284118da98b2179","modified":1568698917711},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527762077871},{"_id":"themes/next/source/lib/Han/.git/config","hash":"a3f105c8a521127ed214de7c66afe2fc5bbd7538","modified":1527762077874},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527762070789},{"_id":"themes/next/source/lib/Han/.git/index","hash":"90863eeeff6002736cd51fe46278040987920019","modified":1527762077883},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"6e2c4e71af7f142cc38f974c70328b7b85a30e91","modified":1527762077869},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527762077882},{"_id":"themes/next/source/lib/canvas-nest/.git/FETCH_HEAD","hash":"256739712ff7d85a89dfcd10e8b34671f638d85e","modified":1568698916385},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527762077883},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766406246},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1527766406252},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766400335},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"e1862a814ddce065c28962fabd7c3bfa979ed0d8","modified":1527766406257},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"60cebf9a6bcd88fd6b2132480cdef3ebf7a7dcf7","modified":1527766406242},{"_id":"themes/next/source/lib/canvas-ribbon/.git/FETCH_HEAD","hash":"aa1c4076e7151c84e7dffb6ce24b4a7f4965432d","modified":1568698916139},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766851785},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1527766851788},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766845898},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"1217f6699e9e5bb563d14c3dffd12178bbbaa9eb","modified":1527766851797},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"35076774be8e5f297f34b1efbd310b067d4601b7","modified":1527766851782},{"_id":"themes/next/source/lib/fancybox/.git/FETCH_HEAD","hash":"88c20c9a05d253b4ed9ccd39199305ecb0d2b8de","modified":1568698922912},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765617909},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1527765617915},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765600896},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"dae07f22ced998d3ba77ce23bbab6d474114c96f","modified":1527765617935},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1527765617905},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1527765617929},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1527765617931},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1527765617932},{"_id":"themes/next/source/lib/fastclick/.git/FETCH_HEAD","hash":"5179043b158d54b4952a2ba0a9b7cc2f83c77e32","modified":1568698916358},{"_id":"themes/next/source/lib/fastclick/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765884732},{"_id":"themes/next/source/lib/fastclick/.git/config","hash":"b355df77af94588e555c06b72b2073ad4e697feb","modified":1527765884736},{"_id":"themes/next/source/lib/fastclick/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765879987},{"_id":"themes/next/source/lib/fastclick/.git/index","hash":"741e235a404a41a6e09d10618a8bce8f2e04542f","modified":1527765884744},{"_id":"themes/next/source/lib/fastclick/.git/packed-refs","hash":"3fc39e985e9f6593f545758c828d9e0c2f1e4f02","modified":1527765884727},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527765884743},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527765884744},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527752362880},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527752362881},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527752362881},{"_id":"themes/next/source/lib/pace/.git/FETCH_HEAD","hash":"00d380218db271385430bce53bfd4c4806226938","modified":1568698917148},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765966660},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1527765966662},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765957997},{"_id":"themes/next/source/lib/pace/.git/index","hash":"951ec74e28f148145da7db4a1da0f2352d54ff81","modified":1527765966676},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"2423e57d7b82d584aa814481ceeff0055b991cda","modified":1527765966658},{"_id":"themes/next/source/lib/pangu/.git/FETCH_HEAD","hash":"68177a5d89f41f4867d55712093b464693c3e7bc","modified":1568698916024},{"_id":"themes/next/source/lib/pangu/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527762043714},{"_id":"themes/next/source/lib/pangu/.git/config","hash":"4a81d1732b46502bf07bec02936b1b7aca117b4b","modified":1527762043717},{"_id":"themes/next/source/lib/pangu/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527762038449},{"_id":"themes/next/source/lib/pangu/.git/index","hash":"12da4d5b60236ac6d1f961344ff939aef79bf38f","modified":1527762043724},{"_id":"themes/next/source/lib/pangu/.git/packed-refs","hash":"53b18dbcc9940bac320a19779536f55b17810585","modified":1527762043711},{"_id":"themes/next/source/lib/pangu/dist/pangu.js","hash":"8f2c5a78edf77a7e4a6d04e7dd568d544cc93737","modified":1527762043723},{"_id":"themes/next/source/lib/pangu/dist/pangu.js.map","hash":"6a7c5927e3410ed4dfe14caa9fb2eb115d85e5e7","modified":1527762043723},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js","hash":"9887d0641d828b330969dc2f81f6d45a1e97be2c","modified":1527762043723},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js.map","hash":"1aa0d935665a2f075bbc4b5f0a53bbfaece12c5b","modified":1527762043724},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1568702634047},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"b668d1d9a28843557320d14b8660f46e0eeb76d7","modified":1568702634051},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568702571594},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"7745f189bb170d30a749d23c1d776cd32670c565","modified":1568702634088},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"8025ebef1dbce2adfb3c41109f696a817df9ca71","modified":1568702634043},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1568702634070},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1568702634071},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1568702634072},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1568702634073},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1568702634074},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1568702634080},{"_id":"themes/next/source/lib/pjax/tests/.DS_Store","hash":"8f88ccc54ec777df39e223a0f6f44dac6848d878","modified":1583893985880},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1568702634087},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1568702634087},{"_id":"themes/next/source/lib/three/.git/FETCH_HEAD","hash":"d562b20891423afcdbc8063f2ee5cec29beeb3dc","modified":1568698917954},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766422624},{"_id":"themes/next/source/lib/three/.git/config","hash":"65f90ae2568e8c72066580065d3e1df0d03f415c","modified":1527766422627},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766417246},{"_id":"themes/next/source/lib/three/.git/index","hash":"e0bc31464d0aab408a9bcab91e262b14f2ccbd3a","modified":1527766422642},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"3e9cbba9f328f4378f17624962e553d1a6020e3f","modified":1527766422621},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1527762077880},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1527762077881},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1527752362884},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1527752362887},{"_id":"themes/next/.git/logs/refs/remotes/origin/GP","hash":"91a93cf01ffa9216cc3e281a7f32b06956445c1d","modified":1561715404516},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"7b81854ddef6b2ecca8179f911e8f5c80d9544ef","modified":1527752362652},{"_id":"themes/next/.git/logs/refs/remotes/origin/can","hash":"e9f44075fb47a1d7855f0128ae263be96cef7cab","modified":1570869289996},{"_id":"themes/next/.git/logs/refs/remotes/origin/coding-pages","hash":"4cee18b39dd476b5f9c54c76d97c739c84e359e0","modified":1585029823596},{"_id":"themes/next/.git/logs/refs/remotes/origin/count","hash":"5f99f808ba992c3330e80071c37911244bdda49e","modified":1563416718029},{"_id":"themes/next/.git/logs/refs/remotes/origin/disqus","hash":"fd6b6152014137f98b62c6564926802cbb7cafc2","modified":1570869289999},{"_id":"themes/next/.git/logs/refs/remotes/origin/escape","hash":"42e26d7236b42dfd35b5e9c3439342ecfa120644","modified":1568713902310},{"_id":"themes/next/.git/logs/refs/remotes/origin/ext-font","hash":"2ef5bf7765b5c662d4c17524d008b7d5c49a7b32","modified":1564113948918},{"_id":"themes/next/.git/logs/refs/remotes/origin/font","hash":"3c8386a4ec56e10e4f5b21bc04abeeda4969622a","modified":1564113948920},{"_id":"themes/next/.git/logs/refs/remotes/origin/font-refactoring","hash":"4835ff7d235d44f0e4b391d90ed3fac9b3ebf8de","modified":1564053168640},{"_id":"themes/next/.git/logs/refs/remotes/origin/front-matter","hash":"74a766b9d7a1c04c15d14934851c9ea1de358da1","modified":1570869290000},{"_id":"themes/next/.git/logs/refs/remotes/origin/gitcafe-pages","hash":"9e1ae051d077c8578dfeb193d99ba9ae286a291a","modified":1570870202707},{"_id":"themes/next/.git/logs/refs/remotes/origin/master","hash":"e9bf1ec71480ecf821a5d8e234598125ecfd17d1","modified":1575024955354},{"_id":"themes/next/.git/logs/refs/remotes/origin/muse","hash":"1e3ea53ea183b5f22177d3222e87a407d9988533","modified":1564108273801},{"_id":"themes/next/.git/logs/refs/remotes/origin/next","hash":"d8ddbb8e8b09990730c61359fb10cd753d6ae6c2","modified":1570870174539},{"_id":"themes/next/.git/logs/refs/remotes/origin/njk","hash":"9d7abccab5b5be8f888bd3989fb89443c6512d66","modified":1570869290001},{"_id":"themes/next/.git/logs/refs/remotes/origin/preview-image","hash":"89be1ff899691deff7734f5a4e5e3fda98468864","modified":1568697628021},{"_id":"themes/next/.git/logs/refs/remotes/origin/router","hash":"4e362c8f0dcfe6a544717ef594bf6f94ee90b5db","modified":1563793628510},{"_id":"themes/next/.git/logs/refs/remotes/origin/script","hash":"8f27afcf62dd5f5f4184d139194369a066b2bab1","modified":1570869290002},{"_id":"themes/next/.git/logs/refs/remotes/origin/search","hash":"de0316d49b5c3ec63489f857e413547dbfdd50a1","modified":1564108273801},{"_id":"themes/next/.git/logs/refs/remotes/origin/src","hash":"cff4f2153aec3f287e0ba5bc64e12175a6056a41","modified":1585029823597},{"_id":"themes/next/.git/logs/refs/remotes/origin/style","hash":"ff69b2d9ce2e3280e2df9736728459a3cbe16c5b","modified":1570869290006},{"_id":"themes/next/.git/logs/refs/remotes/origin/three","hash":"6e300a4b40889f78e9164ae6f133b05e72311639","modified":1568697628025},{"_id":"themes/next/.git/logs/refs/remotes/origin/v6.x","hash":"ad6593856a57d5002ed981f88b567e5200253fc7","modified":1548916311408},{"_id":"themes/next/.git/logs/refs/remotes/origin/warn","hash":"8948c7addae87b0a913bd56b593fb605a9b81558","modified":1564053168642},{"_id":"themes/next/.git/objects/pack/pack-25fa465e62ad18b2b4a11d50793c31fe5fca9d8a.idx","hash":"7fe355459a300d18d35def4ac06fdd21bdf059f5","modified":1585021364243},{"_id":"themes/next/.git/objects/pack/pack-4868790d7fd1ea02f203a1b873e8502451af29cf.pack","hash":"4dd42c06a8f695a9d7a689c0fbaaa365fb2aa7a8","modified":1570869289937},{"_id":"themes/next/.git/objects/pack/pack-4c854c77e07c3fa78cddcec06a11dad413f6d394.pack","hash":"00e4dfa64f23962a45338eb05618141c8c2a290d","modified":1568700998000},{"_id":"themes/next/.git/objects/pack/pack-726ba2b8db3d7b1abf88ce21cd910711ec66a27b.pack","hash":"ab8734129324cf7ead091f3c59fb0b34e468d4dc","modified":1583303076072},{"_id":"themes/next/source/css/_common/components/footer/footer 2.styl","hash":"caf2abcffa5674adea300046fd3dbee2e830b40e","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"caf2abcffa5674adea300046fd3dbee2e830b40e","modified":1575025513115},{"_id":"themes/next/source/css/_common/components/header/bookmark 2.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/bookmark.styl","hash":"e02b1097a72a7d2ddc45ea8d53aa6d77c25ac407","modified":1575025513116},{"_id":"themes/next/source/css/_common/components/header/github-banner 2.styl","hash":"386fce803e5240c2d6860ae53f38ae3aa2e8b680","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"386fce803e5240c2d6860ae53f38ae3aa2e8b680","modified":1575025513116},{"_id":"themes/next/source/css/_common/components/header/header 2.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"1bfa07d40ceb03b0b69a5752478ca555723f7a15","modified":1575025513116},{"_id":"themes/next/source/css/_common/components/header/headerband 2.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"0caf32492692ba8e854da43697a2ec8a41612194","modified":1575025513118},{"_id":"themes/next/source/css/_common/components/header/menu 2.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"139c17e7d4aa3e1112340a26a270efe58c279f8e","modified":1575025513118},{"_id":"themes/next/source/css/_common/components/header/site-meta 2.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"dada73ae88f01fab2ab4d2c83eddfc558de2110a","modified":1575025513119},{"_id":"themes/next/source/css/_common/components/header/site-nav 2.styl","hash":"4718d17fc4ee30802925890771a032d966133a31","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"4718d17fc4ee30802925890771a032d966133a31","modified":1575025513119},{"_id":"themes/next/source/css/_common/components/highlight/copy-code 2.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/highlight/copy-code.styl","hash":"2124abd41b69ff152f4bb39e78d8fbce96a45c65","modified":1575025513119},{"_id":"themes/next/source/css/_common/components/highlight/diff 2.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"d3f73688bb7423e3ab0de1efdf6db46db5e34f80","modified":1575025513119},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"4efe9174369bfe2125bd167feac18a07271635d6","modified":1575025513120},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"a67dc85f6d158dac20e951ab55988ff7e9e1739b","modified":1575025513120},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fafc96c86926b22afba8bb9418c05e6afbc05a57","modified":1568699013485},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"2bd0eb1512415325653b26d62a4463e6de83c5ac","modified":1568699013486},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1568699013486},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"919cc9aaf60b03c2bf00aca3748127f38a2026cf","modified":1575025513120},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"7ddb7453bf9b85b01bff136e9d10a7f06baac9e8","modified":1568699013675},{"_id":"themes/next/source/css/_common/components/post/.post-button 2.styl.icloud","hash":"12e932e1e57b97be21874faf42723ef7fa9926cd","modified":1527752362000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1575025513121},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"ac2105c5a7f581b1c0f2b59f2c0c3e87a7c28383","modified":1575025513122},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"3abf46c513e92f3f36c14d90f032983b94f36488","modified":1575025513122},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"602a3c3d2785965b23412b5c219dfe74b5fb0844","modified":1575025513123},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"db718eee14347f30ccabaa33bf6f9fbdea8b9462","modified":1575025513121},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"caa9a78993d549117cdc8fa7a76c473a5e7f0f67","modified":1575025513123},{"_id":"themes/next/source/css/_common/components/post/post-meta 2.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"c60afb603d58cad3ad13e1a16c66832538510063","modified":1575025513123},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"2e2a09dddd2a394a635bcefb6207b6cddcb784c7","modified":1575025513123},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"541d6257023915a7caca7540f12cdf283ce025f3","modified":1575025513124},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"f5c2788a78790aca1a2f37f7149d6058afb539e0","modified":1568699013489},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"469d5e4e188f484abff24eddd5640fa4d4d77ed1","modified":1575025513124},{"_id":"themes/next/source/css/_common/components/post/post-title 2.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"5da763d541540586ccd13868a36e3da55549eb22","modified":1575025513124},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"8b6481a0ac60007cf3defa3c9d85a6e412c91d6e","modified":1575025513125},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"e77986ca3b914348b5c3c6b34c94b49ad53e4b9c","modified":1575025513125},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar 2.styl","hash":"17c3f58fb84453603621d6a718fcc821c8d6bced","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author 2.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links 2.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2ef546b4cfa5038ebb050c592c5135bbeb51af41","modified":1575025513127},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9b3ff4aa24069eab0e9771437013f45e450d4217","modified":1575025513128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll 2.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"95339b71ac90553fb1634c536c9749055e0c788a","modified":1575025513128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button 2.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"41ccae779f918e6f9f5f625789a7360f1362454c","modified":1575025513128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer 2.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"d055f8420583c7a009818dcdfaada592308bd628","modified":1575025513128},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav 2.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"f3108a247549fbdf11071d023add3f1b34ad2b23","modified":1575025513129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc 2.styl","hash":"db44ef2b99fc33d003010f38e64caad930c08ad0","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"db44ef2b99fc33d003010f38e64caad930c08ad0","modified":1575025513129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle 2.styl","hash":"782cf8847c9aca96f9194fcf1d910509e4073ce6","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"782cf8847c9aca96f9194fcf1d910509e4073ce6","modified":1575025513129},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"17c3f58fb84453603621d6a718fcc821c8d6bced","modified":1575025513129},{"_id":"themes/next/source/css/_common/components/sidebar/site-state 2.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"02e5a998748a67fa885fb06fae242bcf3f2786fb","modified":1575025513129},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center 2.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"0527bc64708a9446dc7bbb2c7e39ab3a61251c26","modified":1575025513130},{"_id":"themes/next/source/css/_common/components/tags/group-pictures 2.styl","hash":"514999bde116ef5cd5f7aedea80059b12a87a1ea","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"514999bde116ef5cd5f7aedea80059b12a87a1ea","modified":1575025513130},{"_id":"themes/next/source/css/_common/components/tags/label 2.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"78d309e22206a4addda3c393282518dae02250ed","modified":1575025513130},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"a1eed8fe7f97885a9234502a197abf2e90ba22b6","modified":1575025513131},{"_id":"themes/next/source/css/_common/components/tags/pdf 2.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"2dc2a5b7becb11de1d4bdab6b5195588ae878cfc","modified":1575025513131},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"754f70161b7e810f582cc4755d177859dcbcfced","modified":1575025513131},{"_id":"themes/next/source/css/_common/components/tags/tags 2.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"9e4c0653cfd3cc6908fa0d97581bcf80861fb1e7","modified":1575025513131},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1568699013533},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1568699013533},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"85b8606763f4177d2f9a11c1909a21ab1ae2011c","modified":1575025513132},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"38ce7d692b8bc6fde02e3271dfd50ad37e107e4e","modified":1575025513132},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4525465f40f82bd66e5f34e986440c75a9e2d2b2","modified":1575025513132},{"_id":"themes/next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527762070791},{"_id":"themes/next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527762070789},{"_id":"themes/next/source/lib/Han/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527762070791},{"_id":"themes/next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527762070792},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527762070792},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527762070790},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527762070792},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527762070790},{"_id":"themes/next/source/lib/Han/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527762070791},{"_id":"themes/next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527762070791},{"_id":"themes/next/source/lib/Han/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527762070793},{"_id":"themes/next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527762070789},{"_id":"themes/next/source/lib/Han/.git/logs/HEAD","hash":"45249da8844720fd8067eafeae8fb3cd6a2e41d7","modified":1527762077872},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1527762077878},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1527762077878},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1527762077879},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1527762077880},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1527762077880},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527766400337},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527766400340},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527766400343},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527766400345},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527766400346},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527766400339},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527766400348},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527766400338},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527766400344},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527766400348},{"_id":"themes/next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527766400344},{"_id":"themes/next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527766400335},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/HEAD","hash":"91684b5ef7e0b7fa4dea353b6404a158d77b06b0","modified":1527766406248},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527766845899},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527766845898},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527766845900},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527766845902},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527766845902},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527766845899},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527766845902},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527766845898},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527766845901},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527766845901},{"_id":"themes/next/source/lib/canvas-ribbon/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527766845903},{"_id":"themes/next/source/lib/canvas-ribbon/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527766845897},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/HEAD","hash":"a630ee31162de980ffa8b7c92727bb1d6206deb9","modified":1527766851787},{"_id":"themes/next/source/lib/fancybox/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527765600915},{"_id":"themes/next/source/lib/fancybox/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527765600911},{"_id":"themes/next/source/lib/fancybox/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527765600924},{"_id":"themes/next/source/lib/fancybox/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527765600929},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527765600930},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527765600915},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527765600931},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527765600914},{"_id":"themes/next/source/lib/fancybox/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527765600928},{"_id":"themes/next/source/lib/fancybox/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527765600929},{"_id":"themes/next/source/lib/fancybox/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527765600931},{"_id":"themes/next/source/lib/fancybox/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527765600883},{"_id":"themes/next/source/lib/fancybox/.git/logs/HEAD","hash":"0cf7f89a3f2789de80853bcae7d2515c50d6869e","modified":1527765617911},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1527765617934},{"_id":"themes/next/source/lib/fastclick/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527765879989},{"_id":"themes/next/source/lib/fastclick/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527765879988},{"_id":"themes/next/source/lib/fastclick/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527765879989},{"_id":"themes/next/source/lib/fastclick/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527765879990},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527765879990},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527765879988},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527765879991},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527765879988},{"_id":"themes/next/source/lib/fastclick/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527765879990},{"_id":"themes/next/source/lib/fastclick/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527765879990},{"_id":"themes/next/source/lib/fastclick/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527765879991},{"_id":"themes/next/source/lib/fastclick/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527765879987},{"_id":"themes/next/source/lib/fastclick/.git/logs/HEAD","hash":"63dd5a9ef18398e4c4f1ce54069520cef6a2fbac","modified":1527765884734},{"_id":"themes/next/source/lib/pace/.git/logs/HEAD","hash":"fb5be2eb1ff7345e1672a616e0641d4b635cfcb9","modified":1527765966660},{"_id":"themes/next/source/lib/pace/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527765958004},{"_id":"themes/next/source/lib/pace/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527765957998},{"_id":"themes/next/source/lib/pace/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527765958004},{"_id":"themes/next/source/lib/pace/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527765958010},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527765958011},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527765958002},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527765958011},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527765958002},{"_id":"themes/next/source/lib/pace/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527765958005},{"_id":"themes/next/source/lib/pace/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527765958009},{"_id":"themes/next/source/lib/pace/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527765958012},{"_id":"themes/next/source/lib/pace/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527765957997},{"_id":"themes/next/source/lib/pangu/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527762038451},{"_id":"themes/next/source/lib/pangu/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527762038449},{"_id":"themes/next/source/lib/pangu/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527762038451},{"_id":"themes/next/source/lib/pangu/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527762038452},{"_id":"themes/next/source/lib/pangu/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527762038453},{"_id":"themes/next/source/lib/pangu/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527762038451},{"_id":"themes/next/source/lib/pangu/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527762038453},{"_id":"themes/next/source/lib/pangu/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527762038450},{"_id":"themes/next/source/lib/pangu/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527762038452},{"_id":"themes/next/source/lib/pangu/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527762038452},{"_id":"themes/next/source/lib/pangu/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527762038454},{"_id":"themes/next/source/lib/pangu/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527762038448},{"_id":"themes/next/source/lib/pangu/.git/logs/HEAD","hash":"b4a7f77d935c5ed593210befbc4457ca598d0cce","modified":1527762043715},{"_id":"themes/next/source/lib/pjax/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1568702571596},{"_id":"themes/next/source/lib/pjax/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1568702571595},{"_id":"themes/next/source/lib/pjax/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1568702571596},{"_id":"themes/next/source/lib/pjax/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1568702571597},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1568702571598},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1568702571595},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1568702571598},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1568702571595},{"_id":"themes/next/source/lib/pjax/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1568702571597},{"_id":"themes/next/source/lib/pjax/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1568702571597},{"_id":"themes/next/source/lib/pjax/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1568702571599},{"_id":"themes/next/source/lib/pjax/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1568702571593},{"_id":"themes/next/source/lib/pjax/.git/logs/HEAD","hash":"cf0a217f05ec8b452bd6929931f2f516c798b7bc","modified":1568702634048},{"_id":"themes/next/source/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1568702634069},{"_id":"themes/next/source/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1568702634069},{"_id":"themes/next/source/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1568702634070},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1568702634075},{"_id":"themes/next/source/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1568702634075},{"_id":"themes/next/source/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1568702634076},{"_id":"themes/next/source/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1568702634077},{"_id":"themes/next/source/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1568702634078},{"_id":"themes/next/source/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1568702634080},{"_id":"themes/next/source/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1568702634080},{"_id":"themes/next/source/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1568702634080},{"_id":"themes/next/source/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1568702634082},{"_id":"themes/next/source/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1568702634083},{"_id":"themes/next/source/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1568702634083},{"_id":"themes/next/source/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1568702634084},{"_id":"themes/next/source/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1568702634084},{"_id":"themes/next/source/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1568702634084},{"_id":"themes/next/source/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1568702634085},{"_id":"themes/next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527766417247},{"_id":"themes/next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527766417248},{"_id":"themes/next/source/lib/three/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527766417248},{"_id":"themes/next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527766417249},{"_id":"themes/next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527766417249},{"_id":"themes/next/source/lib/three/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527766417247},{"_id":"themes/next/source/lib/three/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527766417249},{"_id":"themes/next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527766417247},{"_id":"themes/next/source/lib/three/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527766417248},{"_id":"themes/next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527766417249},{"_id":"themes/next/source/lib/three/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527766417250},{"_id":"themes/next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527766417246},{"_id":"themes/next/source/lib/three/.git/logs/HEAD","hash":"a161c1335a12e34495ed08772e246625ed0a9a31","modified":1527766422625},{"_id":"source/media/git-lg效果图.png","hash":"1243285b2be263972a6970c162b6364a2cb1b973","modified":1568771148950},{"_id":"themes/next/.git/objects/pack/pack-bdf41ff59ba66aeaae645c349268eea3e9ffff07.pack","hash":"c9571e2d95c2793287e09d88a386a44af8a5bb34","modified":1575024955301},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1527765617931},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1527752362883},{"_id":"themes/next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1527762077041},{"_id":"themes/next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1527762077042},{"_id":"themes/next/source/lib/Han/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698917697},{"_id":"themes/next/source/lib/Han/.git/objects/12/e5ad35b941c6dc1c10c0db6a04cd7bc7136d79","hash":"65020d9c30858a2131ec75547ad8daff94916274","modified":1568698917696},{"_id":"themes/next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1527762077848},{"_id":"themes/next/source/lib/Han/.git/objects/14/ffa69f0388b6648af6e413387201f1c5dc34b2","hash":"d94589ced41c1438b11e1a02ae2ed8695ec4bfe3","modified":1568698917695},{"_id":"themes/next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1527762077851},{"_id":"themes/next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1527762075506},{"_id":"themes/next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1527762075508},{"_id":"themes/next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1527762077843},{"_id":"themes/next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1527762076367},{"_id":"themes/next/source/lib/Han/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698917697},{"_id":"themes/next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1527762077848},{"_id":"themes/next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1527762075516},{"_id":"themes/next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1527762077853},{"_id":"themes/next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1527762075505},{"_id":"themes/next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527762075513},{"_id":"themes/next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1527762076370},{"_id":"themes/next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1527762077850},{"_id":"themes/next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1527762077580},{"_id":"themes/next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1527762077846},{"_id":"themes/next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1527762075512},{"_id":"themes/next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1527762076369},{"_id":"themes/next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1527762075515},{"_id":"themes/next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1527762077306},{"_id":"themes/next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1527762075508},{"_id":"themes/next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1527762077845},{"_id":"themes/next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1527762077852},{"_id":"themes/next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1527762075511},{"_id":"themes/next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1527762077846},{"_id":"themes/next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1527762075510},{"_id":"themes/next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1527762075513},{"_id":"themes/next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1527762075514},{"_id":"themes/next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1527762075509},{"_id":"themes/next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1527762077849},{"_id":"themes/next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1527762075507},{"_id":"themes/next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1527762077851},{"_id":"themes/next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1527762077847},{"_id":"themes/next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1527762077851},{"_id":"themes/next/source/lib/Han/.git/refs/heads/master","hash":"ee343043f53b3ea48b689ba9c558932a01928d24","modified":1527762077872},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1551411447943},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/17/9eb5d6cd5f44ba3dd9e08b4ffcd83bb26db80a","hash":"03d593c92c9fad045d298f58afdbbcfbde923999","modified":1568698916366},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1527766406215},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1551411447944},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1551411447948},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1527766406218},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1551411447939},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1551411447945},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1551411447940},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1527766406209},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1551411447940},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1527766406211},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1527766406216},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527766406207},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1551411447941},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1527766406214},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1527766406205},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1551411447949},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1527766406203},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1527766406204},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1551411447943},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1551411447945},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1551411447947},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1551411447942},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1527766406206},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/d6/5de52977302632417c21e015956fb3dab8cabd","hash":"e0c8f0483b20434e63748a649ca4afbb417997f4","modified":1568698916367},{"_id":"themes/next/source/lib/canvas-nest/.git/objects/e1/5c0793114874195462829db04d021face6640e","hash":"ff6c6d9f05b171ba67b44564ae3574d16eae6222","modified":1568698916364},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/heads/master","hash":"5442226ab36d787824e89f50241336839b376133","modified":1527766406248},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/tags/v1.0.0","hash":"d963c1be115e9584f0357eb526fc49b884fae00b","modified":1551411448007},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/02/5cf882fc75a324b1d71b0921eb52ea427387fd","hash":"4a0f15d00f50c629f01c2274e26ef05b3779b6c6","modified":1527766851746},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698915564},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/15/9cfb8a3050111dfb3e6635e3f37fe68de2ab30","hash":"f4e1752896135edd6c9a36164b45893a59839548","modified":1527766851748},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/20/47d8728f7950fcc2276c339ee199302805838d","hash":"813e7f6c3b8954c40b250e6ba592d6bac7874397","modified":1527766851754},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3593d429ba9f66eb536d2577e4aa8b74ed7dfa","hash":"b68bb1519d36e82753367a811009e5850db4ddce","modified":1568698915559},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/25/3acc9a19f8a5047f053ea8b4a62684a4204939","hash":"d2210d7c39aa3801a198b38651a3f013d27bdd46","modified":1568698915576},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2b/41ae14433eb4a13cd99ac9736635723e813c32","hash":"0e30e5106b7021432c917699f60684276e727eb9","modified":1568698915558},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698915565},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/56/4913335d11e112ac80e8d550c8347016007f6d","hash":"50e9db730ceac6b2d0c8e8d5a3fec450290fdd8e","modified":1527766851750},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/57/6d268825c6e7b3892828b61b9b408600faa1f2","hash":"2ca9617d2459b9e010e71b3b221fec42d76cae32","modified":1527766851753},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/58/b315e0ea2584550eebcda4f1c17a9a7f2bea16","hash":"c7dc07b78ad53f0f515b3243a0ff09fb8ddb8235","modified":1568698915579},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/5d/93512df328612ac84d124d0a64f78ddcd7ec28","hash":"94dc5692c542e87ed40ce00ab5e5d72d4ae78f23","modified":1568698915563},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527766851749},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/6c/34e310dd41c6bfa8db842190388ab83e6d4fa2","hash":"b327c0ce763240a6a8bd2f3fb55ace6b9e3df671","modified":1527766851747},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/7e/871dba93cad35ffcec76a936259ae9a3641bc7","hash":"957e9e7db09ee72fc49ca852d3cc67242567fa45","modified":1527766851757},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a2/822bd3b1fad40e718ded64ddfac693c4ac24c4","hash":"14b60f650711229ee8301f49e8403bb4bb991e09","modified":1568698915568},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/a5/b8ea74a3afbc760b01b6d4bd432f4f1ace013e","hash":"afdcce658085edbf16ce7f4719bec0cb5536e77f","modified":1568698915577},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/ab/2197a6f5baffdd1d2895c169f4777921cc4027","hash":"81a75ca40bcfd278d6a9d67dedc8d61d959e2baa","modified":1527766851755},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/b9/07949515b208cc605b513ff9d5b8153cbe2fe1","hash":"8fb6e8f2e6b4df8787239335ef9777a6c888d3c0","modified":1527766851752},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/bc/43844047aa08d2b58a40fe3915a8382214a588","hash":"34086f267f92f39ea9819a5eafc04921661467d7","modified":1568698915576},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c5/8416b72bd371aaf3bc8952f819c1afd3e4c0b4","hash":"aa8e6e340697fc6d9697c1ab8213ee40aca4ea82","modified":1568698915569},{"_id":"themes/next/source/lib/canvas-ribbon/.git/objects/c6/d0381e6cd08086561110f76b5f921bf81a6f87","hash":"be98eb9329c91132e90d942a44d05a41c78b4470","modified":1527766851747},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/heads/master","hash":"6c198187e9ce9589dc0c44efb29b1bdcc9afa0c0","modified":1527766851786},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/tags/v1.0.0","hash":"6c198187e9ce9589dc0c44efb29b1bdcc9afa0c0","modified":1568698915969},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/tags/v1.1.0","hash":"86ad48b1f69a1ee249b80efddeb6d829086537ae","modified":1568698916138},{"_id":"themes/next/source/lib/fancybox/.git/objects/00/c03f6be011e8878608eec12f68caf42b73f38e","hash":"8516bd35bc8f9223e13de5877778c8d14d49d6db","modified":1527765617301},{"_id":"themes/next/source/lib/fancybox/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698916879},{"_id":"themes/next/source/lib/fancybox/.git/objects/16/b01254a56610f4c6b7721c534ed4fc40ae51dd","hash":"88ca5fd99322d3a4067e0711af79f41c078f2ef5","modified":1568698916884},{"_id":"themes/next/source/lib/fancybox/.git/objects/19/3567a3107003507fafacd255c349857e417926","hash":"ef5eab75e8c6998cb223edb4eb8a26c4cfc9415c","modified":1527765617874},{"_id":"themes/next/source/lib/fancybox/.git/objects/1f/a2c5f332b7e304431213aec21012e53f8781d7","hash":"7632806182aa989d3b7029579d5c03c34b113ee3","modified":1568698916875},{"_id":"themes/next/source/lib/fancybox/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698916879},{"_id":"themes/next/source/lib/fancybox/.git/objects/36/9bab09306448a2970d378b59bb21c059edad63","hash":"877e0c15623d0d6ff8f09bb627fc60a489f3c105","modified":1527765617582},{"_id":"themes/next/source/lib/fancybox/.git/objects/3d/521bfc64755e348870094e85323dc1b9c96a6b","hash":"e9660fc4f89ecb176b0ab6e4860579c1bfe9f9cb","modified":1568698916878},{"_id":"themes/next/source/lib/fancybox/.git/objects/40/9607f1ba381a64c3ccb8d5440299e8ef868ef8","hash":"a462f7a9efebb70c4051f92c09ccbd9885132c77","modified":1568698922887},{"_id":"themes/next/source/lib/fancybox/.git/objects/47/d427b6c52396bbab53a05f57aaa82b52c805b1","hash":"c5626bbb62f4d1d1e39034e7f44baf4c509410d6","modified":1568698922885},{"_id":"themes/next/source/lib/fancybox/.git/objects/51/cf05811ed7d35e92551db1ba5a6e267ce781a5","hash":"99c009035ea86e3876b586577677d4d62ae12379","modified":1568698916877},{"_id":"themes/next/source/lib/fancybox/.git/objects/53/ceaabe0f8677333c5be196778b3e40840a1869","hash":"7bc1c1c42059d5402335b5293bfb5e54bee22557","modified":1568698916876},{"_id":"themes/next/source/lib/fancybox/.git/objects/63/c555caede30ab06d6dba16644a827e9574c8cb","hash":"846603220288272ad5d35ebdc3c917cc4adce424","modified":1568698916872},{"_id":"themes/next/source/lib/fancybox/.git/objects/54/0a7b36ee26decfc3f0f34bf73bc85c48899128","hash":"2e5447a9dd879d71368e9dddd34d93849d00b934","modified":1527765617878},{"_id":"themes/next/source/lib/fancybox/.git/objects/64/c47e893a0fef71c8c0930975ef114d9812da56","hash":"eaad75fab15724f9c2b069fc1ce9b8216be149d7","modified":1568698916880},{"_id":"themes/next/source/lib/fancybox/.git/objects/78/068b93f813cecbbd50c8247de547035009d512","hash":"4bc2bee779bd7e3cca13ee34801cf1e12585e5ae","modified":1527765617583},{"_id":"themes/next/source/lib/fancybox/.git/objects/7b/15d3cb03fda86241f8b2b335f04e9b9de0e1c4","hash":"d1fe3bd82c90f7d93874798a8ee8ebf1391d7207","modified":1527765617584},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/c60b295fa2dcb82537a63792c9b3b3c2e74c33","hash":"b2dc23c71b13726c391aaefaa5312227a9b6ab7e","modified":1568698917335},{"_id":"themes/next/source/lib/fancybox/.git/objects/7c/00ef8195b73793d477d22e723ecdac9553ebf3","hash":"fd8c4fd143b32fb3e86367f123feb7c35b305262","modified":1568698922875},{"_id":"themes/next/source/lib/fancybox/.git/objects/89/9d7a75b543fbed2a785f67d995bc77e06eb2e9","hash":"5651e2b80703225f642625c0fb2646543096d2cf","modified":1527765617299},{"_id":"themes/next/source/lib/fancybox/.git/objects/80/6b27034bd69d563e4243c2f12b43c7064b32dd","hash":"b7d3e8020767ae60a2029da8eccb0068623dc618","modified":1568698922884},{"_id":"themes/next/source/lib/fancybox/.git/objects/92/4369c371444afb18fb86309229f5b4c24c6cf4","hash":"9eb6fa8ff9081e6650f6bee350d21567df105737","modified":1527765617585},{"_id":"themes/next/source/lib/fancybox/.git/objects/94/a9ed024d3859793618152ea559a168bbcbb5e2","hash":"1c2d080a86f03eb960e112a94910a5115addf57a","modified":1527765617581},{"_id":"themes/next/source/lib/fancybox/.git/objects/9b/fe9361836240600c1bcc3cab9d42b35e731fad","hash":"3d38ffc7ac1ae85224691ef15d7f32e40c40b3a2","modified":1568698916881},{"_id":"themes/next/source/lib/fancybox/.git/objects/aa/654e17af8c354994f706c4e33bba6b5b70caeb","hash":"22b1bdf0b0974bf5e9022953ac26066056c235ff","modified":1527765617877},{"_id":"themes/next/source/lib/fancybox/.git/objects/ac/97c2cc9f61c52753abe4174a4a74b2064e5af0","hash":"272e74036b0612de83d9d0aa9604d3edf888b249","modified":1527765617873},{"_id":"themes/next/source/lib/fancybox/.git/objects/ad/569256343419017e8832a38faaa1c786716a1d","hash":"0538e4abd112b0a843035f28a511edabbe73f2ce","modified":1568698916874},{"_id":"themes/next/source/lib/fancybox/.git/objects/b3/b3098638624b56be968573e2dab1684f8a7f06","hash":"6fa11a2d904dff2b8f4ae1bd88bdbb66736438a1","modified":1568698920833},{"_id":"themes/next/source/lib/fancybox/.git/objects/b6/c361c8dcf2f5a7572e81b956272e4cfe1198c1","hash":"3e160c605dbd94dcef2b9692a4a5a82bddb76264","modified":1568698922891},{"_id":"themes/next/source/lib/fancybox/.git/objects/bd/e1f741357b44b49290d43fdd193125202fef81","hash":"9beefc75cc0c37d04e98dd13b51ad85df40e77b9","modified":1527765617302},{"_id":"themes/next/source/lib/fancybox/.git/objects/c2/fc5def1b6c38369e5e8b849adb956bd79b549e","hash":"27f03b9616e615b2724bac0fa4507d152697f3f1","modified":1527765617300},{"_id":"themes/next/source/lib/fancybox/.git/objects/ce/c0e316bee5d497ee834dbd29e0c5aad8331052","hash":"3d769fa5f55014841d10bb3bdf1b9725c43e9043","modified":1568698922889},{"_id":"themes/next/source/lib/fancybox/.git/objects/d5/d10f6be62acc10fec6e11e8dc4affe1184a17b","hash":"cec51b2539349d2aba1ec5d11eaded3815eccdc5","modified":1568698920836},{"_id":"themes/next/source/lib/fancybox/.git/objects/f6/bb280a0b2c68256a8e906b35c6976c80c1b3be","hash":"5daaee11fc384fbe0f02c7123036c954ee9a73fd","modified":1527765617303},{"_id":"themes/next/source/lib/fancybox/.git/refs/heads/master","hash":"01fe0b1cf911f9e2e30415be1c967b1eaae2ee38","modified":1527765617911},{"_id":"themes/next/source/lib/fastclick/.git/objects/0a/041280bd00a9d068f503b8ee7ce35214bd24a1","hash":"2af3b23208162ae85f2c996375ae27e8402cb499","modified":1568698916266},{"_id":"themes/next/source/lib/fastclick/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698915939},{"_id":"themes/next/source/lib/fastclick/.git/objects/0d/66973f880e493956483a1472fe60dfb855339f","hash":"cff8b911bd70abe331e0450866b2403c9b8f6e74","modified":1568698915943},{"_id":"themes/next/source/lib/fastclick/.git/objects/0d/dbe7d4eb11134cfb5fa14b3e190bd9fb3ed82b","hash":"95af863cce08aad6f65d6932af9ef732712740f7","modified":1527765884687},{"_id":"themes/next/source/lib/fastclick/.git/objects/14/70ec550667269b2b28104dee3f92b4e14a66bb","hash":"04e58a410ff49d08d35b3e68efa2e8607451f4c1","modified":1568698915945},{"_id":"themes/next/source/lib/fastclick/.git/objects/18/e1abd47f6274ffd7ed82dc00decd1c00c6e323","hash":"5a569722fa4f206672376b71c3e1c16f643e64f7","modified":1527765884688},{"_id":"themes/next/source/lib/fastclick/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698915940},{"_id":"themes/next/source/lib/fastclick/.git/objects/39/eecac957740db2155785ff231e1868f1464f5c","hash":"b571de4112f8f4a93933e9c38d994cf52cc87236","modified":1568698916313},{"_id":"themes/next/source/lib/fastclick/.git/objects/3a/f4f9d6f14e39b48e9c449de1c660e245a2bc27","hash":"bf9503b3af60d018a7b9ad9e177b424b14a970e5","modified":1527765884694},{"_id":"themes/next/source/lib/fastclick/.git/objects/42/c4fe3083d5eeaac86dbc81dbcea98d71f97a78","hash":"9ad2acaf712ceb77f38e43fb0d70782f096550a8","modified":1568698916302},{"_id":"themes/next/source/lib/fastclick/.git/objects/53/3f84c565dbfa38acd9af674c32efc475560678","hash":"927f8037427ab0dd6494a2af35b9d64813f6103d","modified":1568698915946},{"_id":"themes/next/source/lib/fastclick/.git/objects/54/c1fbfeaf41ede10230c96df98de315c5491ed7","hash":"812f45cea4d0b49b2c94b91916b71bb04f3ae6db","modified":1568698915947},{"_id":"themes/next/source/lib/fastclick/.git/objects/59/f7764acc6325fd8460efa1ce533f6c4ba1ab6e","hash":"c057795d340601456d367d9e77bf76167370d4f3","modified":1568698916295},{"_id":"themes/next/source/lib/fastclick/.git/objects/5b/168a3e689e7265e7263bd8a705d569f1ed2abd","hash":"dbe56ed0895e138dc3f64af7e79934376b79313f","modified":1568698915941},{"_id":"themes/next/source/lib/fastclick/.git/objects/61/c39a632ceeb8d42b91481c0b54970cf035267a","hash":"dfb032f767e71a01cf332cfec0eca764ae7073d6","modified":1527765884682},{"_id":"themes/next/source/lib/fastclick/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527765884686},{"_id":"themes/next/source/lib/fastclick/.git/objects/71/5c9e3f2c7bf89048b1b16ecb9b7d15609d65d5","hash":"ce326db17f251e0078d07a050a583bf0cfd3ac45","modified":1568698916317},{"_id":"themes/next/source/lib/fastclick/.git/objects/74/0748c6e3bb5550063f207afe6f711ec549461b","hash":"da8891e7ecc82d300afcc8b7ab4de10e8758ef00","modified":1568698916315},{"_id":"themes/next/source/lib/fastclick/.git/objects/7d/9e6fc08a9544ff57174c67757ff98d12913d90","hash":"5461ca6b5299b05382c8e5c948613622a0f0a5ea","modified":1568698916308},{"_id":"themes/next/source/lib/fastclick/.git/objects/86/c3d4aeba88b97f37cd9f6b70bf2d57a7a21826","hash":"fff2a0379207fb85c1508fc1c63bed957c294202","modified":1527765884691},{"_id":"themes/next/source/lib/fastclick/.git/objects/8c/f591c468d5a80a9c25ffe092f3359bdd311d7c","hash":"3b32a623aa2e5a7fd5640f6b238882df4c0b6c4e","modified":1568698915942},{"_id":"themes/next/source/lib/fastclick/.git/objects/9f/d0fb1402a4c303aebe2f19463f7e6a1e220cd5","hash":"b830d61384e84ba93984d0db1609bd2d4ad81300","modified":1527765884683},{"_id":"themes/next/source/lib/fastclick/.git/objects/a8/ac4146417080f9a79f70b679300f4495228cf0","hash":"1bb57653a607a267f64188a90a73824fed46e6de","modified":1568698915949},{"_id":"themes/next/source/lib/fastclick/.git/objects/a1/a4ef0b4cb975a87af657cddf929fb303c24e03","hash":"717ab6517b8cf0d4c841eae0b72d03840e1294ce","modified":1568698916297},{"_id":"themes/next/source/lib/fastclick/.git/objects/ae/5f7548b6de31e555b62d5929943270cdf70882","hash":"16028a233e7fd61d549b323e39948cb98dd8826f","modified":1568698916319},{"_id":"themes/next/source/lib/fastclick/.git/objects/b1/be81d4f11e36095d68afc4502fdb16aaf944be","hash":"3a5ba6f240fb736ae697059d327f635fbf1bec20","modified":1527765884699},{"_id":"themes/next/source/lib/fastclick/.git/objects/b2/5dad1c30c8b4830293330b60d39c75f7e3886e","hash":"8206eb6b273e8e6ac85535f0f7a645d3c3394885","modified":1527765884684},{"_id":"themes/next/source/lib/fastclick/.git/objects/b7/756f84efa37a6af1a8d63495e595dae69dc59c","hash":"e6d349fe6b83dd9b3ab402b4a9c958f961a2c562","modified":1568698916305},{"_id":"themes/next/source/lib/fastclick/.git/objects/c0/0bbbce1e0ed7a9d53c3860ea6c934f775769af","hash":"5c25c88f047e3d870e3f6b1370c458ad59505af9","modified":1568698916310},{"_id":"themes/next/source/lib/fastclick/.git/objects/c7/fbec335943fcc910186fccc3c1a2529efa20c4","hash":"dc08dc16b141a089831bb7ff2cb1cd0a93907ab8","modified":1568698915944},{"_id":"themes/next/source/lib/fastclick/.git/objects/cb/964303a9a8daf73aafed7f21bc910074874950","hash":"de06ae549cb5059c2beabe6194fd09e0b662a4bd","modified":1568698916314},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/0642795f0b53282dac0e2978ae6d1b03b365b5","hash":"7c8b1e12e4d34a5e3295e98f25a3529a7f33479e","modified":1527765884697},{"_id":"themes/next/source/lib/fastclick/.git/objects/cf/abed7d73eee3176b90b91f3dd656666d8c639d","hash":"bda6cd7c2f9d7b568498f96a3d4248563034eabe","modified":1527765884686},{"_id":"themes/next/source/lib/fastclick/.git/objects/d5/8fb7058713729b8a2d573110b22bd4f0e641f9","hash":"096db64afd1ae351983eb54924347e29b839ab3d","modified":1568698916312},{"_id":"themes/next/source/lib/fastclick/.git/objects/e3/738a2ffd7d5082bfceabe50f4ce8ac88af41c9","hash":"24570a86d04ea9a63e1b8ae146d20ee812c2af76","modified":1568698916306},{"_id":"themes/next/source/lib/fastclick/.git/objects/e5/2ecdba00cb9b2083bb3491508d10db30aef805","hash":"5e41e47a592bee16139fd948e666132d6d339668","modified":1568698916296},{"_id":"themes/next/source/lib/fastclick/.git/objects/e8/e681d7034be8b0aaecdcb07e58275fb955a51c","hash":"846fa78e06044efd10dd58f8c510b6d360af14d8","modified":1568698916311},{"_id":"themes/next/source/lib/fastclick/.git/objects/ef/3f987c6490745eedd60367aa3c25413f69879d","hash":"b9bdc7896f4e609871226f46720d5e425e0f65b5","modified":1527765884698},{"_id":"themes/next/source/lib/fastclick/.git/objects/f7/1b1e3be02f49fe52bf28afa7749410c3a8c830","hash":"5e43bd39b7e28c90282f334a54cc71873d11ffcf","modified":1568698915948},{"_id":"themes/next/source/lib/fastclick/.git/refs/heads/master","hash":"f3112ca048dc1b13166ee07ff877ef05c4d65c81","modified":1527765884734},{"_id":"themes/next/source/lib/fastclick/.git/refs/tags/v1.0.0","hash":"d551ddb36f0123c15af97ee78c0e32826cb124fa","modified":1568698916357},{"_id":"themes/next/source/lib/pace/.git/objects/00/13175fe71888324d9142744034e8296501174a","hash":"0ad0e50f7fe91fe14491924aa4b1e2e8f060a5cd","modified":1527765966617},{"_id":"themes/next/source/lib/pace/.git/objects/08/38a9623fabb4014d7ed7c0fa4ff8a5bc5e697e","hash":"aeee9d11c3a4c1dec1ad8414dca14e5aa9ca2b7d","modified":1568698917118},{"_id":"themes/next/source/lib/pace/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698917119},{"_id":"themes/next/source/lib/pace/.git/objects/1c/159365320ef5dde63906912f3df067376b40d0","hash":"1dd6b7373c3f9c67e34aa319c9c08fd0f667156a","modified":1527765966634},{"_id":"themes/next/source/lib/pace/.git/objects/23/4f9b3e93f06a85cb2ec01acc872ccdc2bec7cb","hash":"63f8640eceff35a80175a102fcbd8789e690cfaa","modified":1527765966618},{"_id":"themes/next/source/lib/pace/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698917120},{"_id":"themes/next/source/lib/pace/.git/objects/35/a749d823ad0aae6111a76dc501a1170478f376","hash":"e757129fb6bca3170b62b05f3e850e4b55f3ae88","modified":1527765966633},{"_id":"themes/next/source/lib/pace/.git/objects/3e/dcd352d2a1a60dbb6a43e7e9f00bab8b55791a","hash":"725bf5094855cd943dd1cd351906fb1ebec1d861","modified":1527765966623},{"_id":"themes/next/source/lib/pace/.git/objects/41/28e69301ad36a283c0fc523f3aef89644d2467","hash":"d8b985cf431fbdc5b4fa3be89e27db7a3437c920","modified":1527765966636},{"_id":"themes/next/source/lib/pace/.git/objects/4d/fbb499a4f7b2f26a535c335cd66c966ff8b261","hash":"14e4cdcc137045c7efed32f796273d40c9fcef87","modified":1527765966631},{"_id":"themes/next/source/lib/pace/.git/objects/49/0db22b657dd64430d003fe2831905a54858b22","hash":"43694656c4c331cfa3667afca630bd486ac0d0fe","modified":1527765966629},{"_id":"themes/next/source/lib/pace/.git/objects/49/234ebf40b265bb9664d22bc391237ff856a3df","hash":"b527eb3cde1e78771ff68c5f633a3cf91816e274","modified":1568698917132},{"_id":"themes/next/source/lib/pace/.git/objects/53/3d55db0342c2b011ac05703c3b42e88a25c1ed","hash":"c48454760d2e04602a5499188b33d38839c58aee","modified":1527765966632},{"_id":"themes/next/source/lib/pace/.git/objects/5f/2920b23993e6476c3edc77f76eba566e74dd7e","hash":"122d8ac05247282340317587435273e6f3c5a188","modified":1568698917124},{"_id":"themes/next/source/lib/pace/.git/objects/60/0378418401f2b0e7c58407a7bbc5a5196cfa51","hash":"20489d796247dda758599f40cbfcf14d194ef64a","modified":1527765966615},{"_id":"themes/next/source/lib/pace/.git/objects/60/8cf35556105f51783ede3fa1e6c2102e8945de","hash":"2c71f7a2ff047119ee898a8edec216238710b89b","modified":1568698917129},{"_id":"themes/next/source/lib/pace/.git/objects/61/fcbe3a99ad371eacdf3a3703883f8e95e072c8","hash":"480b60d684f9a077ade5dda0acfc75bcd9597aff","modified":1568698917125},{"_id":"themes/next/source/lib/pace/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527765966616},{"_id":"themes/next/source/lib/pace/.git/objects/68/54b8cf544e974998061fb08ea2bd96b561ed68","hash":"1aa0706b6495a5ebd70c3822ac3533df41940fb7","modified":1568698917121},{"_id":"themes/next/source/lib/pace/.git/objects/7e/7e5cf8a2a18caf4e0262d1656dea658374d5ae","hash":"47eb39060193e0032e3223b4dfc1a6a55f6612fd","modified":1568698917131},{"_id":"themes/next/source/lib/pace/.git/objects/82/8dcba3c8a21de08d1eb38f2eee453b51543188","hash":"629aad2ee2e564790e78cd46e99ad396544960ab","modified":1527765966624},{"_id":"themes/next/source/lib/pace/.git/objects/84/a17ac7b4fe9cea559de91f00af88f810bff7f1","hash":"b41b6d3cbccd75b711f0523bba1c26bf19b0a862","modified":1527765966614},{"_id":"themes/next/source/lib/pace/.git/objects/86/ab4cb05d5132451e71dc4ecf6ef663f7404126","hash":"53f157552aa57d405ce6ab58c424bb948c2820d8","modified":1568698917126},{"_id":"themes/next/source/lib/pace/.git/objects/8b/b4535a79cc15127f8906b24c4e0bb4a38a5947","hash":"9c2d65a63f18929b09f3592dda064f24309ff98b","modified":1527765966626},{"_id":"themes/next/source/lib/pace/.git/objects/97/1e8a1f2ad6d45f693980c106af0aead9d1c215","hash":"e45f0963920a53a57f6b53d178e5b05a8e315189","modified":1527765966620},{"_id":"themes/next/source/lib/pace/.git/objects/9b/3058068409f2282607ebb91717d7a6a1406230","hash":"651c5857021e11dc397df86dbe0f01e6c7dc7f16","modified":1527765966627},{"_id":"themes/next/source/lib/pace/.git/objects/a6/dbd9c99e726f621e2bdcd3c6fe2795a5d4272d","hash":"25350dd31f504af7206610ced355d162aabda8dd","modified":1527765966628},{"_id":"themes/next/source/lib/pace/.git/objects/aa/813c5a6398600e01b740696cd889eb3becad84","hash":"c62a1513ca820dc59fe1cd6d9ec16c92e0e2fbf0","modified":1527765966619},{"_id":"themes/next/source/lib/pace/.git/objects/c0/05c71f1a000d8187df58083d215c962d7f5505","hash":"dffd212ca2ec705233fabe82a6f483d6be4b151d","modified":1527765966625},{"_id":"themes/next/source/lib/pace/.git/objects/da/79363b808519d44a7eda67d7bc81e1587a06e8","hash":"0dc5dc27991da9a09d705e488bc3f1fe5a4d4728","modified":1568698917119},{"_id":"themes/next/source/lib/pace/.git/objects/db/d45db3a1d6c09fdf30fc1f0bdc2c6fab5a0680","hash":"5c0bc5c141068651fcb47ef549f556d67153eecf","modified":1568698917116},{"_id":"themes/next/source/lib/pace/.git/objects/de/79ab6539ac3702aaac64b879d95e6575f4eefa","hash":"0046fefd52ed4679e0fee757cc91ced94e3ddc12","modified":1527765966634},{"_id":"themes/next/source/lib/pace/.git/objects/e8/83088ed2cfe69a983e9e277a6b54b7de226344","hash":"2386487a5933380ac3305ea6b5744d75bdd07292","modified":1568698917128},{"_id":"themes/next/source/lib/pace/.git/objects/ec/6708dc18a5dd312a6735d4d09eddbdb76e75c2","hash":"66e03a78b2f1d36feb9f9347dd5e68e344c3ee68","modified":1568698917133},{"_id":"themes/next/source/lib/pace/.git/objects/f3/0e0a99bb016267bde55537dd47b3657ae59544","hash":"8bf0bc17a6111b6a82981073133f33cc8e815c41","modified":1527765966622},{"_id":"themes/next/source/lib/pace/.git/refs/heads/master","hash":"3190f62cf3c4f9eccb1e54c8f7289ed7e6955767","modified":1527765966660},{"_id":"themes/next/source/lib/pangu/.git/objects/01/0620fbc4da6dc760b6723f66a52c9860370584","hash":"72d3c44470776166c451169b7867ea9b9b0b006b","modified":1551407997641},{"_id":"themes/next/source/lib/pangu/.git/objects/03/729f7ba136dcc3ae85b4d07bf0056f37470088","hash":"f2f408da0158f3f93d6d32c501700db6e37db4e0","modified":1568698916004},{"_id":"themes/next/source/lib/pangu/.git/objects/04/a4115a2d03d870c5a51b5f89928459048b002f","hash":"ecd673d179c791cbd08fa06f60e0a79df351f02f","modified":1568698916005},{"_id":"themes/next/source/lib/pangu/.git/objects/08/52519b95abd33154998c5680271aaf67f8e106","hash":"f8c789e5cf42a5dba5ad7fa380bc45ce80df80d7","modified":1527762043430},{"_id":"themes/next/source/lib/pangu/.git/objects/0c/70813f9711aa9d66a7312b60267d128dcfe3a2","hash":"b906d137c32f32cd04241a274c9ed6465b2c773b","modified":1568698916003},{"_id":"themes/next/source/lib/pangu/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1551407997643},{"_id":"themes/next/source/lib/pangu/.git/objects/2b/f92baa095de86729b3ef59689d6974b0575ee6","hash":"d08c8e33abf1d2e4a0d8943b5c51d42820674aa4","modified":1556510190942},{"_id":"themes/next/source/lib/pangu/.git/objects/2e/c2d429364cd4feaf1645bfffc8e2b14e1ca9c1","hash":"e5eb7f7fc00c1571ccbbd533b9fab7e84529924e","modified":1556510190941},{"_id":"themes/next/source/lib/pangu/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1551407997644},{"_id":"themes/next/source/lib/pangu/.git/objects/37/180cbe56dc95fe1a9e0b3de00b61b11aff3e7f","hash":"193cabbb4af1308bec54a5b99b35385ca13ea5ac","modified":1527762043433},{"_id":"themes/next/source/lib/pangu/.git/objects/3a/347d40f23bb005b3acaf43f952b290c49d767b","hash":"638cc2efc8bddc52c6abcc339728155f8eabb757","modified":1556510190948},{"_id":"themes/next/source/lib/pangu/.git/objects/3e/8203882d8b3b6b844888921b0e81d3fa76c8bf","hash":"6d5f6ec2d4e6a47d50d00fb8fae1bc1c52ee929e","modified":1551407997642},{"_id":"themes/next/source/lib/pangu/.git/objects/6d/0d46c3fbd28f9537143108712f9941ab8363f8","hash":"07befbdc872ee282846ca782852ef7163ad7f385","modified":1527762043695},{"_id":"themes/next/source/lib/pangu/.git/objects/7f/afb14e3df3d5494e74aa96d5b25fe0dee7c787","hash":"d9a7aa765fcef890d16c2d65f853a01ab9ced476","modified":1527762043697},{"_id":"themes/next/source/lib/pangu/.git/objects/7e/fbaf8edb730a33e9b671be459847f755880a21","hash":"1d818361cab34f8e9adab25f8d2d4a1c0509058c","modified":1556510190945},{"_id":"themes/next/source/lib/pangu/.git/objects/bb/cac5722090f137bf87fd585313c2526f5e02a0","hash":"3083347ad30e79f123cc54ec06c0ba7f54a4fe78","modified":1556510190943},{"_id":"themes/next/source/lib/pangu/.git/objects/e8/f4305b379951c7f220930e72e9c621fb3469ef","hash":"6989cfa9149252690b2897e5f8a28675e257e822","modified":1527762043695},{"_id":"themes/next/source/lib/pangu/.git/objects/ee/34b05fd5e668a48ec9108c61a9cb7fbfba3462","hash":"07e1e94f3ffcbca994bc631830665fc56517899d","modified":1527762043432},{"_id":"themes/next/source/lib/pangu/.git/objects/f7/bd3c723d5b2947d4d0b7c0e5ce118054f22c2b","hash":"b26d8ef5455e3b929a64166af6bb4f89fa4d351e","modified":1527762043434},{"_id":"themes/next/source/lib/pangu/.git/objects/f4/f5a021a51f1d1793884318fd2f5a5498169a6b","hash":"c93b4a05458b1d11e943e9eb88a894a37a3b2dfe","modified":1527762043435},{"_id":"themes/next/source/lib/pangu/.git/objects/fa/62fee9eeddb232bd001f58f0ebd30e947db226","hash":"2e20bce6f6a81710e6e067681944a9ca13a13c35","modified":1527762043431},{"_id":"themes/next/source/lib/pangu/.git/refs/heads/master","hash":"20ecc53983248064b3342e28a181958762f8306b","modified":1527762043715},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-aefd3ff52d4a9b3c65415d35e1db9596691d9056.idx","hash":"0d38050a51c07105e16e9cf19873313de8e43b45","modified":1568702634013},{"_id":"themes/next/source/lib/pjax/.git/refs/heads/master","hash":"00fb580daf9bba465fb3cb7c60747481a5ae85e6","modified":1568702634048},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1568702634083},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1568702634083},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1568702634083},{"_id":"themes/next/source/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1568702634084},{"_id":"themes/next/source/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1568702634085},{"_id":"themes/next/source/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1568702634085},{"_id":"themes/next/source/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1568702634085},{"_id":"themes/next/source/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1568702634086},{"_id":"themes/next/source/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1568702634086},{"_id":"themes/next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1568698916673},{"_id":"themes/next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1568698916983},{"_id":"themes/next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1527766422596},{"_id":"themes/next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1568698916991},{"_id":"themes/next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1568698916667},{"_id":"themes/next/source/lib/three/.git/objects/0e/f76c758387d59ca0221cd50564e9edf7080c99","hash":"874d6d28ce21ce2873016183dd9e22b91f71c750","modified":1568698917231},{"_id":"themes/next/source/lib/three/.git/objects/15/e42465bbd9589d2112d7fe3328bd7f85c6b24f","hash":"c28f5e24b9b15ecfddd666711c6d6ef57317cb29","modified":1568698917223},{"_id":"themes/next/source/lib/three/.git/objects/19/65ef0ba0e2c1ad938cffdcbebed63048751ac6","hash":"75921c60b65a5606a85ab5cec185f430d844048d","modified":1568698917914},{"_id":"themes/next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1568698916511},{"_id":"themes/next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1527766420467},{"_id":"themes/next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1568698917197},{"_id":"themes/next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1527766422599},{"_id":"themes/next/source/lib/three/.git/objects/21/cbdd0d76bb18019bcb47aeec029fb13e211b09","hash":"c4466a47cecee06641b74dca59ed92665c24a5d7","modified":1568698917224},{"_id":"themes/next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1568698917214},{"_id":"themes/next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1568698916668},{"_id":"themes/next/source/lib/three/.git/objects/34/cbb2a80da03e4d233dcfa3f11fed64894b2de5","hash":"ddf0c1fdb72ed14c50b1d1718a122f5f2a38a3ed","modified":1568698917745},{"_id":"themes/next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1568698916975},{"_id":"themes/next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1568698916669},{"_id":"themes/next/source/lib/three/.git/objects/3a/ae52073909b7ccdbd43538ee6c814691935c57","hash":"652619b1d76f267c1646b6167de80f58a520525e","modified":1568698917912},{"_id":"themes/next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1568698916992},{"_id":"themes/next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1527766420476},{"_id":"themes/next/source/lib/three/.git/objects/3e/4151e56ef50d7ff46a1ce73156c35ac6f1224d","hash":"a47d2e1895903aa7e1b51d35731f212ffc6a1718","modified":1568698917217},{"_id":"themes/next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1568698916678},{"_id":"themes/next/source/lib/three/.git/objects/42/d67e32b0d5f676f7462ad5b013f4eb8cad2486","hash":"fb1c4d377401f2145cc721d96fdf40d89ac23434","modified":1568698917391},{"_id":"themes/next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1568698917201},{"_id":"themes/next/source/lib/three/.git/objects/53/c865f8ff0aaa7ae2c8da7324dce73756ffe7c0","hash":"2d1c2dcfa342f46910a5698023b2c208bf3336e0","modified":1568698917228},{"_id":"themes/next/source/lib/three/.git/objects/64/d845d3aed3dce9eab9de39793f1c4d1d6e0deb","hash":"1c7346386e8c3d8830bf36bff7011976ba326b3e","modified":1568698917386},{"_id":"themes/next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1527766420475},{"_id":"themes/next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1527766420471},{"_id":"themes/next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1568698916981},{"_id":"themes/next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1568698916511},{"_id":"themes/next/source/lib/three/.git/objects/6f/f9f6347d48d4bc18b07a813f9140d7287df7aa","hash":"46232e003a90f98c78af21c4898ab37c66fda385","modified":1568698917223},{"_id":"themes/next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1568698917198},{"_id":"themes/next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1527766420472},{"_id":"themes/next/source/lib/three/.git/objects/7d/2bcbb026e4a38ab45317d8b78bfed70ba25c51","hash":"05394b260c2c58ee38b7224bb4ecb52df1e7f354","modified":1568698917915},{"_id":"themes/next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1568698916993},{"_id":"themes/next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1527766420469},{"_id":"themes/next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1568698917196},{"_id":"themes/next/source/lib/three/.git/objects/81/d7d11db23df8681d1a8242fb27252a9d2d7062","hash":"a294b374bb129cc8aaec9c01bf1df1c5addafe9d","modified":1568698917216},{"_id":"themes/next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1527766420473},{"_id":"themes/next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1568698916630},{"_id":"themes/next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1527766420471},{"_id":"themes/next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1568698917209},{"_id":"themes/next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1568698916706},{"_id":"themes/next/source/lib/three/.git/objects/90/e94cbdbfd33fea8606d447d01011ff657478f1","hash":"df922aee3bc7eb3266134797efb6f888743c6a12","modified":1568698917390},{"_id":"themes/next/source/lib/three/.git/objects/94/1060002b98395a31cb47a33166f5568a20d4b5","hash":"c345981cd6097743cbb6f44d61b33ed37b110b31","modified":1568698917215},{"_id":"themes/next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1568698917194},{"_id":"themes/next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1568698916512},{"_id":"themes/next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1568698916510},{"_id":"themes/next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1568698916681},{"_id":"themes/next/source/lib/three/.git/objects/c3/e49d5369de034ff0788d11519bd9150b67ce74","hash":"256a3f0a7054a3e2cde1fc58f027565c87ad3d1b","modified":1568698917225},{"_id":"themes/next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1568698916631},{"_id":"themes/next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1527766422597},{"_id":"themes/next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1568698917212},{"_id":"themes/next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1568698916638},{"_id":"themes/next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1568698917207},{"_id":"themes/next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1568698916990},{"_id":"themes/next/source/lib/three/.git/objects/db/fc5bb53f0ee561f55b18c9796e1e03a9781153","hash":"3cda0d28ce918db5b722db817e69ea522a4db9ce","modified":1568698917217},{"_id":"themes/next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1568698917199},{"_id":"themes/next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1527766420470},{"_id":"themes/next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1568698917204},{"_id":"themes/next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1527766422598},{"_id":"themes/next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1568698916513},{"_id":"themes/next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1568698916984},{"_id":"themes/next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1568698916989},{"_id":"themes/next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1568698916640},{"_id":"themes/next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1568698916680},{"_id":"themes/next/source/lib/three/.git/refs/heads/master","hash":"f17437f700f7d1a2476f16b375d982f5cd36ddc2","modified":1527766422625},{"_id":"themes/next/source/lib/three/.git/refs/tags/v1.0.0","hash":"e1896f18b5735a495e320e3f94266dadbc121db6","modified":1568698917954},{"_id":"themes/next/source/lib/three/.git/objects/7b/a927a3390f9a6345039cdb5bc54c6a54297f69","hash":"0d10f821d9e61a27c3f9d9e03e923265693d68ab","modified":1568698917745},{"_id":"themes/next/.git/objects/44/80b2cd2f053265df611bddd000cecd1f73d905","hash":"66518c22211ec604c7b4586710339a08068a4a9b","modified":1575026262183},{"_id":"themes/next/.git/objects/8f/facb2db2f64e820690c47c40f89daf83a659bd","hash":"a8261c57288411e6af06e1de222dfaf33b916064","modified":1575024975378},{"_id":"themes/next/.git/objects/pack/pack-359809378bf4aeb46f57ce10006456f752c34527.idx","hash":"61433c213d5ea54be8807960f21dc991791936a3","modified":1583302730124},{"_id":"themes/next/.git/objects/pack/pack-72bde3edf22d126dc635d3196193bd70e07f0af7.idx","hash":"7cbe5ef7da50c1e1e7c2865382b971f4fc4dd292","modified":1583320714502},{"_id":"themes/next/source/lib/Han/.git/logs/refs/heads/master","hash":"45249da8844720fd8067eafeae8fb3cd6a2e41d7","modified":1527762077872},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527762077871},{"_id":"themes/next/source/lib/Han/.git/refs/remotes/origin/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1568698917709},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"91684b5ef7e0b7fa4dea353b6404a158d77b06b0","modified":1527766406249},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527766406245},{"_id":"themes/next/source/lib/canvas-nest/.git/refs/remotes/origin/master","hash":"cea77028606e86b2fafcf54cf1591416192c5f15","modified":1568698916382},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/heads/master","hash":"a630ee31162de980ffa8b7c92727bb1d6206deb9","modified":1527766851787},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527766851785},{"_id":"themes/next/source/lib/canvas-ribbon/.git/refs/remotes/origin/master","hash":"a195391a7f21d2d313f7f029d89eb6e6d0cfd459","modified":1568698915961},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/heads/master","hash":"0cf7f89a3f2789de80853bcae7d2515c50d6869e","modified":1527765617912},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527765617908},{"_id":"themes/next/source/lib/fancybox/.git/refs/remotes/origin/master","hash":"0b56bdb897316a3b4ec6c120673249f65f4cb420","modified":1568698922911},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/heads/master","hash":"63dd5a9ef18398e4c4f1ce54069520cef6a2fbac","modified":1527765884734},{"_id":"themes/next/source/lib/fastclick/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527765884732},{"_id":"themes/next/source/lib/fastclick/.git/refs/remotes/origin/master","hash":"3020cb58adedeaf2b00fd150c0285fcecd7a8865","modified":1568698916333},{"_id":"themes/next/source/lib/pace/.git/logs/refs/heads/master","hash":"fb5be2eb1ff7345e1672a616e0641d4b635cfcb9","modified":1527765966661},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527765966659},{"_id":"themes/next/source/lib/pace/.git/refs/remotes/origin/master","hash":"973ef562971f9b6d0ab99025ad36a9906db08f59","modified":1568698917145},{"_id":"themes/next/source/lib/pangu/.git/logs/refs/heads/master","hash":"b4a7f77d935c5ed593210befbc4457ca598d0cce","modified":1527762043715},{"_id":"themes/next/source/lib/pangu/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527762043713},{"_id":"themes/next/source/lib/pangu/.git/refs/remotes/origin/master","hash":"3e83855ecfb3f9292bb567a63bdbb554b5a12a49","modified":1568698916022},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/heads/master","hash":"cf0a217f05ec8b452bd6929931f2f516c798b7bc","modified":1568702634049},{"_id":"themes/next/source/lib/pjax/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1568702634047},{"_id":"themes/next/source/lib/three/.git/logs/refs/heads/master","hash":"a161c1335a12e34495ed08772e246625ed0a9a31","modified":1527766422625},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527766422623},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/dev","hash":"6693670822cf185e35124731a78fd70e7fbc6083","modified":1568698917934},{"_id":"themes/next/source/lib/three/.git/refs/remotes/origin/master","hash":"88133d3e823d6d1e797bc6e01a433d888c066e41","modified":1568698917932},{"_id":"themes/next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1527766422595},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1527766422641},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/master","hash":"1c3b93a0e594c709d2e9aa16a42376b7ffc32205","modified":1568698917710},{"_id":"themes/next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"45249da8844720fd8067eafeae8fb3cd6a2e41d7","modified":1527762077871},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"91684b5ef7e0b7fa4dea353b6404a158d77b06b0","modified":1527766406245},{"_id":"themes/next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/master","hash":"b7a92b575ba291a66594d84baef8171cec2350b4","modified":1568698916384},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/HEAD","hash":"a630ee31162de980ffa8b7c92727bb1d6206deb9","modified":1527766851785},{"_id":"themes/next/source/lib/canvas-ribbon/.git/logs/refs/remotes/origin/master","hash":"8f70d01575c92175faa19578a03d2bf07e59debd","modified":1568698915965},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/HEAD","hash":"0cf7f89a3f2789de80853bcae7d2515c50d6869e","modified":1527765617908},{"_id":"themes/next/source/lib/fancybox/.git/logs/refs/remotes/origin/master","hash":"3f17580dae1e5cad326217863dd3df690696449b","modified":1568698922912},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/remotes/origin/master","hash":"f0d0c7bdbdf60a24b2c3e70646fd18879e3e7941","modified":1568698916334},{"_id":"themes/next/source/lib/fastclick/.git/logs/refs/remotes/origin/HEAD","hash":"63dd5a9ef18398e4c4f1ce54069520cef6a2fbac","modified":1527765884731},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/HEAD","hash":"fb5be2eb1ff7345e1672a616e0641d4b635cfcb9","modified":1527765966659},{"_id":"themes/next/source/lib/pace/.git/logs/refs/remotes/origin/master","hash":"5d04b882d7361a3733c4f57eb65a4c503e87e436","modified":1568698917147},{"_id":"themes/next/source/lib/pangu/.git/logs/refs/remotes/origin/HEAD","hash":"b4a7f77d935c5ed593210befbc4457ca598d0cce","modified":1527762043713},{"_id":"themes/next/source/lib/pangu/.git/logs/refs/remotes/origin/master","hash":"5772abe4714b658db51e3832c8573c3e027a400b","modified":1568698916023},{"_id":"themes/next/source/lib/pjax/.git/logs/refs/remotes/origin/HEAD","hash":"cf0a217f05ec8b452bd6929931f2f516c798b7bc","modified":1568702634046},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/dev","hash":"5795a708c32853f37e93732b5503c223af3c0a7f","modified":1568698917934},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"a161c1335a12e34495ed08772e246625ed0a9a31","modified":1527766422623},{"_id":"themes/next/source/lib/three/.git/logs/refs/remotes/origin/master","hash":"edf5bf5ed7800fe0b03782a50a68bae56b372124","modified":1568698917933},{"_id":"themes/next/.git/objects/pack/pack-8d9dfe92fa051c4613133f9b52675d4c8feb1a53.pack","hash":"98b3c873b777a89640cadbfb7e4b1f03bf476a71","modified":1583302435251},{"_id":"themes/next/.git/objects/pack/pack-f8ffd978128d538fe0bf5a338fbdef85dde14844.pack","hash":"f059de5708a8bd78699f7cdc7cee6dd7d3877caf","modified":1561715404473},{"_id":"themes/next/.git/objects/pack/pack-3ed9fd21e5decb57cbe7d733be85bf5e38e391ee.pack","hash":"a26b966f3769841c82d0b5a74dbaffb8c9900484","modified":1568700998000},{"_id":"themes/next/.git/objects/pack/pack-507a3d81c9dbe0363decaecc36bfbbfc205794ff.pack","hash":"ab602f83ccc11e9bdadf063b9fc733e216e1a7f0","modified":1585029823355},{"_id":"themes/next/.git/objects/pack/pack-c4aeb6e7fed0d119c52d371bb803993c0bce7ae1.pack","hash":"0d51afe3ab2468695497ff2ce17a609d33c35e37","modified":1583304661083},{"_id":"themes/next/.git/objects/pack/pack-aff469b76c4e023f358e156fbe84f453e35d1357.pack","hash":"d3f3d6fdea8378a02895f75b7d8f3187ebd21266","modified":1583304477699},{"_id":"themes/next/.git/objects/pack/pack-d83dc8915a23f360f25dcd5bdac77d4d99628673.idx","hash":"9385e7b16319d8c7e20da5f59a93663f5dbb42fb","modified":1570870201634},{"_id":"themes/next/source/lib/pjax/.git/objects/pack/pack-aefd3ff52d4a9b3c65415d35e1db9596691d9056.pack","hash":"aa3da45463fa41acc55bfee4f1c76b11365e1055","modified":1568702634012},{"_id":"themes/next/.git/objects/pack/pack-90166903e8ef7b86526be4c1292de80ef12f49d5.pack","hash":"7d814af49358649f1ec2e819cae6365c0e0f80b3","modified":1583896242005},{"_id":"themes/next/.git/objects/pack/pack-a4fcdc916028901217fe01bd511cf84f276c99f5.pack","hash":"19d4aad446b8e37c3e44b1c0e4bbe073ba7bcfb7","modified":1527752362622},{"_id":"themes/next/.git/objects/pack/pack-81f2208af4bdd073662b2e220f02dcf41c1ac227.pack","hash":"227f340b5107c5b0f77b39ac4f5fc63eaad48a5e","modified":1585029398555},{"_id":"themes/next/.git/objects/pack/pack-7cd11b464fded3e757fd7a571cc9ebd54f5d70b8.pack","hash":"5b2a7a756665adf61a09e0a2dd478356a6020786","modified":1577246287217},{"_id":"themes/next/.git/objects/pack/pack-25fa465e62ad18b2b4a11d50793c31fe5fca9d8a.pack","hash":"d31eba80e4b323f13db2a9be65aac9941cdc91cc","modified":1585021364239},{"_id":"themes/next/.git/objects/pack/pack-d96767940915332ee1a61ed8c6daf68518b281ef.pack","hash":"fc2e1e9ace4bb911f8e676252db82d12d9e50db6","modified":1583299845094},{"_id":"themes/next/.git/objects/pack/pack-4c752d21db198528757c62a956ddb236042de4cc.pack","hash":"6fbcb6102b541b13da4bd6c4d412957267443f57","modified":1548916311352},{"_id":"themes/next/.git/objects/pack/pack-866c7527085bf5b3bb71a2d719241d45025577fc.pack","hash":"34d4d8c734cf09127c39e893ba35172653634584","modified":1579248795320},{"_id":"themes/next/.git/objects/pack/pack-72bde3edf22d126dc635d3196193bd70e07f0af7.pack","hash":"746c7cb725c9b9958a6af7f771623be6c38afcda","modified":1583320714490},{"_id":"themes/next/.git/objects/pack/pack-359809378bf4aeb46f57ce10006456f752c34527.pack","hash":"433cb25b2b42e29f5e4ff28678a145b114adf981","modified":1583302730102},{"_id":"themes/next/.git/objects/pack/pack-d83dc8915a23f360f25dcd5bdac77d4d99628673.pack","hash":"091ac3d98ed3d6cd044177c4b788fe88f03f263c","modified":1570870201599},{"_id":"public/googlec83004d17e7bf8d6.html","hash":"ee489d1dd4a469e5ee6e9a43592923ba7f6b942d","modified":1585940532460},{"_id":"public/manifest.json","hash":"deef0948ee47207effffbc9b32406ff82927d270","modified":1585940532461},{"_id":"public/atom.xml","hash":"8357ac88072d5f4875765cdd7618471ee615e845","modified":1585940532462},{"_id":"public/api/site.json","hash":"5b8c349460af7c6a938eb9d2eff29732bec0358b","modified":1585940532463},{"_id":"public/api/categories.json","hash":"c4f475bd019c99b8d9ecf732ad2e405ce75ac021","modified":1585940532463},{"_id":"public/api/categories/程序猿.json","hash":"fbd53e1b036f878f37d8f9ed398c84877401494a","modified":1585940532463},{"_id":"public/api/categories/网站.json","hash":"de5caeddec098105c8b087fc72d6e016f6995259","modified":1585940532465},{"_id":"public/api/categories/程序员.json","hash":"babbc585a0de3474528e08034fc46548fb94f42c","modified":1585940532465},{"_id":"public/api/categories/工具.json","hash":"fe6a26e90019c724fb280181b4ae18fcd5421e83","modified":1585940532466},{"_id":"public/api/categories/优化辅助.json","hash":"5fc3040473731075e8411ac3e21832a1cde1a159","modified":1585940532466},{"_id":"public/api/categories/其它.json","hash":"bedc28841b2b19a4637c97b62eaf43704df5a959","modified":1585940532466},{"_id":"public/api/categories/随笔.json","hash":"c4d8a1816c65a8d742ba39ead4fa43a3a68e905c","modified":1585940532466},{"_id":"public/api/categories/影视.json","hash":"fd7f0a615b77d97ffdbd6eaada0aaf5d5c797a5f","modified":1585940532466},{"_id":"public/api/categories/猫.json","hash":"6c9e7e3aa3135d24c24dbc82c59a4948f61ed127","modified":1585940532466},{"_id":"public/api/tags.json","hash":"f7fb3e81b70776668fa619280ca6468c2e094486","modified":1585940532466},{"_id":"public/api/tags/Apache.json","hash":"c88be10038fa082e8104f2289d06f4d8a6fc2e1f","modified":1585940532467},{"_id":"public/api/tags/重定向.json","hash":"0ca6a6575728e92bacac703657bc3c8f3c8891cd","modified":1585940532469},{"_id":"public/api/tags/域名.json","hash":"288d63b77db4caf9022fc0b4d84db59090fbb209","modified":1585940532469},{"_id":"public/api/tags/GitHub.json","hash":"4c57e1558ebfab4774713b8e2c0028f2bc23308f","modified":1585940532469},{"_id":"public/api/tags/GitCafe.json","hash":"380ba11ed0771646128d1482f81e466ad8391275","modified":1585940532469},{"_id":"public/api/tags/Java.json","hash":"b23a75cdaf4b48d96968d1e214f422b77df2e0a7","modified":1585940532471},{"_id":"public/api/tags/Reactive.json","hash":"968119e907b0eccae9393b6453ecffd945ee5086","modified":1585940532471},{"_id":"public/api/tags/meta.json","hash":"176290271cacfacf41b6fde5a4b01da3eff678f8","modified":1585940532471},{"_id":"public/api/tags/浏览器.json","hash":"7c7aa616b48614cad1ff0661f14ad67125fa09f0","modified":1585940532471},{"_id":"public/api/tags/前端.json","hash":"a79dd693363e78b8d322818b235ac4718de88963","modified":1585940532471},{"_id":"public/api/tags/事务.json","hash":"29e9f687956666a2beaad7e393640c40f1e4747f","modified":1585940532471},{"_id":"public/api/tags/mongo.json","hash":"0392d52ac04e9715f8ff5362b5728a9094d0d8c8","modified":1585940532471},{"_id":"public/api/tags/数据库.json","hash":"53859b4a0e0d38dfd3068d635e2a7b96abfdf275","modified":1585940532471},{"_id":"public/api/tags/Aggregation.json","hash":"97f32fbc68287047c6262e8532382eded6fece11","modified":1585940532472},{"_id":"public/api/tags/Flux.json","hash":"1c20509f539cd79e98a925a15f98b412dd29cd87","modified":1585940532472},{"_id":"public/api/tags/Android.json","hash":"070d7bf26196d620324097ed872e93cc646bb2a7","modified":1585940532472},{"_id":"public/api/tags/macOS.json","hash":"b1090b327403d1a9d59baf700d4fa8f7a72ad04c","modified":1585940532472},{"_id":"public/api/tags/命令.json","hash":"d398f5229efae1cc24bbb53003726bca0027b141","modified":1585940532473},{"_id":"public/api/tags/效率.json","hash":"94a7960d6fa3e83ab55804b058f4954f0a20617a","modified":1585940532473},{"_id":"public/api/tags/无线.json","hash":"f47d54a28a07af0d6bc1bf83fda8423a6fdce8a1","modified":1585940532473},{"_id":"public/api/tags/调试.json","hash":"7d231429fd417540be1e7b32d5db9b4728e90eb0","modified":1585940532473},{"_id":"public/api/tags/adb.json","hash":"f03e3d4db5e72188ece9a336ee8275ba932f19c9","modified":1585940532473},{"_id":"public/api/tags/USB.json","hash":"a1becbad741fd2da3eb5a9382dea8b9c123d7b41","modified":1585940532473},{"_id":"public/api/tags/软件.json","hash":"d9176de0d9f3dd598e33b8f9eb0617e45168f474","modified":1585940532474},{"_id":"public/api/tags/推荐.json","hash":"78812e640095524d5998dc4814109af7953c1b74","modified":1585940532474},{"_id":"public/api/tags/Chrome.json","hash":"3d603459412adbadf98e37076d3f2e1d9203c324","modified":1585940532474},{"_id":"public/api/tags/工具.json","hash":"5399d8721a23c989185a24369b6cc312d7e67f9d","modified":1585940532474},{"_id":"public/api/tags/扩展.json","hash":"c7a1aa7f069eb0a877086a1cd91fc96ab3eec274","modified":1585940532475},{"_id":"public/api/tags/插件.json","hash":"df5590964bbec2d40b4daeafafc9870cd6dabbcf","modified":1585940532475},{"_id":"public/api/tags/curl.json","hash":"8a24093cf500f4604c9c41110d756ea1d5797785","modified":1585940532475},{"_id":"public/api/tags/教程.json","hash":"b48f570d30568be86e13e2fd79156d456d265d0b","modified":1585940532475},{"_id":"public/api/tags/Django.json","hash":"cd053ed6ab0951c0568d2d9c03d6bc2705b285fd","modified":1585940532475},{"_id":"public/api/tags/restful.json","hash":"7d850242c77cff8c79b5229197c1cfb00882093e","modified":1585940532475},{"_id":"public/api/tags/api.json","hash":"673ecddddbe0725bf30916a8a9b171692befa152","modified":1585940532475},{"_id":"public/api/tags/version.json","hash":"b28bbe93711e47373a123737c85fdd20ab12764f","modified":1585940532476},{"_id":"public/api/tags/问题.json","hash":"7732b65ee7a007654dd928de018b1f48396e4974","modified":1585940532476},{"_id":"public/api/tags/restful api.json","hash":"e95b681cafc6c15386f2f107d86a897c3b01bdb7","modified":1585940532478},{"_id":"public/api/tags/接口.json","hash":"00b04a0862b61d931f2f79d384832c08541d8c23","modified":1585940532478},{"_id":"public/api/tags/单元测试.json","hash":"821ea585b394c2d17fd5635defc7e2a63163eb6b","modified":1585940532478},{"_id":"public/api/tags/测试.json","hash":"64a827220a89c7fd5518ae1e289aeeab42692dba","modified":1585940532478},{"_id":"public/api/tags/api， version.json","hash":"085b375b96af8efab0372016920201431fcb0e08","modified":1585940532478},{"_id":"public/api/tags/Python.json","hash":"378c3bb950b73ea4ac9beccdf31a0a9bdf46153e","modified":1585940532479},{"_id":"public/api/tags/Git.json","hash":"1d3999d6ea0620c424cc8266c7e5a4c838f74852","modified":1585940532479},{"_id":"public/api/tags/reset.json","hash":"ff4c87321c34fd4f1300e064f0ba1e7a66b8585a","modified":1585940532479},{"_id":"public/api/tags/恢复.json","hash":"f316693bd9de99b8f4b72c04710fad65f6820eda","modified":1585940532479},{"_id":"public/api/tags/后悔.json","hash":"3d77854c03b5160bd7926c01f9552aac39e95931","modified":1585940532479},{"_id":"public/api/tags/js.json","hash":"1630384a14888367ce93f6f357cdf5c69c411919","modified":1585940532479},{"_id":"public/api/tags/远程.json","hash":"79460e3c37f4837b4ccc48d6f7aaa70ca311b6a1","modified":1585940532479},{"_id":"public/api/tags/Material Design.json","hash":"bef3e1524755e570d4cc19d647261701246e9ad9","modified":1585940532479},{"_id":"public/api/tags/网页框架.json","hash":"482930cb45d6c51bc7b06c78358d479e2fe4386a","modified":1585940532479},{"_id":"public/api/tags/npm.json","hash":"caa8464cde2317419680785e092a0993c3bcfa1c","modified":1585940532479},{"_id":"public/api/tags/Nodejs.json","hash":"0abba54dc583d589b559845fc6e21514f312177d","modified":1585940532479},{"_id":"public/api/tags/pip.json","hash":"ad9a212373f2f8dc6a26cedebe291ea21b7e75b5","modified":1585940532483},{"_id":"public/api/tags/UUID.json","hash":"927e40a0e1240934eb4b43209cd050aab1cb79fa","modified":1585940532483},{"_id":"public/api/tags/Ubuntu.json","hash":"631fa1f8e966b940710d4beee6a781633a010ab2","modified":1585940532483},{"_id":"public/api/tags/JDK.json","hash":"825138652fcc460553fbb741e5571d04f68c5eff","modified":1585940532483},{"_id":"public/api/tags/驱动.json","hash":"c9e15ef11c8da308be52aedbeaa5fd2b7061b352","modified":1585940532483},{"_id":"public/api/tags/Shadowsocks.json","hash":"b40807cc507b73cee4108e41fd0a04a04c868792","modified":1585940532490},{"_id":"public/api/tags/杂谈.json","hash":"d05fed9a0e5ee3b260ee62873fdc1790ad346c39","modified":1585940532491},{"_id":"public/api/tags/微信公众号.json","hash":"31179c9408eb4555e21bbd30773212d6ad597483","modified":1585940532493},{"_id":"public/api/tags/端口.json","hash":"5d9aaf12bef515c89b26b2033786cff9ec85c197","modified":1585940532493},{"_id":"public/api/tags/ngrok.json","hash":"743851dacbbaec8f499c8a389846b2361f457c70","modified":1585940532493},{"_id":"public/api/tags/内网穿透.json","hash":"a6c144ab8ddba026c7382da8145827224ff7c09f","modified":1585940532493},{"_id":"public/api/tags/Virtualenv.json","hash":"16d397de5ad0f90dc05d3eb7f2d4467bea52a56c","modified":1585940532493},{"_id":"public/api/tags/virtualenvwrapper.json","hash":"ec9e4987fea91114e741dd4f1d0c1f521362f20e","modified":1585940532493},{"_id":"public/api/tags/独立.json","hash":"314b30c472dabb26e51c35b4b3265321b07fce45","modified":1585940532493},{"_id":"public/api/tags/虚拟环境.json","hash":"be8046bf206b46bc184d3ba6a84d648fbda70732","modified":1585940532493},{"_id":"public/api/tags/requirements.json","hash":"c3e89fc6828f018b5e5c660ed70c60d695db79c3","modified":1585940532493},{"_id":"public/api/tags/Synergy.json","hash":"aa3768b6827548335138846f5835e994fa0d7bea","modified":1585940532494},{"_id":"public/api/tags/共享.json","hash":"b0ca73c36af89cc094452ed0b1fa0c4e330f6263","modified":1585940532494},{"_id":"public/api/tags/键盘.json","hash":"f412f3e112c9887f6ec1b0b4e9210c37b8f5790d","modified":1585940532494},{"_id":"public/api/tags/Jenkins.json","hash":"dd9469b8bba0de522a839dcb333c8d9201e623ed","modified":1585940532494},{"_id":"public/api/tags/权限.json","hash":"185c88ea409370e6d5914e21fda57a043b493fc2","modified":1585940532494},{"_id":"public/api/tags/用户.json","hash":"e60c3f467165073c95593b670a172a2bab65f5fc","modified":1585940532494},{"_id":"public/api/tags/电影.json","hash":"f739757d78ab30748e4d08450de172ba6b1ee3f5","modified":1585940532494},{"_id":"public/api/tags/小黄人.json","hash":"36ad2f170f7c2e10049a7ff3aaf6ae212ece535b","modified":1585940532494},{"_id":"public/api/tags/预告片.json","hash":"994053f8036f6852eab7148d5c0aff9dd3810cb2","modified":1585940532494},{"_id":"public/api/tags/Gitee.json","hash":"b759364e1bd597d79dd3e8021e337a465e1184be","modified":1585940532494},{"_id":"public/api/tags/GitLab.json","hash":"ee198c305ff2374f752bb438f5ef2cab8198f84f","modified":1585940532494},{"_id":"public/api/tags/Gite.json","hash":"435f655fab1c170ce1e775a486917a56a51ce63c","modified":1585940532495},{"_id":"public/api/tags/Gogs.json","hash":"13e44b6c696147aa0745344c06eff93ef1bb60b2","modified":1585940532495},{"_id":"public/api/tags/迁移.json","hash":"764d79b91239c57e055577237bce53e53e577f73","modified":1585940532495},{"_id":"public/api/tags/代码.json","hash":"d16539b7bd115d57726c1ae9533525af0cbb046e","modified":1585940532495},{"_id":"public/api/tags/猫.json","hash":"6c9e7e3aa3135d24c24dbc82c59a4948f61ed127","modified":1585940532495},{"_id":"public/api/tags/Cat.json","hash":"fc278a5480d2c0f27bf7c768f9dc8e1c0e59800f","modified":1585940532495},{"_id":"public/api/tags/centOS.json","hash":"17a66cfae11b58f4918904d9fd72abd56599f5ef","modified":1585940532495},{"_id":"public/api/tags/Nginx.json","hash":"55a0074f53b7e9a56503584aeeeb7606ba52657f","modified":1585940532495},{"_id":"public/api/tags/Gunicorn.json","hash":"f3bd925006365cb0b5f7381a7486123a8eb8cced","modified":1585940532495},{"_id":"public/api/tags/MySQL.json","hash":"57688d6e55f8b901131ec37ab39769c9b7e82778","modified":1585940532496},{"_id":"public/api/tags/Supervisor.json","hash":"17649449c73acf170a28c94bae302ecd75de3b5e","modified":1585940532496},{"_id":"public/api/tags/文档.json","hash":"d187a6175c5028095c8953451866d3bcc402f7af","modified":1585940532496},{"_id":"public/api/tags/笔记.json","hash":"95795e99fa84a4fd7747bb2f86d28d7478b26ecd","modified":1585940532496},{"_id":"public/api/posts.json","hash":"1e57b7804000b1049baa865257e449ed8483a3d4","modified":1585940532496},{"_id":"public/api/posts/1.json","hash":"1e57b7804000b1049baa865257e449ed8483a3d4","modified":1585940532496},{"_id":"public/api/posts/2.json","hash":"88bf99a1f150206aa896f007cf2c9cb6ff06ed18","modified":1585940532496},{"_id":"public/api/posts/3.json","hash":"78c7a52edfb3d8b6f5bc9c8263cbcde5465bb96c","modified":1585940532497},{"_id":"public/api/posts/4.json","hash":"ec7a8033f1067af3bf2336c7733015f070e18261","modified":1585940532497},{"_id":"public/api/posts/5.json","hash":"91d20a4878f466f341ef12a6d0176b07ac007bcf","modified":1585940532497},{"_id":"public/api/articles/Gitee2Gitea.json","hash":"7043a63ce003541e799d63d1c8b9174d3c87d7dd","modified":1585940532497},{"_id":"public/api/articles/WebFlux中mongo操作-Transaction.json","hash":"88db479fa2fbea0e5a29b38d1a7559c497814b29","modified":1585940532497},{"_id":"public/api/articles/WebFlux中mongo操作-Aggregation.json","hash":"6d928f84b3fb596237516f25d28ca4b33463dc19","modified":1585940532498},{"_id":"public/api/articles/awesome-software.json","hash":"73d428e50c82431f2d16db23eecb4d803e039fb1","modified":1585940532498},{"_id":"public/api/articles/adoption-cat-Hua-Mulan.json","hash":"9add543fd7a995d47914bbe54d702808077fe13d","modified":1585940532498},{"_id":"public/api/articles/git-reset.json","hash":"1049931cdf06ba6e119da72bdf14be75c4a64b2b","modified":1585940532498},{"_id":"public/api/articles/git-alias.json","hash":"cca9d7c495f702c01651ede2fe4538b1c5c11755","modified":1585940532498},{"_id":"public/api/articles/android真机调试常用命令.json","hash":"b8059dd8fb3d76f8397bf86ef517c8dfce555349","modified":1585940532498},{"_id":"public/api/articles/js笔记.json","hash":"c493d4f3e12127cde9115a26812610c0ae89d13a","modified":1585940532498},{"_id":"public/api/articles/SpringWebFlux.json","hash":"5f3e0ae71acb242652901f9488ed2099b2e3cd6b","modified":1585940532498},{"_id":"public/api/articles/使用alembic进行数据库版本管理.json","hash":"4f73bcedb6971969c7d211b9e6edc9b0f9d5486b","modified":1585940532498},{"_id":"public/api/articles/django-rest-framework接口单元测试.json","hash":"f460ac6e6097878e5413dc5464025bda9084b8cf","modified":1585940532498},{"_id":"public/api/articles/在macos上更改jenkins默认用户解决权限问题.json","hash":"39a712a5d863dbdde4e957d4ee11fe704ab070d4","modified":1585940532498},{"_id":"public/api/articles/内网穿透工具frp客户端自定义子域名访问配置.json","hash":"cf3d932208377f9b165490f4d55fcbf8793f7cb0","modified":1585940532498},{"_id":"public/api/articles/mac远程连接windows.json","hash":"25c484e0491092e2a9801445bbf3d4083eddfe2f","modified":1585940532498},{"_id":"public/api/articles/django-rest-framework入门笔记及跳坑记录.json","hash":"5e3139f74b4094c79e1c963a1236d3ec6fd4aedf","modified":1585940532498},{"_id":"public/api/articles/django-rest-framework使用问题及解决方法.json","hash":"b5649141e1f4ab6bc555d3e77832a49f2b48851e","modified":1585940532499},{"_id":"public/api/articles/django-rest-framework里的api请求频率控制.json","hash":"bf0359ada240affb272c6a422aa4041e5b2d139b","modified":1585940532499},{"_id":"public/api/articles/在centos7使用mysql-nginx-gunicorn+supervisor部署django.json","hash":"b01de5fe18933ec19a6ef80da09f44e44cb04f88","modified":1585940532499},{"_id":"public/api/articles/npm入门命令.json","hash":"bc78ea59c545eb87313e57deb2b5f9b3db12aeb7","modified":1585940532499},{"_id":"public/api/articles/chrome扩展-插件-应用推荐.json","hash":"98f84f01e7d88ba1687ec51112be56e05d0cb3dd","modified":1585940532499},{"_id":"public/api/articles/django1-9文档阅读笔记.json","hash":"325dc3b6cd64484d4d4f8697fca8d8785a2c7d8a","modified":1585940532499},{"_id":"public/api/articles/django-rest-framework之版本号version.json","hash":"e88040d7ce68d9a950ca7743c38e7252c74587c5","modified":1585940532499},{"_id":"public/api/articles/curl常用命令.json","hash":"89654539d0743081c116c5c76d64cb0f6fa2355a","modified":1585940532499},{"_id":"public/api/articles/duoshuo-comments-ua.json","hash":"43a2b2e7587cef60bd3fa65942a46c88963bda79","modified":1585940532500},{"_id":"public/api/articles/django字段选项related-name和related-query-name.json","hash":"1ccd7be6677f8f47e4085bc2634baad2e477beb7","modified":1585940532500},{"_id":"public/api/articles/git-stash的简单运用.json","hash":"6a65d297fb68060fe21311038c696f46c369bc23","modified":1585940532500},{"_id":"public/api/articles/git-patch的简单运用.json","hash":"e875aff73f1b90651facd7bc42401a3a55ab30f8","modified":1585940532500},{"_id":"public/api/articles/material-design资源.json","hash":"b5e8a3bcba181b273917cdfcd7856330b569d7b7","modified":1585940532500},{"_id":"public/api/articles/git常用命令.json","hash":"eb2e58f3ccd3ba27dfc1a5cfea0a07034b5bac38","modified":1585940532500},{"_id":"public/api/articles/django内置的flatpages应用.json","hash":"48a368a67bebaecca2a994976fa8106baac24fd8","modified":1585940532506},{"_id":"public/api/articles/使用synergy实现多台电脑共享一套键鼠.json","hash":"29f9461d343d645cfd5e136f17db93c60664f815","modified":1585940532506},{"_id":"public/api/articles/ubuntu从14-10升级到15-04.json","hash":"64eeacd23c55d39c9493b28df345bcfc4dbb13e9","modified":1585940532506},{"_id":"public/api/articles/xy-problem.json","hash":"adc00f10d5dd3d8a85942a49a62a6b87a637b47f","modified":1585940532506},{"_id":"public/api/articles/python中的UUID.json","hash":"5015a092fa8d0690ee82f00e0f1df282361db49b","modified":1585940532506},{"_id":"public/api/articles/Apache-Rewrite.json","hash":"4588e499a4ff7235466ff8e699f5cdfd0cbe6ff4","modified":1585940532506},{"_id":"public/api/articles/chrome-add-to-homescreen.json","hash":"4ad0ed9ec66b8a2e63115e5919e5975f6afc516b","modified":1585940532506},{"_id":"public/api/articles/UC和QQ浏览器私有META.json","hash":"d5f989cfb9fccbbe045de9960667a6d460c51365","modified":1585940532506},{"_id":"public/api/articles/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.json","hash":"ac2bde9f3087dc2d0fd3549b9191e4947b2478d8","modified":1585940532506},{"_id":"public/api/articles/ubuntu安装JDK8.json","hash":"1a1b7ebdf8b1c02b12e9d3c6d08359f461071ec3","modified":1585940532506},{"_id":"public/api/articles/ubuntu运行shadowsocks客户端.json","hash":"08bd9435a210db41a955c78b46c0caa4b5dbc3b9","modified":1585940532507},{"_id":"public/api/articles/ubuntu更新NV显卡驱动.json","hash":"4c9d822e26791d0b6fac4ab104eabba44b97772f","modified":1585940532507},{"_id":"public/api/articles/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.json","hash":"9d3011e6376ab5861073435481f0b02ee69256aa","modified":1585940532507},{"_id":"public/api/articles/Git命令使用指南.json","hash":"8d7cdf94eb60b69cffb0d8ce6695afec0b398522","modified":1585940532508},{"_id":"public/api/articles/pip常用命令.json","hash":"cb81d3fb01430e4d26d0bcbd60048aa30b4e8886","modified":1585940532509},{"_id":"public/api/articles/使用virtualenv创建独立的python运行环境.json","hash":"f1b69cbf4b6fca2559270348693bc82cdf16e0f1","modified":1585940532509},{"_id":"public/api/articles/电影《小黄人》中文预告片.json","hash":"49b803d835f4d1cdb238ef2af417bda46548346b","modified":1585940532509},{"_id":"public/api/articles/Github-Pages-Gitcafe-Pages绑定自定义域名.json","hash":"ec1d03ad65e1410c2f9b8ec67fe2053af15a8fd4","modified":1585940532509},{"_id":"public/api/articles/hello-world.json","hash":"210847b42a3157ac3e783cd6523cce37dd9df77c","modified":1585940532509},{"_id":"public/api/pages/----.json","hash":"4e9b70fffee6fba3dd2dc26cce7aeb08fbcb78b4","modified":1585940532509},{"_id":"public/api/pages/.json","hash":"92d2e15ace165e6ef178a05f4962b936a6622d55","modified":1585940532509},{"_id":"public/api/pages/about.json","hash":"2d58a513339aa4c9e249d7c2a05f396aeef625f8","modified":1585940532509},{"_id":"public/api/pages/--.json","hash":"8738a6a124f807ec118a23227ae14103e0968865","modified":1585940532509},{"_id":"public/api/pages/---.json","hash":"3190e107012c41885b521eea56c9e574df0d1499","modified":1585940532509},{"_id":"public/api/pages/tagcloud.json","hash":"7be3afc73dbee0633ed85ad43a39a6a5811da4ba","modified":1585940532509},{"_id":"public/search.xml","hash":"78b8d0c704643fc2735f0e444e0ca64983998916","modified":1585940532509},{"_id":"public/sitemap.xml","hash":"0039bb6885f860fda4c1c32a7d40e5c01df093dd","modified":1585940532511},{"_id":"public/leancloud_counter_security_urls.json","hash":"9001f211c6f952f450bc4589ef0c36a8ce2a246f","modified":1585940532511},{"_id":"public/404.html","hash":"4232b4f661b98e0e14fd26f053500b59627d3a04","modified":1585940532583},{"_id":"public/about/index.html","hash":"6fe1171c64778ac14b9df14b1a018723885d5d62","modified":1585940532629},{"_id":"public/categories/index.html","hash":"f1f32380ae25b4e8fe8e00e17230acc6c882e2fd","modified":1585940532632},{"_id":"public/guestbook/index.html","hash":"b46cac2278f23b43374c2ab2f6a7e96b2d3e57f0","modified":1585940532633},{"_id":"public/history/index.html","hash":"e7a63f9a9213799603613ac55f0d2d29bae5c346","modified":1585940532633},{"_id":"public/instagram/index.html","hash":"ed760eee398e0aab8c36c0f910c386f21321054b","modified":1585940532644},{"_id":"public/plan/index.html","hash":"1e0f2640e15cbef7a1d25660217ddc114ea4f566","modified":1585940532645},{"_id":"public/tags/index.html","hash":"9dd6db0d961836d7b630a254e451115ad10cf85e","modified":1585940532645},{"_id":"public/thanks/index.html","hash":"599183e26ade13e1019c6b9e919199d148a3d678","modified":1585940532645},{"_id":"public/2020/03/01/Gitee2Gitea/index.html","hash":"2731bdd4fd0c4ab953de09bade84f1041c341bc8","modified":1585940532645},{"_id":"public/2020/01/17/WebFlux中mongo操作-Transaction/index.html","hash":"139400fe2e1c9a8acc6c9520a3565146ffa324b2","modified":1585940532646},{"_id":"public/2020/01/17/WebFlux中mongo操作-Aggregation/index.html","hash":"52908b41d3e0db17b67e865077366d31521f6564","modified":1585940532646},{"_id":"public/2019/10/12/awesome-software/index.html","hash":"9cd19017b7922aebdad512694c13f86ac71bd7b6","modified":1585940532647},{"_id":"public/2019/09/17/adoption-cat-Hua-Mulan/index.html","hash":"b3801fd5ffb0e7b725501f52ae1dc1d160b08d29","modified":1585940532647},{"_id":"public/2019/07/25/git-reset/index.html","hash":"09776ba387bc2eb8b9d8ac6efe5bd51c36187ced","modified":1585940532647},{"_id":"public/2019/06/28/git-alias/index.html","hash":"5deb2e73eb62f309fbc70580646262fb1dcac25f","modified":1585940532647},{"_id":"public/2019/04/28/android真机调试常用命令/index.html","hash":"15acf3af2a9241d44b896694ac5d4a184b82682a","modified":1585940532647},{"_id":"public/2019/04/24/js笔记/index.html","hash":"fb43b70d163ddb3a6f2b842f6d53105b8bd2fafd","modified":1585940532647},{"_id":"public/2019/02/28/SpringWebFlux/index.html","hash":"f542309aafcb64934f669b8de5f0a7564db53280","modified":1585940532647},{"_id":"public/2018/09/13/使用alembic进行数据库版本管理/index.html","hash":"6dbd34f40bdc7ac9655401df4e4e85b68ee027a1","modified":1585940532648},{"_id":"public/2017/09/05/django-rest-framework接口单元测试/index.html","hash":"f78bb253c90d9e3b12cb50db915c8a21c00e2d83","modified":1585940532648},{"_id":"public/2017/08/24/在macos上更改jenkins默认用户解决权限问题/index.html","hash":"e97b9442b3be62f5b2ac47e12de822222bd2c8b7","modified":1585940532648},{"_id":"public/2017/08/16/内网穿透工具frp客户端自定义子域名访问配置/index.html","hash":"4ab0ceea8dc18a6256490b89f3208f8912414738","modified":1585940532648},{"_id":"public/2017/08/08/mac远程连接windows/index.html","hash":"4a7db81204ba3d396b97d5909e639b64a00a378d","modified":1585940532648},{"_id":"public/2016/12/17/django-rest-framework入门笔记及跳坑记录/index.html","hash":"1c0b46b0ad06375b989e0682201f98fedb8e72f2","modified":1585940532648},{"_id":"public/2016/12/17/django-rest-framework使用问题及解决方法/index.html","hash":"ff7d7f7c48d5e181fa27f87801dfb891048d0c8c","modified":1585940532649},{"_id":"public/2016/12/17/django-rest-framework里的api请求频率控制/index.html","hash":"07a7e7ee9ea1d2baa775f96a09079097550043f6","modified":1585940532649},{"_id":"public/2016/12/08/在centos7使用mysql-nginx-gunicorn+supervisor部署django/index.html","hash":"119a05db14867287342d025d7b9338a11609610f","modified":1585940532649},{"_id":"public/2016/07/06/npm入门命令/index.html","hash":"07516e853c6c3a5be07b0ac67b0a9db46c325a4b","modified":1585940532649},{"_id":"public/2016/06/01/chrome扩展-插件-应用推荐/index.html","hash":"29935c9f1c790020a21b1d62bf00a90471088863","modified":1585940532678},{"_id":"public/2016/04/04/django1-9文档阅读笔记/index.html","hash":"2056bee9d170dc00ca3ba6573a73838235232150","modified":1585940532678},{"_id":"public/2016/01/28/django-rest-framework之版本号version/index.html","hash":"6f014903472e8a7baedb218bad558e0e73bc3722","modified":1585940532678},{"_id":"public/2015/12/17/curl常用命令/index.html","hash":"5b94c9c8c66398e8ba489d4d20aeb6d4b7fb544b","modified":1585940532679},{"_id":"public/2015/11/15/duoshuo-comments-ua/index.html","hash":"20f79d9e40fd3932c7054ef9c1b918c9b33d95e3","modified":1585940532680},{"_id":"public/2015/10/20/django字段选项related-name和related-query-name/index.html","hash":"a4bd17152c8a5a1b1e03f7a19092441f248d2b8b","modified":1585940532680},{"_id":"public/2015/10/20/git-stash的简单运用/index.html","hash":"a49f56d9a1e052cb2ad06fd541985f2bb90b3203","modified":1585940532680},{"_id":"public/2015/10/15/git-patch的简单运用/index.html","hash":"cf5a0a93512c30bb4eb1bb92d17584604c90312c","modified":1585940532680},{"_id":"public/2015/10/15/material-design资源/index.html","hash":"f18768ab766abc7a928ecc95274ba58e8b470f8d","modified":1585940532680},{"_id":"public/2015/09/11/git常用命令/index.html","hash":"d545e6a47b2edcf4497cccaa0c8656b32853b269","modified":1585940532680},{"_id":"public/2015/09/08/django内置的flatpages应用/index.html","hash":"5d9f7cf10a1f9baeb0578187732fb153fefcd57f","modified":1585940532681},{"_id":"public/2015/08/29/使用synergy实现多台电脑共享一套键鼠/index.html","hash":"4263caa0cf14233f4b0b46d8ab0a7d354a551e6c","modified":1585940532681},{"_id":"public/2015/08/29/ubuntu从14-10升级到15-04/index.html","hash":"469e33068c21efc3dd3b23504ca3b0d2ef6f79cb","modified":1585940532681},{"_id":"public/2015/07/04/xy-problem/index.html","hash":"60a9d6980a51ca8f0de5d6fffa5b43fcd62ec5b7","modified":1585940532681},{"_id":"public/2015/06/02/python中的UUID/index.html","hash":"ccd25bf2eba601092f9155c0854a2ff4ebf42bea","modified":1585940532681},{"_id":"public/2015/05/18/Apache-Rewrite/index.html","hash":"5a88db16c40f7173709c0b5db74fcf90dfd80545","modified":1585940532681},{"_id":"public/2015/05/11/chrome-add-to-homescreen/index.html","hash":"4b0be09cc2715d76d3873cb73661ac063707d2f0","modified":1585940532681},{"_id":"public/2015/05/06/UC和QQ浏览器私有META/index.html","hash":"6c8edc8e2627dd07516a851f58826705995c4057","modified":1585940532681},{"_id":"public/2015/03/28/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool/index.html","hash":"dc2e4247facf217cd02fc1d1aa294435def761b1","modified":1585940532681},{"_id":"public/2015/03/28/ubuntu安装JDK8/index.html","hash":"bc17e1091cf2aca45f9fbfd3375cb71a75f2b437","modified":1585940532682},{"_id":"public/2015/03/28/ubuntu运行shadowsocks客户端/index.html","hash":"5dd588028f42ab91635a47218a7b3a9e954e51c7","modified":1585940532682},{"_id":"public/2015/03/27/ubuntu更新NV显卡驱动/index.html","hash":"7c8c5ffd5c5d4e142153417acbc4f8ccbfcdf108","modified":1585940532682},{"_id":"public/2015/02/04/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）/index.html","hash":"036bdb102dc225e9c9640c9926030f9d0cf9da15","modified":1585940532694},{"_id":"public/2015/01/16/Git命令使用指南/index.html","hash":"4ac6ba9e1cc413776af54f8869a17ee08aef683d","modified":1585940532695},{"_id":"public/2015/01/01/pip常用命令/index.html","hash":"6b543926aea68e4167226523160314c36917c76c","modified":1585940532695},{"_id":"public/2015/01/01/使用virtualenv创建独立的python运行环境/index.html","hash":"3923cf683444c0ed328cde85ee96e22a3a1235e2","modified":1585940532695},{"_id":"public/2014/11/09/电影《小黄人》中文预告片/index.html","hash":"9ef216bc6e1a367f9f5235baa0db5df1ae3a065f","modified":1585940532695},{"_id":"public/2014/11/09/Github-Pages-Gitcafe-Pages绑定自定义域名/index.html","hash":"1d2d4e9043af877aa17e3a738d735735eb4d81fc","modified":1585940532695},{"_id":"public/2014/09/15/hello-world/index.html","hash":"b7382e5065b50b02ca9c895ab69b419fa32a9ab6","modified":1585940532696},{"_id":"public/archives/index.html","hash":"7169db8b56aeebaae49f4d914b139d5ca12a37b8","modified":1585940532697},{"_id":"public/archives/2014/index.html","hash":"a20ce9173e74e35a316695fe6bf1abbb2e9105ca","modified":1585940532697},{"_id":"public/archives/2014/09/index.html","hash":"add20ba8e02d9b0affc802dfd7e22852b1291b5a","modified":1585940532697},{"_id":"public/archives/2014/11/index.html","hash":"37ff72cdb732b93af676a52ae8f099313571500d","modified":1585940532698},{"_id":"public/archives/2015/index.html","hash":"ac75cc2e811a7294396d95e8a4b495312a909ca6","modified":1585940532698},{"_id":"public/archives/2015/01/index.html","hash":"00e93209785d3323df1f3e1c3130b0c4a6e2a0d3","modified":1585940532698},{"_id":"public/archives/2015/02/index.html","hash":"4032d101071ef2aac37318eeaf5864f3947d6bba","modified":1585940532698},{"_id":"public/archives/2015/03/index.html","hash":"7a59f522f5dd02f8367e2503f64000d71453ef54","modified":1585940532698},{"_id":"public/archives/2015/05/index.html","hash":"0d6e1209709cbb73d13f087b96ccd93f75d40a90","modified":1585940532698},{"_id":"public/archives/2015/06/index.html","hash":"4f35f9f938f9331d011532e64e06ae63ae769f43","modified":1585940532700},{"_id":"public/archives/2015/07/index.html","hash":"ef0a87cabac9be6887c90a57eccf7cdc45af7b82","modified":1585940532700},{"_id":"public/archives/2015/08/index.html","hash":"423261757d6a4c6b9af33556ed08a2a628c8b264","modified":1585940532709},{"_id":"public/archives/2015/09/index.html","hash":"ff351f02351e3e5069cb6b75264fb73a56b451e5","modified":1585940532710},{"_id":"public/archives/2015/10/index.html","hash":"39704cf263b96ffba8721bf0b8f34af3b8f230c3","modified":1585940532710},{"_id":"public/archives/2015/11/index.html","hash":"9d84b3efa3bf389ba279f6d41bcfe896eb8567aa","modified":1585940532712},{"_id":"public/archives/2015/12/index.html","hash":"31ce41d98e9e5080358a39e3bba0c7de5f399140","modified":1585940532712},{"_id":"public/archives/2016/index.html","hash":"d0b92dfcae18f5d669457822f86e807597207cfc","modified":1585940532712},{"_id":"public/archives/2016/01/index.html","hash":"eac58ae571e1635241c7aa60ffef1c7b5dab004d","modified":1585940532712},{"_id":"public/archives/2016/04/index.html","hash":"aef0aedaa340ea21c82a9981471a92f0e0950449","modified":1585940532712},{"_id":"public/archives/2016/06/index.html","hash":"c99d14352242b297bfa30eb6ce0d37dbebf98b17","modified":1585940532713},{"_id":"public/archives/2016/07/index.html","hash":"f6c30331c3292b05edf07de0e2205e8a3330bf74","modified":1585940532713},{"_id":"public/archives/2016/12/index.html","hash":"b8f1186083ca5f7c32a72621c3482c62142f2c50","modified":1585940532713},{"_id":"public/archives/2017/index.html","hash":"94fb8d1dcd260c079e3efb173d5b3a3d8338da41","modified":1585940532713},{"_id":"public/archives/2017/08/index.html","hash":"fb7bfd7cb9b79faf67e47789c0e402643e670fca","modified":1585940532713},{"_id":"public/archives/2017/09/index.html","hash":"85c7534fdd04ffd78db70dd2143971cf20e10cb3","modified":1585940532713},{"_id":"public/archives/2018/index.html","hash":"183293d1f88b42e403089ba1587cf47526258d22","modified":1585940532713},{"_id":"public/archives/2018/09/index.html","hash":"cade10bf2018bc25b4fea5bd62974278911401e7","modified":1585940532715},{"_id":"public/archives/2019/index.html","hash":"d3da42de692c2de79d2b2465d76e98389883e7f8","modified":1585940532715},{"_id":"public/archives/2019/02/index.html","hash":"8dc4eca0490649c0bd681640a20adf2b05a7ba1e","modified":1585940532727},{"_id":"public/archives/2019/04/index.html","hash":"ba7a1a3e8eed51fb587f9de23f85a0aa16c3763f","modified":1585940532727},{"_id":"public/archives/2019/06/index.html","hash":"4b6fb45207802f8f576b54382b1388e7a6f46f1c","modified":1585940532727},{"_id":"public/archives/2019/07/index.html","hash":"22d10d9d59a5124f515a50b47bcf1eca46ce8cd7","modified":1585940532727},{"_id":"public/archives/2019/09/index.html","hash":"b3a84ecbf7293e56c124e65a90aede78f0fc5750","modified":1585940532728},{"_id":"public/archives/2019/10/index.html","hash":"b5e5e007ca249a706f01da82891713d888e2d6ef","modified":1585940532729},{"_id":"public/archives/2020/index.html","hash":"e35c8b254824bad85c92935d36e04c9804e3610c","modified":1585940532729},{"_id":"public/archives/2020/01/index.html","hash":"caf2537b14742f2524751a8c6674f7d3b7dce9bd","modified":1585940532729},{"_id":"public/archives/2020/03/index.html","hash":"13d3e1f67f2a6b67735498f7b81702ccb4c67a41","modified":1585940532730},{"_id":"public/categories/程序猿/index.html","hash":"35e4d0619b326113aec4e715ed857e437a16cddf","modified":1585940532730},{"_id":"public/categories/程序猿/page/2/index.html","hash":"f486bc6db6a999bb9e2c3f047b11d4020bd03e87","modified":1585940532730},{"_id":"public/categories/程序猿/page/3/index.html","hash":"b6d3ee06f5707a61960a41a46ab732e86ae4309d","modified":1585940532732},{"_id":"public/categories/程序猿/page/4/index.html","hash":"684d35d0505bbc932e72c1e146c6d34fd059dd6f","modified":1585940532732},{"_id":"public/categories/网站/index.html","hash":"653e956f89ba50f16526cc28f8693f8fe970234f","modified":1585940532732},{"_id":"public/categories/程序员/index.html","hash":"4a65d40f40c7c2b0ffbd4eaecab9196cb28fff00","modified":1585940532766},{"_id":"public/categories/工具/index.html","hash":"0992e15f0695b1a98ac7f2d679090b4f04c7f897","modified":1585940532766},{"_id":"public/categories/优化辅助/index.html","hash":"8c0d932877205b9bba9b01d4d2f0be56eaf1f8d9","modified":1585940532766},{"_id":"public/categories/其它/index.html","hash":"ab8fcd230fa0884a5ff307bf0ef223a8154538b8","modified":1585940532766},{"_id":"public/categories/随笔/index.html","hash":"b82e47a7af7f44e829d9680adb782697ef253486","modified":1585940532766},{"_id":"public/categories/影视/index.html","hash":"43c56a800505ac234e81a983fc9a0487775f9fa1","modified":1585940532766},{"_id":"public/categories/猫/index.html","hash":"f27a905d1d513c56c3803c2dd8ad8d7d4540bb54","modified":1585940532766},{"_id":"public/index.html","hash":"eba14ce6208cbdaa0cc52637b95654e6524a4acd","modified":1585940532773},{"_id":"public/page/2/index.html","hash":"2dccfaf1c78624dfa5fd19e8094ce169be35a785","modified":1585940532773},{"_id":"public/page/3/index.html","hash":"d6c0a96bce665d2b93a16a830a14ac83c761863e","modified":1585940532773},{"_id":"public/page/4/index.html","hash":"d053b4b8e47eaf26c91b1a4a217ec9aa1c48d4b8","modified":1585940532776},{"_id":"public/page/5/index.html","hash":"edf83ccc7184dc99ee731939c260417587785a08","modified":1585940532776},{"_id":"public/tags/apache/index.html","hash":"4d27bf192450354076a15b02fa4ab198e0a0575f","modified":1585940532776},{"_id":"public/tags/重定向/index.html","hash":"f38b28afefcc3dbd0ddb71189a7c51e206c56b39","modified":1585940532777},{"_id":"public/tags/域名/index.html","hash":"d19b8ff26fb27dfbdd465090ff499f12a1ae9259","modified":1585940532777},{"_id":"public/tags/github/index.html","hash":"a4a5801e789d029cc43e6e4486a6719eda6d4647","modified":1585940532780},{"_id":"public/tags/gitcafe/index.html","hash":"5f9a090bab9e92c9feaa6ceae22f036ff64f29e9","modified":1585940532780},{"_id":"public/tags/java/index.html","hash":"abcff59428994fa8f4103e0b93b171b71c84e195","modified":1585940532781},{"_id":"public/tags/reactive/index.html","hash":"af173f7daffc1b98350e99449a889f96ce33cb51","modified":1585940532781},{"_id":"public/tags/meta/index.html","hash":"a1799757ebb34b06ac9544e0f1392260a6e4c3c7","modified":1585940532781},{"_id":"public/tags/浏览器/index.html","hash":"759b498687bf991c0fd3bfe010d907357b8f7339","modified":1585940532781},{"_id":"public/tags/前端/index.html","hash":"540846389ca62a72c39af0b6990c4d00088d5faf","modified":1585940532781},{"_id":"public/tags/事务/index.html","hash":"5911394a675c0d59dbd6aff4587391522f5cec55","modified":1585940532781},{"_id":"public/tags/mongo/index.html","hash":"9d8a7a802d270fdb425a4133ba13d5fe387d4860","modified":1585940532781},{"_id":"public/tags/数据库/index.html","hash":"b4fa575f4bbd855eb477323b35677eeb88d8a017","modified":1585940532781},{"_id":"public/tags/aggregation/index.html","hash":"6a4d575df9bde5b65bc6a9d72e28c3c1226524e9","modified":1585940532782},{"_id":"public/tags/flux/index.html","hash":"4a6b3e4abca9919460c97562320bf03f8defba74","modified":1585940532782},{"_id":"public/tags/android/index.html","hash":"1c03e3a7d989781e0ff84487dc916ee8724c6ee8","modified":1585940532782},{"_id":"public/tags/macos/index.html","hash":"b6272b5e0f1c638092e0b2876b5e8ef240afd94a","modified":1585940532782},{"_id":"public/tags/命令/index.html","hash":"c6a6455a864635466c410930f99dc42653e072f8","modified":1585940532783},{"_id":"public/tags/效率/index.html","hash":"4bc070c291659188e03276c41fbe177f6c8d1568","modified":1585940532783},{"_id":"public/tags/无线/index.html","hash":"5679074ed155b57cd9f08141116a5d4390a3b5f7","modified":1585940532783},{"_id":"public/tags/调试/index.html","hash":"852a98b46d481c61345f31806c967968b303e2ab","modified":1585940532783},{"_id":"public/tags/adb/index.html","hash":"20faf780240cf0c4d2ec81c5c9301c048d364ad8","modified":1585940532783},{"_id":"public/tags/usb/index.html","hash":"3f67e02d93335dd2eaeca04d34f7717ea4e2065d","modified":1585940532783},{"_id":"public/tags/软件/index.html","hash":"d7c500ec570b0acdd70c1d8b9fb5f8fc9474e07c","modified":1585940532783},{"_id":"public/tags/推荐/index.html","hash":"e8d7b39661e2924b098e23ad884076d8e1cfff08","modified":1585940532790},{"_id":"public/tags/chrome/index.html","hash":"a8858c46af7603125e7a5fff6fc041a84b1d6e0d","modified":1585940532790},{"_id":"public/tags/工具/index.html","hash":"b9edf046161722032b1c8da71228d19f1af39b73","modified":1585940532790},{"_id":"public/tags/扩展/index.html","hash":"39ff2c27d12e2e650ac0d32249d930ceaeb55772","modified":1585940532791},{"_id":"public/tags/插件/index.html","hash":"1ff0019b801acc2aa48a8160798736ea1ce49fbc","modified":1585940532791},{"_id":"public/tags/curl/index.html","hash":"999b613b9894978afa413deb66600628e02ed5f8","modified":1585940532791},{"_id":"public/tags/教程/index.html","hash":"6b7a60850e7c6ba87656703742e9eb24e0478d17","modified":1585940532791},{"_id":"public/tags/django/index.html","hash":"6d4aba5c1bcee0065453bc614e755cc72bcc192d","modified":1585940532794},{"_id":"public/tags/restful/index.html","hash":"0bc96c5ffcc3138a726e19971f9cb5f3960cd3d0","modified":1585940532794},{"_id":"public/tags/api/index.html","hash":"d564039e44a1fd474800f43249d428d255bd76e7","modified":1585940532795},{"_id":"public/tags/version/index.html","hash":"4657a36297bd09aa401b2f1a0623ea68068ef92c","modified":1585940532795},{"_id":"public/tags/问题/index.html","hash":"bb5f37a6e86126452acfb0005499a1fa7e08cf54","modified":1585940532795},{"_id":"public/tags/restful-api/index.html","hash":"ddea8f28934ec90ce0a15fa46b6fc46ae7a34fc5","modified":1585940532795},{"_id":"public/tags/接口/index.html","hash":"e0feb37db3dc96cc54ab7e02e44cd5a013b35c91","modified":1585940532795},{"_id":"public/tags/单元测试/index.html","hash":"857e324d680a4dc3aa7a295e7ec37483016341d3","modified":1585940532796},{"_id":"public/tags/测试/index.html","hash":"58739264361ba4c180e7e2cad25d43c44dc80b9d","modified":1585940532796},{"_id":"public/tags/api，-version/index.html","hash":"fe0704c9bb5e0e3779da4a30ba3367c0e689c94e","modified":1585940532796},{"_id":"public/tags/python/index.html","hash":"9f6b1825cc993e9b094fa227ec3e3e6d9dcc3ac3","modified":1585940532796},{"_id":"public/tags/git/index.html","hash":"e75e4e987a3a0fffc93df7a7478bc619a396ce39","modified":1585940532796},{"_id":"public/tags/reset/index.html","hash":"8ddcfbcd68cc17243b708f8f4ec5246814605f74","modified":1585940532796},{"_id":"public/tags/恢复/index.html","hash":"d7da01b11c2721c15b583e5a50bd45aae7602e81","modified":1585940532796},{"_id":"public/tags/后悔/index.html","hash":"5b230949ea5bed9f3661c47a4e2f6b1317de87f3","modified":1585940532797},{"_id":"public/tags/js/index.html","hash":"6fdae7555f642f595b486f8a3a09a0effc72802b","modified":1585940532797},{"_id":"public/tags/远程/index.html","hash":"52f3ce442578c93620551e9f748199693338c6e1","modified":1585940532797},{"_id":"public/tags/material-design/index.html","hash":"98ffbdb287ba9c48bc7c858262cf1a1277c0ff4f","modified":1585940532797},{"_id":"public/tags/网页框架/index.html","hash":"1f4f9bc8bfd4ca34a83680cf42a72ff4bea8a2dd","modified":1585940532797},{"_id":"public/tags/npm/index.html","hash":"128226106de8f434ee6422b2815a277ffd40200b","modified":1585940532798},{"_id":"public/tags/nodejs/index.html","hash":"c12f88a785e172487c1ac8c394d9212dc6fa47a1","modified":1585940532798},{"_id":"public/tags/pip/index.html","hash":"dca244f37baf6898fbcfadbebd41142ea7ab83df","modified":1585940532798},{"_id":"public/tags/uuid/index.html","hash":"34d637decc8bafa68651b1cacd24e6de299c96be","modified":1585940532798},{"_id":"public/tags/ubuntu/index.html","hash":"3f4a1d4139ce286e19bae3971e1685c3a7043571","modified":1585940532798},{"_id":"public/tags/jdk/index.html","hash":"4248fbe0828c5a076c1c3f6bf976addad0bbdaf0","modified":1585940532798},{"_id":"public/tags/驱动/index.html","hash":"26b28fba15230d643895f193290de9b20a3e9718","modified":1585940532798},{"_id":"public/tags/shadowsocks/index.html","hash":"1a0012c268a2be73a02d441651ba787e78feb861","modified":1585940532798},{"_id":"public/tags/杂谈/index.html","hash":"af6d3c57e19a1e01da5a87c10cdcccdd4f17baa4","modified":1585940532798},{"_id":"public/tags/微信公众号/index.html","hash":"b570a3cd5878b303c47de71e337a9ab21481d9b0","modified":1585940532798},{"_id":"public/tags/端口/index.html","hash":"2b262d6a4167a1ed9a64e8c7e299c2b11a84af8a","modified":1585940532799},{"_id":"public/tags/ngrok/index.html","hash":"45c5529464e47ad9271210735ae791fbcd7bba26","modified":1585940532816},{"_id":"public/tags/内网穿透/index.html","hash":"677c6c2719c8a3bb00e9e2f4978dac756c70532a","modified":1585940532826},{"_id":"public/tags/virtualenv/index.html","hash":"594ed0e431905198b87d867ce5168b9461b64e38","modified":1585940532826},{"_id":"public/tags/virtualenvwrapper/index.html","hash":"e3fd23bf36c2f33d2e511519990b3712b7a30641","modified":1585940532827},{"_id":"public/tags/独立/index.html","hash":"66d9c509e3aa601fe08ba0e7ac9a94dc3c5acdae","modified":1585940532827},{"_id":"public/tags/虚拟环境/index.html","hash":"e97db4e8b240449e4ad5acf226192f9faeca4388","modified":1585940532828},{"_id":"public/tags/requirements/index.html","hash":"0dfa73fd16313d23537ef0536c7d5b269a91990d","modified":1585940532828},{"_id":"public/tags/synergy/index.html","hash":"849bf963118c9713e0d978c4585b6495dac07349","modified":1585940532828},{"_id":"public/tags/共享/index.html","hash":"c6a31306d0ebf73e4a1410bba7fe6f41dccbc1ee","modified":1585940532828},{"_id":"public/tags/键盘/index.html","hash":"b4ef9dd00d528e8aac45e07705d5a52fe305fdb7","modified":1585940532828},{"_id":"public/tags/jenkins/index.html","hash":"7525e8d6afcbe2357fcee89cf1dc1da4001414da","modified":1585940532829},{"_id":"public/tags/权限/index.html","hash":"5035e534b413c1dc78ffd729f93c0e0fe0727a67","modified":1585940532829},{"_id":"public/tags/用户/index.html","hash":"fe6e949bd8acf20d6ca9a0ade3bb6866dd5b6ae8","modified":1585940532829},{"_id":"public/tags/电影/index.html","hash":"3d70fcb72fafaa150e7e30be11728e66d3c583ea","modified":1585940532859},{"_id":"public/tags/小黄人/index.html","hash":"566f756f0846a5543aa4a211946131abfb0350a1","modified":1585940532863},{"_id":"public/tags/预告片/index.html","hash":"641761af88e3456d58ba428179617563297179db","modified":1585940532863},{"_id":"public/tags/gitee/index.html","hash":"5e8569f0666e0137c128a1d9ff0f3d148a72a3a8","modified":1585940532863},{"_id":"public/tags/gitlab/index.html","hash":"3c5c32206cee070aaae94c5f5b7d2ad8b4eb0192","modified":1585940532866},{"_id":"public/tags/gite/index.html","hash":"cc392003ba9ca1d9eda4822e91fa2848a8789748","modified":1585940532866},{"_id":"public/tags/gogs/index.html","hash":"aa54b9903dc293a5d4c8b2042ccc9d5766dc3aba","modified":1585940532866},{"_id":"public/tags/迁移/index.html","hash":"9afbae61a03aa91b05972a4aa587a2f41cb4b6f0","modified":1585940532866},{"_id":"public/tags/代码/index.html","hash":"c4961d0a12dc3cfd5b84322e2fe044fbfab698c4","modified":1585940532866},{"_id":"public/tags/猫/index.html","hash":"fadf6b0204773efb90b7a1cbdfd360e00e6efe63","modified":1585940532866},{"_id":"public/tags/cat/index.html","hash":"a3a86c2cde909e111eac1387f57893ef22de6216","modified":1585940532867},{"_id":"public/tags/centos/index.html","hash":"cbfb6789facf95554cfe7cbc5528895d26e39c3d","modified":1585940532867},{"_id":"public/tags/nginx/index.html","hash":"015789c4e1c2747a10bbad4d9048eb50b9d86cf6","modified":1585940532875},{"_id":"public/tags/gunicorn/index.html","hash":"919a1eba5f64d95e96317deb8e1cf0ee6550a1cb","modified":1585940532878},{"_id":"public/tags/mysql/index.html","hash":"c2cdbbcaae90eb80a179e645e88bcc7911b51ca1","modified":1585940532879},{"_id":"public/tags/supervisor/index.html","hash":"cc31e7a97cb38de118ca2e3dc0ed4b83f411832a","modified":1585940532879},{"_id":"public/tags/文档/index.html","hash":"e1695d62ff1ec3e038d99876f658689da63a5157","modified":1585940532879},{"_id":"public/tags/笔记/index.html","hash":"71914ffd2a7cfb984cc0662bb950b61da5f2fee3","modified":1585940532879},{"_id":"public/CNAME","hash":"12429add85bfdc53322e275c4b2e8e1cf86ae660","modified":1585940533040},{"_id":"public/README","hash":"d001ba1bb6097331b01adcdd63dceac23fba917f","modified":1585940533040},{"_id":"public/avatar.png","hash":"4a2f19c786849c7ba5a0ca788a8c5362111dd7e6","modified":1585940533040},{"_id":"public/favicon.ico","hash":"7e52610aa79be8b2715cdc796ff70888027a096c","modified":1585940533040},{"_id":"public/headimg.jpg","hash":"c410e4e6ca6620fa70f61b8fea8993898c5fe4f4","modified":1585940533040},{"_id":"public/leancloud.memo","hash":"8fdbce05ab725473a023b5b7aef7ac8d143c9bd2","modified":1585940533040},{"_id":"public/iblogc.jpg","hash":"b59417411922e40c352142a1a4045ac08be14954","modified":1585940533040},{"_id":"public/logo.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1585940533040},{"_id":"public/media/Git工作流图示.jpg","hash":"ff47b8fe4f51e3f8e8786aecaac828a31687cc33","modified":1585940533041},{"_id":"public/media/Synergy-Ubuntu客户端配置首页.png","hash":"6be912785635eab8d50d9c6a8fbf936bb837a2f6","modified":1585940533041},{"_id":"public/media/Synergy-Windows服务端启动.png","hash":"e2e474b0d53b4d3ef9b8fb73b890bf4e222df819","modified":1585940533041},{"_id":"public/media/Synergy-Windows服务端添加客户端-01.png","hash":"06b483ef17ba74aa9fa3b1fcdcf014a1034cd463","modified":1585940533041},{"_id":"public/media/Synergy-Windows服务端添加客户端-02.png","hash":"8d5f9f631dd86d330f7ac29ffba7a068250bb365","modified":1585940533041},{"_id":"public/media/Synergy-Windows服务端添加客户端-03.png","hash":"de178e92103cc351e61b0c6fe51c0947d8931dad","modified":1585940533041},{"_id":"public/media/Synergy-logo.png","hash":"93a0b5041c5d8991e0f8d54eb78e4bc9333ea983","modified":1585940533041},{"_id":"public/media/Synergy-Windows服务端配置首页.png","hash":"32a75306f6b436bb5c21395b3df0f91dfd1b0675","modified":1585940533042},{"_id":"public/media/chrome-add-to-homescreen-01.png","hash":"eda787be416140cc44ce3315e92b8d5a1484e6aa","modified":1585940533042},{"_id":"public/media/django-commands.png","hash":"b5440646c7f0c08d36d9f8ec318a1478b96357c1","modified":1585940533042},{"_id":"public/media/materialdesign-goals-landingimage_large_mdpi.png","hash":"6be66328478c4f7f493851e8111d7fefd632a17e","modified":1585940533042},{"_id":"public/media/ngrok-auth.png","hash":"fa87d4245d014a27ef0a1ab3ea8a596652e40d05","modified":1585940533042},{"_id":"public/media/ngrok-iblogc.png","hash":"8f0b03810f6707c8c52bc328eadb301a832884e0","modified":1585940533042},{"_id":"public/media/ngrok-start-iblogc-django-weixin.png","hash":"76d9a641237ca6be00317d1ccced0d190cebde66","modified":1585940533042},{"_id":"public/media/ngrok-start-iblogc.png","hash":"4193180dd1b54527291695864f99f229bcdb59bf","modified":1585940533042},{"_id":"public/media/nrok-web-interface.png","hash":"30a1c7cac707cc34a7f14073d81ee196806f2e92","modified":1585940533043},{"_id":"public/media/ubuntu-14.10-15.04-01.png","hash":"aae6d385e821ca525d44467e703e006dba8e16fd","modified":1585940533043},{"_id":"public/media/ubuntu-15.04-info.png","hash":"bfac826b50887ba62d060f5916412d16b2cdafca","modified":1585940533044},{"_id":"public/media/ubuntu-15.04-logo.jpg","hash":"c7cd03bf4f445f6d30ce4c4dfc8b75d8f49ac1f7","modified":1585940533044},{"_id":"public/res/ic_launcher_144.png","hash":"2d6ff7004c2b0a5216aaa4a793c0652f9774c954","modified":1585940533044},{"_id":"public/res/ic_launcher_192.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1585940533045},{"_id":"public/res/ic_launcher_32.png","hash":"82904aaf780efcd29c36e3342b6c5b7dab6d4cd4","modified":1585940533045},{"_id":"public/res/ic_launcher_48.png","hash":"f01f57128c1a4ede6ab10db40b691710ce4ad88c","modified":1585940533045},{"_id":"public/res/ic_launcher_72.png","hash":"09b49bb09e024f154c285f2bd1cf128ed61846c7","modified":1585940533045},{"_id":"public/res/ic_launcher_96.png","hash":"88f3d836089f20390c874ce1ed80279d9ab4b045","modified":1585940533045},{"_id":"public/res/微依LOGO.JPG","hash":"870b497e38687960db98cc169db502324255269e","modified":1585940533045},{"_id":"public/media/花木兰/1.jpg","hash":"ef361dbf85290e019e14d8f2288a419b73c69a83","modified":1585940533045},{"_id":"public/media/花木兰/10.jpg","hash":"76e51f260de7d0c9c086b55501a2db063551250f","modified":1585940533045},{"_id":"public/media/花木兰/15.jpg","hash":"bab4a1a38176708e256460ae5f1d3ba89e055219","modified":1585940533046},{"_id":"public/media/花木兰/2.jpg","hash":"4993fb89246274e1069405492c9b03c0eaa7ba4b","modified":1585940533046},{"_id":"public/media/花木兰/5.jpg","hash":"a43adae2646d182e809721e1b5f82219c352d344","modified":1585940533046},{"_id":"public/media/花木兰/7.jpg","hash":"b2ed67a3f11b2c5eb8f59cec94a45048db67b277","modified":1585940533046},{"_id":"public/media/花木兰/8.jpg","hash":"caea2805302864c8164c0c740526eb4536f0969b","modified":1585940533046},{"_id":"public/media/花木兰/9.jpg","hash":"9521454ddaaff69aad26a76280c2f04ea5d8e35b","modified":1585940533047},{"_id":"public/media/花木兰/4.jpg","hash":"d63c2a35981e67a91aac052f490fca5202f36d55","modified":1585940533047},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1585940533047},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1585940533047},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1585940533047},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1585940533048},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1585940533048},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1585940533048},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1585940533048},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1585940533048},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1585940533048},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1585940533048},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1585940533048},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1585940533048},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1585940533048},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1585940533048},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1585940533048},{"_id":"public/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533048},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533048},{"_id":"public/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533048},{"_id":"public/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1585940533049},{"_id":"public/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533049},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1585940533049},{"_id":"public/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533049},{"_id":"public/lib/pangu/LICENSE","hash":"41ba9068d26515f43fa44a3f975f016c06171ef4","modified":1585940533049},{"_id":"public/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1585940533049},{"_id":"public/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1585940533049},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1585940533049},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1585940533049},{"_id":"public/lib/pangu/dist/pangu.js.map","hash":"6a7c5927e3410ed4dfe14caa9fb2eb115d85e5e7","modified":1585940533049},{"_id":"public/lib/pangu/dist/pangu.min.js.map","hash":"1aa0d935665a2f075bbc4b5f0a53bbfaece12c5b","modified":1585940533049},{"_id":"public/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1585940533049},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1585940533050},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1585940533050},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1585940533050},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1585940533055},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1585940533055},{"_id":"public/live2dw/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1585940533055},{"_id":"public/assets/algolia/algoliasearchLite.min.js","hash":"38fd04b692967f202c7141a50c277af7bc7d5d97","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1585940533057},{"_id":"public/live2dw/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1585940533057},{"_id":"public/live2dw/assets/tororo.model.json","hash":"3b96ea33460642d288c98327444966d93a0c11ba","modified":1585940533058},{"_id":"public/live2dw/assets/tororo.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1585940533058},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1585940533058},{"_id":"public/live2dw/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1585940533058},{"_id":"public/live2dw/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1585940533058},{"_id":"public/media/chrome-add-to-homescreen-02.png","hash":"cedf1fd253b592f7587e1d4a5bbeece98603c45d","modified":1585940536181},{"_id":"public/media/chrome-add-to-homescreen-04.png","hash":"9a087913f791b6d68db35c5515cbc1ff9d085cb4","modified":1585940536181},{"_id":"public/media/git-reset_drbfhd.png","hash":"eedef60b857f50b5f96044a833e59b0f0c9a2480","modified":1585940536181},{"_id":"public/media/花木兰/13.jpg","hash":"5508a140aa87367e33490ac596ac93cba3e7a6d9","modified":1585940536181},{"_id":"public/media/花木兰/6.jpg","hash":"1f44e894a046df81bb1b7405b28b6ccb8f03779d","modified":1585940536182},{"_id":"public/media/花木兰/14.jpg","hash":"9e043c958be8797c8196ba9b4992ad6002ed3a7f","modified":1585940536182},{"_id":"public/media/花木兰/3.jpg","hash":"bc11442dd01b439c8dbe9589887fdeafa0a79483","modified":1585940536182},{"_id":"public/media/花木兰/11.jpg","hash":"9bce83bca3d73ac859f1fff522dc7fe95a1afd3e","modified":1585940536182},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1585940536182},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1585940536182},{"_id":"public/assets/algolia/algoliasearch.min.js","hash":"08067908867d29eeebeab19cfe5761a2f9cbff8b","modified":1585940536182},{"_id":"public/assets/algolia/algoliasearchLite.js","hash":"e5cccd4f82d62456360982fefaf2702f6e8ef0f5","modified":1585940536183},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1585940536199},{"_id":"public/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1585940536480},{"_id":"public/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1585940536480},{"_id":"public/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1585940536480},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1585940536480},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1585940536483},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1585940536488},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1585940536490},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1585940536490},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1585940536492},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1585940536508},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1585940536508},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1585940536509},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1585940536509},{"_id":"public/lib/pjax/package.json","hash":"eb7754d64e95ddd9a922c6a6fa2d1c3ff6321a96","modified":1585940536509},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1585940536509},{"_id":"public/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1585940536509},{"_id":"public/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1585940536510},{"_id":"public/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1585940536510},{"_id":"public/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1585940536510},{"_id":"public/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1585940536510},{"_id":"public/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1585940536510},{"_id":"public/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1585940536510},{"_id":"public/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1585940536511},{"_id":"public/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1585940536511},{"_id":"public/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1585940536511},{"_id":"public/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1585940536511},{"_id":"public/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1585940536512},{"_id":"public/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1585940536512},{"_id":"public/lib/pjax/lib/events/off.js","hash":"79920b24246e150f1c73511f1a271b93b9c5d9c8","modified":1585940536512},{"_id":"public/lib/pjax/lib/events/on.js","hash":"111fba16cc4ca701aefedea2589c832b60af303d","modified":1585940536513},{"_id":"public/lib/pjax/lib/events/trigger.js","hash":"c05ba73199c5e2c7682655491ed37743bd451751","modified":1585940536513},{"_id":"public/lib/pjax/lib/proto/attach-form.js","hash":"b41c66e58897e6371fbd04cd2b9eb7bae10e0d89","modified":1585940536513},{"_id":"public/lib/pjax/lib/proto/attach-link.js","hash":"d15a61235aa8c1615e60ea34d9bbee834be804d0","modified":1585940536513},{"_id":"public/lib/pjax/lib/proto/handle-response.js","hash":"f68bab958cce4dbbcb91920d7a8aba55b9066b41","modified":1585940536513},{"_id":"public/lib/pjax/lib/proto/parse-element.js","hash":"52bef8a845aab0d54907f73875fa58b4084019be","modified":1585940536513},{"_id":"public/lib/pjax/lib/proto/log.js","hash":"c728730594aed7d81509787c5bb487af014415e1","modified":1585940536513},{"_id":"public/lib/pjax/lib/util/clone.js","hash":"55027b88e007818c6963205fcd0090a61af8237c","modified":1585940536513},{"_id":"public/lib/pjax/lib/util/contains.js","hash":"fcc9be0477d941b7c4ba71de328773e556ded7ce","modified":1585940536513},{"_id":"public/lib/pjax/lib/util/noop.js","hash":"2c9f7e231af1a62db195875ca62df7edc253c3c4","modified":1585940536513},{"_id":"public/lib/pjax/lib/util/extend.js","hash":"e599aaef93e3a00ccbd92cd87df09898d712e398","modified":1585940536513},{"_id":"public/lib/pjax/lib/util/update-query-string.js","hash":"eefcbff322f8c607865d47ee8fa49f1c8bfa8d7a","modified":1585940536514},{"_id":"public/lib/pjax/tests/lib/abort-request.js","hash":"96d7a604ca275455199bd94d16b9cdc254bee9b9","modified":1585940536514},{"_id":"public/lib/pjax/tests/lib/eval-scripts.js","hash":"3c9125a04cec9d511f16f9311656533ef6a115d1","modified":1585940536514},{"_id":"public/lib/pjax/tests/lib/execute-scripts.js","hash":"2d02a0151ead9924516cdae9308f8667b27a7ea7","modified":1585940536514},{"_id":"public/lib/pjax/tests/lib/events.js","hash":"70ca7ec140d1dcf8c4958e7b6788b09ef2b60181","modified":1585940536514},{"_id":"public/lib/pjax/tests/lib/foreach-els.js","hash":"85995dd27d0d866cfaf5c560732fab8b0099938c","modified":1585940536515},{"_id":"public/lib/pjax/tests/lib/foreach-selectors.js","hash":"898b48ef191719070488f16a54fba8a794b10057","modified":1585940536516},{"_id":"public/lib/pjax/tests/lib/is-supported.js","hash":"e25c7e69c8b7a64a44affcae317adb2b3889aee6","modified":1585940536517},{"_id":"public/lib/pjax/tests/lib/parse-options.js","hash":"45ab302da33e5457a71fd22bbd082e51f5b06b49","modified":1585940536517},{"_id":"public/lib/pjax/tests/lib/send-request.js","hash":"d6adad7f95754c53b9885c0999a5118995fdc76f","modified":1585940536517},{"_id":"public/lib/pjax/tests/lib/switch-selectors.js","hash":"993dd67b1b629288feb8d167fb12b602626cf1d5","modified":1585940536521},{"_id":"public/lib/pjax/tests/lib/switches.js","hash":"f5dfdf57bafd2b4edd5f854d70837b5fe760756e","modified":1585940536521},{"_id":"public/lib/pjax/tests/lib/uniqueid.js","hash":"430550f31b9e6356c2e3a033c1b418bd6acd9667","modified":1585940536522},{"_id":"public/lib/pjax/tests/lib/proto/attach-form.js","hash":"3614a962e3185b354a2e0d987bcecdef4a209da6","modified":1585940536522},{"_id":"public/lib/pjax/tests/lib/proto/attach-link.js","hash":"9d283cb0b09730e932673c73a3352a2d2e8939fa","modified":1585940536522},{"_id":"public/lib/pjax/tests/lib/proto/handle-response.js","hash":"26e0e334f0b20ff2fe75b3ab12a93ce44a5823f0","modified":1585940536522},{"_id":"public/lib/pjax/tests/lib/proto/parse-element.js","hash":"474edc8844028de67cbad054da79c05727620785","modified":1585940536523},{"_id":"public/lib/pjax/tests/lib/util/clone.js","hash":"4b0e62bd0f4eef3549b0da70987f63ce4953bef0","modified":1585940536523},{"_id":"public/lib/pjax/tests/lib/util/contains.js","hash":"bc0c8be855e9736cb256a2aa44fd46f3a7d1d6c5","modified":1585940536523},{"_id":"public/lib/pjax/tests/lib/util/extend.js","hash":"d45488ff6f8e3e1b59a62d0c88c86b750fe50ed4","modified":1585940536523},{"_id":"public/lib/pjax/tests/lib/util/noop.js","hash":"6959a4c02c41453a5edfa4163e36752fcfa3edf9","modified":1585940536524},{"_id":"public/lib/pjax/tests/lib/util/update-query-string.js","hash":"4158dcd877c5f229400417e0da22eb4c5b8e8e38","modified":1585940536524},{"_id":"public/lib/Han/README.html","hash":"3d63363c9ed86205d8caffa56a7876be76eef434","modified":1585940536524},{"_id":"public/lib/canvas-nest/README.html","hash":"9bb29b415d0859e097fdfcc6689b235c0e699224","modified":1585940536524},{"_id":"public/lib/canvas-ribbon/README.html","hash":"712f095b72b24b2bafa3548404bb4062c7859304","modified":1585940536524},{"_id":"public/lib/fancybox/README.html","hash":"acfa25ca9b6457a4a70a4b35cf72c9dafc33584e","modified":1585940536525},{"_id":"public/lib/fastclick/README.html","hash":"337b62c056c5c5566d3cfe717551a4d9f9e99e3b","modified":1585940536525},{"_id":"public/lib/pace/README.html","hash":"58f2105ada5cc52dff5aabcecb92569ee84493a0","modified":1585940536525},{"_id":"public/lib/pangu/README.html","hash":"b0e0af660d3d1564315668aaf44a49b8324b664d","modified":1585940536525},{"_id":"public/lib/three/README.html","hash":"b9ead5e5ec2847bc3ae33c34e5d1a2c39dd747e9","modified":1585940536526},{"_id":"public/lib/pjax/example/forms.html","hash":"2817f172f813d6323fd29cc5597334878b02626e","modified":1585940536527},{"_id":"public/lib/pjax/example/index.html","hash":"6aa41d06271d820c6d9cbc3f0aed4bd45bcc4935","modified":1585940536527},{"_id":"public/lib/pjax/example/page2.html","hash":"1de5a2a11d35710bc6e7da10e98f6089fff9db6d","modified":1585940536527},{"_id":"public/lib/pjax/example/page3.html","hash":"1b1f374b179b9795b54765f2ca33d3cce873562e","modified":1585940536527},{"_id":"public/css/main.css","hash":"929c9a2bfb0ec4e76ba0884fa440701b6bd83fbf","modified":1585940536529},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1585940536530},{"_id":"public/live2dw/assets/moc/tororo.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1585940536531},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1585940536531},{"_id":"public/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1585940536606},{"_id":"public/js/utils.js","hash":"6aa2f859eee9791a2a41d3cf58403dd19714fbfb","modified":1585940536606},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1585940536606},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1585940536606},{"_id":"public/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1585940536606},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1585940536606},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1585940536607},{"_id":"public/lib/pangu/dist/pangu.min.js","hash":"9887d0641d828b330969dc2f81f6d45a1e97be2c","modified":1585940536607},{"_id":"public/lib/pjax/CHANGELOG.html","hash":"1646dbdd1b80dcdb9b8704b1fcfe81345f5fcd6d","modified":1585940536607},{"_id":"public/assets/algolia/algoliasearch.js","hash":"3ed667a2bcd8af246f147a191608bec0c154f0cd","modified":1585940536607},{"_id":"public/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1585940537206},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1585940537206},{"_id":"public/lib/pjax/pjax.min.js","hash":"7cd20a50053da5563cf1a24c10401a13e6eab4e6","modified":1585940537206},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1585940537206},{"_id":"public/lib/pangu/dist/pangu.js","hash":"8f2c5a78edf77a7e4a6d04e7dd568d544cc93737","modified":1585940537206},{"_id":"public/media/花木兰/12.jpeg","hash":"0eb646ba221674f9de605fe2332b3845afdad7e6","modified":1585940537206},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1585940537289},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1585940537290},{"_id":"public/lib/pjax/README.html","hash":"f87d8b91893392f305d62f7829252129ceee5471","modified":1585940537290},{"_id":"public/lib/pjax/pjax.js","hash":"d37d773dbb45633fb4df1e8b75b8e0830cf2cf31","modified":1585940537505},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1585940537505},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1585940537506},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1585940537506},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1585940537507},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1585940537508},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1585940537508},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1585940537762},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1585940537762},{"_id":"public/live2dw/assets/moc/tororo.2048/texture_00.png","hash":"98af764b541083e87fc2f8e85f02d2db38c898cc","modified":1585940537762},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1585940537832},{"_id":"public/lib/fancybox/source/jquery.fancybox.min.js","hash":"b85b75426ff7569d54a1f69689895315e80ed85d","modified":1585940537847},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1585940537856},{"_id":"public/media/git-lg效果图.png","hash":"1243285b2be263972a6970c162b6364a2cb1b973","modified":1585940537879},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1585940537879},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1585940537918},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"fec45d19179030b8f43ebd0eabc5467892c14136","modified":1585940537919},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1585940537923}],"Category":[{"name":"程序猿","_id":"ck8kk0z9b001issyh6war0kbl"},{"name":"网站","_id":"ck8kk0zco001nssyhmoz3pan9"},{"name":"程序员","_id":"ck8kk0zdl001zssyhv5feyubj"},{"name":"工具","_id":"ck8kk0zdu0021ssyhp6m2poi5"},{"name":"优化辅助","_id":"ck8kk0ze00025ssyhyivow3th"},{"name":"其它","_id":"ck8kk0zgu0032ssyh05dwem52"},{"name":"随笔","_id":"ck8kk0zhb003cssyh0vq601hl"},{"name":"影视","_id":"ck8kk0zil003pssyhe1akwdlf"},{"name":"猫","_id":"ck8kk102d0062ssyh1pewtirj"}],"Data":[],"Page":[{"title":"宝贝回家","_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","source":"404.html","raw":"title: 宝贝回家\n---\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","date":"2019-11-29T08:03:52.311Z","updated":"2018-06-18T12:22:24.517Z","path":"404.html","comments":1,"layout":"page","_id":"ck8kk0xyy0000ssyhu3bl44iq","content":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/tororo.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head><meta name=\"generator\" content=\"Hexo 3.9.0\">\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\"></script>\n\n<script src=\"/live2dw/lib/L2Dwidget.min.js?094cbace49a39548bed64abff5988b05\"></script><script>L2Dwidget.init({\"pluginRootPath\":\"live2dw/\",\"pluginJsPath\":\"lib/\",\"pluginModelPath\":\"assets/\",\"tagMode\":false,\"debug\":false,\"model\":{\"jsonPath\":\"/live2dw/assets/tororo.model.json\"},\"display\":{\"position\":\"right\",\"width\":150,\"height\":300},\"mobile\":{\"show\":true},\"react\":{\"opacity\":0.7},\"log\":false});</script></body>\n</html>","length":306},{"layout":"false","_content":"google-site-verification: googlec83004d17e7bf8d6.html","source":"googlec83004d17e7bf8d6.html","raw":"layout: false  \n---\ngoogle-site-verification: googlec83004d17e7bf8d6.html","date":"2019-11-29T08:03:52.536Z","updated":"2017-02-17T01:20:35.000Z","path":"googlec83004d17e7bf8d6.html","title":"","comments":1,"_id":"ck8kk0xzl0001ssyhp8lae99p","content":"google-site-verification: googlec83004d17e7bf8d6.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: googlec83004d17e7bf8d6.html","length":53},{"_content":"{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"/res/ic_launcher_36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}","source":"manifest.json","raw":"{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"/res/ic_launcher_36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}","date":"2019-11-29T08:03:52.518Z","updated":"2015-09-12T16:58:02.000Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"ck8kk0xzo0002ssyhkg0e3sug","content":"{\"name\":\"iblogc\",\"icons\":[{\"src\":\"/res/ic_launcher_36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/res/ic_launcher_48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/res/ic_launcher_72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/res/ic_launcher_96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/res/ic_launcher_144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/res/ic_launcher_192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}],\"start_url\":\"index.html\",\"display\":\"standalone\",\"orientation\":\"portrait\"}","site":{"data":{}},"excerpt":"","more":"{\"name\":\"iblogc\",\"icons\":[{\"src\":\"/res/ic_launcher_36.png\",\"sizes\":\"36x36\",\"type\":\"image/png\",\"density\":\"0.75\"},{\"src\":\"/res/ic_launcher_48.png\",\"sizes\":\"48x48\",\"type\":\"image/png\",\"density\":\"1.0\"},{\"src\":\"/res/ic_launcher_72.png\",\"sizes\":\"72x72\",\"type\":\"image/png\",\"density\":\"1.5\"},{\"src\":\"/res/ic_launcher_96.png\",\"sizes\":\"96x96\",\"type\":\"image/png\",\"density\":\"2.0\"},{\"src\":\"/res/ic_launcher_144.png\",\"sizes\":\"144x144\",\"type\":\"image/png\",\"density\":\"3.0\"},{\"src\":\"/res/ic_launcher_192.png\",\"sizes\":\"192x192\",\"type\":\"image/png\",\"density\":\"4.0\"}],\"start_url\":\"index.html\",\"display\":\"standalone\",\"orientation\":\"portrait\"}","length":617},{"title":"about","slug":"about","date":"2014-09-14T10:00:42.000Z","categories":null,"_content":"大龄男青年一杖……\n","source":"about/index.md","raw":"title: about\nslug: about\ndate: 2014-09-14 18:00:42\ncategories:\n---\n大龄男青年一杖……\n","updated":"2017-02-04T10:55:18.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck8kk0ygc0003ssyhjm8xx39g","content":"<p>大龄男青年一杖……</p>\n","site":{"data":{}},"excerpt":"","more":"<p>大龄男青年一杖……</p>\n","length":9},{"title":"分类","date":"2015-10-19T14:35:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-10-19 22:35:55\ntype: \"categories\"\ncomments: false\n---","updated":"2015-10-21T16:18:14.000Z","path":"categories/index.html","layout":"page","_id":"ck8kk0yh80005ssyh7esmz25x","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"留言板","date":"2015-08-20T15:25:52.000Z","categories":null,"slug":"guestbook","_content":"大家的脚印！\n\n> <ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","source":"guestbook/index.md","raw":"title: 留言板\ndate: 2015-08-20 23:25:52\ncategories:\nslug: guestbook\n---\n大家的脚印！\n\n> <ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","updated":"2015-10-21T16:18:14.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ck8kk0yhj0007ssyh24jryu2k","content":"<p>大家的脚印！</p>\n<blockquote>\n<ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n</blockquote>\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","site":{"data":{}},"excerpt":"","more":"<p>大家的脚印！</p>\n<blockquote>\n<ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n</blockquote>\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","length":217},{"title":"更新历史","date":"2015-05-10T07:48:40.000Z","categories":null,"slug":"history","_content":"\n# 2015-09-12\nTOC目录导航优化\n\n# 2015-09-09\n文章页面左侧增加目录导航\n使用`swiftype`增加全站搜索功能\n\n# 2015-08-24\n精简页面\n  - 删除博客宠物；\n  - 删除左侧[感谢](/thanks)、[历史](/history)菜单项；\n  \n# 2015-08-23\n移动端顶部方块颜色也改为随机[2be5bc07de357a88fd96f1de6b918a9e365c4800](https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800)。\n静态资源mathjax.js由国外地址改为国内bootcdn[c9b04a4de8619eec839671f0ab816fdb841f3117](https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117)。\n留言板页面增加来访人员显示。\n\n# 2015-08-22\n侧边栏头像后面广块增加随机颜色[6444f25c95676086a5fcd64c7e7335f348436ae7](https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7)。\n\n# 2015-08-20\npage页面头部添加`slug`标签，防止多说评论串页。\n文章页面加入toc目录的支持，目录显示样式等优化[a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3](https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3)。\n修改左侧边栏menu数目多后，和图标区域重叠问题。\n\n# 2015-08-19\ninstagram相册页面提示`access_token timeout`错误修正，重新注册了一个instagram号来用就正常了。\n\n# 2015-08-12\n页面底部增加[不蒜子](http://service.ibruce.info/)网页计数器[e6de451b583f300be8ebd0f2f2deab70b01d25ef](https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef)。\n\n# 2015-05-10\n博客宠物在浏览器宽度小于1024px时隐藏。\npost文件名「UC&QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的`atom.xml`文件时出错。\n\n# 2015-05-05\n增加在Android Chrome上的add to homescreen功能。\n增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。","source":"history/index.md","raw":"title: 更新历史\ndate: 2015-05-10 15:48:40\ncategories:\nslug: history\n---\n\n# 2015-09-12\nTOC目录导航优化\n\n# 2015-09-09\n文章页面左侧增加目录导航\n使用`swiftype`增加全站搜索功能\n\n# 2015-08-24\n精简页面\n  - 删除博客宠物；\n  - 删除左侧[感谢](/thanks)、[历史](/history)菜单项；\n  \n# 2015-08-23\n移动端顶部方块颜色也改为随机[2be5bc07de357a88fd96f1de6b918a9e365c4800](https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800)。\n静态资源mathjax.js由国外地址改为国内bootcdn[c9b04a4de8619eec839671f0ab816fdb841f3117](https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117)。\n留言板页面增加来访人员显示。\n\n# 2015-08-22\n侧边栏头像后面广块增加随机颜色[6444f25c95676086a5fcd64c7e7335f348436ae7](https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7)。\n\n# 2015-08-20\npage页面头部添加`slug`标签，防止多说评论串页。\n文章页面加入toc目录的支持，目录显示样式等优化[a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3](https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3)。\n修改左侧边栏menu数目多后，和图标区域重叠问题。\n\n# 2015-08-19\ninstagram相册页面提示`access_token timeout`错误修正，重新注册了一个instagram号来用就正常了。\n\n# 2015-08-12\n页面底部增加[不蒜子](http://service.ibruce.info/)网页计数器[e6de451b583f300be8ebd0f2f2deab70b01d25ef](https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef)。\n\n# 2015-05-10\n博客宠物在浏览器宽度小于1024px时隐藏。\npost文件名「UC&QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的`atom.xml`文件时出错。\n\n# 2015-05-05\n增加在Android Chrome上的add to homescreen功能。\n增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。","updated":"2015-12-26T09:22:24.000Z","path":"history/index.html","comments":1,"layout":"page","_id":"ck8kk0yhp0009ssyh71pldeb0","content":"<h1 id=\"2015-09-12\"><a href=\"#2015-09-12\" class=\"headerlink\" title=\"2015-09-12\"></a>2015-09-12</h1><p>TOC目录导航优化</p>\n<h1 id=\"2015-09-09\"><a href=\"#2015-09-09\" class=\"headerlink\" title=\"2015-09-09\"></a>2015-09-09</h1><p>文章页面左侧增加目录导航<br>使用<code>swiftype</code>增加全站搜索功能</p>\n<h1 id=\"2015-08-24\"><a href=\"#2015-08-24\" class=\"headerlink\" title=\"2015-08-24\"></a>2015-08-24</h1><p>精简页面</p>\n<ul>\n<li>删除博客宠物；</li>\n<li>删除左侧<a href=\"/thanks\">感谢</a>、<a href=\"/history\">历史</a>菜单项；</li>\n</ul>\n<h1 id=\"2015-08-23\"><a href=\"#2015-08-23\" class=\"headerlink\" title=\"2015-08-23\"></a>2015-08-23</h1><p>移动端顶部方块颜色也改为随机<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800\" target=\"_blank\" rel=\"noopener\">2be5bc07de357a88fd96f1de6b918a9e365c4800</a>。<br>静态资源mathjax.js由国外地址改为国内bootcdn<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117\" target=\"_blank\" rel=\"noopener\">c9b04a4de8619eec839671f0ab816fdb841f3117</a>。<br>留言板页面增加来访人员显示。</p>\n<h1 id=\"2015-08-22\"><a href=\"#2015-08-22\" class=\"headerlink\" title=\"2015-08-22\"></a>2015-08-22</h1><p>侧边栏头像后面广块增加随机颜色<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7\" target=\"_blank\" rel=\"noopener\">6444f25c95676086a5fcd64c7e7335f348436ae7</a>。</p>\n<h1 id=\"2015-08-20\"><a href=\"#2015-08-20\" class=\"headerlink\" title=\"2015-08-20\"></a>2015-08-20</h1><p>page页面头部添加<code>slug</code>标签，防止多说评论串页。<br>文章页面加入toc目录的支持，目录显示样式等优化<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3\" target=\"_blank\" rel=\"noopener\">a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3</a>。<br>修改左侧边栏menu数目多后，和图标区域重叠问题。</p>\n<h1 id=\"2015-08-19\"><a href=\"#2015-08-19\" class=\"headerlink\" title=\"2015-08-19\"></a>2015-08-19</h1><p>instagram相册页面提示<code>access_token timeout</code>错误修正，重新注册了一个instagram号来用就正常了。</p>\n<h1 id=\"2015-08-12\"><a href=\"#2015-08-12\" class=\"headerlink\" title=\"2015-08-12\"></a>2015-08-12</h1><p>页面底部增加<a href=\"http://service.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a>网页计数器<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef\" target=\"_blank\" rel=\"noopener\">e6de451b583f300be8ebd0f2f2deab70b01d25ef</a>。</p>\n<h1 id=\"2015-05-10\"><a href=\"#2015-05-10\" class=\"headerlink\" title=\"2015-05-10\"></a>2015-05-10</h1><p>博客宠物在浏览器宽度小于1024px时隐藏。<br>post文件名「UC&amp;QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的<code>atom.xml</code>文件时出错。</p>\n<h1 id=\"2015-05-05\"><a href=\"#2015-05-05\" class=\"headerlink\" title=\"2015-05-05\"></a>2015-05-05</h1><p>增加在Android Chrome上的add to homescreen功能。<br>增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"2015-09-12\"><a href=\"#2015-09-12\" class=\"headerlink\" title=\"2015-09-12\"></a>2015-09-12</h1><p>TOC目录导航优化</p>\n<h1 id=\"2015-09-09\"><a href=\"#2015-09-09\" class=\"headerlink\" title=\"2015-09-09\"></a>2015-09-09</h1><p>文章页面左侧增加目录导航<br>使用<code>swiftype</code>增加全站搜索功能</p>\n<h1 id=\"2015-08-24\"><a href=\"#2015-08-24\" class=\"headerlink\" title=\"2015-08-24\"></a>2015-08-24</h1><p>精简页面</p>\n<ul>\n<li>删除博客宠物；</li>\n<li>删除左侧<a href=\"/thanks\">感谢</a>、<a href=\"/history\">历史</a>菜单项；</li>\n</ul>\n<h1 id=\"2015-08-23\"><a href=\"#2015-08-23\" class=\"headerlink\" title=\"2015-08-23\"></a>2015-08-23</h1><p>移动端顶部方块颜色也改为随机<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800\" target=\"_blank\" rel=\"noopener\">2be5bc07de357a88fd96f1de6b918a9e365c4800</a>。<br>静态资源mathjax.js由国外地址改为国内bootcdn<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117\" target=\"_blank\" rel=\"noopener\">c9b04a4de8619eec839671f0ab816fdb841f3117</a>。<br>留言板页面增加来访人员显示。</p>\n<h1 id=\"2015-08-22\"><a href=\"#2015-08-22\" class=\"headerlink\" title=\"2015-08-22\"></a>2015-08-22</h1><p>侧边栏头像后面广块增加随机颜色<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7\" target=\"_blank\" rel=\"noopener\">6444f25c95676086a5fcd64c7e7335f348436ae7</a>。</p>\n<h1 id=\"2015-08-20\"><a href=\"#2015-08-20\" class=\"headerlink\" title=\"2015-08-20\"></a>2015-08-20</h1><p>page页面头部添加<code>slug</code>标签，防止多说评论串页。<br>文章页面加入toc目录的支持，目录显示样式等优化<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3\" target=\"_blank\" rel=\"noopener\">a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3</a>。<br>修改左侧边栏menu数目多后，和图标区域重叠问题。</p>\n<h1 id=\"2015-08-19\"><a href=\"#2015-08-19\" class=\"headerlink\" title=\"2015-08-19\"></a>2015-08-19</h1><p>instagram相册页面提示<code>access_token timeout</code>错误修正，重新注册了一个instagram号来用就正常了。</p>\n<h1 id=\"2015-08-12\"><a href=\"#2015-08-12\" class=\"headerlink\" title=\"2015-08-12\"></a>2015-08-12</h1><p>页面底部增加<a href=\"http://service.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a>网页计数器<a href=\"https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef\" target=\"_blank\" rel=\"noopener\">e6de451b583f300be8ebd0f2f2deab70b01d25ef</a>。</p>\n<h1 id=\"2015-05-10\"><a href=\"#2015-05-10\" class=\"headerlink\" title=\"2015-05-10\"></a>2015-05-10</h1><p>博客宠物在浏览器宽度小于1024px时隐藏。<br>post文件名「UC&amp;QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的<code>atom.xml</code>文件时出错。</p>\n<h1 id=\"2015-05-05\"><a href=\"#2015-05-05\" class=\"headerlink\" title=\"2015-05-05\"></a>2015-05-05</h1><p>增加在Android Chrome上的add to homescreen功能。<br>增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。</p>\n","length":748},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"\n<div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\">\n    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","source":"instagram/index.md","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n\n<div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\">\n    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","date":"2019-11-29T08:03:52.573Z","updated":"2015-09-11T15:53:00.000Z","path":"instagram/index.html","_id":"ck8kk0yhy000bssyhcnmckwj8","content":"<p><div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\"><br>    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a><br></div></p>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","site":{"data":{}},"excerpt":"","more":"<p><div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\"><br>    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a><br></div></p>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","length":24},{"title":"健身任务","slug":"plan","date":"2014-11-07T14:35:17.000Z","_content":"\n- **哑铃** *200*\n- **哑铃平举** *20*\n- **plank** *9分钟内三组2分钟*\n- **健腹器** *40*\n\n\n- 始于2014-11-07\n- *2015-01-01坚持中……*\n\n![图片1](http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg)\n","source":"plan/index.md","raw":"title: 健身任务\nslug: plan\ndate: 2014-11-07 22:35:17\n---\n\n- **哑铃** *200*\n- **哑铃平举** *20*\n- **plank** *9分钟内三组2分钟*\n- **健腹器** *40*\n\n\n- 始于2014-11-07\n- *2015-01-01坚持中……*\n\n![图片1](http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg)\n","updated":"2015-08-20T15:28:54.000Z","path":"plan/index.html","comments":1,"layout":"page","_id":"ck8kk0yi2000dssyhdb92rwpn","content":"<ul>\n<li><strong>哑铃</strong> <em>200</em></li>\n<li><strong>哑铃平举</strong> <em>20</em></li>\n<li><strong>plank</strong> <em>9分钟内三组2分钟</em></li>\n<li><strong>健腹器</strong> <em>40</em></li>\n</ul>\n<ul>\n<li>始于2014-11-07</li>\n<li><em>2015-01-01坚持中……</em></li>\n</ul>\n<p><img alt=\"图片1\" data-src=\"http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><strong>哑铃</strong> <em>200</em></li>\n<li><strong>哑铃平举</strong> <em>20</em></li>\n<li><strong>plank</strong> <em>9分钟内三组2分钟</em></li>\n<li><strong>健腹器</strong> <em>40</em></li>\n</ul>\n<ul>\n<li>始于2014-11-07</li>\n<li><em>2015-01-01坚持中……</em></li>\n</ul>\n<p><img src=\"http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg\" alt=\"图片1\"></p>\n","length":61},{"title":"Tagcloud","date":"2015-10-19T15:50:33.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Tagcloud\ndate: 2015-10-19 23:50:33\ntype: \"tags\"\ncomments: false\n---","updated":"2015-10-21T16:18:14.000Z","path":"tags/index.html","layout":"page","_id":"ck8kk0yi5000fssyht2mcs93l","content":"","site":{"data":{}},"excerpt":"","more":"","length":0},{"title":"感谢","date":"2015-07-18T13:08:45.000Z","slug":"thanks","_content":"\n博客程序: [hexo](https://hexo.io/)\n教程:\n [Zippera's blog](http://zipperary.com/categories/hexo/)  \n [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n主题: [hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)\n网站计数系统: [不蒜子](http://service.ibruce.info/)\n评论系统: [多说](http://duoshuo.com/)\n图床: [七牛](https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2)\n搜索功能: [swiftype](https://swiftype.com)\n\n以下hexo插件: \n  - [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n  - [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  - [hexo-tag-video](https://github.com/geekplux/hexo-tag-video)\n\n\n\n","source":"thanks/index.md","raw":"title: 感谢\ndate: 2015-07-18 21:08:45\nslug: thanks\n---\n\n博客程序: [hexo](https://hexo.io/)\n教程:\n [Zippera's blog](http://zipperary.com/categories/hexo/)  \n [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n主题: [hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)\n网站计数系统: [不蒜子](http://service.ibruce.info/)\n评论系统: [多说](http://duoshuo.com/)\n图床: [七牛](https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2)\n搜索功能: [swiftype](https://swiftype.com)\n\n以下hexo插件: \n  - [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n  - [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  - [hexo-tag-video](https://github.com/geekplux/hexo-tag-video)\n\n\n\n","updated":"2017-02-08T16:27:07.000Z","path":"thanks/index.html","comments":1,"layout":"page","_id":"ck8kk0yih000hssyhq8s2rrfo","content":"<p>博客程序: <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a><br>教程:<br> <a href=\"http://zipperary.com/categories/hexo/\" target=\"_blank\" rel=\"noopener\">Zippera’s blog</a><br> <a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">hexo你的博客</a><br>主题: <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">hexo-theme-yilia</a><br>网站计数系统: <a href=\"http://service.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a><br>评论系统: <a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"noopener\">多说</a><br>图床: <a href=\"https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2\" target=\"_blank\" rel=\"noopener\">七牛</a><br>搜索功能: <a href=\"https://swiftype.com\" target=\"_blank\" rel=\"noopener\">swiftype</a></p>\n<p>以下hexo插件: </p>\n<ul>\n<li><a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"noopener\">hexo-qiniu-sync</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a></li>\n<li><a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-baidu-sitemap</a></li>\n<li><a href=\"https://github.com/geekplux/hexo-tag-video\" target=\"_blank\" rel=\"noopener\">hexo-tag-video</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>博客程序: <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">hexo</a><br>教程:<br> <a href=\"http://zipperary.com/categories/hexo/\" target=\"_blank\" rel=\"noopener\">Zippera’s blog</a><br> <a href=\"http://ibruce.info/2013/11/22/hexo-your-blog/\" target=\"_blank\" rel=\"noopener\">hexo你的博客</a><br>主题: <a href=\"https://github.com/litten/hexo-theme-yilia\" target=\"_blank\" rel=\"noopener\">hexo-theme-yilia</a><br>网站计数系统: <a href=\"http://service.ibruce.info/\" target=\"_blank\" rel=\"noopener\">不蒜子</a><br>评论系统: <a href=\"http://duoshuo.com/\" target=\"_blank\" rel=\"noopener\">多说</a><br>图床: <a href=\"https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2\" target=\"_blank\" rel=\"noopener\">七牛</a><br>搜索功能: <a href=\"https://swiftype.com\" target=\"_blank\" rel=\"noopener\">swiftype</a></p>\n<p>以下hexo插件: </p>\n<ul>\n<li><a href=\"https://github.com/gyk001/hexo-qiniu-sync\" target=\"_blank\" rel=\"noopener\">hexo-qiniu-sync</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-feed\" target=\"_blank\" rel=\"noopener\">hexo-generator-feed</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-deployer-git\" target=\"_blank\" rel=\"noopener\">hexo-deployer-git</a></li>\n<li><a href=\"https://github.com/hexojs/hexo-generator-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-sitemap</a></li>\n<li><a href=\"https://github.com/coneycode/hexo-generator-baidu-sitemap\" target=\"_blank\" rel=\"noopener\">hexo-generator-baidu-sitemap</a></li>\n<li><a href=\"https://github.com/geekplux/hexo-tag-video\" target=\"_blank\" rel=\"noopener\">hexo-tag-video</a></li>\n</ul>\n","length":243}],"Post":[{"title":"Apache Rewrite","date":"2015-05-18T13:46:34.000Z","_content":"本文是对今天使用Apache的Rewrite技术做一个简单的记录。\n> Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。\n\n这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。\n<!--more-->\n\n## 更新历史\n2015年05月18日 - 初稿\n\n## 开启模块\n在`http.conf`中找到\n```\n# LoadModule rewrite_module modules/mod_rewrite.so\n```\n取消注释\n\n## 定义规则\n在`http.conf`中加入下列代码（如果启用了`httpd-vhosts.conf`，请在`httpd-vhosts.conf`里做配置）\n```\n<IfModule rewrite_module>\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST} ^www.a.com [NC]\n    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]\n<IfModule>\n```\n\n`RewriteCond`义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的\n`NC`：不区分大小写\n`RewriteRule`满足`^/(.*)`此规则的所有URL都重定向到`http://www.b.com/$1`，`$1`使用前面`(.*)`匹配后的字符填充\n\n所以前面的规则就是的最终效果是访问`www.a.com`的所以页面都会被重定向到`www.b.com`相应路径下的页面\n\n## 参考\n> [http://blog.chinaunix.net/uid-20639775-id-154471.html](http://blog.chinaunix.net/uid-20639775-id-154471.html)\n> [http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html](http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html)\n> [http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)","source":"_posts/Apache-Rewrite.md","raw":"title: Apache Rewrite\ncategories: [程序猿]\ntags: [Apache, 重定向]\ndate: 2015-05-18 21:46:34\n---\n本文是对今天使用Apache的Rewrite技术做一个简单的记录。\n> Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。\n\n这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。\n<!--more-->\n\n## 更新历史\n2015年05月18日 - 初稿\n\n## 开启模块\n在`http.conf`中找到\n```\n# LoadModule rewrite_module modules/mod_rewrite.so\n```\n取消注释\n\n## 定义规则\n在`http.conf`中加入下列代码（如果启用了`httpd-vhosts.conf`，请在`httpd-vhosts.conf`里做配置）\n```\n<IfModule rewrite_module>\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST} ^www.a.com [NC]\n    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]\n<IfModule>\n```\n\n`RewriteCond`义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的\n`NC`：不区分大小写\n`RewriteRule`满足`^/(.*)`此规则的所有URL都重定向到`http://www.b.com/$1`，`$1`使用前面`(.*)`匹配后的字符填充\n\n所以前面的规则就是的最终效果是访问`www.a.com`的所以页面都会被重定向到`www.b.com`相应路径下的页面\n\n## 参考\n> [http://blog.chinaunix.net/uid-20639775-id-154471.html](http://blog.chinaunix.net/uid-20639775-id-154471.html)\n> [http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html](http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html)\n> [http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)","slug":"Apache-Rewrite","published":1,"updated":"2020-01-17T07:57:49.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ygp0004ssyh8hayrpls","content":"<p>本文是对今天使用Apache的Rewrite技术做一个简单的记录。</p>\n<blockquote>\n<p>Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。</p>\n</blockquote>\n<p>这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。<br><a id=\"more\"></a></p>\n<h2 id=\"更新历史\"><a href=\"#更新历史\" class=\"headerlink\" title=\"更新历史\"></a>更新历史</h2><p>2015年05月18日 - 初稿</p>\n<h2 id=\"开启模块\"><a href=\"#开启模块\" class=\"headerlink\" title=\"开启模块\"></a>开启模块</h2><p>在<code>http.conf</code>中找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p>\n<p>取消注释</p>\n<h2 id=\"定义规则\"><a href=\"#定义规则\" class=\"headerlink\" title=\"定义规则\"></a>定义规则</h2><p>在<code>http.conf</code>中加入下列代码（如果启用了<code>httpd-vhosts.conf</code>，请在<code>httpd-vhosts.conf</code>里做配置）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule rewrite_module&gt;</span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;HTTP_HOST&#125; ^www.a.com [NC]</span><br><span class=\"line\">    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]</span><br><span class=\"line\">&lt;IfModule&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>RewriteCond</code>义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的<br><code>NC</code>：不区分大小写<br><code>RewriteRule</code>满足<code>^/(.*)</code>此规则的所有URL都重定向到<code>http://www.b.com/$1</code>，<code>$1</code>使用前面<code>(.*)</code>匹配后的字符填充</p>\n<p>所以前面的规则就是的最终效果是访问<code>www.a.com</code>的所以页面都会被重定向到<code>www.b.com</code>相应路径下的页面</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://blog.chinaunix.net/uid-20639775-id-154471.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20639775-id-154471.html</a><br><a href=\"http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html</a><br><a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://httpd.apache.org/docs/current/mod/mod_rewrite.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>本文是对今天使用Apache的Rewrite技术做一个简单的记录。</p>\n<blockquote>\n<p>Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。</p>\n</blockquote>\n<p>这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。<br>","more":"</p>\n<h2 id=\"更新历史\"><a href=\"#更新历史\" class=\"headerlink\" title=\"更新历史\"></a>更新历史</h2><p>2015年05月18日 - 初稿</p>\n<h2 id=\"开启模块\"><a href=\"#开启模块\" class=\"headerlink\" title=\"开启模块\"></a>开启模块</h2><p>在<code>http.conf</code>中找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p>\n<p>取消注释</p>\n<h2 id=\"定义规则\"><a href=\"#定义规则\" class=\"headerlink\" title=\"定义规则\"></a>定义规则</h2><p>在<code>http.conf</code>中加入下列代码（如果启用了<code>httpd-vhosts.conf</code>，请在<code>httpd-vhosts.conf</code>里做配置）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule rewrite_module&gt;</span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;HTTP_HOST&#125; ^www.a.com [NC]</span><br><span class=\"line\">    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]</span><br><span class=\"line\">&lt;IfModule&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>RewriteCond</code>义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的<br><code>NC</code>：不区分大小写<br><code>RewriteRule</code>满足<code>^/(.*)</code>此规则的所有URL都重定向到<code>http://www.b.com/$1</code>，<code>$1</code>使用前面<code>(.*)</code>匹配后的字符填充</p>\n<p>所以前面的规则就是的最终效果是访问<code>www.a.com</code>的所以页面都会被重定向到<code>www.b.com</code>相应路径下的页面</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://blog.chinaunix.net/uid-20639775-id-154471.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20639775-id-154471.html</a><br><a href=\"http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html</a><br><a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://httpd.apache.org/docs/current/mod/mod_rewrite.html</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:49 GMT+0800 (China Standard Time)","title":"Apache Rewrite","path":"2015/05/18/Apache-Rewrite/","eyeCatchImage":null,"excerpt":"<p>本文是对今天使用Apache的Rewrite技术做一个简单的记录。</p>\n<blockquote>\n<p>Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。</p>\n</blockquote>\n<p>这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。<br>","date":"2015-05-18T13:46:34.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Apache","重定向"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1234},{"title":"GitHub Pages/GitCafe Pages绑定自定义域名","date":"2014-11-09T10:32:11.000Z","_content":"## 更新记录\n2015-01-01 更新 GitCafe-Page IP地址\n2014-11-09 初稿\n\n虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为`username.github.io`或`username.github.com`,GitCafe为`username.gitcafe.com`），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。\n<!--more-->\n## 准备工作\n+ 域名（例：iblogc.com）\n+ 一个GitHub Pages/GitCafe Pages\n\n---\n## GitHub\n+ 在repo目录下创建一个名为`CNAME`的文件（无后缀）\n+ 打开CNAME，在里面写入你要绑定的域名\n + ~~1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com~~\n + ~~2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133~~\n + 请在域名管理里添加一条CNAME记录，指向username.github.io\n+ 等待生效 \n\n---\n## GitCafe\n+ 打开你自己的gitcafe pages项目，\n+ 进入 项目管理>>自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）\n+ QQ截图20141109181543.png)\n+ 在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以[官方说明](https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki)为准)。\n+ 等待生效\n\n\n","source":"_posts/Github-Pages-Gitcafe-Pages绑定自定义域名.md","raw":"title: GitHub Pages/GitCafe Pages绑定自定义域名\ndate: 2014-11-09 18:32:11\ncategories: [网站]\ntags: [域名,GitHub,GitCafe]\n---\n## 更新记录\n2015-01-01 更新 GitCafe-Page IP地址\n2014-11-09 初稿\n\n虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为`username.github.io`或`username.github.com`,GitCafe为`username.gitcafe.com`），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。\n<!--more-->\n## 准备工作\n+ 域名（例：iblogc.com）\n+ 一个GitHub Pages/GitCafe Pages\n\n---\n## GitHub\n+ 在repo目录下创建一个名为`CNAME`的文件（无后缀）\n+ 打开CNAME，在里面写入你要绑定的域名\n + ~~1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com~~\n + ~~2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133~~\n + 请在域名管理里添加一条CNAME记录，指向username.github.io\n+ 等待生效 \n\n---\n## GitCafe\n+ 打开你自己的gitcafe pages项目，\n+ 进入 项目管理>>自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）\n+ QQ截图20141109181543.png)\n+ 在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以[官方说明](https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki)为准)。\n+ 等待生效\n\n\n","slug":"Github-Pages-Gitcafe-Pages绑定自定义域名","published":1,"updated":"2020-01-17T07:55:54.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yh90006ssyhkgeptv1l","content":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-01-01 更新 GitCafe-Page IP地址<br>2014-11-09 初稿</p>\n<p>虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为<code>username.github.io</code>或<code>username.github.com</code>,GitCafe为<code>username.gitcafe.com</code>），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。<br><a id=\"more\"></a></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>域名（例：iblogc.com）</li>\n<li>一个GitHub Pages/GitCafe Pages</li>\n</ul>\n<hr>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li>在repo目录下创建一个名为<code>CNAME</code>的文件（无后缀）</li>\n<li>打开CNAME，在里面写入你要绑定的域名<ul>\n<li><del>1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com</del></li>\n<li><del>2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133</del></li>\n<li>请在域名管理里添加一条CNAME记录，指向username.github.io</li>\n</ul>\n</li>\n<li>等待生效 </li>\n</ul>\n<hr>\n<h2 id=\"GitCafe\"><a href=\"#GitCafe\" class=\"headerlink\" title=\"GitCafe\"></a>GitCafe</h2><ul>\n<li>打开你自己的gitcafe pages项目，</li>\n<li>进入 项目管理&gt;&gt;自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）</li>\n<li>QQ截图20141109181543.png)</li>\n<li>在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以<a href=\"https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki\" target=\"_blank\" rel=\"noopener\">官方说明</a>为准)。</li>\n<li>等待生效</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-01-01 更新 GitCafe-Page IP地址<br>2014-11-09 初稿</p>\n<p>虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为<code>username.github.io</code>或<code>username.github.com</code>,GitCafe为<code>username.gitcafe.com</code>），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。<br>","more":"</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>域名（例：iblogc.com）</li>\n<li>一个GitHub Pages/GitCafe Pages</li>\n</ul>\n<hr>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li>在repo目录下创建一个名为<code>CNAME</code>的文件（无后缀）</li>\n<li>打开CNAME，在里面写入你要绑定的域名<ul>\n<li><del>1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com</del></li>\n<li><del>2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133</del></li>\n<li>请在域名管理里添加一条CNAME记录，指向username.github.io</li>\n</ul>\n</li>\n<li>等待生效 </li>\n</ul>\n<hr>\n<h2 id=\"GitCafe\"><a href=\"#GitCafe\" class=\"headerlink\" title=\"GitCafe\"></a>GitCafe</h2><ul>\n<li>打开你自己的gitcafe pages项目，</li>\n<li>进入 项目管理&gt;&gt;自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）</li>\n<li>QQ截图20141109181543.png)</li>\n<li>在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以<a href=\"https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki\" target=\"_blank\" rel=\"noopener\">官方说明</a>为准)。</li>\n<li>等待生效</li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:55:54 GMT+0800 (China Standard Time)","title":"GitHub Pages/GitCafe Pages绑定自定义域名","path":"2014/11/09/Github-Pages-Gitcafe-Pages绑定自定义域名/","eyeCatchImage":null,"excerpt":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-01-01 更新 GitCafe-Page IP地址<br>2014-11-09 初稿</p>\n<p>虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为<code>username.github.io</code>或<code>username.github.com</code>,GitCafe为<code>username.gitcafe.com</code>），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。<br>","date":"2014-11-09T10:32:11.000Z","pv":0,"totalPV":0,"categories":"网站","tags":["域名","GitHub","GitCafe"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":729},{"title":"SpringWebFlux使用笔记","date":"2019-02-28T05:32:59.000Z","_content":"记录使用SpringWebFlux的一些笔记。\n\n\n<!--more-->\n\n## groupBy\n\n对flux进行分组。\n```java\nchannelOnlineCityBoFlux.sort((s1, s2) -> Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))\n  .groupBy(city -> city.getInitial().substring(0, 1).toUpperCase())\n  .sort((s1, s2) -> Objects.requireNonNull(s1.key()).compareTo(s2.key()))\n  .flatMap(gf -> gf.collectList()\n          .map(cityList -> {\n              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = new ChannelOnlineCityGroupByPinYinBo();\n              cityGroupByPinYinBo.setLetter(gf.key());\n              cityGroupByPinYinBo.setCities(cityList);\n              return cityGroupByPinYinBo;\n          }));\n```\n\n## handle\n\nhandle作用相当于是filter和map的组合。\n\n<iframe\n  src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\"\n  style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>","source":"_posts/SpringWebFlux.md","raw":"title: SpringWebFlux使用笔记\ndate: 2019-02-28 13:32:59\ncategories: [程序猿]\ntags: [Java, Reactive]\n---\n记录使用SpringWebFlux的一些笔记。\n\n\n<!--more-->\n\n## groupBy\n\n对flux进行分组。\n```java\nchannelOnlineCityBoFlux.sort((s1, s2) -> Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))\n  .groupBy(city -> city.getInitial().substring(0, 1).toUpperCase())\n  .sort((s1, s2) -> Objects.requireNonNull(s1.key()).compareTo(s2.key()))\n  .flatMap(gf -> gf.collectList()\n          .map(cityList -> {\n              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = new ChannelOnlineCityGroupByPinYinBo();\n              cityGroupByPinYinBo.setLetter(gf.key());\n              cityGroupByPinYinBo.setCities(cityList);\n              return cityGroupByPinYinBo;\n          }));\n```\n\n## handle\n\nhandle作用相当于是filter和map的组合。\n\n<iframe\n  src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\"\n  style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>","slug":"SpringWebFlux","published":1,"updated":"2020-01-17T07:15:06.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yhk0008ssyh7k50l9yb","content":"<p>记录使用SpringWebFlux的一些笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"groupBy\"></a>groupBy</h2><p>对flux进行分组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channelOnlineCityBoFlux.sort((s1, s2) -&gt; Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))</span><br><span class=\"line\">  .groupBy(city -&gt; city.getInitial().substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">  .sort((s1, s2) -&gt; Objects.requireNonNull(s1.key()).compareTo(s2.key()))</span><br><span class=\"line\">  .flatMap(gf -&gt; gf.collectList()</span><br><span class=\"line\">          .map(cityList -&gt; &#123;</span><br><span class=\"line\">              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = <span class=\"keyword\">new</span> ChannelOnlineCityGroupByPinYinBo();</span><br><span class=\"line\">              cityGroupByPinYinBo.setLetter(gf.key());</span><br><span class=\"line\">              cityGroupByPinYinBo.setCities(cityList);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> cityGroupByPinYinBo;</span><br><span class=\"line\">          &#125;));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"handle\"><a href=\"#handle\" class=\"headerlink\" title=\"handle\"></a>handle</h2><p>handle作用相当于是filter和map的组合。</p>\n<iframe src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\" style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\" sandbox=\"allow-scripts allow-same-origin\"><br></iframe>","site":{"data":{}},"excerpt":"<p>记录使用SpringWebFlux的一些笔记。</p>","more":"<h2 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"groupBy\"></a>groupBy</h2><p>对flux进行分组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channelOnlineCityBoFlux.sort((s1, s2) -&gt; Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))</span><br><span class=\"line\">  .groupBy(city -&gt; city.getInitial().substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">  .sort((s1, s2) -&gt; Objects.requireNonNull(s1.key()).compareTo(s2.key()))</span><br><span class=\"line\">  .flatMap(gf -&gt; gf.collectList()</span><br><span class=\"line\">          .map(cityList -&gt; &#123;</span><br><span class=\"line\">              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = <span class=\"keyword\">new</span> ChannelOnlineCityGroupByPinYinBo();</span><br><span class=\"line\">              cityGroupByPinYinBo.setLetter(gf.key());</span><br><span class=\"line\">              cityGroupByPinYinBo.setCities(cityList);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> cityGroupByPinYinBo;</span><br><span class=\"line\">          &#125;));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"handle\"><a href=\"#handle\" class=\"headerlink\" title=\"handle\"></a>handle</h2><p>handle作用相当于是filter和map的组合。</p>\n<iframe src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\" style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\" sandbox=\"allow-scripts allow-same-origin\"><br></iframe>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:15:06 GMT+0800 (China Standard Time)","title":"SpringWebFlux使用笔记","path":"2019/02/28/SpringWebFlux/","eyeCatchImage":null,"excerpt":"<p>记录使用SpringWebFlux的一些笔记。</p>","date":"2019-02-28T05:32:59.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Java","Reactive"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":688},{"title":"UC和QQ浏览器私有META","date":"2015-05-05T16:43:08.000Z","_content":"## 什么是META\n> META是HTML语言中的一个标签，也称作元标记。<META> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。\n<!--more-->\n## UC的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏\n```\n<meta name=\"screen-orientation\" content=\"landscape/portrait\">\n```\n\n### 全屏\n```\n<meta name=\"full-screen\" content=\"yes\">\n```\n\n### xhtml适应屏幕排版\n\n默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。\n\n```\n<meta name=\"viewport\" content=\"uc-fitscreen=yes\"/>\n\n```\n\n### 排版模式\nUc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。\n```\n<meta name=\"layoutmode\" content=\"fitscreen/standard\" />\n```\n\n### 夜间模式\n\n允许进入夜间模式/禁止进入夜间模式\n```\n<meta name=\"nightmode\" content=\"enable/disable\"/>\n```\n\n### 强制显示图片，不受浏览器无图设置影响\n```\n<meta name=\"imagemode\" content=\"force\"/>\n```\n\n### 应用模式\n默认将全屏，禁止长按菜单，禁止手势，标准排版\n```\n<meta name=\"browsermode\" content=\"application\"/>\n```\n\n\n## QQ浏览器的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏/自动（默认）\n```\n<meta name=\"x5-orientation\" content=\"landscape/portrait/auto\"/>\n\n```\n\n### 全屏\n\n强制全屏/跟随浏览器（默认）\n```html \n<meta name=\"x5-fullscreen\" content=\"true/auto\"/>\n```\n\n### 页面模式\n普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）\n```html\n<meta name=\"x5-page-mode\" content=\"default/app\"/>\n```\n\n## 参考资料\n> http://www.uc.cn/business/developer/\n> http://open.mb.qq.com/doc?id=1201#_1\n\n\n\n\n","source":"_posts/UC和QQ浏览器私有META.md","raw":"title: \"UC和QQ浏览器私有META\"\ndate: 2015-05-06 00:43:08\ncategories: [网站]\ntags: [meta, 浏览器, 前端]\n---\n## 什么是META\n> META是HTML语言中的一个标签，也称作元标记。<META> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。\n<!--more-->\n## UC的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏\n```\n<meta name=\"screen-orientation\" content=\"landscape/portrait\">\n```\n\n### 全屏\n```\n<meta name=\"full-screen\" content=\"yes\">\n```\n\n### xhtml适应屏幕排版\n\n默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。\n\n```\n<meta name=\"viewport\" content=\"uc-fitscreen=yes\"/>\n\n```\n\n### 排版模式\nUc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。\n```\n<meta name=\"layoutmode\" content=\"fitscreen/standard\" />\n```\n\n### 夜间模式\n\n允许进入夜间模式/禁止进入夜间模式\n```\n<meta name=\"nightmode\" content=\"enable/disable\"/>\n```\n\n### 强制显示图片，不受浏览器无图设置影响\n```\n<meta name=\"imagemode\" content=\"force\"/>\n```\n\n### 应用模式\n默认将全屏，禁止长按菜单，禁止手势，标准排版\n```\n<meta name=\"browsermode\" content=\"application\"/>\n```\n\n\n## QQ浏览器的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏/自动（默认）\n```\n<meta name=\"x5-orientation\" content=\"landscape/portrait/auto\"/>\n\n```\n\n### 全屏\n\n强制全屏/跟随浏览器（默认）\n```html \n<meta name=\"x5-fullscreen\" content=\"true/auto\"/>\n```\n\n### 页面模式\n普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）\n```html\n<meta name=\"x5-page-mode\" content=\"default/app\"/>\n```\n\n## 参考资料\n> http://www.uc.cn/business/developer/\n> http://open.mb.qq.com/doc?id=1201#_1\n\n\n\n\n","slug":"UC和QQ浏览器私有META","published":1,"updated":"2020-03-24T03:28:58.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yhq000assyh9z1tz80b","content":"<h2 id=\"什么是META\"><a href=\"#什么是META\" class=\"headerlink\" title=\"什么是META\"></a>什么是META</h2><blockquote>\n<p>META是HTML语言中的一个标签，也称作元标记。<meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"UC的私有META\"><a href=\"#UC的私有META\" class=\"headerlink\" title=\"UC的私有META\"></a>UC的私有META</h2><h3 id=\"屏幕方向\"><a href=\"#屏幕方向\" class=\"headerlink\" title=\"屏幕方向\"></a>屏幕方向</h3><p>强制横屏/强制竖屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;landscape/portrait&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全屏\"><a href=\"#全屏\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xhtml适应屏幕排版\"><a href=\"#xhtml适应屏幕排版\" class=\"headerlink\" title=\"xhtml适应屏幕排版\"></a>xhtml适应屏幕排版</h3><p>默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;uc-fitscreen=yes&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"排版模式\"><a href=\"#排版模式\" class=\"headerlink\" title=\"排版模式\"></a>排版模式</h3><p>Uc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;layoutmode&quot; content=&quot;fitscreen/standard&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"夜间模式\"><a href=\"#夜间模式\" class=\"headerlink\" title=\"夜间模式\"></a>夜间模式</h3><p>允许进入夜间模式/禁止进入夜间模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;nightmode&quot; content=&quot;enable/disable&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制显示图片，不受浏览器无图设置影响\"><a href=\"#强制显示图片，不受浏览器无图设置影响\" class=\"headerlink\" title=\"强制显示图片，不受浏览器无图设置影响\"></a>强制显示图片，不受浏览器无图设置影响</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;imagemode&quot; content=&quot;force&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用模式\"><a href=\"#应用模式\" class=\"headerlink\" title=\"应用模式\"></a>应用模式</h3><p>默认将全屏，禁止长按菜单，禁止手势，标准排版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"QQ浏览器的私有META\"><a href=\"#QQ浏览器的私有META\" class=\"headerlink\" title=\"QQ浏览器的私有META\"></a>QQ浏览器的私有META</h2><h3 id=\"屏幕方向-1\"><a href=\"#屏幕方向-1\" class=\"headerlink\" title=\"屏幕方向\"></a>屏幕方向</h3><p>强制横屏/强制竖屏/自动（默认）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;landscape/portrait/auto&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全屏-1\"><a href=\"#全屏-1\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><p>强制全屏/跟随浏览器（默认）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true/auto\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"页面模式\"><a href=\"#页面模式\" class=\"headerlink\" title=\"页面模式\"></a>页面模式</h3><p>普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"default/app\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">http://www.uc.cn/business/developer/</a><br><a href=\"http://open.mb.qq.com/doc?id=1201#_1\" target=\"_blank\" rel=\"noopener\">http://open.mb.qq.com/doc?id=1201#_1</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是META\"><a href=\"#什么是META\" class=\"headerlink\" title=\"什么是META\"></a>什么是META</h2><blockquote>\n<p>META是HTML语言中的一个标签，也称作元标记。<meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。<br>","more":"</p>\n</blockquote>\n<h2 id=\"UC的私有META\"><a href=\"#UC的私有META\" class=\"headerlink\" title=\"UC的私有META\"></a>UC的私有META</h2><h3 id=\"屏幕方向\"><a href=\"#屏幕方向\" class=\"headerlink\" title=\"屏幕方向\"></a>屏幕方向</h3><p>强制横屏/强制竖屏<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;screen-orientation&quot; content=&quot;landscape/portrait&quot;&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全屏\"><a href=\"#全屏\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;full-screen&quot; content=&quot;yes&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xhtml适应屏幕排版\"><a href=\"#xhtml适应屏幕排版\" class=\"headerlink\" title=\"xhtml适应屏幕排版\"></a>xhtml适应屏幕排版</h3><p>默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;viewport&quot; content=&quot;uc-fitscreen=yes&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"排版模式\"><a href=\"#排版模式\" class=\"headerlink\" title=\"排版模式\"></a>排版模式</h3><p>Uc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;layoutmode&quot; content=&quot;fitscreen/standard&quot; /&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"夜间模式\"><a href=\"#夜间模式\" class=\"headerlink\" title=\"夜间模式\"></a>夜间模式</h3><p>允许进入夜间模式/禁止进入夜间模式<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;nightmode&quot; content=&quot;enable/disable&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"强制显示图片，不受浏览器无图设置影响\"><a href=\"#强制显示图片，不受浏览器无图设置影响\" class=\"headerlink\" title=\"强制显示图片，不受浏览器无图设置影响\"></a>强制显示图片，不受浏览器无图设置影响</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;imagemode&quot; content=&quot;force&quot;/&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"应用模式\"><a href=\"#应用模式\" class=\"headerlink\" title=\"应用模式\"></a>应用模式</h3><p>默认将全屏，禁止长按菜单，禁止手势，标准排版<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;browsermode&quot; content=&quot;application&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"QQ浏览器的私有META\"><a href=\"#QQ浏览器的私有META\" class=\"headerlink\" title=\"QQ浏览器的私有META\"></a>QQ浏览器的私有META</h2><h3 id=\"屏幕方向-1\"><a href=\"#屏幕方向-1\" class=\"headerlink\" title=\"屏幕方向\"></a>屏幕方向</h3><p>强制横屏/强制竖屏/自动（默认）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;meta name=&quot;x5-orientation&quot; content=&quot;landscape/portrait/auto&quot;/&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"全屏-1\"><a href=\"#全屏-1\" class=\"headerlink\" title=\"全屏\"></a>全屏</h3><p>强制全屏/跟随浏览器（默认）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-fullscreen\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"true/auto\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"页面模式\"><a href=\"#页面模式\" class=\"headerlink\" title=\"页面模式\"></a>页面模式</h3><p>普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"x5-page-mode\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"default/app\"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://www.uc.cn/business/developer/\" target=\"_blank\" rel=\"noopener\">http://www.uc.cn/business/developer/</a><br><a href=\"http://open.mb.qq.com/doc?id=1201#_1\" target=\"_blank\" rel=\"noopener\">http://open.mb.qq.com/doc?id=1201#_1</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 24 2020 11:28:58 GMT+0800 (China Standard Time)","title":"UC和QQ浏览器私有META","path":"2015/05/06/UC和QQ浏览器私有META/","eyeCatchImage":null,"excerpt":"<h2 id=\"什么是META\"><a href=\"#什么是META\" class=\"headerlink\" title=\"什么是META\"></a>什么是META</h2><blockquote>\n<p>META是HTML语言中的一个标签，也称作元标记。<meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。<br>","date":"2015-05-05T16:43:08.000Z","pv":0,"totalPV":0,"categories":"网站","tags":["meta","浏览器","前端"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1372},{"title":"WebFlux中mongo操作-Aggregation","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-01-17T07:12:53.000Z","_content":"<br>\n<!--more-->\n\nswitch\n\n```java\nConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(\n                BooleanOperators.And.and(\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus1\").equalToValue(\"已结算\"),\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus2\").equalToValue(\"已结算\")\n                )\n        ).then(\"已结清\");\n\n        Aggregation aggregation = Aggregation.newAggregation(\n                Aggregation.project(\"channelBillStatus1\", \"channelBillStatus2\")\n                        .and(ConditionalOperators.switchCases(cond).defaultTo(\"未结清\")).as(\"channelBillStatus\")\n        );\n        \n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\nlookup及id类型转换\n\n```java\n//把_id转成String并赋值给id\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\")\n          \t\t\t//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()\n                .and(ConvertOperators.ToString.toString(\"$_id\")).as(\"id\");\n        //用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组\n        Aggregation.lookup(\"chn_section\", \"id\", \"sectionId\", \"chnSections\");\n        //如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组\n        //如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true\n        Aggregation.unwind(\"chnSection\", true);\n        //只输出这些字段\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\", \"chnSections\");\n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\n如果lookup时，如果要对匹配的数据进行筛选（参考链接：https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\n\n```java\n//原始mongo\n//{\n//   $lookup:\n//     {\n//       from: <collection to join>,\n//       let: { <var_1>: <expression>, …, <var_n>: <expression> },\n//       pipeline: [ <pipeline to execute on the collection to join> ],\n//       as: <output array field>\n//     }\n//}\n//自定义一个AggregationOperation类\npublic class CustomProjectAggregationOperation implements AggregationOperation {\n    private String jsonOperation;\n\n    public CustomProjectAggregationOperation(String jsonOperation) {\n        this.jsonOperation = jsonOperation;\n    }\n\n    @Override\n    public Document toDocument(AggregationOperationContext aggregationOperationContext) {\n        return aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));\n    }\n}\n\nprivate static String getJsonOperation() {\n        return \"{\" +\n                \"    $lookup: \" +\n                \"    {\" +\n                \"        from: 'chn_set_meal',\" +\n                \"        let: {\" +\n                \"            id: { $toString: '$_id' }\" +\n                \"        },\" +\n                \"        pipeline: [\" +\n                \"            {\" +\n                \"                $match: \" +\n                \"                {\" +\n                \"                    $expr: \" +\n                \"                    {\" +\n                \"                        $and: \" +\n                \"                        [\" +\n                \"                            {\" +\n                \"                                $eq: ['$setMealId', '$$id']\" +\n                \"                            },\" +\n                \"                            {\" +\n                \"                                $eq: ['$cooperationState', '合作中']\" +\n                \"                            }\" +\n                \"                        ]\" +\n                \"                    }\" +\n                \"                }\" +\n                \"            },\" +\n                \"            {\" +\n                \"                $project: {\" +\n                \"                    channelId: 1,\" +\n                \"                    channelName: 1\" +\n                \"                    cooperationState: 1\" +\n                \"                }\" +\n                \"            }\" +\n                \"        ],\" +\n                \"        as: 'channels'\" +\n                \"    }\" +\n                \"}}\";\n    }\n\nAggregationOperation aggregationOperation = new CustomProjectAggregationOperation(getJsonOperation());\n        return reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);\n```\n\ngroup\n\n```java\n//背景：查询交易表，订单和交易一对多\nAggregation.group(\"orderNo\")\n  //单一组的金额汇总\n  .sum(\"amount\").as(\"totalAmount\")\n  //组的最后一个订单号\n  .last(\"orderNo\").as(\"orderNo\")\n  //组里数据条数\n  .count().as(\"tradeCount\")\n  //把一组数据里每条数据的状态放到一个statuses数组里\n  .addToSet(\"status\").as(\"statuses\")\n  //把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里\n  .push(new BasicDBObject(\"tradeContent\", \"$tradeContent\")\n        .append(\"tradeNo\", \"$tradeNo\")\n        .append(\"amount\", \"$amount\")\n       ).as(\"billItems\");\n```","source":"_posts/WebFlux中mongo操作-Aggregation.md","raw":"---\ntitle: WebFlux中mongo操作-Aggregation\ncomments: true\ncategories: [程序猿]\ntags: [Java, Reactive, 事务, mongo, 数据库, Aggregation]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-01-17 15:12:53\n---\n<br>\n<!--more-->\n\nswitch\n\n```java\nConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(\n                BooleanOperators.And.and(\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus1\").equalToValue(\"已结算\"),\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus2\").equalToValue(\"已结算\")\n                )\n        ).then(\"已结清\");\n\n        Aggregation aggregation = Aggregation.newAggregation(\n                Aggregation.project(\"channelBillStatus1\", \"channelBillStatus2\")\n                        .and(ConditionalOperators.switchCases(cond).defaultTo(\"未结清\")).as(\"channelBillStatus\")\n        );\n        \n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\nlookup及id类型转换\n\n```java\n//把_id转成String并赋值给id\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\")\n          \t\t\t//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()\n                .and(ConvertOperators.ToString.toString(\"$_id\")).as(\"id\");\n        //用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组\n        Aggregation.lookup(\"chn_section\", \"id\", \"sectionId\", \"chnSections\");\n        //如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组\n        //如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true\n        Aggregation.unwind(\"chnSection\", true);\n        //只输出这些字段\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\", \"chnSections\");\n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\n如果lookup时，如果要对匹配的数据进行筛选（参考链接：https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\n\n```java\n//原始mongo\n//{\n//   $lookup:\n//     {\n//       from: <collection to join>,\n//       let: { <var_1>: <expression>, …, <var_n>: <expression> },\n//       pipeline: [ <pipeline to execute on the collection to join> ],\n//       as: <output array field>\n//     }\n//}\n//自定义一个AggregationOperation类\npublic class CustomProjectAggregationOperation implements AggregationOperation {\n    private String jsonOperation;\n\n    public CustomProjectAggregationOperation(String jsonOperation) {\n        this.jsonOperation = jsonOperation;\n    }\n\n    @Override\n    public Document toDocument(AggregationOperationContext aggregationOperationContext) {\n        return aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));\n    }\n}\n\nprivate static String getJsonOperation() {\n        return \"{\" +\n                \"    $lookup: \" +\n                \"    {\" +\n                \"        from: 'chn_set_meal',\" +\n                \"        let: {\" +\n                \"            id: { $toString: '$_id' }\" +\n                \"        },\" +\n                \"        pipeline: [\" +\n                \"            {\" +\n                \"                $match: \" +\n                \"                {\" +\n                \"                    $expr: \" +\n                \"                    {\" +\n                \"                        $and: \" +\n                \"                        [\" +\n                \"                            {\" +\n                \"                                $eq: ['$setMealId', '$$id']\" +\n                \"                            },\" +\n                \"                            {\" +\n                \"                                $eq: ['$cooperationState', '合作中']\" +\n                \"                            }\" +\n                \"                        ]\" +\n                \"                    }\" +\n                \"                }\" +\n                \"            },\" +\n                \"            {\" +\n                \"                $project: {\" +\n                \"                    channelId: 1,\" +\n                \"                    channelName: 1\" +\n                \"                    cooperationState: 1\" +\n                \"                }\" +\n                \"            }\" +\n                \"        ],\" +\n                \"        as: 'channels'\" +\n                \"    }\" +\n                \"}}\";\n    }\n\nAggregationOperation aggregationOperation = new CustomProjectAggregationOperation(getJsonOperation());\n        return reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);\n```\n\ngroup\n\n```java\n//背景：查询交易表，订单和交易一对多\nAggregation.group(\"orderNo\")\n  //单一组的金额汇总\n  .sum(\"amount\").as(\"totalAmount\")\n  //组的最后一个订单号\n  .last(\"orderNo\").as(\"orderNo\")\n  //组里数据条数\n  .count().as(\"tradeCount\")\n  //把一组数据里每条数据的状态放到一个statuses数组里\n  .addToSet(\"status\").as(\"statuses\")\n  //把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里\n  .push(new BasicDBObject(\"tradeContent\", \"$tradeContent\")\n        .append(\"tradeNo\", \"$tradeNo\")\n        .append(\"amount\", \"$amount\")\n       ).as(\"billItems\");\n```","slug":"WebFlux中mongo操作-Aggregation","published":1,"updated":"2020-01-17T08:01:32.735Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yi0000cssyh1tq7dzdu","content":"<p><br><br><a id=\"more\"></a></p>\n<p>switch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(</span><br><span class=\"line\">                BooleanOperators.And.and(</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus1\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>),</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus2\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">        ).then(<span class=\"string\">\"已结清\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Aggregation aggregation = Aggregation.newAggregation(</span><br><span class=\"line\">                Aggregation.project(<span class=\"string\">\"channelBillStatus1\"</span>, <span class=\"string\">\"channelBillStatus2\"</span>)</span><br><span class=\"line\">                        .and(ConditionalOperators.switchCases(cond).defaultTo(<span class=\"string\">\"未结清\"</span>)).as(<span class=\"string\">\"channelBillStatus\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>lookup及id类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把_id转成String并赋值给id</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>)</span><br><span class=\"line\">          \t\t\t<span class=\"comment\">//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()</span></span><br><span class=\"line\">                .and(ConvertOperators.ToString.toString(<span class=\"string\">\"$_id\"</span>)).as(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组</span></span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">\"chn_section\"</span>, <span class=\"string\">\"id\"</span>, <span class=\"string\">\"sectionId\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true</span></span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">\"chnSection\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只输出这些字段</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>如果lookup时，如果要对匹配的数据进行筛选（参考链接：<a href=\"https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原始mongo</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   $lookup:</span></span><br><span class=\"line\"><span class=\"comment\">//     &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       from: &lt;collection to join&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//       let: &#123; &lt;var_1&gt;: &lt;expression&gt;, …, &lt;var_n&gt;: &lt;expression&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       pipeline: [ &lt;pipeline to execute on the collection to join&gt; ],</span></span><br><span class=\"line\"><span class=\"comment\">//       as: &lt;output array field&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//自定义一个AggregationOperation类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomProjectAggregationOperation</span> <span class=\"keyword\">implements</span> <span class=\"title\">AggregationOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String jsonOperation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomProjectAggregationOperation</span><span class=\"params\">(String jsonOperation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jsonOperation = jsonOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Document <span class=\"title\">toDocument</span><span class=\"params\">(AggregationOperationContext aggregationOperationContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getJsonOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    $lookup: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        from: 'chn_set_meal',\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        let: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            id: &#123; $toString: '$_id' &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        pipeline: [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $match: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    $expr: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        $and: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$setMealId', '$$id']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$cooperationState', '合作中']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        ]\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $project: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelId: 1,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelName: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    cooperationState: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        ],\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        as: 'channels'\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&#125;&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationOperation aggregationOperation = <span class=\"keyword\">new</span> CustomProjectAggregationOperation(getJsonOperation());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);</span><br></pre></td></tr></table></figure>\n<p>group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//背景：查询交易表，订单和交易一对多</span></span><br><span class=\"line\">Aggregation.group(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//单一组的金额汇总</span></span><br><span class=\"line\">  .sum(<span class=\"string\">\"amount\"</span>).as(<span class=\"string\">\"totalAmount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组的最后一个订单号</span></span><br><span class=\"line\">  .last(<span class=\"string\">\"orderNo\"</span>).as(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组里数据条数</span></span><br><span class=\"line\">  .count().as(<span class=\"string\">\"tradeCount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里每条数据的状态放到一个statuses数组里</span></span><br><span class=\"line\">  .addToSet(<span class=\"string\">\"status\"</span>).as(<span class=\"string\">\"statuses\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里</span></span><br><span class=\"line\">  .push(<span class=\"keyword\">new</span> BasicDBObject(<span class=\"string\">\"tradeContent\"</span>, <span class=\"string\">\"$tradeContent\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"tradeNo\"</span>, <span class=\"string\">\"$tradeNo\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"amount\"</span>, <span class=\"string\">\"$amount\"</span>)</span><br><span class=\"line\">       ).as(<span class=\"string\">\"billItems\"</span>);</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<p>switch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(</span><br><span class=\"line\">                BooleanOperators.And.and(</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus1\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>),</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus2\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">        ).then(<span class=\"string\">\"已结清\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Aggregation aggregation = Aggregation.newAggregation(</span><br><span class=\"line\">                Aggregation.project(<span class=\"string\">\"channelBillStatus1\"</span>, <span class=\"string\">\"channelBillStatus2\"</span>)</span><br><span class=\"line\">                        .and(ConditionalOperators.switchCases(cond).defaultTo(<span class=\"string\">\"未结清\"</span>)).as(<span class=\"string\">\"channelBillStatus\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>lookup及id类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把_id转成String并赋值给id</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>)</span><br><span class=\"line\">          \t\t\t<span class=\"comment\">//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()</span></span><br><span class=\"line\">                .and(ConvertOperators.ToString.toString(<span class=\"string\">\"$_id\"</span>)).as(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组</span></span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">\"chn_section\"</span>, <span class=\"string\">\"id\"</span>, <span class=\"string\">\"sectionId\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true</span></span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">\"chnSection\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只输出这些字段</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>如果lookup时，如果要对匹配的数据进行筛选（参考链接：<a href=\"https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原始mongo</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   $lookup:</span></span><br><span class=\"line\"><span class=\"comment\">//     &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       from: &lt;collection to join&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//       let: &#123; &lt;var_1&gt;: &lt;expression&gt;, …, &lt;var_n&gt;: &lt;expression&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       pipeline: [ &lt;pipeline to execute on the collection to join&gt; ],</span></span><br><span class=\"line\"><span class=\"comment\">//       as: &lt;output array field&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//自定义一个AggregationOperation类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomProjectAggregationOperation</span> <span class=\"keyword\">implements</span> <span class=\"title\">AggregationOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String jsonOperation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomProjectAggregationOperation</span><span class=\"params\">(String jsonOperation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jsonOperation = jsonOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Document <span class=\"title\">toDocument</span><span class=\"params\">(AggregationOperationContext aggregationOperationContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getJsonOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    $lookup: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        from: 'chn_set_meal',\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        let: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            id: &#123; $toString: '$_id' &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        pipeline: [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $match: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    $expr: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        $and: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$setMealId', '$$id']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$cooperationState', '合作中']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        ]\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $project: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelId: 1,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelName: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    cooperationState: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        ],\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        as: 'channels'\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&#125;&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationOperation aggregationOperation = <span class=\"keyword\">new</span> CustomProjectAggregationOperation(getJsonOperation());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);</span><br></pre></td></tr></table></figure>\n<p>group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//背景：查询交易表，订单和交易一对多</span></span><br><span class=\"line\">Aggregation.group(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//单一组的金额汇总</span></span><br><span class=\"line\">  .sum(<span class=\"string\">\"amount\"</span>).as(<span class=\"string\">\"totalAmount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组的最后一个订单号</span></span><br><span class=\"line\">  .last(<span class=\"string\">\"orderNo\"</span>).as(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组里数据条数</span></span><br><span class=\"line\">  .count().as(<span class=\"string\">\"tradeCount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里每条数据的状态放到一个statuses数组里</span></span><br><span class=\"line\">  .addToSet(<span class=\"string\">\"status\"</span>).as(<span class=\"string\">\"statuses\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里</span></span><br><span class=\"line\">  .push(<span class=\"keyword\">new</span> BasicDBObject(<span class=\"string\">\"tradeContent\"</span>, <span class=\"string\">\"$tradeContent\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"tradeNo\"</span>, <span class=\"string\">\"$tradeNo\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"amount\"</span>, <span class=\"string\">\"$amount\"</span>)</span><br><span class=\"line\">       ).as(<span class=\"string\">\"billItems\"</span>);</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 16:01:32 GMT+0800 (China Standard Time)","title":"WebFlux中mongo操作-Aggregation","path":"2020/01/17/WebFlux中mongo操作-Aggregation/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2020-01-17T07:12:53.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Java","Reactive","事务","mongo","数据库","Aggregation"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":5213},{"title":"WebFlux中mongo操作-Transaction","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-01-17T07:16:46.000Z","_content":"<br>\n<!--more-->\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> action.insert(aDocument)\n             .flatMap(a -> {\n               cDocument.setName(a.getName() + \"copy\");\n               return action.insert(cDocument)\n                 .map(d -> {\n                   if (exception) {\n                     //测试跨文档的异常回滚\n                     throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                   }\n                   return d;\n                 });\n             })\n            )\n    //如果里面是个mono，则用next取出第一个元素就是里面的mono\n    .next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```\n\nflux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序\n\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> Flux.fromIterable(\"1\", \"2\", \"3\")\n             //如果是个flux此处要用concatMap保持有序不能用flatMap\n             .concatMap(i -> action.insert(aDocument)\n                        .flatMap(a -> {\n                          cDocument.setName(a.getName() + \"copy\");\n                          return action.insert(cDocument)\n                            .map(d -> {\n                              if (exception) {\n                                //测试跨文档的异常回滚\n                                throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                              }\n                              return d;\n                            });\n                        }));\n            )\n    //如果里面返回的就是一个flux则不需要使用next\n    //.next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```","source":"_posts/WebFlux中mongo操作-Transaction.md","raw":"---\ntitle: WebFlux中mongo操作-Transaction\ncomments: true\ncategories: [程序猿]\ntags: [Java, Reactive, 事务, mongo, 数据库, Flux, mongo]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-01-17 15:16:46\n---\n<br>\n<!--more-->\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> action.insert(aDocument)\n             .flatMap(a -> {\n               cDocument.setName(a.getName() + \"copy\");\n               return action.insert(cDocument)\n                 .map(d -> {\n                   if (exception) {\n                     //测试跨文档的异常回滚\n                     throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                   }\n                   return d;\n                 });\n             })\n            )\n    //如果里面是个mono，则用next取出第一个元素就是里面的mono\n    .next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```\n\nflux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序\n\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> Flux.fromIterable(\"1\", \"2\", \"3\")\n             //如果是个flux此处要用concatMap保持有序不能用flatMap\n             .concatMap(i -> action.insert(aDocument)\n                        .flatMap(a -> {\n                          cDocument.setName(a.getName() + \"copy\");\n                          return action.insert(cDocument)\n                            .map(d -> {\n                              if (exception) {\n                                //测试跨文档的异常回滚\n                                throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                              }\n                              return d;\n                            });\n                        }));\n            )\n    //如果里面返回的就是一个flux则不需要使用next\n    //.next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```","slug":"WebFlux中mongo操作-Transaction","published":1,"updated":"2020-01-17T08:01:36.430Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yi4000essyha9rqtk4t","content":"<p><br><br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; action.insert(aDocument)</span><br><span class=\"line\">             .flatMap(a -&gt; &#123;</span><br><span class=\"line\">               cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                 .map(d -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                     <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                 &#125;);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面是个mono，则用next取出第一个元素就是里面的mono</span></span><br><span class=\"line\">    .next()</span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>flux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; Flux.fromIterable(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">             <span class=\"comment\">//如果是个flux此处要用concatMap保持有序不能用flatMap</span></span><br><span class=\"line\">             .concatMap(i -&gt; action.insert(aDocument)</span><br><span class=\"line\">                        .flatMap(a -&gt; &#123;</span><br><span class=\"line\">                          cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">                          <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                            .map(d -&gt; &#123;</span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                              <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;));</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面返回的就是一个flux则不需要使用next</span></span><br><span class=\"line\">    <span class=\"comment\">//.next()</span></span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><br><br>","more":"<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; action.insert(aDocument)</span><br><span class=\"line\">             .flatMap(a -&gt; &#123;</span><br><span class=\"line\">               cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                 .map(d -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                     <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                 &#125;);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面是个mono，则用next取出第一个元素就是里面的mono</span></span><br><span class=\"line\">    .next()</span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>flux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; Flux.fromIterable(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">             <span class=\"comment\">//如果是个flux此处要用concatMap保持有序不能用flatMap</span></span><br><span class=\"line\">             .concatMap(i -&gt; action.insert(aDocument)</span><br><span class=\"line\">                        .flatMap(a -&gt; &#123;</span><br><span class=\"line\">                          cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">                          <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                            .map(d -&gt; &#123;</span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                              <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;));</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面返回的就是一个flux则不需要使用next</span></span><br><span class=\"line\">    <span class=\"comment\">//.next()</span></span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 16:01:36 GMT+0800 (China Standard Time)","title":"WebFlux中mongo操作-Transaction","path":"2020/01/17/WebFlux中mongo操作-Transaction/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2020-01-17T07:16:46.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Java","Reactive","事务","mongo","数据库","Flux"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2776},{"title":"Android真机调试常用命令","comments":1,"date":"2019-04-28T12:39:32.000Z","_content":"\n使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。\n<!--more-->\n\n\n## 无线调试\n\n```\n# 前提条件：手机和电脑处理同一网段\n# 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态\nadb tcpip <port>\n\n# 在手机上查看ip地址或使用以下命令查看ip\nadb shell ifconfig \n# 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）\nadb connect <ip> :<port>\n# 查看连接的设备\nadb devices\n```\n\n## 截图\n\n```\n# 截图并保存到手机sd卡的下\nadb shell screencap -p /sdcard/screenshot.png\n```\n\n便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n`vi shot.sh`\n\n```\n#!/bin/bash\n# Android截图，定位和预览默认关闭，请取消注释\n\ndd=`date +%Y-%m-%d-%H-%M-%S`\npwd=`pwd`\nadb shell screencap -p /sdcard/screenshot.png\nadb pull /sdcard/screenshot.png\nadb shell rm /sdcard/screenshot.png\nmv screenshot.png $dd.png\necho \"截图已保存为当前目录下的\"$dd.png\n# 修改图片尺寸，长或宽最大不超过960，等比缩放\necho \"压缩图片...\"\nsips -Z 960 $pwd/$dd.png\n# 定位到文件\nopen ./$dd.png -R\n# 打开预览\nopen -a Preview $dd.png\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.png\necho \"截图已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x shot.sh\n```\n\n使用方法\n\n```\n./shot.sh\n```\n\n⌘+v试试\n\n*可把命令添加alias别名*\n\n## 录屏\n\n```\n# 执行录屏并保存到手机sd卡目录下（默认时长180s）\n# 可配置参数\n# --time-limit: 录制时长，单位秒\n# --size: 分辨率，如1280*720，不指定默认使用手机的分辨率\n# --bit-rate: 视频的比特率，如6Mbps为6000000\n# --verbose: 命令行显示log\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n\n`vi record.sh`\n\n```\n#!/bin/bash\n# Android录屏\ndd=`date +%Y-%m-%d-%H-%M-%S`\"-$1s\"\npwd=`pwd`\nadb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4\nadb pull /sdcard/screenrecord.mp4\nadb shell rm /sdcard/screenrecord.mp4\nmv screenrecord.mp4 $dd.mp4\necho \"$1秒视频已保存为当前目录下的\"$dd.mp4\n# 定位到文件\nopen ./$dd.mp4 -R\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.mp4\necho \"$1秒视频已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x record.sh\n```\n\n使用方法\n```\n# 3为录制秒数，可修改\n./record.sh 3\n```","source":"_posts/android真机调试常用命令.md","raw":"---\ntitle: Android真机调试常用命令\ncomments: true\ntags: [Android,macOS,命令,效率,无线,调试,adb,USB]\ncategories: [程序员]\ndate: 2019-04-28 20:39:32\n---\n\n使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。\n<!--more-->\n\n\n## 无线调试\n\n```\n# 前提条件：手机和电脑处理同一网段\n# 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态\nadb tcpip <port>\n\n# 在手机上查看ip地址或使用以下命令查看ip\nadb shell ifconfig \n# 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）\nadb connect <ip> :<port>\n# 查看连接的设备\nadb devices\n```\n\n## 截图\n\n```\n# 截图并保存到手机sd卡的下\nadb shell screencap -p /sdcard/screenshot.png\n```\n\n便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n`vi shot.sh`\n\n```\n#!/bin/bash\n# Android截图，定位和预览默认关闭，请取消注释\n\ndd=`date +%Y-%m-%d-%H-%M-%S`\npwd=`pwd`\nadb shell screencap -p /sdcard/screenshot.png\nadb pull /sdcard/screenshot.png\nadb shell rm /sdcard/screenshot.png\nmv screenshot.png $dd.png\necho \"截图已保存为当前目录下的\"$dd.png\n# 修改图片尺寸，长或宽最大不超过960，等比缩放\necho \"压缩图片...\"\nsips -Z 960 $pwd/$dd.png\n# 定位到文件\nopen ./$dd.png -R\n# 打开预览\nopen -a Preview $dd.png\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.png\necho \"截图已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x shot.sh\n```\n\n使用方法\n\n```\n./shot.sh\n```\n\n⌘+v试试\n\n*可把命令添加alias别名*\n\n## 录屏\n\n```\n# 执行录屏并保存到手机sd卡目录下（默认时长180s）\n# 可配置参数\n# --time-limit: 录制时长，单位秒\n# --size: 分辨率，如1280*720，不指定默认使用手机的分辨率\n# --bit-rate: 视频的比特率，如6Mbps为6000000\n# --verbose: 命令行显示log\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n\n`vi record.sh`\n\n```\n#!/bin/bash\n# Android录屏\ndd=`date +%Y-%m-%d-%H-%M-%S`\"-$1s\"\npwd=`pwd`\nadb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4\nadb pull /sdcard/screenrecord.mp4\nadb shell rm /sdcard/screenrecord.mp4\nmv screenrecord.mp4 $dd.mp4\necho \"$1秒视频已保存为当前目录下的\"$dd.mp4\n# 定位到文件\nopen ./$dd.mp4 -R\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.mp4\necho \"$1秒视频已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x record.sh\n```\n\n使用方法\n```\n# 3为录制秒数，可修改\n./record.sh 3\n```","slug":"android真机调试常用命令","published":1,"updated":"2019-07-16T05:50:48.949Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yi6000gssyhg8yju980","content":"<p>使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。<br><a id=\"more\"></a></p>\n<h2 id=\"无线调试\"><a href=\"#无线调试\" class=\"headerlink\" title=\"无线调试\"></a>无线调试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前提条件：手机和电脑处理同一网段</span><br><span class=\"line\"># 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态</span><br><span class=\"line\">adb tcpip &lt;port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在手机上查看ip地址或使用以下命令查看ip</span><br><span class=\"line\">adb shell ifconfig </span><br><span class=\"line\"># 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）</span><br><span class=\"line\">adb connect &lt;ip&gt; :&lt;port&gt;</span><br><span class=\"line\"># 查看连接的设备</span><br><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 截图并保存到手机sd卡的下</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi shot.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android截图，定位和预览默认关闭，请取消注释</span><br><span class=\"line\"></span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br><span class=\"line\">adb pull /sdcard/screenshot.png</span><br><span class=\"line\">adb shell rm /sdcard/screenshot.png</span><br><span class=\"line\">mv screenshot.png $dd.png</span><br><span class=\"line\">echo &quot;截图已保存为当前目录下的&quot;$dd.png</span><br><span class=\"line\"># 修改图片尺寸，长或宽最大不超过960，等比缩放</span><br><span class=\"line\">echo &quot;压缩图片...&quot;</span><br><span class=\"line\">sips -Z 960 $pwd/$dd.png</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.png -R</span><br><span class=\"line\"># 打开预览</span><br><span class=\"line\">open -a Preview $dd.png</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &apos;on run args&apos; -e &apos;set the clipboard to POSIX file (first item of args)&apos; -e end $pwd/$dd.png</span><br><span class=\"line\">echo &quot;截图已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x shot.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shot.sh</span><br></pre></td></tr></table></figure>\n<p>⌘+v试试</p>\n<p><em>可把命令添加alias别名</em></p>\n<h2 id=\"录屏\"><a href=\"#录屏\" class=\"headerlink\" title=\"录屏\"></a>录屏</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行录屏并保存到手机sd卡目录下（默认时长180s）</span><br><span class=\"line\"># 可配置参数</span><br><span class=\"line\"># --time-limit: 录制时长，单位秒</span><br><span class=\"line\"># --size: 分辨率，如1280*720，不指定默认使用手机的分辨率</span><br><span class=\"line\"># --bit-rate: 视频的比特率，如6Mbps为6000000</span><br><span class=\"line\"># --verbose: 命令行显示log</span><br><span class=\"line\">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi record.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android录屏</span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`&quot;-$1s&quot;</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb pull /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb shell rm /sdcard/screenrecord.mp4</span><br><span class=\"line\">mv screenrecord.mp4 $dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已保存为当前目录下的&quot;$dd.mp4</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.mp4 -R</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &apos;on run args&apos; -e &apos;set the clipboard to POSIX file (first item of args)&apos; -e end $pwd/$dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x record.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 3为录制秒数，可修改</span><br><span class=\"line\">./record.sh 3</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。<br>","more":"</p>\n<h2 id=\"无线调试\"><a href=\"#无线调试\" class=\"headerlink\" title=\"无线调试\"></a>无线调试</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前提条件：手机和电脑处理同一网段</span><br><span class=\"line\"># 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态</span><br><span class=\"line\">adb tcpip &lt;port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在手机上查看ip地址或使用以下命令查看ip</span><br><span class=\"line\">adb shell ifconfig </span><br><span class=\"line\"># 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）</span><br><span class=\"line\">adb connect &lt;ip&gt; :&lt;port&gt;</span><br><span class=\"line\"># 查看连接的设备</span><br><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 截图并保存到手机sd卡的下</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi shot.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android截图，定位和预览默认关闭，请取消注释</span><br><span class=\"line\"></span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br><span class=\"line\">adb pull /sdcard/screenshot.png</span><br><span class=\"line\">adb shell rm /sdcard/screenshot.png</span><br><span class=\"line\">mv screenshot.png $dd.png</span><br><span class=\"line\">echo &quot;截图已保存为当前目录下的&quot;$dd.png</span><br><span class=\"line\"># 修改图片尺寸，长或宽最大不超过960，等比缩放</span><br><span class=\"line\">echo &quot;压缩图片...&quot;</span><br><span class=\"line\">sips -Z 960 $pwd/$dd.png</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.png -R</span><br><span class=\"line\"># 打开预览</span><br><span class=\"line\">open -a Preview $dd.png</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &apos;on run args&apos; -e &apos;set the clipboard to POSIX file (first item of args)&apos; -e end $pwd/$dd.png</span><br><span class=\"line\">echo &quot;截图已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x shot.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shot.sh</span><br></pre></td></tr></table></figure>\n<p>⌘+v试试</p>\n<p><em>可把命令添加alias别名</em></p>\n<h2 id=\"录屏\"><a href=\"#录屏\" class=\"headerlink\" title=\"录屏\"></a>录屏</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行录屏并保存到手机sd卡目录下（默认时长180s）</span><br><span class=\"line\"># 可配置参数</span><br><span class=\"line\"># --time-limit: 录制时长，单位秒</span><br><span class=\"line\"># --size: 分辨率，如1280*720，不指定默认使用手机的分辨率</span><br><span class=\"line\"># --bit-rate: 视频的比特率，如6Mbps为6000000</span><br><span class=\"line\"># --verbose: 命令行显示log</span><br><span class=\"line\">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi record.sh</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android录屏</span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`&quot;-$1s&quot;</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb pull /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb shell rm /sdcard/screenrecord.mp4</span><br><span class=\"line\">mv screenrecord.mp4 $dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已保存为当前目录下的&quot;$dd.mp4</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.mp4 -R</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &apos;on run args&apos; -e &apos;set the clipboard to POSIX file (first item of args)&apos; -e end $pwd/$dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x record.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 3为录制秒数，可修改</span><br><span class=\"line\">./record.sh 3</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Jul 16 2019 13:50:48 GMT+0800 (China Standard Time)","title":"Android真机调试常用命令","path":"2019/04/28/android真机调试常用命令/","eyeCatchImage":null,"excerpt":"<p>使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。<br>","date":"2019-04-28T12:39:32.000Z","pv":0,"totalPV":0,"categories":"程序员","tags":["Android","macOS","命令","效率","无线","调试","adb","USB"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1883},{"title":"自用软件推荐","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2019-10-12T08:40:17.000Z","_content":"\n日用软件/效率提升/开发工具/Chorme插件扩展推荐\n<!--more-->\n\n#### 应用\n\n##### 日常\n\n1. **[Alfred](https://www.alfredapp.com/)**(macOS)\n\n      Mac上的效率启动神器\n\n2. **[uTools](https://u.tools/)**(macOS/Windows/Linux)\n\n     > 你的生产力工具集.\n     >\n     > uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。\n     >\n     > 当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n     除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈\n\n3. **[WGestures](http://www.yingdev.com/projects/wgestures)**(Windows)\n\n      系统鼠标手势 \n\n4. **[Snipaste](https://zh.snipaste.com/)**(macOS/Windows)\n\n      截图/贴图\n\n5. **[Everything](https://www.voidtools.com/)**(Windows)\n\n      Windows本地搜索，快如闪电，用过就回不去\n\n6. **[Rolan](http://www.irolan.com/)**(Windows)\n\n     Windows上的快速启动器 \n\n7. **[Rime](http://rime.im/)**(macOS/Windows/Linux)\n\n      输入法\n\n8. **[多台设备共用键鼠](https://symless.com/synergy/)**(macOS/Windows/Linux)\n\n      多台设备共用键鼠\n\n9. **[Shadowsocks/v2rayNG/v2ray]**(macOS/Windows/Linux/Android）\n\n      科学上网\n\n10. **[AppCleaner](https://freemacsoft.net/appcleaner/)**(macOS）\n\n      应用卸载器 \n\n11. **[Typora](https://www.typora.io/)**(macOS/Windows/Linux）\n\n      markdown笔记写作应用，配合坚果云或Dropbox同步，爽\n\n12. **[SumatraPDF](https://www.sumatrapdfreader.org/)**(Windows）\n\n      PDF阅读器\n\n13. **[EagleGet](http://www.eagleget.com/)**(Windows）\n\n     下载器\n\n14. **[Free Download Manager](https://www.freedownloadmanager.org/zh/)**(macOS/Windows）\n\n      下载器\n\n15. **[Bandizip](https://www.bandisoft.com/bandizip/cn/)**(macOS/Windows）\n\n      压缩/解压软件\n\n16. **[eZip](https://ezip.awehunt.com/)**(macOS/Windows）\n\n      压缩/解压软件\n\n17. **[reveal.js](https://github.com/hakimel/reveal.js)**(Web）\n\n      程序员的PPT工具\n\n18. **[Xnip](https://zh.xnipapp.com/)**(macOS）\n\n      截图应用\n\n19. **[pap.er](https://paper.meiyuan.in/)**(macOS）\n\n      壁纸应用\n\n20. **[aText](https://trankynam.com/atext/)**(macOS/Windows）\n\n      文字输入效率提升工具\n\n##### 开发\n\n22. **[Cmder](https://github.com/cmderdev/cmder)**(Windows)\n\n      Windows默认命令行替代品 \n\n23. **[Insomnia](https://insomnia.rest/)**(macOS/Windows/Linux)\n\n    跨平台的REST客户端\n\n24. **[postman](https://www.getpostman.com/)**(macOS/Windows/Linux/~~Chrome App~~)\n\n      跨平台的接口调试工具，有mocks服务和接口文档生成功能\n\n25. **[iTerm2](https://iterm2.com/)**(macOS)\n\n      终端应用\n\n26. **[hyper](https://hyper.is/)**(macOS/Windows/Linux)\n\n      漂亮的终端应用\n\n27. **[Fiddler](http://www.telerik.com/fiddler)**(macOS/Windows/Linux)\n\n      抓包工具\n\n28. **[Charles](https://www.charlesproxy.com/)**(macOS/Windows/Linux)\n\n      抓包工具\n\n29. **[frp](https://github.com/fatedier/frp)**(macOS/Windows/Linux)\n      内网穿透\n\n#### Chrome\n\n##### 扩展/应用\n\n1. **Adblock Plus**\n\n      广告拦截器，谁用谁知道\n\n2. **Checker Plus for Gmail™**\n\n      Gmail/Inbox插件，不用打开网页处理邮件\n\n3. **Dark Reader**\n\n      黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览\n\n4. **Extensity**\n\n      扩展管理工具，快速的启用/禁用\n\n5. **Wappalyzer**\n\n      探测当前网页正在使用的开源软件或者js类库\n\n6. **Ghostery**\n\n      了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n7. **Google翻译**\n\n   支付在网页中划词翻译\n\n8. **彩云小译**\n\n      网页翻译插件\n\n9. **LastPass**\n\n      密码管理\n\n10. **Tampermonkey**\n\n      给网站添加自定义脚本\n\n11. **Stylish**\n\n      给网站添加自定义样式表\n\n12. **Web Server for Chrome**\n\n      快速搭建本地Web服务器(当然，你也可以`python -m http.server`)\n\n13. **Octotree**\n\n      在浏览器左侧树形展示Github代码。\n\n14. **Prism Pretty**\n\n      美化代码（html、css、js、json……）\n\n15. **Proxy SwitchyOmega**\n\n      你懂的\n\n16. **v2ex plus**\n\n      优雅便捷的 V2EX 扩展\n\n17. **Toby for Chrome**\n\n      标签页管理/稍后阅读/资料归档分类...\n\n18. **Web Scraper**\n\n      图形化创建爬虫，爬取网站数据\n\n19. **惠惠购物助手/购物党自动比价工具**\n\n      在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n20. **Google Keep**\n\n      记事和清单","source":"_posts/awesome-software.md","raw":"---\ntitle: 自用软件推荐\ncomments: true\ntags: [软件, 推荐, 效率]\ncategories: [工具]\ntoc: true\nvisible: show\nindexing: true\ndate: 2019-10-12 16:40:17\n---\n\n日用软件/效率提升/开发工具/Chorme插件扩展推荐\n<!--more-->\n\n#### 应用\n\n##### 日常\n\n1. **[Alfred](https://www.alfredapp.com/)**(macOS)\n\n      Mac上的效率启动神器\n\n2. **[uTools](https://u.tools/)**(macOS/Windows/Linux)\n\n     > 你的生产力工具集.\n     >\n     > uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。\n     >\n     > 当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n     除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈\n\n3. **[WGestures](http://www.yingdev.com/projects/wgestures)**(Windows)\n\n      系统鼠标手势 \n\n4. **[Snipaste](https://zh.snipaste.com/)**(macOS/Windows)\n\n      截图/贴图\n\n5. **[Everything](https://www.voidtools.com/)**(Windows)\n\n      Windows本地搜索，快如闪电，用过就回不去\n\n6. **[Rolan](http://www.irolan.com/)**(Windows)\n\n     Windows上的快速启动器 \n\n7. **[Rime](http://rime.im/)**(macOS/Windows/Linux)\n\n      输入法\n\n8. **[多台设备共用键鼠](https://symless.com/synergy/)**(macOS/Windows/Linux)\n\n      多台设备共用键鼠\n\n9. **[Shadowsocks/v2rayNG/v2ray]**(macOS/Windows/Linux/Android）\n\n      科学上网\n\n10. **[AppCleaner](https://freemacsoft.net/appcleaner/)**(macOS）\n\n      应用卸载器 \n\n11. **[Typora](https://www.typora.io/)**(macOS/Windows/Linux）\n\n      markdown笔记写作应用，配合坚果云或Dropbox同步，爽\n\n12. **[SumatraPDF](https://www.sumatrapdfreader.org/)**(Windows）\n\n      PDF阅读器\n\n13. **[EagleGet](http://www.eagleget.com/)**(Windows）\n\n     下载器\n\n14. **[Free Download Manager](https://www.freedownloadmanager.org/zh/)**(macOS/Windows）\n\n      下载器\n\n15. **[Bandizip](https://www.bandisoft.com/bandizip/cn/)**(macOS/Windows）\n\n      压缩/解压软件\n\n16. **[eZip](https://ezip.awehunt.com/)**(macOS/Windows）\n\n      压缩/解压软件\n\n17. **[reveal.js](https://github.com/hakimel/reveal.js)**(Web）\n\n      程序员的PPT工具\n\n18. **[Xnip](https://zh.xnipapp.com/)**(macOS）\n\n      截图应用\n\n19. **[pap.er](https://paper.meiyuan.in/)**(macOS）\n\n      壁纸应用\n\n20. **[aText](https://trankynam.com/atext/)**(macOS/Windows）\n\n      文字输入效率提升工具\n\n##### 开发\n\n22. **[Cmder](https://github.com/cmderdev/cmder)**(Windows)\n\n      Windows默认命令行替代品 \n\n23. **[Insomnia](https://insomnia.rest/)**(macOS/Windows/Linux)\n\n    跨平台的REST客户端\n\n24. **[postman](https://www.getpostman.com/)**(macOS/Windows/Linux/~~Chrome App~~)\n\n      跨平台的接口调试工具，有mocks服务和接口文档生成功能\n\n25. **[iTerm2](https://iterm2.com/)**(macOS)\n\n      终端应用\n\n26. **[hyper](https://hyper.is/)**(macOS/Windows/Linux)\n\n      漂亮的终端应用\n\n27. **[Fiddler](http://www.telerik.com/fiddler)**(macOS/Windows/Linux)\n\n      抓包工具\n\n28. **[Charles](https://www.charlesproxy.com/)**(macOS/Windows/Linux)\n\n      抓包工具\n\n29. **[frp](https://github.com/fatedier/frp)**(macOS/Windows/Linux)\n      内网穿透\n\n#### Chrome\n\n##### 扩展/应用\n\n1. **Adblock Plus**\n\n      广告拦截器，谁用谁知道\n\n2. **Checker Plus for Gmail™**\n\n      Gmail/Inbox插件，不用打开网页处理邮件\n\n3. **Dark Reader**\n\n      黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览\n\n4. **Extensity**\n\n      扩展管理工具，快速的启用/禁用\n\n5. **Wappalyzer**\n\n      探测当前网页正在使用的开源软件或者js类库\n\n6. **Ghostery**\n\n      了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n7. **Google翻译**\n\n   支付在网页中划词翻译\n\n8. **彩云小译**\n\n      网页翻译插件\n\n9. **LastPass**\n\n      密码管理\n\n10. **Tampermonkey**\n\n      给网站添加自定义脚本\n\n11. **Stylish**\n\n      给网站添加自定义样式表\n\n12. **Web Server for Chrome**\n\n      快速搭建本地Web服务器(当然，你也可以`python -m http.server`)\n\n13. **Octotree**\n\n      在浏览器左侧树形展示Github代码。\n\n14. **Prism Pretty**\n\n      美化代码（html、css、js、json……）\n\n15. **Proxy SwitchyOmega**\n\n      你懂的\n\n16. **v2ex plus**\n\n      优雅便捷的 V2EX 扩展\n\n17. **Toby for Chrome**\n\n      标签页管理/稍后阅读/资料归档分类...\n\n18. **Web Scraper**\n\n      图形化创建爬虫，爬取网站数据\n\n19. **惠惠购物助手/购物党自动比价工具**\n\n      在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n20. **Google Keep**\n\n      记事和清单","slug":"awesome-software","published":1,"updated":"2020-04-02T09:04:45.988Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yij000issyhf43erdf3","content":"<p>日用软件/效率提升/开发工具/Chorme插件扩展推荐<br><a id=\"more\"></a></p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><h5 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h5><ol>\n<li><p><strong><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred</a></strong>(macOS)</p>\n<p>   Mac上的效率启动神器</p>\n</li>\n<li><p><strong><a href=\"https://u.tools/\" target=\"_blank\" rel=\"noopener\">uTools</a></strong>(macOS/Windows/Linux)</p>\n<blockquote>\n<p>你的生产力工具集.</p>\n<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p>\n<p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>\n</blockquote>\n<p>  除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈</p>\n</li>\n<li><p><strong><a href=\"http://www.yingdev.com/projects/wgestures\" target=\"_blank\" rel=\"noopener\">WGestures</a></strong>(Windows)</p>\n<p>   系统鼠标手势 </p>\n</li>\n<li><p><strong><a href=\"https://zh.snipaste.com/\" target=\"_blank\" rel=\"noopener\">Snipaste</a></strong>(macOS/Windows)</p>\n<p>   截图/贴图</p>\n</li>\n<li><p><strong><a href=\"https://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">Everything</a></strong>(Windows)</p>\n<p>   Windows本地搜索，快如闪电，用过就回不去</p>\n</li>\n<li><p><strong><a href=\"http://www.irolan.com/\" target=\"_blank\" rel=\"noopener\">Rolan</a></strong>(Windows)</p>\n<p>  Windows上的快速启动器 </p>\n</li>\n<li><p><strong><a href=\"http://rime.im/\" target=\"_blank\" rel=\"noopener\">Rime</a></strong>(macOS/Windows/Linux)</p>\n<p>   输入法</p>\n</li>\n<li><p><strong><a href=\"https://symless.com/synergy/\" target=\"_blank\" rel=\"noopener\">多台设备共用键鼠</a></strong>(macOS/Windows/Linux)</p>\n<p>   多台设备共用键鼠</p>\n</li>\n<li><p><strong>[Shadowsocks/v2rayNG/v2ray]</strong>(macOS/Windows/Linux/Android）</p>\n<p>   科学上网</p>\n</li>\n<li><p><strong><a href=\"https://freemacsoft.net/appcleaner/\" target=\"_blank\" rel=\"noopener\">AppCleaner</a></strong>(macOS）</p>\n<p>  应用卸载器 </p>\n</li>\n<li><p><strong><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></strong>(macOS/Windows/Linux）</p>\n<p>  markdown笔记写作应用，配合坚果云或Dropbox同步，爽</p>\n</li>\n<li><p><strong><a href=\"https://www.sumatrapdfreader.org/\" target=\"_blank\" rel=\"noopener\">SumatraPDF</a></strong>(Windows）</p>\n<p>  PDF阅读器</p>\n</li>\n<li><p><strong><a href=\"http://www.eagleget.com/\" target=\"_blank\" rel=\"noopener\">EagleGet</a></strong>(Windows）</p>\n<p> 下载器</p>\n</li>\n<li><p><strong><a href=\"https://www.freedownloadmanager.org/zh/\" target=\"_blank\" rel=\"noopener\">Free Download Manager</a></strong>(macOS/Windows）</p>\n<p>  下载器</p>\n</li>\n<li><p><strong><a href=\"https://www.bandisoft.com/bandizip/cn/\" target=\"_blank\" rel=\"noopener\">Bandizip</a></strong>(macOS/Windows）</p>\n<p>  压缩/解压软件</p>\n</li>\n<li><p><strong><a href=\"https://ezip.awehunt.com/\" target=\"_blank\" rel=\"noopener\">eZip</a></strong>(macOS/Windows）</p>\n<p>  压缩/解压软件</p>\n</li>\n<li><p><strong><a href=\"https://github.com/hakimel/reveal.js\" target=\"_blank\" rel=\"noopener\">reveal.js</a></strong>(Web）</p>\n<p>  程序员的PPT工具</p>\n</li>\n<li><p><strong><a href=\"https://zh.xnipapp.com/\" target=\"_blank\" rel=\"noopener\">Xnip</a></strong>(macOS）</p>\n<p>  截图应用</p>\n</li>\n<li><p><strong><a href=\"https://paper.meiyuan.in/\" target=\"_blank\" rel=\"noopener\">pap.er</a></strong>(macOS）</p>\n<p>  壁纸应用</p>\n</li>\n<li><p><strong><a href=\"https://trankynam.com/atext/\" target=\"_blank\" rel=\"noopener\">aText</a></strong>(macOS/Windows）</p>\n<p>  文字输入效率提升工具</p>\n</li>\n</ol>\n<h5 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h5><ol start=\"22\">\n<li><p><strong><a href=\"https://github.com/cmderdev/cmder\" target=\"_blank\" rel=\"noopener\">Cmder</a></strong>(Windows)</p>\n<p>  Windows默认命令行替代品 </p>\n</li>\n<li><p><strong><a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"noopener\">Insomnia</a></strong>(macOS/Windows/Linux)</p>\n<p>跨平台的REST客户端</p>\n</li>\n<li><p><strong><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">postman</a></strong>(macOS/Windows/Linux/<del>Chrome App</del>)</p>\n<p>  跨平台的接口调试工具，有mocks服务和接口文档生成功能</p>\n</li>\n<li><p><strong><a href=\"https://iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm2</a></strong>(macOS)</p>\n<p>  终端应用</p>\n</li>\n<li><p><strong><a href=\"https://hyper.is/\" target=\"_blank\" rel=\"noopener\">hyper</a></strong>(macOS/Windows/Linux)</p>\n<p>  漂亮的终端应用</p>\n</li>\n<li><p><strong><a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a></strong>(macOS/Windows/Linux)</p>\n<p>  抓包工具</p>\n</li>\n<li><p><strong><a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a></strong>(macOS/Windows/Linux)</p>\n<p>  抓包工具</p>\n</li>\n<li><p><strong><a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">frp</a></strong>(macOS/Windows/Linux)<br>  内网穿透</p>\n</li>\n</ol>\n<h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><h5 id=\"扩展-应用\"><a href=\"#扩展-应用\" class=\"headerlink\" title=\"扩展/应用\"></a>扩展/应用</h5><ol>\n<li><p><strong>Adblock Plus</strong></p>\n<p>   广告拦截器，谁用谁知道</p>\n</li>\n<li><p><strong>Checker Plus for Gmail™</strong></p>\n<p>   Gmail/Inbox插件，不用打开网页处理邮件</p>\n</li>\n<li><p><strong>Dark Reader</strong></p>\n<p>   黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览</p>\n</li>\n<li><p><strong>Extensity</strong></p>\n<p>   扩展管理工具，快速的启用/禁用</p>\n</li>\n<li><p><strong>Wappalyzer</strong></p>\n<p>   探测当前网页正在使用的开源软件或者js类库</p>\n</li>\n<li><p><strong>Ghostery</strong></p>\n<p>   了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>\n</li>\n<li><p><strong>Google翻译</strong></p>\n<p>支付在网页中划词翻译</p>\n</li>\n<li><p><strong>彩云小译</strong></p>\n<p>   网页翻译插件</p>\n</li>\n<li><p><strong>LastPass</strong></p>\n<p>   密码管理</p>\n</li>\n<li><p><strong>Tampermonkey</strong></p>\n<p>  给网站添加自定义脚本</p>\n</li>\n<li><p><strong>Stylish</strong></p>\n<p>  给网站添加自定义样式表</p>\n</li>\n<li><p><strong>Web Server for Chrome</strong></p>\n<p>  快速搭建本地Web服务器(当然，你也可以<code>python -m http.server</code>)</p>\n</li>\n<li><p><strong>Octotree</strong></p>\n<p>  在浏览器左侧树形展示Github代码。</p>\n</li>\n<li><p><strong>Prism Pretty</strong></p>\n<p>  美化代码（html、css、js、json……）</p>\n</li>\n<li><p><strong>Proxy SwitchyOmega</strong></p>\n<p>  你懂的</p>\n</li>\n<li><p><strong>v2ex plus</strong></p>\n<p>  优雅便捷的 V2EX 扩展</p>\n</li>\n<li><p><strong>Toby for Chrome</strong></p>\n<p>  标签页管理/稍后阅读/资料归档分类…</p>\n</li>\n<li><p><strong>Web Scraper</strong></p>\n<p>  图形化创建爬虫，爬取网站数据</p>\n</li>\n<li><p><strong>惠惠购物助手/购物党自动比价工具</strong></p>\n<p>  在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>\n</li>\n<li><p><strong>Google Keep</strong></p>\n<p>  记事和清单</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>日用软件/效率提升/开发工具/Chorme插件扩展推荐<br>","more":"</p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><h5 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h5><ol>\n<li><p><strong><a href=\"https://www.alfredapp.com/\" target=\"_blank\" rel=\"noopener\">Alfred</a></strong>(macOS)</p>\n<p>   Mac上的效率启动神器</p>\n</li>\n<li><p><strong><a href=\"https://u.tools/\" target=\"_blank\" rel=\"noopener\">uTools</a></strong>(macOS/Windows/Linux)</p>\n<blockquote>\n<p>你的生产力工具集.</p>\n<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p>\n<p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>\n</blockquote>\n<p>  除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈</p>\n</li>\n<li><p><strong><a href=\"http://www.yingdev.com/projects/wgestures\" target=\"_blank\" rel=\"noopener\">WGestures</a></strong>(Windows)</p>\n<p>   系统鼠标手势 </p>\n</li>\n<li><p><strong><a href=\"https://zh.snipaste.com/\" target=\"_blank\" rel=\"noopener\">Snipaste</a></strong>(macOS/Windows)</p>\n<p>   截图/贴图</p>\n</li>\n<li><p><strong><a href=\"https://www.voidtools.com/\" target=\"_blank\" rel=\"noopener\">Everything</a></strong>(Windows)</p>\n<p>   Windows本地搜索，快如闪电，用过就回不去</p>\n</li>\n<li><p><strong><a href=\"http://www.irolan.com/\" target=\"_blank\" rel=\"noopener\">Rolan</a></strong>(Windows)</p>\n<p>  Windows上的快速启动器 </p>\n</li>\n<li><p><strong><a href=\"http://rime.im/\" target=\"_blank\" rel=\"noopener\">Rime</a></strong>(macOS/Windows/Linux)</p>\n<p>   输入法</p>\n</li>\n<li><p><strong><a href=\"https://symless.com/synergy/\" target=\"_blank\" rel=\"noopener\">多台设备共用键鼠</a></strong>(macOS/Windows/Linux)</p>\n<p>   多台设备共用键鼠</p>\n</li>\n<li><p><strong>[Shadowsocks/v2rayNG/v2ray]</strong>(macOS/Windows/Linux/Android）</p>\n<p>   科学上网</p>\n</li>\n<li><p><strong><a href=\"https://freemacsoft.net/appcleaner/\" target=\"_blank\" rel=\"noopener\">AppCleaner</a></strong>(macOS）</p>\n<p>  应用卸载器 </p>\n</li>\n<li><p><strong><a href=\"https://www.typora.io/\" target=\"_blank\" rel=\"noopener\">Typora</a></strong>(macOS/Windows/Linux）</p>\n<p>  markdown笔记写作应用，配合坚果云或Dropbox同步，爽</p>\n</li>\n<li><p><strong><a href=\"https://www.sumatrapdfreader.org/\" target=\"_blank\" rel=\"noopener\">SumatraPDF</a></strong>(Windows）</p>\n<p>  PDF阅读器</p>\n</li>\n<li><p><strong><a href=\"http://www.eagleget.com/\" target=\"_blank\" rel=\"noopener\">EagleGet</a></strong>(Windows）</p>\n<p> 下载器</p>\n</li>\n<li><p><strong><a href=\"https://www.freedownloadmanager.org/zh/\" target=\"_blank\" rel=\"noopener\">Free Download Manager</a></strong>(macOS/Windows）</p>\n<p>  下载器</p>\n</li>\n<li><p><strong><a href=\"https://www.bandisoft.com/bandizip/cn/\" target=\"_blank\" rel=\"noopener\">Bandizip</a></strong>(macOS/Windows）</p>\n<p>  压缩/解压软件</p>\n</li>\n<li><p><strong><a href=\"https://ezip.awehunt.com/\" target=\"_blank\" rel=\"noopener\">eZip</a></strong>(macOS/Windows）</p>\n<p>  压缩/解压软件</p>\n</li>\n<li><p><strong><a href=\"https://github.com/hakimel/reveal.js\" target=\"_blank\" rel=\"noopener\">reveal.js</a></strong>(Web）</p>\n<p>  程序员的PPT工具</p>\n</li>\n<li><p><strong><a href=\"https://zh.xnipapp.com/\" target=\"_blank\" rel=\"noopener\">Xnip</a></strong>(macOS）</p>\n<p>  截图应用</p>\n</li>\n<li><p><strong><a href=\"https://paper.meiyuan.in/\" target=\"_blank\" rel=\"noopener\">pap.er</a></strong>(macOS）</p>\n<p>  壁纸应用</p>\n</li>\n<li><p><strong><a href=\"https://trankynam.com/atext/\" target=\"_blank\" rel=\"noopener\">aText</a></strong>(macOS/Windows）</p>\n<p>  文字输入效率提升工具</p>\n</li>\n</ol>\n<h5 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h5><ol start=\"22\">\n<li><p><strong><a href=\"https://github.com/cmderdev/cmder\" target=\"_blank\" rel=\"noopener\">Cmder</a></strong>(Windows)</p>\n<p>  Windows默认命令行替代品 </p>\n</li>\n<li><p><strong><a href=\"https://insomnia.rest/\" target=\"_blank\" rel=\"noopener\">Insomnia</a></strong>(macOS/Windows/Linux)</p>\n<p>跨平台的REST客户端</p>\n</li>\n<li><p><strong><a href=\"https://www.getpostman.com/\" target=\"_blank\" rel=\"noopener\">postman</a></strong>(macOS/Windows/Linux/<del>Chrome App</del>)</p>\n<p>  跨平台的接口调试工具，有mocks服务和接口文档生成功能</p>\n</li>\n<li><p><strong><a href=\"https://iterm2.com/\" target=\"_blank\" rel=\"noopener\">iTerm2</a></strong>(macOS)</p>\n<p>  终端应用</p>\n</li>\n<li><p><strong><a href=\"https://hyper.is/\" target=\"_blank\" rel=\"noopener\">hyper</a></strong>(macOS/Windows/Linux)</p>\n<p>  漂亮的终端应用</p>\n</li>\n<li><p><strong><a href=\"http://www.telerik.com/fiddler\" target=\"_blank\" rel=\"noopener\">Fiddler</a></strong>(macOS/Windows/Linux)</p>\n<p>  抓包工具</p>\n</li>\n<li><p><strong><a href=\"https://www.charlesproxy.com/\" target=\"_blank\" rel=\"noopener\">Charles</a></strong>(macOS/Windows/Linux)</p>\n<p>  抓包工具</p>\n</li>\n<li><p><strong><a href=\"https://github.com/fatedier/frp\" target=\"_blank\" rel=\"noopener\">frp</a></strong>(macOS/Windows/Linux)<br>  内网穿透</p>\n</li>\n</ol>\n<h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><h5 id=\"扩展-应用\"><a href=\"#扩展-应用\" class=\"headerlink\" title=\"扩展/应用\"></a>扩展/应用</h5><ol>\n<li><p><strong>Adblock Plus</strong></p>\n<p>   广告拦截器，谁用谁知道</p>\n</li>\n<li><p><strong>Checker Plus for Gmail™</strong></p>\n<p>   Gmail/Inbox插件，不用打开网页处理邮件</p>\n</li>\n<li><p><strong>Dark Reader</strong></p>\n<p>   黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览</p>\n</li>\n<li><p><strong>Extensity</strong></p>\n<p>   扩展管理工具，快速的启用/禁用</p>\n</li>\n<li><p><strong>Wappalyzer</strong></p>\n<p>   探测当前网页正在使用的开源软件或者js类库</p>\n</li>\n<li><p><strong>Ghostery</strong></p>\n<p>   了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>\n</li>\n<li><p><strong>Google翻译</strong></p>\n<p>支付在网页中划词翻译</p>\n</li>\n<li><p><strong>彩云小译</strong></p>\n<p>   网页翻译插件</p>\n</li>\n<li><p><strong>LastPass</strong></p>\n<p>   密码管理</p>\n</li>\n<li><p><strong>Tampermonkey</strong></p>\n<p>  给网站添加自定义脚本</p>\n</li>\n<li><p><strong>Stylish</strong></p>\n<p>  给网站添加自定义样式表</p>\n</li>\n<li><p><strong>Web Server for Chrome</strong></p>\n<p>  快速搭建本地Web服务器(当然，你也可以<code>python -m http.server</code>)</p>\n</li>\n<li><p><strong>Octotree</strong></p>\n<p>  在浏览器左侧树形展示Github代码。</p>\n</li>\n<li><p><strong>Prism Pretty</strong></p>\n<p>  美化代码（html、css、js、json……）</p>\n</li>\n<li><p><strong>Proxy SwitchyOmega</strong></p>\n<p>  你懂的</p>\n</li>\n<li><p><strong>v2ex plus</strong></p>\n<p>  优雅便捷的 V2EX 扩展</p>\n</li>\n<li><p><strong>Toby for Chrome</strong></p>\n<p>  标签页管理/稍后阅读/资料归档分类…</p>\n</li>\n<li><p><strong>Web Scraper</strong></p>\n<p>  图形化创建爬虫，爬取网站数据</p>\n</li>\n<li><p><strong>惠惠购物助手/购物党自动比价工具</strong></p>\n<p>  在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>\n</li>\n<li><p><strong>Google Keep</strong></p>\n<p>  记事和清单</p>\n</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Apr 02 2020 17:04:45 GMT+0800 (China Standard Time)","title":"自用软件推荐","path":"2019/10/12/awesome-software/","eyeCatchImage":null,"excerpt":"<p>日用软件/效率提升/开发工具/Chorme插件扩展推荐<br>","date":"2019-10-12T08:40:17.000Z","pv":0,"totalPV":0,"categories":"工具","tags":["效率","软件","推荐"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1767},{"title":"在Android Chrome以app形式打开网站","date":"2015-05-11T02:34:14.000Z","_content":"前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。\n<!--more-->\n\n## 添加配置文件\n在网站根目录添加`manifest.json`，并进行相应配置\n```json\n{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"launcher-icon-0-75x.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"launcher-icon-1-5x.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"launcher-icon-3x.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}\n\n```\n\n## 在网站公用头部引入配置文件\n```\n<link rel=\"manifest\" href=\"manifest.json\">\n```\n## 查看效果\n在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：\n![chrome-add-to-homescreen-01](/media/chrome-add-to-homescreen-01.png)\n![chrome-add-to-homescreen-02](/media/chrome-add-to-homescreen-02.png)\nPS:地址栏是不是不见了,看着像app而不是网页\n![chrome-add-to-homescreen-03](/media/chrome-add-to-homescreen-03.png)\n![chrome-add-to-homescreen-04](/media/chrome-add-to-homescreen-04.png)\n\n## 扩展\nios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章[http://www.prower.cn/technic/2314](http://www.prower.cn/technic/2314)\n\n## 参考资料\n> [https://developer.chrome.com/multidevice/android/installtohomescreen](https://developer.chrome.com/multidevice/android/installtohomescreen)\n\n\n","source":"_posts/chrome-add-to-homescreen.md","raw":"title: 在Android Chrome以app形式打开网站\ndate: 2015-05-11 10:34:14\ncategories: [网站]\ntags: [Android, Chrome]\n---\n前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。\n<!--more-->\n\n## 添加配置文件\n在网站根目录添加`manifest.json`，并进行相应配置\n```json\n{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"launcher-icon-0-75x.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"launcher-icon-1-5x.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"launcher-icon-3x.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}\n\n```\n\n## 在网站公用头部引入配置文件\n```\n<link rel=\"manifest\" href=\"manifest.json\">\n```\n## 查看效果\n在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：\n![chrome-add-to-homescreen-01](/media/chrome-add-to-homescreen-01.png)\n![chrome-add-to-homescreen-02](/media/chrome-add-to-homescreen-02.png)\nPS:地址栏是不是不见了,看着像app而不是网页\n![chrome-add-to-homescreen-03](/media/chrome-add-to-homescreen-03.png)\n![chrome-add-to-homescreen-04](/media/chrome-add-to-homescreen-04.png)\n\n## 扩展\nios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章[http://www.prower.cn/technic/2314](http://www.prower.cn/technic/2314)\n\n## 参考资料\n> [https://developer.chrome.com/multidevice/android/installtohomescreen](https://developer.chrome.com/multidevice/android/installtohomescreen)\n\n\n","slug":"chrome-add-to-homescreen","published":1,"updated":"2020-01-17T07:57:41.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yik000jssyh666830c0","content":"<p>前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。<br><a id=\"more\"></a></p>\n<h2 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h2><p>在网站根目录添加<code>manifest.json</code>，并进行相应配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"iblogc\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-0-75x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"36x36\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"0.75\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-1x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"48x48\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-1-5x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"72x72\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"1.5\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-2x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"96x96\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"2.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-3x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"144x144\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"3.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-4x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"192x192\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"4.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"orientation\"</span>: <span class=\"string\">\"portrait\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在网站公用头部引入配置文件\"><a href=\"#在网站公用头部引入配置文件\" class=\"headerlink\" title=\"在网站公用头部引入配置文件\"></a>在网站公用头部引入配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：<br><img alt=\"chrome-add-to-homescreen-01\" data-src=\"/media/chrome-add-to-homescreen-01.png\"><br><img alt=\"chrome-add-to-homescreen-02\" data-src=\"/media/chrome-add-to-homescreen-02.png\"><br>PS:地址栏是不是不见了,看着像app而不是网页<br><img alt=\"chrome-add-to-homescreen-03\" data-src=\"/media/chrome-add-to-homescreen-03.png\"><br><img alt=\"chrome-add-to-homescreen-04\" data-src=\"/media/chrome-add-to-homescreen-04.png\"></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>ios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章<a href=\"http://www.prower.cn/technic/2314\" target=\"_blank\" rel=\"noopener\">http://www.prower.cn/technic/2314</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://developer.chrome.com/multidevice/android/installtohomescreen\" target=\"_blank\" rel=\"noopener\">https://developer.chrome.com/multidevice/android/installtohomescreen</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。<br>","more":"</p>\n<h2 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h2><p>在网站根目录添加<code>manifest.json</code>，并进行相应配置<br><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"name\"</span>: <span class=\"string\">\"iblogc\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"icons\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-0-75x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"36x36\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"0.75\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-1x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"48x48\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"1.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-1-5x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"72x72\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"1.5\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-2x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"96x96\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"2.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-3x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"144x144\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"3.0\"</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"src\"</span>: <span class=\"string\">\"launcher-icon-4x.png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"sizes\"</span>: <span class=\"string\">\"192x192\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"type\"</span>: <span class=\"string\">\"image/png\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"density\"</span>: <span class=\"string\">\"4.0\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">\"start_url\"</span>: <span class=\"string\">\"index.html\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"display\"</span>: <span class=\"string\">\"standalone\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"orientation\"</span>: <span class=\"string\">\"portrait\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在网站公用头部引入配置文件\"><a href=\"#在网站公用头部引入配置文件\" class=\"headerlink\" title=\"在网站公用头部引入配置文件\"></a>在网站公用头部引入配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link rel=&quot;manifest&quot; href=&quot;manifest.json&quot;&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看效果\"><a href=\"#查看效果\" class=\"headerlink\" title=\"查看效果\"></a>查看效果</h2><p>在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：<br><img src=\"/media/chrome-add-to-homescreen-01.png\" alt=\"chrome-add-to-homescreen-01\"><br><img src=\"/media/chrome-add-to-homescreen-02.png\" alt=\"chrome-add-to-homescreen-02\"><br>PS:地址栏是不是不见了,看着像app而不是网页<br><img src=\"/media/chrome-add-to-homescreen-03.png\" alt=\"chrome-add-to-homescreen-03\"><br><img src=\"/media/chrome-add-to-homescreen-04.png\" alt=\"chrome-add-to-homescreen-04\"></p>\n<h2 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h2><p>ios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章<a href=\"http://www.prower.cn/technic/2314\" target=\"_blank\" rel=\"noopener\">http://www.prower.cn/technic/2314</a></p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://developer.chrome.com/multidevice/android/installtohomescreen\" target=\"_blank\" rel=\"noopener\">https://developer.chrome.com/multidevice/android/installtohomescreen</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:41 GMT+0800 (China Standard Time)","title":"在Android Chrome以app形式打开网站","path":"2015/05/11/chrome-add-to-homescreen/","eyeCatchImage":null,"excerpt":"<p>前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。<br>","date":"2015-05-11T02:34:14.000Z","pv":0,"totalPV":0,"categories":"网站","tags":["Android","Chrome"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1403},{"title":"Chrome扩展/插件/应用推荐","comments":1,"date":"2016-06-01T15:22:35.000Z","sticky":null,"_content":"<br/>\n本文过期，请前行住[自用软件推荐](/2019/10/12/awesome-software/)查看最新内容\n<!--more-->\n## 插件/扩展\n1. **Adblock Plus**\n广告拦截器，谁用谁知道。\n\n2. **Checker Plus for Gmail™**\nGmail/Inbox插件，不用打开网页处理邮件。\n\n3. **Wappalyzer**\n探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。\n\n4. **crxMouse Chrome Gestures**\n鼠标手势。\n\n5. **Ghostery**\n了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n6. **Google Keep Chrome 扩展程序**\n将网页快速的保存到Google Keep中。\n\n7. **Google翻译**\n支付在网页中划词翻译。\n\n8. **划词翻译**\n划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。\n\n9. **LastPass**\n免费的密码管理管理器。\n\n10. **MindMap Tab**\n在新标签页中快速编辑思维导图。\n\n11. **Octotree**\n在浏览器左侧树形展示Github代码。\n\n12. **Prism Pretty**\n美化代码（html、css、js、json……）\n\n13. **Proxy SwitchyOmega**\n你懂的。\n\n14. **Pushbullet**\n快速的往其它设备发送消息。\n\n15. **Save to Pocket**\n快速保存网页到Pocket。\n\n16. **Search by Image (by Google)**\n浏览器右键增加Google的以图搜图功能。\n\n17. **v2ex plus**\n优雅便捷的 V2EX 扩展。\n\n18. **Web Timer**\n每个网站停留时间统计。\n\n19. **为知笔记网页剪辑器**\n配合为知笔记，快速保存网页内容到为知笔记。\n\n20. **二维码（生成及识别）**\n生成或识别二维码。\n\n21. **惠惠购物助手**\n在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n22. **新浪微博图床**\n微博是个好图床。\n\n23. **网页截图:注释&批注**\n捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。\n\n## 应用\n\n1. **Postman**\n功能强大的接口调试工具。\n\n2. **Google Keep - 记事和清单**\n不解释。\n\n3. **Pocket**\n不解释。\n\n4. **JSON Editor**\n图形化json编辑工具。","source":"_posts/chrome扩展-插件-应用推荐.md","raw":"title: Chrome扩展/插件/应用推荐\ncomments: true\ndate: 2016-06-01 23:22:35\ncategories: [优化辅助]\ntags: [工具, Chrome, 扩展, 插件]\nsticky:\n---\n<br/>\n本文过期，请前行住[自用软件推荐](/2019/10/12/awesome-software/)查看最新内容\n<!--more-->\n## 插件/扩展\n1. **Adblock Plus**\n广告拦截器，谁用谁知道。\n\n2. **Checker Plus for Gmail™**\nGmail/Inbox插件，不用打开网页处理邮件。\n\n3. **Wappalyzer**\n探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。\n\n4. **crxMouse Chrome Gestures**\n鼠标手势。\n\n5. **Ghostery**\n了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n6. **Google Keep Chrome 扩展程序**\n将网页快速的保存到Google Keep中。\n\n7. **Google翻译**\n支付在网页中划词翻译。\n\n8. **划词翻译**\n划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。\n\n9. **LastPass**\n免费的密码管理管理器。\n\n10. **MindMap Tab**\n在新标签页中快速编辑思维导图。\n\n11. **Octotree**\n在浏览器左侧树形展示Github代码。\n\n12. **Prism Pretty**\n美化代码（html、css、js、json……）\n\n13. **Proxy SwitchyOmega**\n你懂的。\n\n14. **Pushbullet**\n快速的往其它设备发送消息。\n\n15. **Save to Pocket**\n快速保存网页到Pocket。\n\n16. **Search by Image (by Google)**\n浏览器右键增加Google的以图搜图功能。\n\n17. **v2ex plus**\n优雅便捷的 V2EX 扩展。\n\n18. **Web Timer**\n每个网站停留时间统计。\n\n19. **为知笔记网页剪辑器**\n配合为知笔记，快速保存网页内容到为知笔记。\n\n20. **二维码（生成及识别）**\n生成或识别二维码。\n\n21. **惠惠购物助手**\n在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n22. **新浪微博图床**\n微博是个好图床。\n\n23. **网页截图:注释&批注**\n捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。\n\n## 应用\n\n1. **Postman**\n功能强大的接口调试工具。\n\n2. **Google Keep - 记事和清单**\n不解释。\n\n3. **Pocket**\n不解释。\n\n4. **JSON Editor**\n图形化json编辑工具。","slug":"chrome扩展-插件-应用推荐","published":1,"updated":"2020-01-17T07:57:33.175Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yil000kssyhl2o1fqle","content":"<p><br><br>本文过期，请前行住<a href=\"/2019/10/12/awesome-software/\">自用软件推荐</a>查看最新内容<br><a id=\"more\"></a></p>\n<h2 id=\"插件-扩展\"><a href=\"#插件-扩展\" class=\"headerlink\" title=\"插件/扩展\"></a>插件/扩展</h2><ol>\n<li><p><strong>Adblock Plus</strong><br>广告拦截器，谁用谁知道。</p>\n</li>\n<li><p><strong>Checker Plus for Gmail™</strong><br>Gmail/Inbox插件，不用打开网页处理邮件。</p>\n</li>\n<li><p><strong>Wappalyzer</strong><br>探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。</p>\n</li>\n<li><p><strong>crxMouse Chrome Gestures</strong><br>鼠标手势。</p>\n</li>\n<li><p><strong>Ghostery</strong><br>了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>\n</li>\n<li><p><strong>Google Keep Chrome 扩展程序</strong><br>将网页快速的保存到Google Keep中。</p>\n</li>\n<li><p><strong>Google翻译</strong><br>支付在网页中划词翻译。</p>\n</li>\n<li><p><strong>划词翻译</strong><br>划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。</p>\n</li>\n<li><p><strong>LastPass</strong><br>免费的密码管理管理器。</p>\n</li>\n<li><p><strong>MindMap Tab</strong><br>在新标签页中快速编辑思维导图。</p>\n</li>\n<li><p><strong>Octotree</strong><br>在浏览器左侧树形展示Github代码。</p>\n</li>\n<li><p><strong>Prism Pretty</strong><br>美化代码（html、css、js、json……）</p>\n</li>\n<li><p><strong>Proxy SwitchyOmega</strong><br>你懂的。</p>\n</li>\n<li><p><strong>Pushbullet</strong><br>快速的往其它设备发送消息。</p>\n</li>\n<li><p><strong>Save to Pocket</strong><br>快速保存网页到Pocket。</p>\n</li>\n<li><p><strong>Search by Image (by Google)</strong><br>浏览器右键增加Google的以图搜图功能。</p>\n</li>\n<li><p><strong>v2ex plus</strong><br>优雅便捷的 V2EX 扩展。</p>\n</li>\n<li><p><strong>Web Timer</strong><br>每个网站停留时间统计。</p>\n</li>\n<li><p><strong>为知笔记网页剪辑器</strong><br>配合为知笔记，快速保存网页内容到为知笔记。</p>\n</li>\n<li><p><strong>二维码（生成及识别）</strong><br>生成或识别二维码。</p>\n</li>\n<li><p><strong>惠惠购物助手</strong><br>在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>\n</li>\n<li><p><strong>新浪微博图床</strong><br>微博是个好图床。</p>\n</li>\n<li><p><strong>网页截图:注释&amp;批注</strong><br>捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。</p>\n</li>\n</ol>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li><p><strong>Postman</strong><br>功能强大的接口调试工具。</p>\n</li>\n<li><p><strong>Google Keep - 记事和清单</strong><br>不解释。</p>\n</li>\n<li><p><strong>Pocket</strong><br>不解释。</p>\n</li>\n<li><p><strong>JSON Editor</strong><br>图形化json编辑工具。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><br><br>本文过期，请前行住<a href=\"/2019/10/12/awesome-software/\">自用软件推荐</a>查看最新内容<br>","more":"</p>\n<h2 id=\"插件-扩展\"><a href=\"#插件-扩展\" class=\"headerlink\" title=\"插件/扩展\"></a>插件/扩展</h2><ol>\n<li><p><strong>Adblock Plus</strong><br>广告拦截器，谁用谁知道。</p>\n</li>\n<li><p><strong>Checker Plus for Gmail™</strong><br>Gmail/Inbox插件，不用打开网页处理邮件。</p>\n</li>\n<li><p><strong>Wappalyzer</strong><br>探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。</p>\n</li>\n<li><p><strong>crxMouse Chrome Gestures</strong><br>鼠标手势。</p>\n</li>\n<li><p><strong>Ghostery</strong><br>了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>\n</li>\n<li><p><strong>Google Keep Chrome 扩展程序</strong><br>将网页快速的保存到Google Keep中。</p>\n</li>\n<li><p><strong>Google翻译</strong><br>支付在网页中划词翻译。</p>\n</li>\n<li><p><strong>划词翻译</strong><br>划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。</p>\n</li>\n<li><p><strong>LastPass</strong><br>免费的密码管理管理器。</p>\n</li>\n<li><p><strong>MindMap Tab</strong><br>在新标签页中快速编辑思维导图。</p>\n</li>\n<li><p><strong>Octotree</strong><br>在浏览器左侧树形展示Github代码。</p>\n</li>\n<li><p><strong>Prism Pretty</strong><br>美化代码（html、css、js、json……）</p>\n</li>\n<li><p><strong>Proxy SwitchyOmega</strong><br>你懂的。</p>\n</li>\n<li><p><strong>Pushbullet</strong><br>快速的往其它设备发送消息。</p>\n</li>\n<li><p><strong>Save to Pocket</strong><br>快速保存网页到Pocket。</p>\n</li>\n<li><p><strong>Search by Image (by Google)</strong><br>浏览器右键增加Google的以图搜图功能。</p>\n</li>\n<li><p><strong>v2ex plus</strong><br>优雅便捷的 V2EX 扩展。</p>\n</li>\n<li><p><strong>Web Timer</strong><br>每个网站停留时间统计。</p>\n</li>\n<li><p><strong>为知笔记网页剪辑器</strong><br>配合为知笔记，快速保存网页内容到为知笔记。</p>\n</li>\n<li><p><strong>二维码（生成及识别）</strong><br>生成或识别二维码。</p>\n</li>\n<li><p><strong>惠惠购物助手</strong><br>在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>\n</li>\n<li><p><strong>新浪微博图床</strong><br>微博是个好图床。</p>\n</li>\n<li><p><strong>网页截图:注释&amp;批注</strong><br>捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。</p>\n</li>\n</ol>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><ol>\n<li><p><strong>Postman</strong><br>功能强大的接口调试工具。</p>\n</li>\n<li><p><strong>Google Keep - 记事和清单</strong><br>不解释。</p>\n</li>\n<li><p><strong>Pocket</strong><br>不解释。</p>\n</li>\n<li><p><strong>JSON Editor</strong><br>图形化json编辑工具。</p>\n</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:33 GMT+0800 (China Standard Time)","title":"Chrome扩展/插件/应用推荐","path":"2016/06/01/chrome扩展-插件-应用推荐/","eyeCatchImage":null,"excerpt":"<p><br><br>本文过期，请前行住<a href=\"/2019/10/12/awesome-software/\">自用软件推荐</a>查看最新内容<br>","date":"2016-06-01T15:22:35.000Z","pv":0,"totalPV":0,"categories":"优化辅助","tags":["Chrome","工具","扩展","插件"],"internalLinks":["2019/10/12/awesome-software/"],"keywords":[],"keywordsLength":0},"length":828},{"title":"curl常用命令","comments":1,"date":"2015-12-17T13:29:29.000Z","_content":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n<!--more-->\n### 访问url并输出结果\n```\ncurl http://www.example.com\n```\n\n### 传递参数\n默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据\n可以通过 --data/-d 方式指定使用POST方式传递数据\n```\n# GET\ncurl -u username https://api.github.com/user?access_token=XXXXXXXXXX\n\n# POST\ncurl -u username -d \"param1=value1&param2=value\" https://api.github.com\n\n# 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端\ncurl -d @filename https://github.api.com/authorizations\n```\n注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：\n```\ncurl -d \"value%201\" http://hostname.com\n```\n在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。\n```\ncurl --data-urlencode \"value 1\" http://hostname.com\n```\n\n### 指定请求方式\n除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：\n```\ncurl -I -X DELETE https://api.github.com\n```\n\n### 设置请求头信息\n``` \ncurl -H 'Accept-Language: zh' http://cnn.com\n```\n`-H`或被多次指定\n``` \ncurl -H 'Host: 157.166.226.25'-H 'Accept-Language: zh'-H 'Cookie: ID=1234' http://cnn.com\n```\n对于\"User-Agent\", \"Cookie\", \"Host\"这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：\n-A (or --user-agent): 设置 \"User-Agent\" 字段.\n-b (or --cookie): 设置 \"Cookie\" 字段.\n-e (or --referer): 设置 \"Referer\" 字段. \n```\ncurl -H \"User-Agent: my browser\" http://cnn.com\ncurl -A \"my browser\" http://cnn.com\n```\n\n### 查看响应头信息\n```\ncurl -I http://www.baidu.com\n```\n\n\n\n### 提交表单\n```\ncurl --form \"fileupload=@filename.txt\" http://hostname/resource\n```\n\n### 访问url并奖结果保存到本地文件中\n`-o`: 将文件保存为命令行中指定的文件名到本地\n`-O`: 使用url中默认的文件名保存文件到本地\n```\ncurl -o index.html http://www.example.com\n# 或\ncurl  http://www.baidu.com > index.html\n# 在windows上没成功\ncurl -O http://www.example.com\n```\n\n### 忽略证书错误\n工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。\n```\ncurl -k https://www.example.com\n```\n\n### 获取重定向后的页面\n如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用`-L`可进行强制重定向\n```\ncurl -L http://www.example.com\n```\n\n### 发送压缩的请求\n \ncURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。\n \n自己写一个 Accept-Encoding 字段在头信息中。\n```\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/\n```\n\n如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。\n```\n# 使用gunzip解压\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/ | gunzip\n```\n\n使用gunzip解压之后，信息又被还原了。\n\n### 断点续传\n通过使用-C选项可对大文件使用断点续传功能\n```\n# 未下载完成即中断该进程\ncurl -o a.zip http://www.example.com/bigfile.zip\n\n# 后面可以通过-C来继续下载\ncurl -C -o a.html http://www.example.com/bigfile.zip\n```\n\n### 下载限速\n使用-limit-rate进行限速\n```\n# 限速为100k/s\ncurl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip\n```\n\n### 根据文件修改时间来判断是否进行下载\n```\n# 若文件的修改时间在2011/12/11之后，则下载\ncurl -z 21-Dec-11 http://www.example.com/bigfile.zip\n```\n\n### 授权\n在访问需要授权的页面时，可通过`-u`来提供用户名和密码进行授权\n```\ncurl -u username:password http://www.example.com\n```\n\n### ftp操作\n```\n# 列出指定目录下的所有文件\ncurl -u ftpuser:ftppw -O ftp://ftp_server/public_html/\n\n# 下载文件\ncurl -u ftpuser:ftppw -O\nftp://ftp_server/public_hmtl/bigfile.zip\n\n# 上传文件\ncurl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/\n\n# 上传多个文件\ncurl -u ftpuser:ftppw -T \"{myfile1.txt, myfile2.txt}\" ftp://ftp_server/public_html/\n\n# 从标准输入获取内容保存到服务器的指定文件中\ncurl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt\n```\n\n### 设置代理\n```\ncurl -x proxyserver.com:1080 http://www.example.com\n```\n\n### 保存与使用网站的cookie信息\n```\n# 将网站的cookies信息保存到example_cookies文件中\ncurl -D example_cookies http://www.example.com\n\n# 使用cookies信息访问url\ncurl -b example_cookies http://www.example.com/user/\n```\n\n\n","source":"_posts/curl常用命令.md","raw":"title: curl常用命令\ncomments: true\ndate: 2015-12-17 21:29:29\ncategories: [程序猿]\ntags: [curl, 教程]\n---\ncurl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n<!--more-->\n### 访问url并输出结果\n```\ncurl http://www.example.com\n```\n\n### 传递参数\n默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据\n可以通过 --data/-d 方式指定使用POST方式传递数据\n```\n# GET\ncurl -u username https://api.github.com/user?access_token=XXXXXXXXXX\n\n# POST\ncurl -u username -d \"param1=value1&param2=value\" https://api.github.com\n\n# 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端\ncurl -d @filename https://github.api.com/authorizations\n```\n注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：\n```\ncurl -d \"value%201\" http://hostname.com\n```\n在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。\n```\ncurl --data-urlencode \"value 1\" http://hostname.com\n```\n\n### 指定请求方式\n除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：\n```\ncurl -I -X DELETE https://api.github.com\n```\n\n### 设置请求头信息\n``` \ncurl -H 'Accept-Language: zh' http://cnn.com\n```\n`-H`或被多次指定\n``` \ncurl -H 'Host: 157.166.226.25'-H 'Accept-Language: zh'-H 'Cookie: ID=1234' http://cnn.com\n```\n对于\"User-Agent\", \"Cookie\", \"Host\"这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：\n-A (or --user-agent): 设置 \"User-Agent\" 字段.\n-b (or --cookie): 设置 \"Cookie\" 字段.\n-e (or --referer): 设置 \"Referer\" 字段. \n```\ncurl -H \"User-Agent: my browser\" http://cnn.com\ncurl -A \"my browser\" http://cnn.com\n```\n\n### 查看响应头信息\n```\ncurl -I http://www.baidu.com\n```\n\n\n\n### 提交表单\n```\ncurl --form \"fileupload=@filename.txt\" http://hostname/resource\n```\n\n### 访问url并奖结果保存到本地文件中\n`-o`: 将文件保存为命令行中指定的文件名到本地\n`-O`: 使用url中默认的文件名保存文件到本地\n```\ncurl -o index.html http://www.example.com\n# 或\ncurl  http://www.baidu.com > index.html\n# 在windows上没成功\ncurl -O http://www.example.com\n```\n\n### 忽略证书错误\n工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。\n```\ncurl -k https://www.example.com\n```\n\n### 获取重定向后的页面\n如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用`-L`可进行强制重定向\n```\ncurl -L http://www.example.com\n```\n\n### 发送压缩的请求\n \ncURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。\n \n自己写一个 Accept-Encoding 字段在头信息中。\n```\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/\n```\n\n如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。\n```\n# 使用gunzip解压\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/ | gunzip\n```\n\n使用gunzip解压之后，信息又被还原了。\n\n### 断点续传\n通过使用-C选项可对大文件使用断点续传功能\n```\n# 未下载完成即中断该进程\ncurl -o a.zip http://www.example.com/bigfile.zip\n\n# 后面可以通过-C来继续下载\ncurl -C -o a.html http://www.example.com/bigfile.zip\n```\n\n### 下载限速\n使用-limit-rate进行限速\n```\n# 限速为100k/s\ncurl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip\n```\n\n### 根据文件修改时间来判断是否进行下载\n```\n# 若文件的修改时间在2011/12/11之后，则下载\ncurl -z 21-Dec-11 http://www.example.com/bigfile.zip\n```\n\n### 授权\n在访问需要授权的页面时，可通过`-u`来提供用户名和密码进行授权\n```\ncurl -u username:password http://www.example.com\n```\n\n### ftp操作\n```\n# 列出指定目录下的所有文件\ncurl -u ftpuser:ftppw -O ftp://ftp_server/public_html/\n\n# 下载文件\ncurl -u ftpuser:ftppw -O\nftp://ftp_server/public_hmtl/bigfile.zip\n\n# 上传文件\ncurl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/\n\n# 上传多个文件\ncurl -u ftpuser:ftppw -T \"{myfile1.txt, myfile2.txt}\" ftp://ftp_server/public_html/\n\n# 从标准输入获取内容保存到服务器的指定文件中\ncurl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt\n```\n\n### 设置代理\n```\ncurl -x proxyserver.com:1080 http://www.example.com\n```\n\n### 保存与使用网站的cookie信息\n```\n# 将网站的cookies信息保存到example_cookies文件中\ncurl -D example_cookies http://www.example.com\n\n# 使用cookies信息访问url\ncurl -b example_cookies http://www.example.com/user/\n```\n\n\n","slug":"curl常用命令","published":1,"updated":"2020-01-17T07:57:28.928Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yin000lssyhp9xiigiy","content":"<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br><a id=\"more\"></a></p>\n<h3 id=\"访问url并输出结果\"><a href=\"#访问url并输出结果\" class=\"headerlink\" title=\"访问url并输出结果\"></a>访问url并输出结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GET</span><br><span class=\"line\">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\"># POST</span><br><span class=\"line\">curl -u username -d &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span><br><span class=\"line\">curl -d @filename https://github.api.com/authorizations</span><br></pre></td></tr></table></figure></p>\n<p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -d &quot;value%201&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --data-urlencode &quot;value 1&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定请求方式\"><a href=\"#指定请求方式\" class=\"headerlink\" title=\"指定请求方式\"></a>指定请求方式</h3><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I -X DELETE https://api.github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头信息\"><a href=\"#设置请求头信息\" class=\"headerlink\" title=\"设置请求头信息\"></a>设置请求头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Accept-Language: zh&apos; http://cnn.com</span><br></pre></td></tr></table></figure>\n<p><code>-H</code>或被多次指定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Host: 157.166.226.25&apos;-H &apos;Accept-Language: zh&apos;-H &apos;Cookie: ID=1234&apos; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<p>对于”User-Agent”, “Cookie”, “Host”这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：<br>-A (or –user-agent): 设置 “User-Agent” 字段.<br>-b (or –cookie): 设置 “Cookie” 字段.<br>-e (or –referer): 设置 “Referer” 字段.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;User-Agent: my browser&quot; http://cnn.com</span><br><span class=\"line\">curl -A &quot;my browser&quot; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看响应头信息\"><a href=\"#查看响应头信息\" class=\"headerlink\" title=\"查看响应头信息\"></a>查看响应头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问url并奖结果保存到本地文件中\"><a href=\"#访问url并奖结果保存到本地文件中\" class=\"headerlink\" title=\"访问url并奖结果保存到本地文件中\"></a>访问url并奖结果保存到本地文件中</h3><p><code>-o</code>: 将文件保存为命令行中指定的文件名到本地<br><code>-O</code>: 使用url中默认的文件名保存文件到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o index.html http://www.example.com</span><br><span class=\"line\"># 或</span><br><span class=\"line\">curl  http://www.baidu.com &gt; index.html</span><br><span class=\"line\"># 在windows上没成功</span><br><span class=\"line\">curl -O http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"忽略证书错误\"><a href=\"#忽略证书错误\" class=\"headerlink\" title=\"忽略证书错误\"></a>忽略证书错误</h3><p>工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获取重定向后的页面\"><a href=\"#获取重定向后的页面\" class=\"headerlink\" title=\"获取重定向后的页面\"></a>获取重定向后的页面</h3><p>如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用<code>-L</code>可进行强制重定向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发送压缩的请求\"><a href=\"#发送压缩的请求\" class=\"headerlink\" title=\"发送压缩的请求\"></a>发送压缩的请求</h3><p>cURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。</p>\n<p>自己写一个 Accept-Encoding 字段在头信息中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/</span><br></pre></td></tr></table></figure></p>\n<p>如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gunzip解压</span><br><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/ | gunzip</span><br></pre></td></tr></table></figure></p>\n<p>使用gunzip解压之后，信息又被还原了。</p>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 未下载完成即中断该进程</span><br><span class=\"line\">curl -o a.zip http://www.example.com/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 后面可以通过-C来继续下载</span><br><span class=\"line\">curl -C -o a.html http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载限速\"><a href=\"#下载限速\" class=\"headerlink\" title=\"下载限速\"></a>下载限速</h3><p>使用-limit-rate进行限速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 限速为100k/s</span><br><span class=\"line\">curl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"根据文件修改时间来判断是否进行下载\"><a href=\"#根据文件修改时间来判断是否进行下载\" class=\"headerlink\" title=\"根据文件修改时间来判断是否进行下载\"></a>根据文件修改时间来判断是否进行下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 若文件的修改时间在2011/12/11之后，则下载</span><br><span class=\"line\">curl -z 21-Dec-11 http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>在访问需要授权的页面时，可通过<code>-u</code>来提供用户名和密码进行授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u username:password http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ftp操作\"><a href=\"#ftp操作\" class=\"headerlink\" title=\"ftp操作\"></a>ftp操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定目录下的所有文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O</span><br><span class=\"line\">ftp://ftp_server/public_hmtl/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传多个文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T &quot;&#123;myfile1.txt, myfile2.txt&#125;&quot; ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 从标准输入获取内容保存到服务器的指定文件中</span><br><span class=\"line\">curl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x proxyserver.com:1080 http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存与使用网站的cookie信息\"><a href=\"#保存与使用网站的cookie信息\" class=\"headerlink\" title=\"保存与使用网站的cookie信息\"></a>保存与使用网站的cookie信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将网站的cookies信息保存到example_cookies文件中</span><br><span class=\"line\">curl -D example_cookies http://www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用cookies信息访问url</span><br><span class=\"line\">curl -b example_cookies http://www.example.com/user/</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br>","more":"</p>\n<h3 id=\"访问url并输出结果\"><a href=\"#访问url并输出结果\" class=\"headerlink\" title=\"访问url并输出结果\"></a>访问url并输出结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GET</span><br><span class=\"line\">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\"># POST</span><br><span class=\"line\">curl -u username -d &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span><br><span class=\"line\">curl -d @filename https://github.api.com/authorizations</span><br></pre></td></tr></table></figure></p>\n<p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -d &quot;value%201&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --data-urlencode &quot;value 1&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定请求方式\"><a href=\"#指定请求方式\" class=\"headerlink\" title=\"指定请求方式\"></a>指定请求方式</h3><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I -X DELETE https://api.github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头信息\"><a href=\"#设置请求头信息\" class=\"headerlink\" title=\"设置请求头信息\"></a>设置请求头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Accept-Language: zh&apos; http://cnn.com</span><br></pre></td></tr></table></figure>\n<p><code>-H</code>或被多次指定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Host: 157.166.226.25&apos;-H &apos;Accept-Language: zh&apos;-H &apos;Cookie: ID=1234&apos; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<p>对于”User-Agent”, “Cookie”, “Host”这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：<br>-A (or –user-agent): 设置 “User-Agent” 字段.<br>-b (or –cookie): 设置 “Cookie” 字段.<br>-e (or –referer): 设置 “Referer” 字段.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;User-Agent: my browser&quot; http://cnn.com</span><br><span class=\"line\">curl -A &quot;my browser&quot; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看响应头信息\"><a href=\"#查看响应头信息\" class=\"headerlink\" title=\"查看响应头信息\"></a>查看响应头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问url并奖结果保存到本地文件中\"><a href=\"#访问url并奖结果保存到本地文件中\" class=\"headerlink\" title=\"访问url并奖结果保存到本地文件中\"></a>访问url并奖结果保存到本地文件中</h3><p><code>-o</code>: 将文件保存为命令行中指定的文件名到本地<br><code>-O</code>: 使用url中默认的文件名保存文件到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o index.html http://www.example.com</span><br><span class=\"line\"># 或</span><br><span class=\"line\">curl  http://www.baidu.com &gt; index.html</span><br><span class=\"line\"># 在windows上没成功</span><br><span class=\"line\">curl -O http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"忽略证书错误\"><a href=\"#忽略证书错误\" class=\"headerlink\" title=\"忽略证书错误\"></a>忽略证书错误</h3><p>工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获取重定向后的页面\"><a href=\"#获取重定向后的页面\" class=\"headerlink\" title=\"获取重定向后的页面\"></a>获取重定向后的页面</h3><p>如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用<code>-L</code>可进行强制重定向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发送压缩的请求\"><a href=\"#发送压缩的请求\" class=\"headerlink\" title=\"发送压缩的请求\"></a>发送压缩的请求</h3><p>cURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。</p>\n<p>自己写一个 Accept-Encoding 字段在头信息中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/</span><br></pre></td></tr></table></figure></p>\n<p>如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gunzip解压</span><br><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/ | gunzip</span><br></pre></td></tr></table></figure></p>\n<p>使用gunzip解压之后，信息又被还原了。</p>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 未下载完成即中断该进程</span><br><span class=\"line\">curl -o a.zip http://www.example.com/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 后面可以通过-C来继续下载</span><br><span class=\"line\">curl -C -o a.html http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载限速\"><a href=\"#下载限速\" class=\"headerlink\" title=\"下载限速\"></a>下载限速</h3><p>使用-limit-rate进行限速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 限速为100k/s</span><br><span class=\"line\">curl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"根据文件修改时间来判断是否进行下载\"><a href=\"#根据文件修改时间来判断是否进行下载\" class=\"headerlink\" title=\"根据文件修改时间来判断是否进行下载\"></a>根据文件修改时间来判断是否进行下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 若文件的修改时间在2011/12/11之后，则下载</span><br><span class=\"line\">curl -z 21-Dec-11 http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>在访问需要授权的页面时，可通过<code>-u</code>来提供用户名和密码进行授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u username:password http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ftp操作\"><a href=\"#ftp操作\" class=\"headerlink\" title=\"ftp操作\"></a>ftp操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定目录下的所有文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O</span><br><span class=\"line\">ftp://ftp_server/public_hmtl/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传多个文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T &quot;&#123;myfile1.txt, myfile2.txt&#125;&quot; ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 从标准输入获取内容保存到服务器的指定文件中</span><br><span class=\"line\">curl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x proxyserver.com:1080 http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存与使用网站的cookie信息\"><a href=\"#保存与使用网站的cookie信息\" class=\"headerlink\" title=\"保存与使用网站的cookie信息\"></a>保存与使用网站的cookie信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将网站的cookies信息保存到example_cookies文件中</span><br><span class=\"line\">curl -D example_cookies http://www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用cookies信息访问url</span><br><span class=\"line\">curl -b example_cookies http://www.example.com/user/</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:28 GMT+0800 (China Standard Time)","title":"curl常用命令","path":"2015/12/17/curl常用命令/","eyeCatchImage":null,"excerpt":"<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br>","date":"2015-12-17T13:29:29.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["curl","教程"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3203},{"title":"Django REST framework之版本号version","comments":1,"date":"2016-01-28T15:29:58.000Z","_content":"<br />\n<!--more-->\ndrf支持以下形式传输版本号\n- header\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json; version=1.0\n  ```\n- URL Path \n  ```\n  GET /v1/bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(\n          r'^(?P<version>(v1|v2))/bookings/$',\n          bookings_list,\n          name='bookings-list'\n      ),\n  ]\n  ```\n- Namespace\n  ```\n  GET /v1/something/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n      url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n  ]\n  ```\n- Host Name\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: v1.example.com\n  Accept: application/json\n  ```\n- Query Parameter\n  ```\n  GET /something/?version=0.1 HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n\ndrf默认是关闭版本控制功能，如需要开启，可在`settings.py`里添加对应的设置\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',\n    ……\n}\n```\n当然，你也可以为每个视图单独添加，不过不建议这么做\n```python\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n```\n开启版本控制之后，就可以从`request`取得版本号`request.version`（当然你`settings.py`里配置的是什么方式，就用什么方式传版本号，这样就才可以从`request`里获取到版本号）\n```python\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n```\n\n启动版本控制后，url逆向解析方法需要传入`request`参数\n```python\nfrom rest_framework.reverse import reverse\n \nreverse('bookings-list', request=request)\n```\n\n如果是使用Namespace时的版本控制，因为配置了`DEFAULT_VERSIONING_CLASS`，所以设置view_name时不需要添加`v1:`前缀，见django rest framework入门笔记.md\n\n最后在设置里添加以下全局设置来控制能访问的版本\n```python\n'DEFAULT_VERSION': None, #默认版本，request里没有版本信息时，使用的版本，默认为None\n'ALLOWED_VERSIONS': [None, 'v1', 'v2'], #允许访问的版本，如果访问的版本不在列表中，则会抛出异常\n```\n也可以为每个视图单独设置\n```python\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n \nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n \nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n```\n","source":"_posts/django-rest-framework之版本号version.md","raw":"title: Django REST framework之版本号version\ncomments: true\ndate: 2016-01-28 23:29:58\ncategories: [程序猿]\ntags: [Django, restful, api, version]\n---\n<br />\n<!--more-->\ndrf支持以下形式传输版本号\n- header\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json; version=1.0\n  ```\n- URL Path \n  ```\n  GET /v1/bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(\n          r'^(?P<version>(v1|v2))/bookings/$',\n          bookings_list,\n          name='bookings-list'\n      ),\n  ]\n  ```\n- Namespace\n  ```\n  GET /v1/something/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n      url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n  ]\n  ```\n- Host Name\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: v1.example.com\n  Accept: application/json\n  ```\n- Query Parameter\n  ```\n  GET /something/?version=0.1 HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n\ndrf默认是关闭版本控制功能，如需要开启，可在`settings.py`里添加对应的设置\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',\n    ……\n}\n```\n当然，你也可以为每个视图单独添加，不过不建议这么做\n```python\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n```\n开启版本控制之后，就可以从`request`取得版本号`request.version`（当然你`settings.py`里配置的是什么方式，就用什么方式传版本号，这样就才可以从`request`里获取到版本号）\n```python\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n```\n\n启动版本控制后，url逆向解析方法需要传入`request`参数\n```python\nfrom rest_framework.reverse import reverse\n \nreverse('bookings-list', request=request)\n```\n\n如果是使用Namespace时的版本控制，因为配置了`DEFAULT_VERSIONING_CLASS`，所以设置view_name时不需要添加`v1:`前缀，见django rest framework入门笔记.md\n\n最后在设置里添加以下全局设置来控制能访问的版本\n```python\n'DEFAULT_VERSION': None, #默认版本，request里没有版本信息时，使用的版本，默认为None\n'ALLOWED_VERSIONS': [None, 'v1', 'v2'], #允许访问的版本，如果访问的版本不在列表中，则会抛出异常\n```\n也可以为每个视图单独设置\n```python\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n \nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n \nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n```\n","slug":"django-rest-framework之版本号version","published":1,"updated":"2020-01-17T07:57:03.785Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yix000mssyhmon5uklo","content":"<p><br><br><a id=\"more\"></a><br>drf支持以下形式传输版本号</p>\n<ul>\n<li><p>header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json; version=1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>URL Path </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(</span><br><span class=\"line\">        r&apos;^(?P&lt;version&gt;(v1|v2))/bookings/$&apos;,</span><br><span class=\"line\">        bookings_list,</span><br><span class=\"line\">        name=&apos;bookings-list&apos;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Namespace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/something/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^v1/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v1&apos;)),</span><br><span class=\"line\">    url(r&apos;^v2/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v2&apos;))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Host Name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: v1.example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query Parameter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /something/?version=0.1 HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>drf默认是关闭版本控制功能，如需要开启，可在<code>settings.py</code>里添加对应的设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.AcceptHeaderVersioning'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，你也可以为每个视图单独添加，不过不建议这么做<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileList</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    versioning_class = versioning.QueryParameterVersioning</span><br></pre></td></tr></table></figure></p>\n<p>开启版本控制之后，就可以从<code>request</code>取得版本号<code>request.version</code>（当然你<code>settings.py</code>里配置的是什么方式，就用什么方式传版本号，这样就才可以从<code>request</code>里获取到版本号）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_serializer_class</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.request.version == <span class=\"string\">'v1'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AccountSerializerVersion1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AccountSerializer</span><br></pre></td></tr></table></figure></p>\n<p>启动版本控制后，url逆向解析方法需要传入<code>request</code>参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.reverse <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"> </span><br><span class=\"line\">reverse(<span class=\"string\">'bookings-list'</span>, request=request)</span><br></pre></td></tr></table></figure></p>\n<p>如果是使用Namespace时的版本控制，因为配置了<code>DEFAULT_VERSIONING_CLASS</code>，所以设置view_name时不需要添加<code>v1:</code>前缀，见django rest framework入门笔记.md</p>\n<p>最后在设置里添加以下全局设置来控制能访问的版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'DEFAULT_VERSION'</span>: <span class=\"keyword\">None</span>, <span class=\"comment\">#默认版本，request里没有版本信息时，使用的版本，默认为None</span></span><br><span class=\"line\"><span class=\"string\">'ALLOWED_VERSIONS'</span>: [<span class=\"keyword\">None</span>, <span class=\"string\">'v1'</span>, <span class=\"string\">'v2'</span>], <span class=\"comment\">#允许访问的版本，如果访问的版本不在列表中，则会抛出异常</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以为每个视图单独设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.versioning <span class=\"keyword\">import</span> URLPathVersioning</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleVersioning</span><span class=\"params\">(URLPathVersioning)</span>:</span></span><br><span class=\"line\">    default_version = ...</span><br><span class=\"line\">    allowed_versions = ...</span><br><span class=\"line\">    version_param = ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIVIew)</span>:</span></span><br><span class=\"line\">    versioning_class = ExampleVersioning</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"<br>drf支持以下形式传输版本号</p>\n<ul>\n<li><p>header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json; version=1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>URL Path </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(</span><br><span class=\"line\">        r&apos;^(?P&lt;version&gt;(v1|v2))/bookings/$&apos;,</span><br><span class=\"line\">        bookings_list,</span><br><span class=\"line\">        name=&apos;bookings-list&apos;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Namespace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/something/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^v1/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v1&apos;)),</span><br><span class=\"line\">    url(r&apos;^v2/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v2&apos;))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Host Name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: v1.example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query Parameter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /something/?version=0.1 HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>drf默认是关闭版本控制功能，如需要开启，可在<code>settings.py</code>里添加对应的设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.AcceptHeaderVersioning'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，你也可以为每个视图单独添加，不过不建议这么做<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileList</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    versioning_class = versioning.QueryParameterVersioning</span><br></pre></td></tr></table></figure></p>\n<p>开启版本控制之后，就可以从<code>request</code>取得版本号<code>request.version</code>（当然你<code>settings.py</code>里配置的是什么方式，就用什么方式传版本号，这样就才可以从<code>request</code>里获取到版本号）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_serializer_class</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.request.version == <span class=\"string\">'v1'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AccountSerializerVersion1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AccountSerializer</span><br></pre></td></tr></table></figure></p>\n<p>启动版本控制后，url逆向解析方法需要传入<code>request</code>参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.reverse <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"> </span><br><span class=\"line\">reverse(<span class=\"string\">'bookings-list'</span>, request=request)</span><br></pre></td></tr></table></figure></p>\n<p>如果是使用Namespace时的版本控制，因为配置了<code>DEFAULT_VERSIONING_CLASS</code>，所以设置view_name时不需要添加<code>v1:</code>前缀，见django rest framework入门笔记.md</p>\n<p>最后在设置里添加以下全局设置来控制能访问的版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'DEFAULT_VERSION'</span>: <span class=\"keyword\">None</span>, <span class=\"comment\">#默认版本，request里没有版本信息时，使用的版本，默认为None</span></span><br><span class=\"line\"><span class=\"string\">'ALLOWED_VERSIONS'</span>: [<span class=\"keyword\">None</span>, <span class=\"string\">'v1'</span>, <span class=\"string\">'v2'</span>], <span class=\"comment\">#允许访问的版本，如果访问的版本不在列表中，则会抛出异常</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以为每个视图单独设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.versioning <span class=\"keyword\">import</span> URLPathVersioning</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleVersioning</span><span class=\"params\">(URLPathVersioning)</span>:</span></span><br><span class=\"line\">    default_version = ...</span><br><span class=\"line\">    allowed_versions = ...</span><br><span class=\"line\">    version_param = ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIVIew)</span>:</span></span><br><span class=\"line\">    versioning_class = ExampleVersioning</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:03 GMT+0800 (China Standard Time)","title":"Django REST framework之版本号version","path":"2016/01/28/django-rest-framework之版本号version/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-01-28T15:29:58.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","restful","api","version"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2338},{"title":"Django Rest framework使用问题及解决方法","comments":1,"date":"2016-12-17T06:58:04.000Z","sticky":null,"_content":"<br />\n<!--more-->\n\n## 更新记录\n2016-01-29 初稿\n\n## 问题1\n`ViewSet`没有写`serializer_class`属性，而是重写了`get_serializer_class()`方法，出现\n```\nCannot use OrderingFilter on a view which does not have either a 'serializer_class' or 'ordering_fields' attribute.\n```\n原因：因为启用了`rest_framework.filters.OrderingFilter`而没有设置`ordering_fields`\n解决方法：`ViewSet`里加`ordering_fields`属性，可是禁用`rest_framework.filters.OrderingFilter`\n\n## 问题2\n`ViewSet`没有写`queryset`属性，而是重写了`get_queryset()`方法，出现\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n解决方法：需要在`urls.py`里给`ViewSet`注册`Router`时添加`base_name`（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nurls.py\n```\nrouter.register(r'users', UserViewSet, base_name='user')\n```\n\n## 问题3\n给url设置了`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n访问部分接口出现\n```\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n解决方法1：给所有的`serializer`里包含的外键字段手动设置`view_name`值（注意，继承`HyperlinkedModelSerializer `，会隐式添加一个`HyperlinkedRelatedField`字段`url`，而所有的外键都会变成`HyperlinkedRelatedField`字段，所以需要对两种类型字段手动设置`view_name`值）\nserializers.py\n```python\nclass ContactSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Contact\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:contact-detail'},\n            'user':{'view_name':'api:user-detail'}\n        }  \n```\n解决方法2：启动drf基于`NameSpace`的版本控制\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```","source":"_posts/django-rest-framework使用问题及解决方法.md","raw":"title: Django Rest framework使用问题及解决方法\ncomments: true\ndate: 2016-12-17 14:58:04\ncategories:\ntags: [Django, restful, api, 问题]\nsticky:\n---\n<br />\n<!--more-->\n\n## 更新记录\n2016-01-29 初稿\n\n## 问题1\n`ViewSet`没有写`serializer_class`属性，而是重写了`get_serializer_class()`方法，出现\n```\nCannot use OrderingFilter on a view which does not have either a 'serializer_class' or 'ordering_fields' attribute.\n```\n原因：因为启用了`rest_framework.filters.OrderingFilter`而没有设置`ordering_fields`\n解决方法：`ViewSet`里加`ordering_fields`属性，可是禁用`rest_framework.filters.OrderingFilter`\n\n## 问题2\n`ViewSet`没有写`queryset`属性，而是重写了`get_queryset()`方法，出现\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n解决方法：需要在`urls.py`里给`ViewSet`注册`Router`时添加`base_name`（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nurls.py\n```\nrouter.register(r'users', UserViewSet, base_name='user')\n```\n\n## 问题3\n给url设置了`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n访问部分接口出现\n```\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n解决方法1：给所有的`serializer`里包含的外键字段手动设置`view_name`值（注意，继承`HyperlinkedModelSerializer `，会隐式添加一个`HyperlinkedRelatedField`字段`url`，而所有的外键都会变成`HyperlinkedRelatedField`字段，所以需要对两种类型字段手动设置`view_name`值）\nserializers.py\n```python\nclass ContactSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Contact\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:contact-detail'},\n            'user':{'view_name':'api:user-detail'}\n        }  \n```\n解决方法2：启动drf基于`NameSpace`的版本控制\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```","slug":"django-rest-framework使用问题及解决方法","published":1,"updated":"2020-01-17T07:57:08.102Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yiz000nssyhqf0kefdw","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-29 初稿</p>\n<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）<br>urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>访问部分接口出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Contact</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:contact-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:&#123;<span class=\"string\">'view_name'</span>:<span class=\"string\">'api:user-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-29 初稿</p>\n<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）<br>urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>访问部分接口出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Contact</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:contact-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:&#123;<span class=\"string\">'view_name'</span>:<span class=\"string\">'api:user-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:08 GMT+0800 (China Standard Time)","title":"Django Rest framework使用问题及解决方法","path":"2016/12/17/django-rest-framework使用问题及解决方法/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-12-17T06:58:04.000Z","pv":0,"totalPV":0,"categories":"","tags":["Django","restful","api","问题"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1806},{"title":"Django REST framework单元测试「Unit Testing」","comments":1,"date":"2017-09-05T15:23:41.000Z","_content":"<br />\n<!--more-->\n## `settings`\n`Django`运行单元测试时，会以`settings`里的数据库配置里的`NAME`新建一个以`test_`开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的`migrations`文件来创建数据表并进行迁移，但如果`migrations`文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前`Model`结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用`SQLite`数据库引擎，当使用`SQLite`数据库引擎时，测试将默认使用内存数据库。\n```python\nTESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'\nif TESTING:\n    # 当使用SQLite数据库引擎时，测试将默认使用内存数据库\n    DATABASES['default'] = {\n        'ENGINE': 'django.db.backends.sqlite3',\n    }\n    # 单元测试时, 跳过migrate, 极 的提升测试运 效率\n    # 具体可以查看\n    # https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html\n    # https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database\n\n    class DisableMigrations(object):\n        def __contains__(self, item):\n            return True\n    \n        def __getitem__(self, item):\n            return \"notmigrations\"\n    \n    \n    MIGRATION_MODULES = DisableMigrations()\n```\n\n## 示例代码\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nfrom apps.account.models import User\nfrom apps.account.tests.test_utils import TestCaseUtils\n\n__author__ = 'jeff'\n\n\nclass UserAPITests(APITestCase, TestCaseUtils):\n    # 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成\n    # xml/yaml/json格式的数据\n    # 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找\n    # 此测试类运行结束后，会自动从数据库里销毁这份数据\n    # fixtures = ['user.json']\n\n    def setUp(self):\n        # 在类里每个测试方法执行前会运行\n        # 在此方法执行前，django会运行以下操作\n        # 1. 重置数据库，数据库恢复到执行migrate后的状态\n        # 2. 加载fixtures数据\n        # 所以每个测试方法里对数据库的操作都是独立的，不会相互影响\n        kwargs = dict(mobile_phone='15999999999', password='111111')\n        self.user = User.app_user_objects.create(**kwargs)\n\n    def tearDown(self):\n        # 在类里每个方法结束执行后会运行\n        pass\n\n    @classmethod\n    def setUpClass(cls):\n        # 在类初始化时执行，必须调用super\n        super(UserAPITests, cls).setUpClass()\n        cls.token = ''\n\n    @classmethod\n    def tearDownClass(cls):\n        # 在整个测试类运行结束时执行，必须调用super\n        super(UserAPITests, cls).tearDownClass()\n\n    def test_app_user_login_success(self):\n        \"\"\"APP用户登录接口成功情况\"\"\"\n        # path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '111111'}\n        response = self.client.post(path, data)\n        # response.data是字典对象\n        # response.content是json字符串对象\n        self.assertEquals(response.status_code,\n                          status.HTTP_200_OK,\n                          '登录接口返回状态码错误: 错误信息: {}'.format(response.content))\n        self.assertIn('token', response.data, '登录成功后无token返回')\n\n    def test_app_user_login_with_error_pwd(self):\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '123456'}\n        response = self.client.post(path, data)\n        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertJSONEqual('{\"errors\":[\"用户名或密码错误。\"]}', response.content)\n\n    def test_get_app_user_profile_success(self):\n        \"\"\"成功获取app用户个人信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        headers = self.get_headers(user=self.user)\n        response = self.client.get(path, **headers)\n        # 校验一些关键数据即可\n        # 如果是创建新数据，不仅要校验返回的状态码和数据，\n        # 还需要到使用Django ORM去数据库查询数据是否创建成功\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(6, len(response.data))\n        self.assertIn('url', response.data)\n        self.assertIn('mobile_phone', response.data)\n        self.assertIn('avatar', response.data)\n        self.assertIn('company_name', response.data)\n        self.assertIn('username', response.data)\n        self.assertIn('is_inviter', response.data)\n\n    def test_get_app_user_profile_without_token(self):\n        \"\"\"不传token请求获取用户信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        response = self.client.get(path)\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n```\n\n## 断言\n```python\n# 来自unittest.case.TestCase\nassertFalse(expr, msg=None)\nassertTrue(expr, msg=None)\nassertEqual(first, second, msg=None)\nassertNotEqual(first, second, msg=None)\nassertAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertNotAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertSequenceEqual(seq1, seq2, msg=None, seq_type=None)\nassertListEqual(list1, list2, msg=None)\nassertTupleEqual(tuple1, tuple2, msg=None)\nassertSetEqual(set1, set2, msg=None)\nassertIn(member, container, msg=None)\nassertNotIn(member, container, msg=None)\nassertIs(expr1, expr2, msg=None)\nassertIsNot(expr1, expr2, msg=None)\nassertDictEqual(d1, d2, msg=None)\nassertDictContainsSubset(expected, actual, msg=None)\nassertItemsEqual(expected_seq, actual_seq, msg=None)\nassertMultiLineEqual(first, second, msg=None)\nassertLess(a, b, msg=None)\nassertLessEqual(a, b, msg=None)\nassertGreater(a, b, msg=None)\nassertGreaterEqual(a, b, msg=None)\nassertIsNone(obj, msg=None)\nassertIsInstance(obj, cls, msg=None)\nassertNotIsInstance(obj, cls, msg=None)\nassertRaisesRegexp(expected_exception, expected_regexp,\n                           callable_obj=None, *args, **kwargs)\nassertRegexpMatches(text, expected_regexp, msg=None)\nassertNotRegexpMatches(text, unexpected_regexp, msg=None)\n```\n\n\n## 测试接口地址\n测试接口地址建议使用硬编码，不要使用`reverse`反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。\n\n## 测试数据准备\n有如下两种方法准备测试数据\n1. 简单的数据可以在`setUp()`里来创建；\n2. 复杂数据可以使用fixtures来写，并在赋值给测试类的`fixtures`属性；\nfixtures数据示例\n```json\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n## 测试覆盖率（coverage）\n在`Pycharm`里可以通用右键项目，选择`Run 'Test:' with Coverage`来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。\n\n\n","source":"_posts/django-rest-framework接口单元测试.md","raw":"---\ntitle: Django REST framework单元测试「Unit Testing」\ncomments: true\ntags: [restful api, 接口, 单元测试, 测试, Django]\ncategories: [程序猿]\ndate: 2017-09-05 23:23:41\n---\n<br />\n<!--more-->\n## `settings`\n`Django`运行单元测试时，会以`settings`里的数据库配置里的`NAME`新建一个以`test_`开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的`migrations`文件来创建数据表并进行迁移，但如果`migrations`文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前`Model`结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用`SQLite`数据库引擎，当使用`SQLite`数据库引擎时，测试将默认使用内存数据库。\n```python\nTESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'\nif TESTING:\n    # 当使用SQLite数据库引擎时，测试将默认使用内存数据库\n    DATABASES['default'] = {\n        'ENGINE': 'django.db.backends.sqlite3',\n    }\n    # 单元测试时, 跳过migrate, 极 的提升测试运 效率\n    # 具体可以查看\n    # https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html\n    # https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database\n\n    class DisableMigrations(object):\n        def __contains__(self, item):\n            return True\n    \n        def __getitem__(self, item):\n            return \"notmigrations\"\n    \n    \n    MIGRATION_MODULES = DisableMigrations()\n```\n\n## 示例代码\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nfrom apps.account.models import User\nfrom apps.account.tests.test_utils import TestCaseUtils\n\n__author__ = 'jeff'\n\n\nclass UserAPITests(APITestCase, TestCaseUtils):\n    # 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成\n    # xml/yaml/json格式的数据\n    # 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找\n    # 此测试类运行结束后，会自动从数据库里销毁这份数据\n    # fixtures = ['user.json']\n\n    def setUp(self):\n        # 在类里每个测试方法执行前会运行\n        # 在此方法执行前，django会运行以下操作\n        # 1. 重置数据库，数据库恢复到执行migrate后的状态\n        # 2. 加载fixtures数据\n        # 所以每个测试方法里对数据库的操作都是独立的，不会相互影响\n        kwargs = dict(mobile_phone='15999999999', password='111111')\n        self.user = User.app_user_objects.create(**kwargs)\n\n    def tearDown(self):\n        # 在类里每个方法结束执行后会运行\n        pass\n\n    @classmethod\n    def setUpClass(cls):\n        # 在类初始化时执行，必须调用super\n        super(UserAPITests, cls).setUpClass()\n        cls.token = ''\n\n    @classmethod\n    def tearDownClass(cls):\n        # 在整个测试类运行结束时执行，必须调用super\n        super(UserAPITests, cls).tearDownClass()\n\n    def test_app_user_login_success(self):\n        \"\"\"APP用户登录接口成功情况\"\"\"\n        # path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '111111'}\n        response = self.client.post(path, data)\n        # response.data是字典对象\n        # response.content是json字符串对象\n        self.assertEquals(response.status_code,\n                          status.HTTP_200_OK,\n                          '登录接口返回状态码错误: 错误信息: {}'.format(response.content))\n        self.assertIn('token', response.data, '登录成功后无token返回')\n\n    def test_app_user_login_with_error_pwd(self):\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '123456'}\n        response = self.client.post(path, data)\n        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertJSONEqual('{\"errors\":[\"用户名或密码错误。\"]}', response.content)\n\n    def test_get_app_user_profile_success(self):\n        \"\"\"成功获取app用户个人信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        headers = self.get_headers(user=self.user)\n        response = self.client.get(path, **headers)\n        # 校验一些关键数据即可\n        # 如果是创建新数据，不仅要校验返回的状态码和数据，\n        # 还需要到使用Django ORM去数据库查询数据是否创建成功\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(6, len(response.data))\n        self.assertIn('url', response.data)\n        self.assertIn('mobile_phone', response.data)\n        self.assertIn('avatar', response.data)\n        self.assertIn('company_name', response.data)\n        self.assertIn('username', response.data)\n        self.assertIn('is_inviter', response.data)\n\n    def test_get_app_user_profile_without_token(self):\n        \"\"\"不传token请求获取用户信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        response = self.client.get(path)\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n```\n\n## 断言\n```python\n# 来自unittest.case.TestCase\nassertFalse(expr, msg=None)\nassertTrue(expr, msg=None)\nassertEqual(first, second, msg=None)\nassertNotEqual(first, second, msg=None)\nassertAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertNotAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertSequenceEqual(seq1, seq2, msg=None, seq_type=None)\nassertListEqual(list1, list2, msg=None)\nassertTupleEqual(tuple1, tuple2, msg=None)\nassertSetEqual(set1, set2, msg=None)\nassertIn(member, container, msg=None)\nassertNotIn(member, container, msg=None)\nassertIs(expr1, expr2, msg=None)\nassertIsNot(expr1, expr2, msg=None)\nassertDictEqual(d1, d2, msg=None)\nassertDictContainsSubset(expected, actual, msg=None)\nassertItemsEqual(expected_seq, actual_seq, msg=None)\nassertMultiLineEqual(first, second, msg=None)\nassertLess(a, b, msg=None)\nassertLessEqual(a, b, msg=None)\nassertGreater(a, b, msg=None)\nassertGreaterEqual(a, b, msg=None)\nassertIsNone(obj, msg=None)\nassertIsInstance(obj, cls, msg=None)\nassertNotIsInstance(obj, cls, msg=None)\nassertRaisesRegexp(expected_exception, expected_regexp,\n                           callable_obj=None, *args, **kwargs)\nassertRegexpMatches(text, expected_regexp, msg=None)\nassertNotRegexpMatches(text, unexpected_regexp, msg=None)\n```\n\n\n## 测试接口地址\n测试接口地址建议使用硬编码，不要使用`reverse`反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。\n\n## 测试数据准备\n有如下两种方法准备测试数据\n1. 简单的数据可以在`setUp()`里来创建；\n2. 复杂数据可以使用fixtures来写，并在赋值给测试类的`fixtures`属性；\nfixtures数据示例\n```json\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n## 测试覆盖率（coverage）\n在`Pycharm`里可以通用右键项目，选择`Run 'Test:' with Coverage`来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。\n\n\n","slug":"django-rest-framework接口单元测试","published":1,"updated":"2020-01-17T07:57:22.316Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yj1000ossyhe8gqhqes","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a><code>settings</code></h2><p><code>Django</code>运行单元测试时，会以<code>settings</code>里的数据库配置里的<code>NAME</code>新建一个以<code>test_</code>开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的<code>migrations</code>文件来创建数据表并进行迁移，但如果<code>migrations</code>文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前<code>Model</code>结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用<code>SQLite</code>数据库引擎，当使用<code>SQLite</code>数据库引擎时，测试将默认使用内存数据库。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TESTING = len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> TESTING:</span><br><span class=\"line\">    <span class=\"comment\"># 当使用SQLite数据库引擎时，测试将默认使用内存数据库</span></span><br><span class=\"line\">    DATABASES[<span class=\"string\">'default'</span>] = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 单元测试时, 跳过migrate, 极 的提升测试运 效率</span></span><br><span class=\"line\">    <span class=\"comment\"># 具体可以查看</span></span><br><span class=\"line\">    <span class=\"comment\"># https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html</span></span><br><span class=\"line\">    <span class=\"comment\"># https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisableMigrations</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"notmigrations\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    MIGRATION_MODULES = DisableMigrations()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.test <span class=\"keyword\">import</span> APITestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.tests.test_utils <span class=\"keyword\">import</span> TestCaseUtils</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'jeff'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAPITests</span><span class=\"params\">(APITestCase, TestCaseUtils)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成</span></span><br><span class=\"line\">    <span class=\"comment\"># xml/yaml/json格式的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找</span></span><br><span class=\"line\">    <span class=\"comment\"># 此测试类运行结束后，会自动从数据库里销毁这份数据</span></span><br><span class=\"line\">    <span class=\"comment\"># fixtures = ['user.json']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个测试方法执行前会运行</span></span><br><span class=\"line\">        <span class=\"comment\"># 在此方法执行前，django会运行以下操作</span></span><br><span class=\"line\">        <span class=\"comment\"># 1. 重置数据库，数据库恢复到执行migrate后的状态</span></span><br><span class=\"line\">        <span class=\"comment\"># 2. 加载fixtures数据</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以每个测试方法里对数据库的操作都是独立的，不会相互影响</span></span><br><span class=\"line\">        kwargs = dict(mobile_phone=<span class=\"string\">'15999999999'</span>, password=<span class=\"string\">'111111'</span>)</span><br><span class=\"line\">        self.user = User.app_user_objects.create(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个方法结束执行后会运行</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUpClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类初始化时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).setUpClass()</span><br><span class=\"line\">        cls.token = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDownClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在整个测试类运行结束时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).tearDownClass()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"APP用户登录接口成功情况\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'111111'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        <span class=\"comment\"># response.data是字典对象</span></span><br><span class=\"line\">        <span class=\"comment\"># response.content是json字符串对象</span></span><br><span class=\"line\">        self.assertEquals(response.status_code,</span><br><span class=\"line\">                          status.HTTP_200_OK,</span><br><span class=\"line\">                          <span class=\"string\">'登录接口返回状态码错误: 错误信息: &#123;&#125;'</span>.format(response.content))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'token'</span>, response.data, <span class=\"string\">'登录成功后无token返回'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_with_error_pwd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">        self.assertJSONEqual(<span class=\"string\">'&#123;\"errors\":[\"用户名或密码错误。\"]&#125;'</span>, response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"成功获取app用户个人信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        headers = self.get_headers(user=self.user)</span><br><span class=\"line\">        response = self.client.get(path, **headers)</span><br><span class=\"line\">        <span class=\"comment\"># 校验一些关键数据即可</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果是创建新数据，不仅要校验返回的状态码和数据，</span></span><br><span class=\"line\">        <span class=\"comment\"># 还需要到使用Django ORM去数据库查询数据是否创建成功</span></span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_200_OK)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">6</span>, len(response.data))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'url'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'mobile_phone'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'avatar'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'company_name'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'username'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'is_inviter'</span>, response.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_without_token</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"不传token请求获取用户信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        response = self.client.get(path)</span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)</span><br></pre></td></tr></table></figure>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自unittest.case.TestCase</span></span><br><span class=\"line\">assertFalse(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTrue(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSequenceEqual(seq1, seq2, msg=<span class=\"keyword\">None</span>, seq_type=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertListEqual(list1, list2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTupleEqual(tuple1, tuple2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSetEqual(set1, set2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIs(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNot(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictEqual(d1, d2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictContainsSubset(expected, actual, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertItemsEqual(expected_seq, actual_seq, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertMultiLineEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLess(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLessEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreater(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreaterEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNone(obj, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertRaisesRegexp(expected_exception, expected_regexp,</span><br><span class=\"line\">                           callable_obj=<span class=\"keyword\">None</span>, *args, **kwargs)</span><br><span class=\"line\">assertRegexpMatches(text, expected_regexp, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotRegexpMatches(text, unexpected_regexp, msg=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试接口地址\"><a href=\"#测试接口地址\" class=\"headerlink\" title=\"测试接口地址\"></a>测试接口地址</h2><p>测试接口地址建议使用硬编码，不要使用<code>reverse</code>反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。</p>\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><p>有如下两种方法准备测试数据</p>\n<ol>\n<li>简单的数据可以在<code>setUp()</code>里来创建；</li>\n<li>复杂数据可以使用fixtures来写，并在赋值给测试类的<code>fixtures</code>属性；<br>fixtures数据示例<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Lennon\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Paul\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"McCartney\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试覆盖率（coverage）\"><a href=\"#测试覆盖率（coverage）\" class=\"headerlink\" title=\"测试覆盖率（coverage）\"></a>测试覆盖率（coverage）</h2><p>在<code>Pycharm</code>里可以通用右键项目，选择<code>Run &#39;Test:&#39; with Coverage</code>来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。</p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a><code>settings</code></h2><p><code>Django</code>运行单元测试时，会以<code>settings</code>里的数据库配置里的<code>NAME</code>新建一个以<code>test_</code>开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的<code>migrations</code>文件来创建数据表并进行迁移，但如果<code>migrations</code>文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前<code>Model</code>结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用<code>SQLite</code>数据库引擎，当使用<code>SQLite</code>数据库引擎时，测试将默认使用内存数据库。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TESTING = len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> TESTING:</span><br><span class=\"line\">    <span class=\"comment\"># 当使用SQLite数据库引擎时，测试将默认使用内存数据库</span></span><br><span class=\"line\">    DATABASES[<span class=\"string\">'default'</span>] = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 单元测试时, 跳过migrate, 极 的提升测试运 效率</span></span><br><span class=\"line\">    <span class=\"comment\"># 具体可以查看</span></span><br><span class=\"line\">    <span class=\"comment\"># https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html</span></span><br><span class=\"line\">    <span class=\"comment\"># https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisableMigrations</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"notmigrations\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    MIGRATION_MODULES = DisableMigrations()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.test <span class=\"keyword\">import</span> APITestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.tests.test_utils <span class=\"keyword\">import</span> TestCaseUtils</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'jeff'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAPITests</span><span class=\"params\">(APITestCase, TestCaseUtils)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成</span></span><br><span class=\"line\">    <span class=\"comment\"># xml/yaml/json格式的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找</span></span><br><span class=\"line\">    <span class=\"comment\"># 此测试类运行结束后，会自动从数据库里销毁这份数据</span></span><br><span class=\"line\">    <span class=\"comment\"># fixtures = ['user.json']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个测试方法执行前会运行</span></span><br><span class=\"line\">        <span class=\"comment\"># 在此方法执行前，django会运行以下操作</span></span><br><span class=\"line\">        <span class=\"comment\"># 1. 重置数据库，数据库恢复到执行migrate后的状态</span></span><br><span class=\"line\">        <span class=\"comment\"># 2. 加载fixtures数据</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以每个测试方法里对数据库的操作都是独立的，不会相互影响</span></span><br><span class=\"line\">        kwargs = dict(mobile_phone=<span class=\"string\">'15999999999'</span>, password=<span class=\"string\">'111111'</span>)</span><br><span class=\"line\">        self.user = User.app_user_objects.create(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个方法结束执行后会运行</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUpClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类初始化时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).setUpClass()</span><br><span class=\"line\">        cls.token = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDownClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在整个测试类运行结束时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).tearDownClass()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"APP用户登录接口成功情况\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'111111'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        <span class=\"comment\"># response.data是字典对象</span></span><br><span class=\"line\">        <span class=\"comment\"># response.content是json字符串对象</span></span><br><span class=\"line\">        self.assertEquals(response.status_code,</span><br><span class=\"line\">                          status.HTTP_200_OK,</span><br><span class=\"line\">                          <span class=\"string\">'登录接口返回状态码错误: 错误信息: &#123;&#125;'</span>.format(response.content))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'token'</span>, response.data, <span class=\"string\">'登录成功后无token返回'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_with_error_pwd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">        self.assertJSONEqual(<span class=\"string\">'&#123;\"errors\":[\"用户名或密码错误。\"]&#125;'</span>, response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"成功获取app用户个人信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        headers = self.get_headers(user=self.user)</span><br><span class=\"line\">        response = self.client.get(path, **headers)</span><br><span class=\"line\">        <span class=\"comment\"># 校验一些关键数据即可</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果是创建新数据，不仅要校验返回的状态码和数据，</span></span><br><span class=\"line\">        <span class=\"comment\"># 还需要到使用Django ORM去数据库查询数据是否创建成功</span></span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_200_OK)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">6</span>, len(response.data))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'url'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'mobile_phone'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'avatar'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'company_name'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'username'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'is_inviter'</span>, response.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_without_token</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"不传token请求获取用户信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        response = self.client.get(path)</span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)</span><br></pre></td></tr></table></figure>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自unittest.case.TestCase</span></span><br><span class=\"line\">assertFalse(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTrue(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSequenceEqual(seq1, seq2, msg=<span class=\"keyword\">None</span>, seq_type=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertListEqual(list1, list2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTupleEqual(tuple1, tuple2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSetEqual(set1, set2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIs(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNot(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictEqual(d1, d2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictContainsSubset(expected, actual, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertItemsEqual(expected_seq, actual_seq, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertMultiLineEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLess(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLessEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreater(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreaterEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNone(obj, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertRaisesRegexp(expected_exception, expected_regexp,</span><br><span class=\"line\">                           callable_obj=<span class=\"keyword\">None</span>, *args, **kwargs)</span><br><span class=\"line\">assertRegexpMatches(text, expected_regexp, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotRegexpMatches(text, unexpected_regexp, msg=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试接口地址\"><a href=\"#测试接口地址\" class=\"headerlink\" title=\"测试接口地址\"></a>测试接口地址</h2><p>测试接口地址建议使用硬编码，不要使用<code>reverse</code>反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。</p>\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><p>有如下两种方法准备测试数据</p>\n<ol>\n<li>简单的数据可以在<code>setUp()</code>里来创建；</li>\n<li>复杂数据可以使用fixtures来写，并在赋值给测试类的<code>fixtures</code>属性；<br>fixtures数据示例<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Lennon\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Paul\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"McCartney\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试覆盖率（coverage）\"><a href=\"#测试覆盖率（coverage）\" class=\"headerlink\" title=\"测试覆盖率（coverage）\"></a>测试覆盖率（coverage）</h2><p>在<code>Pycharm</code>里可以通用右键项目，选择<code>Run &#39;Test:&#39; with Coverage</code>来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:22 GMT+0800 (China Standard Time)","title":"Django REST framework单元测试「Unit Testing」","path":"2017/09/05/django-rest-framework接口单元测试/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2017-09-05T15:23:41.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","restful api","接口","单元测试","测试"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6129},{"title":"Django Rest framework里的API请求频率控制","comments":1,"date":"2016-12-17T06:48:19.000Z","sticky":null,"_content":"<br />\n<!--more-->\n\n## 更新记录\n2016-08-25 初稿\n\n`Django Rest framework`有自带的频率控制配置\n## 全局设置\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '100/day',\n        # 授权用户请求频率\n        'user': '1000/day'\n    }\n}\n```\n\n## 类视图单独配置\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n \n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n## 方法视图配置\n```python\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n## 自定义\n方法一：\n```python\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n \nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n...and the following settings.\n```\n\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n然后在视图里设置`throttle_classes`即可。\n\n方法二：\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n```\n然后在类视图中设置`throttle_scope `\n```python\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n```\n\n\n**1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。**\n**2. 频率限制是针对单个接口的频率，而不是所有接口的频率。**\n\n","source":"_posts/django-rest-framework里的api请求频率控制.md","raw":"title: Django Rest framework里的API请求频率控制\ncomments: true\ndate: 2016-12-17 14:48:19\ncategories:\ntags: [Django, restful, api， version]\nsticky:\n---\n<br />\n<!--more-->\n\n## 更新记录\n2016-08-25 初稿\n\n`Django Rest framework`有自带的频率控制配置\n## 全局设置\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '100/day',\n        # 授权用户请求频率\n        'user': '1000/day'\n    }\n}\n```\n\n## 类视图单独配置\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n \n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n## 方法视图配置\n```python\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n## 自定义\n方法一：\n```python\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n \nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n...and the following settings.\n```\n\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n然后在视图里设置`throttle_classes`即可。\n\n方法二：\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n```\n然后在类视图中设置`throttle_scope `\n```python\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n```\n\n\n**1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。**\n**2. 频率限制是针对单个接口的频率，而不是所有接口的频率。**\n\n","slug":"django-rest-framework里的api请求频率控制","published":1,"updated":"2020-01-17T07:57:17.325Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yj2000pssyhadl6d6lz","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-08-25 初稿</p>\n<p><code>Django Rest framework</code>有自带的频率控制配置</p>\n<h2 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 开启授权用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 频率限制有second, minute, hour, day</span></span><br><span class=\"line\">        <span class=\"comment\"># 匿名用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'anon'</span>: <span class=\"string\">'100/day'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 授权用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类视图单独配置\"><a href=\"#类视图单独配置\" class=\"headerlink\" title=\"类视图单独配置\"></a>类视图单独配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_classes = (UserRateThrottle,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></span><br><span class=\"line\">        content = &#123;</span><br><span class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法视图配置\"><a href=\"#方法视图配置\" class=\"headerlink\" title=\"方法视图配置\"></a>方法视图配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@api_view(['GET'])</span></span><br><span class=\"line\"><span class=\"meta\">@throttle_classes([UserRateThrottle])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_view</span><span class=\"params\">(request, format=None)</span>:</span></span><br><span class=\"line\">    content = &#123;</span><br><span class=\"line\">        <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h2><p>方法一：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BurstRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'burst'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SustainedRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'sustained'</span></span><br><span class=\"line\">...<span class=\"keyword\">and</span> the following settings.</span><br></pre></td></tr></table></figure></p>\n<p><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.BurstRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.SustainedRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'burst'</span>: <span class=\"string\">'60/min'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sustained'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在视图里设置<code>throttle_classes</code>即可。</p>\n<p>方法二：<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'contacts'</span>: <span class=\"string\">'1000/day'</span>,</span><br><span class=\"line\">        <span class=\"string\">'uploads'</span>: <span class=\"string\">'20/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在类视图中设置<code>throttle_scope</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactListView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactDetailView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'uploads'</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p><strong>1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。</strong><br><strong>2. 频率限制是针对单个接口的频率，而不是所有接口的频率。</strong></p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-08-25 初稿</p>\n<p><code>Django Rest framework</code>有自带的频率控制配置</p>\n<h2 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 开启授权用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 频率限制有second, minute, hour, day</span></span><br><span class=\"line\">        <span class=\"comment\"># 匿名用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'anon'</span>: <span class=\"string\">'100/day'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 授权用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类视图单独配置\"><a href=\"#类视图单独配置\" class=\"headerlink\" title=\"类视图单独配置\"></a>类视图单独配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_classes = (UserRateThrottle,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></span><br><span class=\"line\">        content = &#123;</span><br><span class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法视图配置\"><a href=\"#方法视图配置\" class=\"headerlink\" title=\"方法视图配置\"></a>方法视图配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@api_view(['GET'])</span></span><br><span class=\"line\"><span class=\"meta\">@throttle_classes([UserRateThrottle])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_view</span><span class=\"params\">(request, format=None)</span>:</span></span><br><span class=\"line\">    content = &#123;</span><br><span class=\"line\">        <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h2><p>方法一：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BurstRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'burst'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SustainedRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'sustained'</span></span><br><span class=\"line\">...<span class=\"keyword\">and</span> the following settings.</span><br></pre></td></tr></table></figure></p>\n<p><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.BurstRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.SustainedRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'burst'</span>: <span class=\"string\">'60/min'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sustained'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在视图里设置<code>throttle_classes</code>即可。</p>\n<p>方法二：<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'contacts'</span>: <span class=\"string\">'1000/day'</span>,</span><br><span class=\"line\">        <span class=\"string\">'uploads'</span>: <span class=\"string\">'20/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在类视图中设置<code>throttle_scope</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactListView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactDetailView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'uploads'</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p><strong>1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。</strong><br><strong>2. 频率限制是针对单个接口的频率，而不是所有接口的频率。</strong></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:17 GMT+0800 (China Standard Time)","title":"Django Rest framework里的API请求频率控制","path":"2016/12/17/django-rest-framework里的api请求频率控制/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-12-17T06:48:19.000Z","pv":0,"totalPV":0,"categories":"","tags":["Django","restful","api， version"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":2103},{"title":"Django内置的flatpages应用","date":"2015-09-08T13:17:55.000Z","updated":"2015-09-08T13:17:55.000Z","excerpt":"<p>不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：</p>\n<ol>\n<li>页面数据简单（不会有很多动态数据展示）;</li>\n<li>有更新但频率不高;</li>\n</ol>\n<p>如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用<code>flatpages</code>来解决这类问题了。<br>","_content":"不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：\n1. 页面数据简单（不会有很多动态数据展示）;\n2. 有更新但频率不高;\n\n如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用`flatpages `来解决这类问题了。\n<!--more-->\n\n`django.contrib.flatpages`是`Django `的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。\n\n## 安装\n首先确保`INSTALLED_APPS`中已经存在`django.contrib.sites`，因为`django.contrib.flatpages`依赖于此包。\n`settings.py`\n```python\nINSTALLED_APPS = (\n    # ...\n    'django.contrib.sites',\n    'django.contrib.flatpages',\n)\n# ...\n# 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1\nSITE_ID = 1\n```\n执行`python manage.py migrate`建表\n\n## 配置\n路由配置可先以有多种形式\n`urls.py`\n第一种（需放在最后，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns += [\n    url(r'^(?P<url>.*/)$', views.flatpage),\n]\n```\n第二种（每个页面都需要写一个url，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns = [\n    url(r'^about-us/$', views.flatpage, {'url': '/about-us/'}, name='about'),\n    url(r'^license/$', views.flatpage, {'url': '/license/'}, name='license'),\n]\n```\n或者，如果你不想配置路由，还有一种更简单的方法，直接在`settings.py`的里添加中间件\n```\nMIDDLEWARE_CLASSES = (\n    # ...\n    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',\n)\n```\n*为确保配置生效，保险的方法是把`django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`放在最后一行*\n\n## 管理`flatpages`\n\n默认的你可以登录超级管理员后台（如果开启），找到`Flat pages`，进去点击添加，可以看到可配置的选项有，`URL` `Title` `Content` `Site` `Enable comments` `Registration required` `Template name`\n\n### 数据项说明\n- `URL`:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )\n- `Title`: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它\n- `Content`: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示\n- `Site`: 页面放置的站点，该项设置集成了 Django 多站点框架\n- `Enable comments`: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体\n- `Registration required`: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。\n- `Template name`: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 `flatpages/default.html`（我在`Django1.8.4`里死活没找到，只好自己写好一个扔进去）\n\n当添加相应的数据后，剩下工作就交给`flatpages`吧，如果你是使用中间件形式的，则`flatpages `会在配置完所有`urls.py`后，没有找到配置到对应的`URL`，才会到`flatpages `中查找，如果还是找不到，则会引发`Http404`异常，即`FlatpageFallbackMiddleware `只在`404`时会被激活，而不会在`500`或其它错误响应时被激活。\n\n如果你需要自己定制，则可以针对`django/contrib/flatpages/models.py`自己写增删改方法就可以。\n`models.py`\n```python\nclass FlatPage(models.Model):\n    url = models.CharField(_('URL'), max_length=100, db_index=True)\n    title = models.CharField(_('title'), max_length=200)\n    content = models.TextField(_('content'), blank=True)\n    enable_comments = models.BooleanField(_('enable comments'), default=False)\n    template_name = models.CharField(_('template name'), max_length=70, blank=True,\n        help_text=_(\n            \"Example: 'flatpages/contact_page.html'. If this isn't provided, \"\n            \"the system will use 'flatpages/default.html'.\"\n        ),\n    )\n    registration_required = models.BooleanField(_('registration required'),\n        help_text=_(\"If this is checked, only logged-in users will be able to view the page.\"),\n        default=False)\n    sites = models.ManyToManyField(Site)\n \n    class Meta:\n        db_table = 'django_flatpage'\n        verbose_name = _('flat page')\n        verbose_name_plural = _('flat pages')\n        ordering = ('url',)\n \n    def __str__(self):\n        return \"%s -- %s\" % (self.url, self.title)\n \n    def get_absolute_url(self):\n        # Handle script prefix manually because we bypass reverse()\n        return iri_to_uri(get_script_prefix().rstrip('/') + self.url)\n```\n\n## 模板\n默认模板路径为`flatpages/default.html`\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>\n```\n> 在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加`requeset.user`显示用户信息等。\n\n## 高级应用\n\n获取`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages as flatpages %}\n```\n\n获取当前用户能打开的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages for request.user as about_pages %}\n```\n\n获取链接以`/about/`为开头的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages '/about/' as about_pages %}\n```\n\n上面两种也可以组合使用\n```\n{% load flatpages %}\n{% get_flatpages '/about/' for someuser as about_pages %}\n```\n\n## 生成`sitemaps.xml`\n```\nfrom django.conf.urls import url\nfrom django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\n \nurlpatterns = [\n    # ...\n \n    # the sitemap\n    url(r'^sitemap\\.xml$', sitemap,\n        {'sitemaps': {'flatpages': FlatPageSitemap}},\n        name='django.contrib.sitemaps.views.sitemap'),\n]\n```\n\n## 容易踩的坑\n最好把`settings.py`里的`APPEND_SLASH`设置为`Ture`， 这样不管是`/about-us`还是`/about-us/`都可以访问到。\n\n## 参考资料\n- https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\n- http://djangobook.py3k.cn/2.0/chapter16/\n","source":"_posts/django内置的flatpages应用.md","raw":"title: Django内置的flatpages应用\ndate: 2015-09-08 21:17:55\nupdated: 2015-09-08 21:17:55\ncategories: [程序猿]\ntags: [Python, Django]\nexcerpt: true\n---\n不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：\n1. 页面数据简单（不会有很多动态数据展示）;\n2. 有更新但频率不高;\n\n如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用`flatpages `来解决这类问题了。\n<!--more-->\n\n`django.contrib.flatpages`是`Django `的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。\n\n## 安装\n首先确保`INSTALLED_APPS`中已经存在`django.contrib.sites`，因为`django.contrib.flatpages`依赖于此包。\n`settings.py`\n```python\nINSTALLED_APPS = (\n    # ...\n    'django.contrib.sites',\n    'django.contrib.flatpages',\n)\n# ...\n# 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1\nSITE_ID = 1\n```\n执行`python manage.py migrate`建表\n\n## 配置\n路由配置可先以有多种形式\n`urls.py`\n第一种（需放在最后，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns += [\n    url(r'^(?P<url>.*/)$', views.flatpage),\n]\n```\n第二种（每个页面都需要写一个url，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns = [\n    url(r'^about-us/$', views.flatpage, {'url': '/about-us/'}, name='about'),\n    url(r'^license/$', views.flatpage, {'url': '/license/'}, name='license'),\n]\n```\n或者，如果你不想配置路由，还有一种更简单的方法，直接在`settings.py`的里添加中间件\n```\nMIDDLEWARE_CLASSES = (\n    # ...\n    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',\n)\n```\n*为确保配置生效，保险的方法是把`django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`放在最后一行*\n\n## 管理`flatpages`\n\n默认的你可以登录超级管理员后台（如果开启），找到`Flat pages`，进去点击添加，可以看到可配置的选项有，`URL` `Title` `Content` `Site` `Enable comments` `Registration required` `Template name`\n\n### 数据项说明\n- `URL`:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )\n- `Title`: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它\n- `Content`: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示\n- `Site`: 页面放置的站点，该项设置集成了 Django 多站点框架\n- `Enable comments`: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体\n- `Registration required`: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。\n- `Template name`: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 `flatpages/default.html`（我在`Django1.8.4`里死活没找到，只好自己写好一个扔进去）\n\n当添加相应的数据后，剩下工作就交给`flatpages`吧，如果你是使用中间件形式的，则`flatpages `会在配置完所有`urls.py`后，没有找到配置到对应的`URL`，才会到`flatpages `中查找，如果还是找不到，则会引发`Http404`异常，即`FlatpageFallbackMiddleware `只在`404`时会被激活，而不会在`500`或其它错误响应时被激活。\n\n如果你需要自己定制，则可以针对`django/contrib/flatpages/models.py`自己写增删改方法就可以。\n`models.py`\n```python\nclass FlatPage(models.Model):\n    url = models.CharField(_('URL'), max_length=100, db_index=True)\n    title = models.CharField(_('title'), max_length=200)\n    content = models.TextField(_('content'), blank=True)\n    enable_comments = models.BooleanField(_('enable comments'), default=False)\n    template_name = models.CharField(_('template name'), max_length=70, blank=True,\n        help_text=_(\n            \"Example: 'flatpages/contact_page.html'. If this isn't provided, \"\n            \"the system will use 'flatpages/default.html'.\"\n        ),\n    )\n    registration_required = models.BooleanField(_('registration required'),\n        help_text=_(\"If this is checked, only logged-in users will be able to view the page.\"),\n        default=False)\n    sites = models.ManyToManyField(Site)\n \n    class Meta:\n        db_table = 'django_flatpage'\n        verbose_name = _('flat page')\n        verbose_name_plural = _('flat pages')\n        ordering = ('url',)\n \n    def __str__(self):\n        return \"%s -- %s\" % (self.url, self.title)\n \n    def get_absolute_url(self):\n        # Handle script prefix manually because we bypass reverse()\n        return iri_to_uri(get_script_prefix().rstrip('/') + self.url)\n```\n\n## 模板\n默认模板路径为`flatpages/default.html`\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>\n```\n> 在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加`requeset.user`显示用户信息等。\n\n## 高级应用\n\n获取`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages as flatpages %}\n```\n\n获取当前用户能打开的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages for request.user as about_pages %}\n```\n\n获取链接以`/about/`为开头的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages '/about/' as about_pages %}\n```\n\n上面两种也可以组合使用\n```\n{% load flatpages %}\n{% get_flatpages '/about/' for someuser as about_pages %}\n```\n\n## 生成`sitemaps.xml`\n```\nfrom django.conf.urls import url\nfrom django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\n \nurlpatterns = [\n    # ...\n \n    # the sitemap\n    url(r'^sitemap\\.xml$', sitemap,\n        {'sitemaps': {'flatpages': FlatPageSitemap}},\n        name='django.contrib.sitemaps.views.sitemap'),\n]\n```\n\n## 容易踩的坑\n最好把`settings.py`里的`APPEND_SLASH`设置为`Ture`， 这样不管是`/about-us`还是`/about-us/`都可以访问到。\n\n## 参考资料\n- https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\n- http://djangobook.py3k.cn/2.0/chapter16/\n","slug":"django内置的flatpages应用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yjd000qssyhg35783r2","content":"<p>不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：</p>\n<ol>\n<li>页面数据简单（不会有很多动态数据展示）;</li>\n<li>有更新但频率不高;</li>\n</ol>\n<p>如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用<code>flatpages</code>来解决这类问题了。<br><a id=\"more\"></a></p>\n<p><code>django.contrib.flatpages</code>是<code>Django</code>的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先确保<code>INSTALLED_APPS</code>中已经存在<code>django.contrib.sites</code>，因为<code>django.contrib.flatpages</code>依赖于此包。<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sites'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.flatpages'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1</span></span><br><span class=\"line\">SITE_ID = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>执行<code>python manage.py migrate</code>建表</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>路由配置可先以有多种形式<br><code>urls.py</code><br>第一种（需放在最后，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns += [</span><br><span class=\"line\">    url(r&apos;^(?P&lt;url&gt;.*/)$&apos;, views.flatpage),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>第二种（每个页面都需要写一个url，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^about-us/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/about-us/&apos;&#125;, name=&apos;about&apos;),</span><br><span class=\"line\">    url(r&apos;^license/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/license/&apos;&#125;, name=&apos;license&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果你不想配置路由，还有一种更简单的方法，直接在<code>settings.py</code>的里添加中间件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    &apos;django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><em>为确保配置生效，保险的方法是把<code>django.contrib.flatpages.middleware.FlatpageFallbackMiddleware</code>放在最后一行</em></p>\n<h2 id=\"管理flatpages\"><a href=\"#管理flatpages\" class=\"headerlink\" title=\"管理flatpages\"></a>管理<code>flatpages</code></h2><p>默认的你可以登录超级管理员后台（如果开启），找到<code>Flat pages</code>，进去点击添加，可以看到可配置的选项有，<code>URL</code> <code>Title</code> <code>Content</code> <code>Site</code> <code>Enable comments</code> <code>Registration required</code> <code>Template name</code></p>\n<h3 id=\"数据项说明\"><a href=\"#数据项说明\" class=\"headerlink\" title=\"数据项说明\"></a>数据项说明</h3><ul>\n<li><code>URL</code>:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )</li>\n<li><code>Title</code>: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它</li>\n<li><code>Content</code>: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示</li>\n<li><code>Site</code>: 页面放置的站点，该项设置集成了 Django 多站点框架</li>\n<li><code>Enable comments</code>: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体</li>\n<li><code>Registration required</code>: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。</li>\n<li><code>Template name</code>: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 <code>flatpages/default.html</code>（我在<code>Django1.8.4</code>里死活没找到，只好自己写好一个扔进去）</li>\n</ul>\n<p>当添加相应的数据后，剩下工作就交给<code>flatpages</code>吧，如果你是使用中间件形式的，则<code>flatpages</code>会在配置完所有<code>urls.py</code>后，没有找到配置到对应的<code>URL</code>，才会到<code>flatpages</code>中查找，如果还是找不到，则会引发<code>Http404</code>异常，即<code>FlatpageFallbackMiddleware</code>只在<code>404</code>时会被激活，而不会在<code>500</code>或其它错误响应时被激活。</p>\n<p>如果你需要自己定制，则可以针对<code>django/contrib/flatpages/models.py</code>自己写增删改方法就可以。<br><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlatPage</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    url = models.CharField(_(<span class=\"string\">'URL'</span>), max_length=<span class=\"number\">100</span>, db_index=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    title = models.CharField(_(<span class=\"string\">'title'</span>), max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    content = models.TextField(_(<span class=\"string\">'content'</span>), blank=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    enable_comments = models.BooleanField(_(<span class=\"string\">'enable comments'</span>), default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    template_name = models.CharField(_(<span class=\"string\">'template name'</span>), max_length=<span class=\"number\">70</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">        help_text=_(</span><br><span class=\"line\">            <span class=\"string\">\"Example: 'flatpages/contact_page.html'. If this isn't provided, \"</span></span><br><span class=\"line\">            <span class=\"string\">\"the system will use 'flatpages/default.html'.\"</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    registration_required = models.BooleanField(_(<span class=\"string\">'registration required'</span>),</span><br><span class=\"line\">        help_text=_(<span class=\"string\">\"If this is checked, only logged-in users will be able to view the page.\"</span>),</span><br><span class=\"line\">        default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    sites = models.ManyToManyField(Site)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        db_table = <span class=\"string\">'django_flatpage'</span></span><br><span class=\"line\">        verbose_name = _(<span class=\"string\">'flat page'</span>)</span><br><span class=\"line\">        verbose_name_plural = _(<span class=\"string\">'flat pages'</span>)</span><br><span class=\"line\">        ordering = (<span class=\"string\">'url'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"%s -- %s\"</span> % (self.url, self.title)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_absolute_url</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Handle script prefix manually because we bypass reverse()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iri_to_uri(get_script_prefix().rstrip(<span class=\"string\">'/'</span>) + self.url)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>默认模板路径为<code>flatpages/default.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123; flatpage.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; flatpage.content &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加<code>requeset.user</code>显示用户信息等。</p>\n</blockquote>\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><p>获取<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages as flatpages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取当前用户能打开的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages for request.user as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取链接以<code>/about/</code>为开头的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面两种也可以组合使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; for someuser as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成sitemaps-xml\"><a href=\"#生成sitemaps-xml\" class=\"headerlink\" title=\"生成sitemaps.xml\"></a>生成<code>sitemaps.xml</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url</span><br><span class=\"line\">from django.contrib.flatpages.sitemaps import FlatPageSitemap</span><br><span class=\"line\">from django.contrib.sitemaps.views import sitemap</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    # ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    # the sitemap</span><br><span class=\"line\">    url(r&apos;^sitemap\\.xml$&apos;, sitemap,</span><br><span class=\"line\">        &#123;&apos;sitemaps&apos;: &#123;&apos;flatpages&apos;: FlatPageSitemap&#125;&#125;,</span><br><span class=\"line\">        name=&apos;django.contrib.sitemaps.views.sitemap&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"容易踩的坑\"><a href=\"#容易踩的坑\" class=\"headerlink\" title=\"容易踩的坑\"></a>容易踩的坑</h2><p>最好把<code>settings.py</code>里的<code>APPEND_SLASH</code>设置为<code>Ture</code>， 这样不管是<code>/about-us</code>还是<code>/about-us/</code>都可以访问到。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/</a></li>\n<li><a href=\"http://djangobook.py3k.cn/2.0/chapter16/\" target=\"_blank\" rel=\"noopener\">http://djangobook.py3k.cn/2.0/chapter16/</a></li>\n</ul>\n","site":{"data":{}},"more":"</p>\n<p><code>django.contrib.flatpages</code>是<code>Django</code>的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先确保<code>INSTALLED_APPS</code>中已经存在<code>django.contrib.sites</code>，因为<code>django.contrib.flatpages</code>依赖于此包。<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sites'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.flatpages'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1</span></span><br><span class=\"line\">SITE_ID = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>执行<code>python manage.py migrate</code>建表</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>路由配置可先以有多种形式<br><code>urls.py</code><br>第一种（需放在最后，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns += [</span><br><span class=\"line\">    url(r&apos;^(?P&lt;url&gt;.*/)$&apos;, views.flatpage),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>第二种（每个页面都需要写一个url，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^about-us/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/about-us/&apos;&#125;, name=&apos;about&apos;),</span><br><span class=\"line\">    url(r&apos;^license/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/license/&apos;&#125;, name=&apos;license&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果你不想配置路由，还有一种更简单的方法，直接在<code>settings.py</code>的里添加中间件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    &apos;django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><em>为确保配置生效，保险的方法是把<code>django.contrib.flatpages.middleware.FlatpageFallbackMiddleware</code>放在最后一行</em></p>\n<h2 id=\"管理flatpages\"><a href=\"#管理flatpages\" class=\"headerlink\" title=\"管理flatpages\"></a>管理<code>flatpages</code></h2><p>默认的你可以登录超级管理员后台（如果开启），找到<code>Flat pages</code>，进去点击添加，可以看到可配置的选项有，<code>URL</code> <code>Title</code> <code>Content</code> <code>Site</code> <code>Enable comments</code> <code>Registration required</code> <code>Template name</code></p>\n<h3 id=\"数据项说明\"><a href=\"#数据项说明\" class=\"headerlink\" title=\"数据项说明\"></a>数据项说明</h3><ul>\n<li><code>URL</code>:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )</li>\n<li><code>Title</code>: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它</li>\n<li><code>Content</code>: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示</li>\n<li><code>Site</code>: 页面放置的站点，该项设置集成了 Django 多站点框架</li>\n<li><code>Enable comments</code>: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体</li>\n<li><code>Registration required</code>: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。</li>\n<li><code>Template name</code>: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 <code>flatpages/default.html</code>（我在<code>Django1.8.4</code>里死活没找到，只好自己写好一个扔进去）</li>\n</ul>\n<p>当添加相应的数据后，剩下工作就交给<code>flatpages</code>吧，如果你是使用中间件形式的，则<code>flatpages</code>会在配置完所有<code>urls.py</code>后，没有找到配置到对应的<code>URL</code>，才会到<code>flatpages</code>中查找，如果还是找不到，则会引发<code>Http404</code>异常，即<code>FlatpageFallbackMiddleware</code>只在<code>404</code>时会被激活，而不会在<code>500</code>或其它错误响应时被激活。</p>\n<p>如果你需要自己定制，则可以针对<code>django/contrib/flatpages/models.py</code>自己写增删改方法就可以。<br><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlatPage</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    url = models.CharField(_(<span class=\"string\">'URL'</span>), max_length=<span class=\"number\">100</span>, db_index=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    title = models.CharField(_(<span class=\"string\">'title'</span>), max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    content = models.TextField(_(<span class=\"string\">'content'</span>), blank=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    enable_comments = models.BooleanField(_(<span class=\"string\">'enable comments'</span>), default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    template_name = models.CharField(_(<span class=\"string\">'template name'</span>), max_length=<span class=\"number\">70</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">        help_text=_(</span><br><span class=\"line\">            <span class=\"string\">\"Example: 'flatpages/contact_page.html'. If this isn't provided, \"</span></span><br><span class=\"line\">            <span class=\"string\">\"the system will use 'flatpages/default.html'.\"</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    registration_required = models.BooleanField(_(<span class=\"string\">'registration required'</span>),</span><br><span class=\"line\">        help_text=_(<span class=\"string\">\"If this is checked, only logged-in users will be able to view the page.\"</span>),</span><br><span class=\"line\">        default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    sites = models.ManyToManyField(Site)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        db_table = <span class=\"string\">'django_flatpage'</span></span><br><span class=\"line\">        verbose_name = _(<span class=\"string\">'flat page'</span>)</span><br><span class=\"line\">        verbose_name_plural = _(<span class=\"string\">'flat pages'</span>)</span><br><span class=\"line\">        ordering = (<span class=\"string\">'url'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"%s -- %s\"</span> % (self.url, self.title)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_absolute_url</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Handle script prefix manually because we bypass reverse()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iri_to_uri(get_script_prefix().rstrip(<span class=\"string\">'/'</span>) + self.url)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>默认模板路径为<code>flatpages/default.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123; flatpage.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; flatpage.content &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加<code>requeset.user</code>显示用户信息等。</p>\n</blockquote>\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><p>获取<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages as flatpages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取当前用户能打开的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages for request.user as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取链接以<code>/about/</code>为开头的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面两种也可以组合使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; for someuser as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成sitemaps-xml\"><a href=\"#生成sitemaps-xml\" class=\"headerlink\" title=\"生成sitemaps.xml\"></a>生成<code>sitemaps.xml</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url</span><br><span class=\"line\">from django.contrib.flatpages.sitemaps import FlatPageSitemap</span><br><span class=\"line\">from django.contrib.sitemaps.views import sitemap</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    # ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    # the sitemap</span><br><span class=\"line\">    url(r&apos;^sitemap\\.xml$&apos;, sitemap,</span><br><span class=\"line\">        &#123;&apos;sitemaps&apos;: &#123;&apos;flatpages&apos;: FlatPageSitemap&#125;&#125;,</span><br><span class=\"line\">        name=&apos;django.contrib.sitemaps.views.sitemap&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"容易踩的坑\"><a href=\"#容易踩的坑\" class=\"headerlink\" title=\"容易踩的坑\"></a>容易踩的坑</h2><p>最好把<code>settings.py</code>里的<code>APPEND_SLASH</code>设置为<code>Ture</code>， 这样不管是<code>/about-us</code>还是<code>/about-us/</code>都可以访问到。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/</a></li>\n<li><a href=\"http://djangobook.py3k.cn/2.0/chapter16/\" target=\"_blank\" rel=\"noopener\">http://djangobook.py3k.cn/2.0/chapter16/</a></li>\n</ul>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 08 2015 21:17:55 GMT+0800 (China Standard Time)","title":"Django内置的flatpages应用","path":"2015/09/08/django内置的flatpages应用/","eyeCatchImage":null,"excerpt":"<p>不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：</p>\n<ol>\n<li>页面数据简单（不会有很多动态数据展示）;</li>\n<li>有更新但频率不高;</li>\n</ol>\n<p>如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用<code>flatpages</code>来解决这类问题了。<br>","date":"2015-09-08T13:17:55.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","Python"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4641},{"title":"Django字段选项related_name和related_query_name","comments":1,"date":"2015-10-20T14:22:06.000Z","_content":"`data`\n```sqlite3\nsqlite> select * from author;\nid      name    age\n1       jim     12\n2       tom     11\nsqlite> select * from book;\nid      name    author_id\n1       learn java      1\n2       learn python    1\n3       learn c++       2\n```\n<!--more-->\n`models.py`\n```python\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n# Create your models here.\n\nclass Author(models.Model):\n    name = models.CharField(verbose_name='姓名', max_length=50)\n    age = models.IntegerField(verbose_name='年龄')\n\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者')\n```\n执行语句\n```\n>>> Author.objects.filter(book__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.book_set.all()\n[<Book: learn java>, <Book: learn python>]\n```\n\n假如把类`Book`改成这样\n```\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者', related_name='bs', related_query_name='b')\n```\n那么上面查询代码就应该写成这样\n```\n>>> Author.objects.filter(b__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.bs.all()\n[<Book: learn java>, <Book: learn python>]\n```\n> 如果`book `表里有两个字段都外键关联`author `表，这时`related_name`就非常有用了。\n\n\n\n\n","source":"_posts/django字段选项related-name和related-query-name.md","raw":"title: Django字段选项related_name和related_query_name\ncomments: true\ndate: 2015-10-20 22:22:06\ncategories: [程序猿]\ntags: [Python, Django]\n---\n`data`\n```sqlite3\nsqlite> select * from author;\nid      name    age\n1       jim     12\n2       tom     11\nsqlite> select * from book;\nid      name    author_id\n1       learn java      1\n2       learn python    1\n3       learn c++       2\n```\n<!--more-->\n`models.py`\n```python\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n# Create your models here.\n\nclass Author(models.Model):\n    name = models.CharField(verbose_name='姓名', max_length=50)\n    age = models.IntegerField(verbose_name='年龄')\n\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者')\n```\n执行语句\n```\n>>> Author.objects.filter(book__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.book_set.all()\n[<Book: learn java>, <Book: learn python>]\n```\n\n假如把类`Book`改成这样\n```\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者', related_name='bs', related_query_name='b')\n```\n那么上面查询代码就应该写成这样\n```\n>>> Author.objects.filter(b__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.bs.all()\n[<Book: learn java>, <Book: learn python>]\n```\n> 如果`book `表里有两个字段都外键关联`author `表，这时`related_name`就非常有用了。\n\n\n\n\n","slug":"django字段选项related-name和related-query-name","published":1,"updated":"2020-01-17T07:56:41.859Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yjg000rssyhbkeg69lc","content":"<p><code>data</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select * from author;</span><br><span class=\"line\">id      name    age</span><br><span class=\"line\">1       jim     12</span><br><span class=\"line\">2       tom     11</span><br><span class=\"line\">sqlite&gt; select * from book;</span><br><span class=\"line\">id      name    author_id</span><br><span class=\"line\">1       learn java      1</span><br><span class=\"line\">2       learn python    1</span><br><span class=\"line\">3       learn c++       2</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'姓名'</span>, max_length=<span class=\"number\">50</span>)</span><br><span class=\"line\">    age = models.IntegerField(verbose_name=<span class=\"string\">'年龄'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'书名'</span>, max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=<span class=\"string\">'作者'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>执行语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(book__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.book_set.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>假如把类<code>Book</code>改成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Book(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&apos;书名&apos;, max_length=100)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=&apos;作者&apos;, related_name=&apos;bs&apos;, related_query_name=&apos;b&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>那么上面查询代码就应该写成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(b__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.bs.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果<code>book</code>表里有两个字段都外键关联<code>author</code>表，这时<code>related_name</code>就非常有用了。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><code>data</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select * from author;</span><br><span class=\"line\">id      name    age</span><br><span class=\"line\">1       jim     12</span><br><span class=\"line\">2       tom     11</span><br><span class=\"line\">sqlite&gt; select * from book;</span><br><span class=\"line\">id      name    author_id</span><br><span class=\"line\">1       learn java      1</span><br><span class=\"line\">2       learn python    1</span><br><span class=\"line\">3       learn c++       2</span><br></pre></td></tr></table></figure></p>","more":"<p><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'姓名'</span>, max_length=<span class=\"number\">50</span>)</span><br><span class=\"line\">    age = models.IntegerField(verbose_name=<span class=\"string\">'年龄'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'书名'</span>, max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=<span class=\"string\">'作者'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>执行语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(book__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.book_set.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>假如把类<code>Book</code>改成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Book(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&apos;书名&apos;, max_length=100)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=&apos;作者&apos;, related_name=&apos;bs&apos;, related_query_name=&apos;b&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>那么上面查询代码就应该写成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(b__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.bs.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果<code>book</code>表里有两个字段都外键关联<code>author</code>表，这时<code>related_name</code>就非常有用了。</p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:41 GMT+0800 (China Standard Time)","title":"Django字段选项related_name和related_query_name","path":"2015/10/20/django字段选项related-name和related-query-name/","eyeCatchImage":null,"excerpt":"<p><code>data</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select * from author;</span><br><span class=\"line\">id      name    age</span><br><span class=\"line\">1       jim     12</span><br><span class=\"line\">2       tom     11</span><br><span class=\"line\">sqlite&gt; select * from book;</span><br><span class=\"line\">id      name    author_id</span><br><span class=\"line\">1       learn java      1</span><br><span class=\"line\">2       learn python    1</span><br><span class=\"line\">3       learn c++       2</span><br></pre></td></tr></table></figure></p>","date":"2015-10-20T14:22:06.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","Python"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1409},{"title":"多说评论UA显示测试","comments":1,"date":"2015-11-15T09:45:12.000Z","_content":"<br/>\n<!--more-->\n多说评论UA显示测试\n","source":"_posts/duoshuo-comments-ua.md","raw":"title: 多说评论UA显示测试\ncomments: true\ndate: 2015-11-15 17:45:12\ncategories:\ntags:\n---\n<br/>\n<!--more-->\n多说评论UA显示测试\n","slug":"duoshuo-comments-ua","published":1,"updated":"2016-12-08T15:29:44.000Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yjj000sssyhzw2q34cy","content":"<p><br><br><a id=\"more\"></a><br>多说评论UA显示测试</p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"<br>多说评论UA显示测试</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Dec 08 2016 23:29:44 GMT+0800 (China Standard Time)","title":"多说评论UA显示测试","path":"2015/11/15/duoshuo-comments-ua/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2015-11-15T09:45:12.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":10},{"title":"Git常用命令别名设置","comments":1,"date":"2019-06-28T09:17:06.000Z","_content":"如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置\n\n<!--more-->\ngit别名设置\n\n```bash\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.cp cherry-pick\ngit config --global alias.unstage 'reset HEAD'\ngit config --global alias.fr '!f() { git fetch && git rebase $@; }; f';\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"\n```\n\n删除别名\n\n```sh\ngit config --global --unset alias.xxx\n```\n\n\n\ngit lg命令效果图\n![git lg命令效果图](/media/git-lg效果图.png)","source":"_posts/git-alias.md","raw":"---\ntitle: Git常用命令别名设置\ncomments: true\ncategories: [程序猿]\ntags: [Git, 教程]\ndate: 2019-06-28 17:17:06\n---\n如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置\n\n<!--more-->\ngit别名设置\n\n```bash\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.cp cherry-pick\ngit config --global alias.unstage 'reset HEAD'\ngit config --global alias.fr '!f() { git fetch && git rebase $@; }; f';\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"\n```\n\n删除别名\n\n```sh\ngit config --global --unset alias.xxx\n```\n\n\n\ngit lg命令效果图\n![git lg命令效果图](/media/git-lg效果图.png)","slug":"git-alias","published":1,"updated":"2020-01-17T07:56:26.918Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yjl000tssyh3djx2imi","content":"<p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>\n<a id=\"more\"></a>\n<p>git别名设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\">git config --global alias.fr <span class=\"string\">'!f() &#123; git fetch &amp;&amp; git rebase $@; &#125;; f'</span>;</span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"</span></span><br></pre></td></tr></table></figure>\n<p>删除别名</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> alias.xxx</span><br></pre></td></tr></table></figure>\n<p>git lg命令效果图<br><img alt=\"git lg命令效果图\" data-src=\"/media/git-lg效果图.png\"></p>\n","site":{"data":{}},"excerpt":"<p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>","more":"<p>git别名设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\">git config --global alias.fr <span class=\"string\">'!f() &#123; git fetch &amp;&amp; git rebase $@; &#125;; f'</span>;</span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"</span></span><br></pre></td></tr></table></figure>\n<p>删除别名</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> alias.xxx</span><br></pre></td></tr></table></figure>\n<p>git lg命令效果图<br><img src=\"/media/git-lg效果图.png\" alt=\"git lg命令效果图\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:26 GMT+0800 (China Standard Time)","title":"Git常用命令别名设置","path":"2019/06/28/git-alias/","eyeCatchImage":null,"excerpt":"<p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>","date":"2019-06-28T09:17:06.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["教程","Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":608},{"title":"Git patch的简单运用","date":"2015-10-15T12:49:40.000Z","_content":"\n## 生成PATCH\n\n往前n个提前内容的patch\n```\ngit format-patch -n\n```\n\n某个commit（含）的及之前的n-1次提交的patch\n```\ngit format-patch -n SHA\n```\n<!--more-->\n某个commit的patch\n```\ngit format-patch -1 SHA\n```\n\n当前分支所有超前master提交的patch\n```\ngit format-patch -M master\n```\n\n两个commit之间的所有patch（不包含较早SHA1提交的内容）\n```\ngit format-patch SHA1...SHA1\n```\n\n某个commit之后的所有patch\n```\ngit format-patch -s SHA\n```\n\n## 应用PATCH\n检查patch\n```\ngit apply --stat xxx.patch\n```\n\n检查能否应用成功\n```\ngit apply --check xxx.patch\n```\n\n打补丁\n```\ngit am -s xxx.patch\n```\n\n如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题\n```\n# 把没有冲突的文件先合并了，剩下有冲突的作了标记\ngit apply PATCH --reject\n# 这里手动解决冲突\n# 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index\ngit add FIXED_FILES\ngit am --resolved\n```\n\n## 参考\nhttp://blog.csdn.net/daydring/article/details/42676987\n","source":"_posts/git-patch的简单运用.md","raw":"title: Git patch的简单运用\ndate: 2015-10-15 20:49:40\ncategories: [程序猿]\ntags: [Git]\n---\n\n## 生成PATCH\n\n往前n个提前内容的patch\n```\ngit format-patch -n\n```\n\n某个commit（含）的及之前的n-1次提交的patch\n```\ngit format-patch -n SHA\n```\n<!--more-->\n某个commit的patch\n```\ngit format-patch -1 SHA\n```\n\n当前分支所有超前master提交的patch\n```\ngit format-patch -M master\n```\n\n两个commit之间的所有patch（不包含较早SHA1提交的内容）\n```\ngit format-patch SHA1...SHA1\n```\n\n某个commit之后的所有patch\n```\ngit format-patch -s SHA\n```\n\n## 应用PATCH\n检查patch\n```\ngit apply --stat xxx.patch\n```\n\n检查能否应用成功\n```\ngit apply --check xxx.patch\n```\n\n打补丁\n```\ngit am -s xxx.patch\n```\n\n如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题\n```\n# 把没有冲突的文件先合并了，剩下有冲突的作了标记\ngit apply PATCH --reject\n# 这里手动解决冲突\n# 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index\ngit add FIXED_FILES\ngit am --resolved\n```\n\n## 参考\nhttp://blog.csdn.net/daydring/article/details/42676987\n","slug":"git-patch的简单运用","published":1,"updated":"2020-01-17T07:56:19.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yjt000ussyha0dxluye","content":"<h2 id=\"生成PATCH\"><a href=\"#生成PATCH\" class=\"headerlink\" title=\"生成PATCH\"></a>生成PATCH</h2><p>往前n个提前内容的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n</span><br></pre></td></tr></table></figure></p>\n<p>某个commit（含）的及之前的n-1次提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n SHA</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>某个commit的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -1 SHA</span><br></pre></td></tr></table></figure></p>\n<p>当前分支所有超前master提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -M master</span><br></pre></td></tr></table></figure></p>\n<p>两个commit之间的所有patch（不包含较早SHA1提交的内容）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch SHA1...SHA1</span><br></pre></td></tr></table></figure></p>\n<p>某个commit之后的所有patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -s SHA</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"应用PATCH\"><a href=\"#应用PATCH\" class=\"headerlink\" title=\"应用PATCH\"></a>应用PATCH</h2><p>检查patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --stat xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>检查能否应用成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --check xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>打补丁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git am -s xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 把没有冲突的文件先合并了，剩下有冲突的作了标记</span><br><span class=\"line\">git apply PATCH --reject</span><br><span class=\"line\"># 这里手动解决冲突</span><br><span class=\"line\"># 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index</span><br><span class=\"line\">git add FIXED_FILES</span><br><span class=\"line\">git am --resolved</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://blog.csdn.net/daydring/article/details/42676987\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/daydring/article/details/42676987</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"生成PATCH\"><a href=\"#生成PATCH\" class=\"headerlink\" title=\"生成PATCH\"></a>生成PATCH</h2><p>往前n个提前内容的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n</span><br></pre></td></tr></table></figure></p>\n<p>某个commit（含）的及之前的n-1次提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n SHA</span><br></pre></td></tr></table></figure></p>","more":"<p>某个commit的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -1 SHA</span><br></pre></td></tr></table></figure></p>\n<p>当前分支所有超前master提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -M master</span><br></pre></td></tr></table></figure></p>\n<p>两个commit之间的所有patch（不包含较早SHA1提交的内容）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch SHA1...SHA1</span><br></pre></td></tr></table></figure></p>\n<p>某个commit之后的所有patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -s SHA</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"应用PATCH\"><a href=\"#应用PATCH\" class=\"headerlink\" title=\"应用PATCH\"></a>应用PATCH</h2><p>检查patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --stat xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>检查能否应用成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --check xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>打补丁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git am -s xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 把没有冲突的文件先合并了，剩下有冲突的作了标记</span><br><span class=\"line\">git apply PATCH --reject</span><br><span class=\"line\"># 这里手动解决冲突</span><br><span class=\"line\"># 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index</span><br><span class=\"line\">git add FIXED_FILES</span><br><span class=\"line\">git am --resolved</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://blog.csdn.net/daydring/article/details/42676987\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/daydring/article/details/42676987</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:19 GMT+0800 (China Standard Time)","title":"Git patch的简单运用","path":"2015/10/15/git-patch的简单运用/","eyeCatchImage":null,"excerpt":"<h2 id=\"生成PATCH\"><a href=\"#生成PATCH\" class=\"headerlink\" title=\"生成PATCH\"></a>生成PATCH</h2><p>往前n个提前内容的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n</span><br></pre></td></tr></table></figure></p>\n<p>某个commit（含）的及之前的n-1次提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n SHA</span><br></pre></td></tr></table></figure></p>","date":"2015-10-15T12:49:40.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":617},{"title":"Git后悔药","comments":1,"toc":true,"date":"2019-07-25T10:33:09.000Z","_content":"使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。\n\n<!--more-->\n\n```sequence\ntitle: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push\n```\n\n### 差异（diff）\n\n工作区vs暂存区: `git diff`\n\n暂存区vs本地仓库: `git diff —cached`\n\n本地仓库vs远程仓库: `git diff <分支名> origin/<分支名>`\n\n\n\n### 撤消（reset）\n\n撤消工作区修改: `git reset —hard`\n\n撤消(1)`git add`: `git reset && git checkout .`或`git reset —hard`(会还原所有修改)\n\n撤消(2) `git commit`: `git reset --hard origin/master`(使用远端的master分支恢复到本地)\n\n撤消(3) `git push`: `git reset --hard HEAD^ && git push -f`(先在本地回到上一个版本，然后强推到远端)","source":"_posts/git-reset.md","raw":"---\ntitle: Git后悔药\ncomments: true\ntags: [Git,reset,恢复,后悔]\ncategories: [程序猿]\ntoc: true\ndate: 2019-07-25 18:33:09\n---\n使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。\n\n<!--more-->\n\n```sequence\ntitle: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push\n```\n\n### 差异（diff）\n\n工作区vs暂存区: `git diff`\n\n暂存区vs本地仓库: `git diff —cached`\n\n本地仓库vs远程仓库: `git diff <分支名> origin/<分支名>`\n\n\n\n### 撤消（reset）\n\n撤消工作区修改: `git reset —hard`\n\n撤消(1)`git add`: `git reset && git checkout .`或`git reset —hard`(会还原所有修改)\n\n撤消(2) `git commit`: `git reset --hard origin/master`(使用远端的master分支恢复到本地)\n\n撤消(3) `git push`: `git reset --hard HEAD^ && git push -f`(先在本地回到上一个版本，然后强推到远端)","slug":"git-reset","published":1,"updated":"2020-01-19T07:41:07.687Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yju000vssyhws6mqzxr","content":"<p>使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。</p>\n<a id=\"more\"></a>\n<div id=\"sequence-0\"></div>\n\n<h3 id=\"差异（diff）\"><a href=\"#差异（diff）\" class=\"headerlink\" title=\"差异（diff）\"></a>差异（diff）</h3><p>工作区vs暂存区: <code>git diff</code></p>\n<p>暂存区vs本地仓库: <code>git diff —cached</code></p>\n<p>本地仓库vs远程仓库: <code>git diff &lt;分支名&gt; origin/&lt;分支名&gt;</code></p>\n<h3 id=\"撤消（reset）\"><a href=\"#撤消（reset）\" class=\"headerlink\" title=\"撤消（reset）\"></a>撤消（reset）</h3><p>撤消工作区修改: <code>git reset —hard</code></p>\n<p>撤消(1)<code>git add</code>: <code>git reset &amp;&amp; git checkout .</code>或<code>git reset —hard</code>(会还原所有修改)</p>\n<p>撤消(2) <code>git commit</code>: <code>git reset --hard origin/master</code>(使用远端的master分支恢复到本地)</p>\n<p>撤消(3) <code>git push</code>: <code>git reset --hard HEAD^ &amp;&amp; git push -f</code>(先在本地回到上一个版本，然后强推到远端)<script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">title: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>\n","site":{"data":{}},"excerpt":"<p>使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。</p>","more":"<div id=\"sequence-0\"></div>\n\n<h3 id=\"差异（diff）\"><a href=\"#差异（diff）\" class=\"headerlink\" title=\"差异（diff）\"></a>差异（diff）</h3><p>工作区vs暂存区: <code>git diff</code></p>\n<p>暂存区vs本地仓库: <code>git diff —cached</code></p>\n<p>本地仓库vs远程仓库: <code>git diff &lt;分支名&gt; origin/&lt;分支名&gt;</code></p>\n<h3 id=\"撤消（reset）\"><a href=\"#撤消（reset）\" class=\"headerlink\" title=\"撤消（reset）\"></a>撤消（reset）</h3><p>撤消工作区修改: <code>git reset —hard</code></p>\n<p>撤消(1)<code>git add</code>: <code>git reset &amp;&amp; git checkout .</code>或<code>git reset —hard</code>(会还原所有修改)</p>\n<p>撤消(2) <code>git commit</code>: <code>git reset --hard origin/master</code>(使用远端的master分支恢复到本地)</p>\n<p>撤消(3) <code>git push</code>: <code>git reset --hard HEAD^ &amp;&amp; git push -f</code>(先在本地回到上一个版本，然后强推到远端)<script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">title: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Jan 19 2020 15:41:07 GMT+0800 (China Standard Time)","title":"Git后悔药","path":"2019/07/25/git-reset/","eyeCatchImage":null,"excerpt":"<p>使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。</p>","date":"2019-07-25T10:33:09.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Git","reset","恢复","后悔"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":812},{"title":"Git stash的简单运用","comments":1,"date":"2015-10-20T14:16:18.000Z","_content":"\n当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用`git stash`命令。\n<!--more-->\n`git stash`命令可将工作区的改动存储git栈，运行`git stash`之后，可以再运行`git status -s`验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用`git stash pop`可以从Git栈中读取最近一次保存的内容，恢复到工作区。\n\n```\ngit stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\ngit stash save \"message\": 备份当前的工作区的内容，并添加备注信息\ngit stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\ngit stash pop stash@{0}: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@{0}为最新）\ngit stash apply stash@{0}: 同git stash pop，但不会删除对应的记录\ngit stash drop: 删除最新的一个备份\ngit stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。\n```\n\n## 参考\nhttp://www.tuicool.com/articles/rUBNBvI\n及`git stash --help`\n\n\n","source":"_posts/git-stash的简单运用.md","raw":"title: Git stash的简单运用\ncomments: true\ndate: 2015-10-20 22:16:18\ncategories: [程序猿]\ntags: [Git]\n---\n\n当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用`git stash`命令。\n<!--more-->\n`git stash`命令可将工作区的改动存储git栈，运行`git stash`之后，可以再运行`git status -s`验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用`git stash pop`可以从Git栈中读取最近一次保存的内容，恢复到工作区。\n\n```\ngit stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\ngit stash save \"message\": 备份当前的工作区的内容，并添加备注信息\ngit stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\ngit stash pop stash@{0}: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@{0}为最新）\ngit stash apply stash@{0}: 同git stash pop，但不会删除对应的记录\ngit stash drop: 删除最新的一个备份\ngit stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。\n```\n\n## 参考\nhttp://www.tuicool.com/articles/rUBNBvI\n及`git stash --help`\n\n\n","slug":"git-stash的简单运用","published":1,"updated":"2020-01-17T07:56:06.503Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yjw000wssyh2dyl4kib","content":"<p>当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用<code>git stash</code>命令。<br><a id=\"more\"></a><br><code>git stash</code>命令可将工作区的改动存储git栈，运行<code>git stash</code>之后，可以再运行<code>git status -s</code>验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用<code>git stash pop</code>可以从Git栈中读取最近一次保存的内容，恢复到工作区。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</span><br><span class=\"line\">git stash save &quot;message&quot;: 备份当前的工作区的内容，并添加备注信息</span><br><span class=\"line\">git stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</span><br><span class=\"line\">git stash pop stash@&#123;0&#125;: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@&#123;0&#125;为最新）</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;: 同git stash pop，但不会删除对应的记录</span><br><span class=\"line\">git stash drop: 删除最新的一个备份</span><br><span class=\"line\">git stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/rUBNBvI</a><br>及<code>git stash --help</code></p>\n","site":{"data":{}},"excerpt":"<p>当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用<code>git stash</code>命令。<br>","more":"<br><code>git stash</code>命令可将工作区的改动存储git栈，运行<code>git stash</code>之后，可以再运行<code>git status -s</code>验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用<code>git stash pop</code>可以从Git栈中读取最近一次保存的内容，恢复到工作区。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</span><br><span class=\"line\">git stash save &quot;message&quot;: 备份当前的工作区的内容，并添加备注信息</span><br><span class=\"line\">git stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</span><br><span class=\"line\">git stash pop stash@&#123;0&#125;: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@&#123;0&#125;为最新）</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;: 同git stash pop，但不会删除对应的记录</span><br><span class=\"line\">git stash drop: 删除最新的一个备份</span><br><span class=\"line\">git stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/rUBNBvI</a><br>及<code>git stash --help</code></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:06 GMT+0800 (China Standard Time)","title":"Git stash的简单运用","path":"2015/10/20/git-stash的简单运用/","eyeCatchImage":null,"excerpt":"<p>当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用<code>git stash</code>命令。<br>","date":"2015-10-20T14:16:18.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":778},{"title":"Git常用命令","date":"2015-09-11T12:05:13.000Z","_content":"![Git工作流图示](/media/Git工作流图示.jpg)\n\n之前写过一篇[Git命令使用指南](/2015/01/16/Git命令使用指南/)，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。\n<!--more-->\n\n## 列出分支\n```\n# 列出本地分支\ngit branch\n或\ngit branch -v\n\n# 列出本地和远程所有分支\ngit branch -a\n或\ngit branch -va\n```\n\n## 删除分支\n```\n# 删除本地分支\ngit branck -D <branch>\n\n# 删除远程分支，注意冒号前有空格\ngit push origin :<分支名>\n# 等价于\ngit push origin --delete <branch>\n```\n\n## 推送分支\n```\n# 推送当前分支到默认remote上，remote上没有对应分支则自动创建\ngit push\n\n# 推送当前分支到指定remote，remote上没有对应分支则自动创建\ngit push <remote>\n\n# 推送到指定分支到remote的指定分支上\ngit push <remote> <remote_branch>:<loclal_branch>\n```\n\n## 拉取远程分支到本地\n```\ngit checkout -b <branch> <remote>/<branch>\n```\n或\n```\ngit checkout --track <remote>/<branch>\n```\n\n## 撤消提交（未`push`情况下）\n```\ngit reset --mixed <SHA1> # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略\ngit reset --soft <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index不变\ngit reset --hard <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回\n```\n\n## 查看`commit`记录\n```\ngit log --oneline -n # 单行显示最后n个commit的记录\n```\n\n## 本地分支和远程分支做关联\n```\ngit branch --set-upstream-to=<remote>/<remote_branch> <loclal_branch>\n```\n\n## 推送本地当前新分支到远程\n```\ngit push -u origin <branch_name>\n```\n\n## 查看日志\n```\n# 当前分支日志\ngit log\n# 所有本地分支日志\ngit log --all\n# 指定本地分支日志\ngit log <branch_name>\n# 指定远程分支日志\ngit log origin/<branch_name>\n# 所有远程分支日志\ngit log --all origin\n```","source":"_posts/git常用命令.md","raw":"title: Git常用命令\ndate: 2015-09-11 20:05:13\ncategories: [程序猿]\ntags: [Git]\n---\n![Git工作流图示](/media/Git工作流图示.jpg)\n\n之前写过一篇[Git命令使用指南](/2015/01/16/Git命令使用指南/)，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。\n<!--more-->\n\n## 列出分支\n```\n# 列出本地分支\ngit branch\n或\ngit branch -v\n\n# 列出本地和远程所有分支\ngit branch -a\n或\ngit branch -va\n```\n\n## 删除分支\n```\n# 删除本地分支\ngit branck -D <branch>\n\n# 删除远程分支，注意冒号前有空格\ngit push origin :<分支名>\n# 等价于\ngit push origin --delete <branch>\n```\n\n## 推送分支\n```\n# 推送当前分支到默认remote上，remote上没有对应分支则自动创建\ngit push\n\n# 推送当前分支到指定remote，remote上没有对应分支则自动创建\ngit push <remote>\n\n# 推送到指定分支到remote的指定分支上\ngit push <remote> <remote_branch>:<loclal_branch>\n```\n\n## 拉取远程分支到本地\n```\ngit checkout -b <branch> <remote>/<branch>\n```\n或\n```\ngit checkout --track <remote>/<branch>\n```\n\n## 撤消提交（未`push`情况下）\n```\ngit reset --mixed <SHA1> # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略\ngit reset --soft <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index不变\ngit reset --hard <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回\n```\n\n## 查看`commit`记录\n```\ngit log --oneline -n # 单行显示最后n个commit的记录\n```\n\n## 本地分支和远程分支做关联\n```\ngit branch --set-upstream-to=<remote>/<remote_branch> <loclal_branch>\n```\n\n## 推送本地当前新分支到远程\n```\ngit push -u origin <branch_name>\n```\n\n## 查看日志\n```\n# 当前分支日志\ngit log\n# 所有本地分支日志\ngit log --all\n# 指定本地分支日志\ngit log <branch_name>\n# 指定远程分支日志\ngit log origin/<branch_name>\n# 所有远程分支日志\ngit log --all origin\n```","slug":"git常用命令","published":1,"updated":"2020-01-17T07:56:03.339Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yjy000xssyh84cjbza6","content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>之前写过一篇<a href=\"/2015/01/16/Git命令使用指南/\">Git命令使用指南</a>，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。<br><a id=\"more\"></a></p>\n<h2 id=\"列出分支\"><a href=\"#列出分支\" class=\"headerlink\" title=\"列出分支\"></a>列出分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出本地和远程所有分支</span><br><span class=\"line\">git branch -a</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -va</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branck -D &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支，注意冒号前有空格</span><br><span class=\"line\">git push origin :&lt;分支名&gt;</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">git push origin --delete &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 推送当前分支到默认remote上，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送当前分支到指定remote，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push &lt;remote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到指定分支到remote的指定分支上</span><br><span class=\"line\">git push &lt;remote&gt; &lt;remote_branch&gt;:&lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拉取远程分支到本地\"><a href=\"#拉取远程分支到本地\" class=\"headerlink\" title=\"拉取远程分支到本地\"></a>拉取远程分支到本地</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤消提交（未push情况下）\"><a href=\"#撤消提交（未push情况下）\" class=\"headerlink\" title=\"撤消提交（未push情况下）\"></a>撤消提交（未<code>push</code>情况下）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --mixed &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略</span><br><span class=\"line\">git reset --soft &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index不变</span><br><span class=\"line\">git reset --hard &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看commit记录\"><a href=\"#查看commit记录\" class=\"headerlink\" title=\"查看commit记录\"></a>查看<code>commit</code>记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline -n # 单行显示最后n个commit的记录</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地分支和远程分支做关联\"><a href=\"#本地分支和远程分支做关联\" class=\"headerlink\" title=\"本地分支和远程分支做关联\"></a>本地分支和远程分支做关联</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送本地当前新分支到远程\"><a href=\"#推送本地当前新分支到远程\" class=\"headerlink\" title=\"推送本地当前新分支到远程\"></a>推送本地当前新分支到远程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当前分支日志</span><br><span class=\"line\">git log</span><br><span class=\"line\"># 所有本地分支日志</span><br><span class=\"line\">git log --all</span><br><span class=\"line\"># 指定本地分支日志</span><br><span class=\"line\">git log &lt;branch_name&gt;</span><br><span class=\"line\"># 指定远程分支日志</span><br><span class=\"line\">git log origin/&lt;branch_name&gt;</span><br><span class=\"line\"># 所有远程分支日志</span><br><span class=\"line\">git log --all origin</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><img src=\"/media/Git工作流图示.jpg\" alt=\"Git工作流图示\"></p>\n<p>之前写过一篇<a href=\"/2015/01/16/Git命令使用指南/\">Git命令使用指南</a>，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。<br>","more":"</p>\n<h2 id=\"列出分支\"><a href=\"#列出分支\" class=\"headerlink\" title=\"列出分支\"></a>列出分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出本地和远程所有分支</span><br><span class=\"line\">git branch -a</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -va</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branck -D &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支，注意冒号前有空格</span><br><span class=\"line\">git push origin :&lt;分支名&gt;</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">git push origin --delete &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 推送当前分支到默认remote上，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送当前分支到指定remote，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push &lt;remote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到指定分支到remote的指定分支上</span><br><span class=\"line\">git push &lt;remote&gt; &lt;remote_branch&gt;:&lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拉取远程分支到本地\"><a href=\"#拉取远程分支到本地\" class=\"headerlink\" title=\"拉取远程分支到本地\"></a>拉取远程分支到本地</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤消提交（未push情况下）\"><a href=\"#撤消提交（未push情况下）\" class=\"headerlink\" title=\"撤消提交（未push情况下）\"></a>撤消提交（未<code>push</code>情况下）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --mixed &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略</span><br><span class=\"line\">git reset --soft &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index不变</span><br><span class=\"line\">git reset --hard &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看commit记录\"><a href=\"#查看commit记录\" class=\"headerlink\" title=\"查看commit记录\"></a>查看<code>commit</code>记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline -n # 单行显示最后n个commit的记录</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地分支和远程分支做关联\"><a href=\"#本地分支和远程分支做关联\" class=\"headerlink\" title=\"本地分支和远程分支做关联\"></a>本地分支和远程分支做关联</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送本地当前新分支到远程\"><a href=\"#推送本地当前新分支到远程\" class=\"headerlink\" title=\"推送本地当前新分支到远程\"></a>推送本地当前新分支到远程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当前分支日志</span><br><span class=\"line\">git log</span><br><span class=\"line\"># 所有本地分支日志</span><br><span class=\"line\">git log --all</span><br><span class=\"line\"># 指定本地分支日志</span><br><span class=\"line\">git log &lt;branch_name&gt;</span><br><span class=\"line\"># 指定远程分支日志</span><br><span class=\"line\">git log origin/&lt;branch_name&gt;</span><br><span class=\"line\"># 所有远程分支日志</span><br><span class=\"line\">git log --all origin</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:03 GMT+0800 (China Standard Time)","title":"Git常用命令","path":"2015/09/11/git常用命令/","eyeCatchImage":null,"excerpt":"<p><img src=\"/media/Git工作流图示.jpg\" alt=\"Git工作流图示\"></p>\n<p>之前写过一篇<a href=\"/2015/01/16/Git命令使用指南/\">Git命令使用指南</a>，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。<br>","date":"2015-09-11T12:05:13.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Git"],"internalLinks":["2015/01/16/Git命令使用指南/"],"keywords":[],"keywordsLength":0},"length":1227},{"title":"Hello World","date":"2014-09-15T06:04:40.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2014-09-15 14:04:40\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","published":1,"updated":"2014-11-09T13:01:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yjz000yssyh1bvl5wli","content":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<a id=\"more\"></a>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","more":"<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Sun Nov 09 2014 21:01:40 GMT+0800 (China Standard Time)","title":"Hello World","path":"2014/09/15/hello-world/","eyeCatchImage":null,"excerpt":"<p>Welcome to <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>","date":"2014-09-15T06:04:40.000Z","pv":0,"totalPV":0,"categories":"","tags":[],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":421},{"title":"JS笔记","date":"2019-04-24T08:35:13.000Z","_content":"js中要用变量作为key的话使用方括号括住\n例：`this.searchKeyword`\n```javascript\nthis.$http({\n    url: this.searchUrl,\n    method: this.remoteRequestMethod,\n    params: Object.assign({}, this.searchParams, this.pager),\n    data: Object.assign({ [this.searchKeyword]: query }, this.searchBody, this.pager)\n    })\n```\n<!--more-->\n全文完🙈","source":"_posts/js笔记.md","raw":"title: JS笔记\ndate: 2019-04-24 16:35:13\ncategories: [程序猿]\ntags: [js]\n---\njs中要用变量作为key的话使用方括号括住\n例：`this.searchKeyword`\n```javascript\nthis.$http({\n    url: this.searchUrl,\n    method: this.remoteRequestMethod,\n    params: Object.assign({}, this.searchParams, this.pager),\n    data: Object.assign({ [this.searchKeyword]: query }, this.searchBody, this.pager)\n    })\n```\n<!--more-->\n全文完🙈","slug":"js笔记","published":1,"updated":"2020-01-17T07:55:25.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yk2000zssyh3ss8c8q7","content":"<p>js中要用变量作为key的话使用方括号括住<br>例：<code>this.searchKeyword</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http(&#123;</span><br><span class=\"line\">    url: <span class=\"keyword\">this</span>.searchUrl,</span><br><span class=\"line\">    method: <span class=\"keyword\">this</span>.remoteRequestMethod,</span><br><span class=\"line\">    params: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.pager),</span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>.assign(&#123; [<span class=\"keyword\">this</span>.searchKeyword]: query &#125;, <span class=\"keyword\">this</span>.searchBody, <span class=\"keyword\">this</span>.pager)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>全文完🙈</p>\n","site":{"data":{}},"excerpt":"<p>js中要用变量作为key的话使用方括号括住<br>例：<code>this.searchKeyword</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http(&#123;</span><br><span class=\"line\">    url: <span class=\"keyword\">this</span>.searchUrl,</span><br><span class=\"line\">    method: <span class=\"keyword\">this</span>.remoteRequestMethod,</span><br><span class=\"line\">    params: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.pager),</span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>.assign(&#123; [<span class=\"keyword\">this</span>.searchKeyword]: query &#125;, <span class=\"keyword\">this</span>.searchBody, <span class=\"keyword\">this</span>.pager)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>","more":"<p>全文完🙈</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:55:25 GMT+0800 (China Standard Time)","title":"JS笔记","path":"2019/04/24/js笔记/","eyeCatchImage":null,"excerpt":"<p>js中要用变量作为key的话使用方括号括住<br>例：<code>this.searchKeyword</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http(&#123;</span><br><span class=\"line\">    url: <span class=\"keyword\">this</span>.searchUrl,</span><br><span class=\"line\">    method: <span class=\"keyword\">this</span>.remoteRequestMethod,</span><br><span class=\"line\">    params: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.pager),</span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>.assign(&#123; [<span class=\"keyword\">this</span>.searchKeyword]: query &#125;, <span class=\"keyword\">this</span>.searchBody, <span class=\"keyword\">this</span>.pager)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>","date":"2019-04-24T08:35:13.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["js"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":307},{"title":"MacOS远程连接Windows","date":"2017-08-08T01:40:28.000Z","_content":"<br />\n<!--more-->\nMacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。\n\n1. 开始-运行-gpedit.msc，进入组策略编辑器。\n2. 在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。\n    - 远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。\n    - 要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。\n3. 关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。\n\n","source":"_posts/mac远程连接windows.md","raw":"---\ntitle: MacOS远程连接Windows\ndate: 2017-08-08 09:40:28\ntags: ['远程']\ncategories: [程序猿]\n---\n<br />\n<!--more-->\nMacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。\n\n1. 开始-运行-gpedit.msc，进入组策略编辑器。\n2. 在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。\n    - 远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。\n    - 要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。\n3. 关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。\n\n","slug":"mac远程连接windows","published":1,"updated":"2017-08-16T08:58:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ykb0010ssyhvqdg2kt2","content":"<p><br><br><a id=\"more\"></a><br>MacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。</p>\n<ol>\n<li>开始-运行-gpedit.msc，进入组策略编辑器。</li>\n<li>在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。<ul>\n<li>远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。</li>\n<li>要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。</li>\n</ul>\n</li>\n<li>关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"<br>MacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。</p>\n<ol>\n<li>开始-运行-gpedit.msc，进入组策略编辑器。</li>\n<li>在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。<ul>\n<li>远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。</li>\n<li>要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。</li>\n</ul>\n</li>\n<li>关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。</li>\n</ol>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Aug 16 2017 16:58:43 GMT+0800 (China Standard Time)","title":"MacOS远程连接Windows","path":"2017/08/08/mac远程连接windows/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2017-08-08T01:40:28.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["远程"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":244},{"title":"Material Design资源","date":"2015-10-15T12:19:42.000Z","_content":"![materialdesign-goals-landingimage_large_mdpi](/media/materialdesign-goals-landingimage_large_mdpi.png)\n\nMaterial Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。\n<!--more-->\n\n## 更新记录\n2015-10-15 初稿\n\n## 演示视频\n<iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=0 allowfullscreen></iframe>\n\n## Material Design 文档\n官方\n> http://www.google.com/design/spec/material-design/introduction.html\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://wiki.jikexueyuan.com/project/material-design/ \n> GitHub: https://github.com/1sters/material_design_zh_2\n> PDF: http://pan.baidu.com/s/1fr1gi \n\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://design.1sters.com/ （已关停）\n> GitHub: https://github.com/1sters/material_design_zh\n \nGoogle Material Design 正體中文版（官网翻译而来）\n> 阅读: https://www.gitbook.com/book/wcc723/google_design_translate/details\n> GitHub: https://github.com/Wcc723/google_design_translate\n> PDF: http://pan.baidu.com/s/1dD8X1Zj\n\nMaterial Design非官方中文指导手册\n\nPDF: http://pan.baidu.com/s/1mg3P45i\n\n## Android资源\n\n资源大合集\nhttps://github.com/lightSky/Awesome-MaterialDesign \n\n十大Material Design开源项目\nhttp://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\n\n## 图标\nMaterial icons guide\n> 主页: http://google.github.io/material-design-icons/\n> GitHub: https://github.com/google/material-design-icons\n\n## 网页框架\nAngular Material（控件最全，样式不错，交互动态效果多）\n> 主页: https://material.angularjs.org/\n> GitHub: https://material.angularjs.org/\n\nmaterial ui（控件较多，样式不错，交互动态效果多）\n> 主页: http://material-ui.com/\n> GitHub: https://github.com/callemall/material-ui\n\nbootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）\n> 主页: http://fezvrasta.github.io/bootstrap-material-design/\n> GitHub: http://fezvrasta.github.io/bootstrap-material-design/\n\nmuicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）\n> 主页: https://www.muicss.com/\n> GitHub: https://github.com/muicss/mui\n\nMaterializeCss（控件数量还行，样式较好，交互动态效果还行）\n> 主页: http://materializecss.com/\n> GitHub: https://github.com/Dogfalo/materialize\n\nbootswatch里的parper主题\n> 主页: http://bootswatch.com/paper/\n> GitHub: https://github.com/thomaspark/bootswatch\n\njQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）\n> 主页: http://store.ququplay.com/\n\n\n\n\n\n\n","source":"_posts/material-design资源.md","raw":"title: Material Design资源\ndate: 2015-10-15 20:19:42\ncategories: [程序猿]\ntags: [Android, Material Design, 网页框架]\n---\n![materialdesign-goals-landingimage_large_mdpi](/media/materialdesign-goals-landingimage_large_mdpi.png)\n\nMaterial Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。\n<!--more-->\n\n## 更新记录\n2015-10-15 初稿\n\n## 演示视频\n<iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=0 allowfullscreen></iframe>\n\n## Material Design 文档\n官方\n> http://www.google.com/design/spec/material-design/introduction.html\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://wiki.jikexueyuan.com/project/material-design/ \n> GitHub: https://github.com/1sters/material_design_zh_2\n> PDF: http://pan.baidu.com/s/1fr1gi \n\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://design.1sters.com/ （已关停）\n> GitHub: https://github.com/1sters/material_design_zh\n \nGoogle Material Design 正體中文版（官网翻译而来）\n> 阅读: https://www.gitbook.com/book/wcc723/google_design_translate/details\n> GitHub: https://github.com/Wcc723/google_design_translate\n> PDF: http://pan.baidu.com/s/1dD8X1Zj\n\nMaterial Design非官方中文指导手册\n\nPDF: http://pan.baidu.com/s/1mg3P45i\n\n## Android资源\n\n资源大合集\nhttps://github.com/lightSky/Awesome-MaterialDesign \n\n十大Material Design开源项目\nhttp://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\n\n## 图标\nMaterial icons guide\n> 主页: http://google.github.io/material-design-icons/\n> GitHub: https://github.com/google/material-design-icons\n\n## 网页框架\nAngular Material（控件最全，样式不错，交互动态效果多）\n> 主页: https://material.angularjs.org/\n> GitHub: https://material.angularjs.org/\n\nmaterial ui（控件较多，样式不错，交互动态效果多）\n> 主页: http://material-ui.com/\n> GitHub: https://github.com/callemall/material-ui\n\nbootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）\n> 主页: http://fezvrasta.github.io/bootstrap-material-design/\n> GitHub: http://fezvrasta.github.io/bootstrap-material-design/\n\nmuicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）\n> 主页: https://www.muicss.com/\n> GitHub: https://github.com/muicss/mui\n\nMaterializeCss（控件数量还行，样式较好，交互动态效果还行）\n> 主页: http://materializecss.com/\n> GitHub: https://github.com/Dogfalo/materialize\n\nbootswatch里的parper主题\n> 主页: http://bootswatch.com/paper/\n> GitHub: https://github.com/thomaspark/bootswatch\n\njQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）\n> 主页: http://store.ququplay.com/\n\n\n\n\n\n\n","slug":"material-design资源","published":1,"updated":"2020-01-17T07:55:01.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ykg0011ssyh5co5ohgi","content":"<p><img alt=\"materialdesign-goals-landingimage_large_mdpi\" data-src=\"/media/materialdesign-goals-landingimage_large_mdpi.png\"></p>\n<p>Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。<br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-10-15 初稿</p>\n<h2 id=\"演示视频\"><a href=\"#演示视频\" class=\"headerlink\" title=\"演示视频\"></a>演示视频</h2><iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"Material-Design-文档\"><a href=\"#Material-Design-文档\" class=\"headerlink\" title=\"Material Design 文档\"></a>Material Design 文档</h2><p>官方</p>\n<blockquote>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/design/spec/material-design/introduction.html</a></p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://wiki.jikexueyuan.com/project/material-design/\" target=\"_blank\" rel=\"noopener\">http://wiki.jikexueyuan.com/project/material-design/</a><br>GitHub: <a href=\"https://github.com/1sters/material_design_zh_2\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh_2</a><br>PDF: <a href=\"http://pan.baidu.com/s/1fr1gi\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1fr1gi</a> </p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://design.1sters.com/\" target=\"_blank\" rel=\"noopener\">http://design.1sters.com/</a> （已关停）<br>GitHub: <a href=\"https://github.com/1sters/material_design_zh\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh</a></p>\n</blockquote>\n<p>Google Material Design 正體中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"https://www.gitbook.com/book/wcc723/google_design_translate/details\" target=\"_blank\" rel=\"noopener\">https://www.gitbook.com/book/wcc723/google_design_translate/details</a><br>GitHub: <a href=\"https://github.com/Wcc723/google_design_translate\" target=\"_blank\" rel=\"noopener\">https://github.com/Wcc723/google_design_translate</a><br>PDF: <a href=\"http://pan.baidu.com/s/1dD8X1Zj\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1dD8X1Zj</a></p>\n</blockquote>\n<p>Material Design非官方中文指导手册</p>\n<p>PDF: <a href=\"http://pan.baidu.com/s/1mg3P45i\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mg3P45i</a></p>\n<h2 id=\"Android资源\"><a href=\"#Android资源\" class=\"headerlink\" title=\"Android资源\"></a>Android资源</h2><p>资源大合集<br><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\" target=\"_blank\" rel=\"noopener\">https://github.com/lightSky/Awesome-MaterialDesign</a> </p>\n<p>十大Material Design开源项目<br><a href=\"http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\" target=\"_blank\" rel=\"noopener\">http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1</a></p>\n<h2 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h2><p>Material icons guide</p>\n<blockquote>\n<p>主页: <a href=\"http://google.github.io/material-design-icons/\" target=\"_blank\" rel=\"noopener\">http://google.github.io/material-design-icons/</a><br>GitHub: <a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"noopener\">https://github.com/google/material-design-icons</a></p>\n</blockquote>\n<h2 id=\"网页框架\"><a href=\"#网页框架\" class=\"headerlink\" title=\"网页框架\"></a>网页框架</h2><p>Angular Material（控件最全，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a><br>GitHub: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a></p>\n</blockquote>\n<p>material ui（控件较多，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"http://material-ui.com/\" target=\"_blank\" rel=\"noopener\">http://material-ui.com/</a><br>GitHub: <a href=\"https://github.com/callemall/material-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/callemall/material-ui</a></p>\n</blockquote>\n<p>bootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）</p>\n<blockquote>\n<p>主页: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a><br>GitHub: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a></p>\n</blockquote>\n<p>muicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）</p>\n<blockquote>\n<p>主页: <a href=\"https://www.muicss.com/\" target=\"_blank\" rel=\"noopener\">https://www.muicss.com/</a><br>GitHub: <a href=\"https://github.com/muicss/mui\" target=\"_blank\" rel=\"noopener\">https://github.com/muicss/mui</a></p>\n</blockquote>\n<p>MaterializeCss（控件数量还行，样式较好，交互动态效果还行）</p>\n<blockquote>\n<p>主页: <a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">http://materializecss.com/</a><br>GitHub: <a href=\"https://github.com/Dogfalo/materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/Dogfalo/materialize</a></p>\n</blockquote>\n<p>bootswatch里的parper主题</p>\n<blockquote>\n<p>主页: <a href=\"http://bootswatch.com/paper/\" target=\"_blank\" rel=\"noopener\">http://bootswatch.com/paper/</a><br>GitHub: <a href=\"https://github.com/thomaspark/bootswatch\" target=\"_blank\" rel=\"noopener\">https://github.com/thomaspark/bootswatch</a></p>\n</blockquote>\n<p>jQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）</p>\n<blockquote>\n<p>主页: <a href=\"http://store.ququplay.com/\" target=\"_blank\" rel=\"noopener\">http://store.ququplay.com/</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/media/materialdesign-goals-landingimage_large_mdpi.png\" alt=\"materialdesign-goals-landingimage_large_mdpi\"></p>\n<p>Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。<br>","more":"</p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-10-15 初稿</p>\n<h2 id=\"演示视频\"><a href=\"#演示视频\" class=\"headerlink\" title=\"演示视频\"></a>演示视频</h2><iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=\"0\" allowfullscreen></iframe>\n\n<h2 id=\"Material-Design-文档\"><a href=\"#Material-Design-文档\" class=\"headerlink\" title=\"Material Design 文档\"></a>Material Design 文档</h2><p>官方</p>\n<blockquote>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/design/spec/material-design/introduction.html</a></p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://wiki.jikexueyuan.com/project/material-design/\" target=\"_blank\" rel=\"noopener\">http://wiki.jikexueyuan.com/project/material-design/</a><br>GitHub: <a href=\"https://github.com/1sters/material_design_zh_2\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh_2</a><br>PDF: <a href=\"http://pan.baidu.com/s/1fr1gi\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1fr1gi</a> </p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://design.1sters.com/\" target=\"_blank\" rel=\"noopener\">http://design.1sters.com/</a> （已关停）<br>GitHub: <a href=\"https://github.com/1sters/material_design_zh\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh</a></p>\n</blockquote>\n<p>Google Material Design 正體中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"https://www.gitbook.com/book/wcc723/google_design_translate/details\" target=\"_blank\" rel=\"noopener\">https://www.gitbook.com/book/wcc723/google_design_translate/details</a><br>GitHub: <a href=\"https://github.com/Wcc723/google_design_translate\" target=\"_blank\" rel=\"noopener\">https://github.com/Wcc723/google_design_translate</a><br>PDF: <a href=\"http://pan.baidu.com/s/1dD8X1Zj\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1dD8X1Zj</a></p>\n</blockquote>\n<p>Material Design非官方中文指导手册</p>\n<p>PDF: <a href=\"http://pan.baidu.com/s/1mg3P45i\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mg3P45i</a></p>\n<h2 id=\"Android资源\"><a href=\"#Android资源\" class=\"headerlink\" title=\"Android资源\"></a>Android资源</h2><p>资源大合集<br><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\" target=\"_blank\" rel=\"noopener\">https://github.com/lightSky/Awesome-MaterialDesign</a> </p>\n<p>十大Material Design开源项目<br><a href=\"http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\" target=\"_blank\" rel=\"noopener\">http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1</a></p>\n<h2 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h2><p>Material icons guide</p>\n<blockquote>\n<p>主页: <a href=\"http://google.github.io/material-design-icons/\" target=\"_blank\" rel=\"noopener\">http://google.github.io/material-design-icons/</a><br>GitHub: <a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"noopener\">https://github.com/google/material-design-icons</a></p>\n</blockquote>\n<h2 id=\"网页框架\"><a href=\"#网页框架\" class=\"headerlink\" title=\"网页框架\"></a>网页框架</h2><p>Angular Material（控件最全，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a><br>GitHub: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a></p>\n</blockquote>\n<p>material ui（控件较多，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"http://material-ui.com/\" target=\"_blank\" rel=\"noopener\">http://material-ui.com/</a><br>GitHub: <a href=\"https://github.com/callemall/material-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/callemall/material-ui</a></p>\n</blockquote>\n<p>bootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）</p>\n<blockquote>\n<p>主页: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a><br>GitHub: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a></p>\n</blockquote>\n<p>muicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）</p>\n<blockquote>\n<p>主页: <a href=\"https://www.muicss.com/\" target=\"_blank\" rel=\"noopener\">https://www.muicss.com/</a><br>GitHub: <a href=\"https://github.com/muicss/mui\" target=\"_blank\" rel=\"noopener\">https://github.com/muicss/mui</a></p>\n</blockquote>\n<p>MaterializeCss（控件数量还行，样式较好，交互动态效果还行）</p>\n<blockquote>\n<p>主页: <a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">http://materializecss.com/</a><br>GitHub: <a href=\"https://github.com/Dogfalo/materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/Dogfalo/materialize</a></p>\n</blockquote>\n<p>bootswatch里的parper主题</p>\n<blockquote>\n<p>主页: <a href=\"http://bootswatch.com/paper/\" target=\"_blank\" rel=\"noopener\">http://bootswatch.com/paper/</a><br>GitHub: <a href=\"https://github.com/thomaspark/bootswatch\" target=\"_blank\" rel=\"noopener\">https://github.com/thomaspark/bootswatch</a></p>\n</blockquote>\n<p>jQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）</p>\n<blockquote>\n<p>主页: <a href=\"http://store.ququplay.com/\" target=\"_blank\" rel=\"noopener\">http://store.ququplay.com/</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:55:01 GMT+0800 (China Standard Time)","title":"Material Design资源","path":"2015/10/15/material-design资源/","eyeCatchImage":null,"excerpt":"<p><img src=\"/media/materialdesign-goals-landingimage_large_mdpi.png\" alt=\"materialdesign-goals-landingimage_large_mdpi\"></p>\n<p>Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。<br>","date":"2015-10-15T12:19:42.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Android","Material Design","网页框架"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1795},{"title":"npm入门命令","comments":1,"date":"2016-07-06T15:46:37.000Z","sticky":null,"_content":"<br/>\n<!--more-->\n\n## 更新记录\n2016-07-06 初稿\n\n## 基础命令\n\n显示npm版号\n```\nnpm -v\n# 或\nnpm version\n```\n\n安装模块\n```\n# 带-g为全局安装\n# 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。\n# 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。\nnpm install <package> -g\n# 简写\nnpm i <package> -g\n```\n\n升级全局安装的指定模块\n```\nnpm update <package> -g\n```\n\n升级当前目录下的指定模块\n```\nnpm update <package>\n```\n\n升级当前目录下全部模块\n```\nnpm update\n```\n\n升级node自身\n```\n# 安装一个叫n的模块\nnpm install -g n\n# 升级到最新稳定版\nn stable\n# 升级到指定版本\nn v0.10.26\n```\n\n卸载移除指定模块\n```\nnpm uninstall <package>\n# 别名：remove, rm, r, un, unlink\n```\n\n显示已安装模块\n```\nnpm list\n```\n\n显示模块详细信息\n```\nnpm show <package>\n```\n\n查看全局包安装路径\n```\nnpm root -g\n```\n\n查看当前包安装路径\n```\nnpm root\n```\n\n查看npm配置\n```\nnpm config list\n```\n查看帮助\n```\nnpm help\n```\n\n查看相关命令的帮助文档\n```\nnpm help <command>\n```\n","source":"_posts/npm入门命令.md","raw":"title: npm入门命令\ncomments: true\ndate: 2016-07-06 23:46:37\ncategories: 程序猿\ntags: [npm, Nodejs]\nsticky:\n---\n<br/>\n<!--more-->\n\n## 更新记录\n2016-07-06 初稿\n\n## 基础命令\n\n显示npm版号\n```\nnpm -v\n# 或\nnpm version\n```\n\n安装模块\n```\n# 带-g为全局安装\n# 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。\n# 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。\nnpm install <package> -g\n# 简写\nnpm i <package> -g\n```\n\n升级全局安装的指定模块\n```\nnpm update <package> -g\n```\n\n升级当前目录下的指定模块\n```\nnpm update <package>\n```\n\n升级当前目录下全部模块\n```\nnpm update\n```\n\n升级node自身\n```\n# 安装一个叫n的模块\nnpm install -g n\n# 升级到最新稳定版\nn stable\n# 升级到指定版本\nn v0.10.26\n```\n\n卸载移除指定模块\n```\nnpm uninstall <package>\n# 别名：remove, rm, r, un, unlink\n```\n\n显示已安装模块\n```\nnpm list\n```\n\n显示模块详细信息\n```\nnpm show <package>\n```\n\n查看全局包安装路径\n```\nnpm root -g\n```\n\n查看当前包安装路径\n```\nnpm root\n```\n\n查看npm配置\n```\nnpm config list\n```\n查看帮助\n```\nnpm help\n```\n\n查看相关命令的帮助文档\n```\nnpm help <command>\n```\n","slug":"npm入门命令","published":1,"updated":"2020-01-17T07:54:42.950Z","layout":"post","photos":[],"link":"","_id":"ck8kk0ykh0012ssyhimhdgkow","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-07-06 初稿</p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>显示npm版号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"># 或</span><br><span class=\"line\">npm version</span><br></pre></td></tr></table></figure></p>\n<p>安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 带-g为全局安装</span><br><span class=\"line\"># 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。</span><br><span class=\"line\"># 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</span><br><span class=\"line\">npm install &lt;package&gt; -g</span><br><span class=\"line\"># 简写</span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级全局安装的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下全部模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>升级node自身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一个叫n的模块</span><br><span class=\"line\">npm install -g n</span><br><span class=\"line\"># 升级到最新稳定版</span><br><span class=\"line\">n stable</span><br><span class=\"line\"># 升级到指定版本</span><br><span class=\"line\">n v0.10.26</span><br></pre></td></tr></table></figure></p>\n<p>卸载移除指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall &lt;package&gt;</span><br><span class=\"line\"># 别名：remove, rm, r, un, unlink</span><br></pre></td></tr></table></figure></p>\n<p>显示已安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list</span><br></pre></td></tr></table></figure></p>\n<p>显示模块详细信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm show &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>查看全局包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure></p>\n<p>查看当前包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看npm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure></p>\n<p>查看帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help</span><br></pre></td></tr></table></figure></p>\n<p>查看相关命令的帮助文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &lt;command&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-07-06 初稿</p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>显示npm版号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"># 或</span><br><span class=\"line\">npm version</span><br></pre></td></tr></table></figure></p>\n<p>安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 带-g为全局安装</span><br><span class=\"line\"># 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。</span><br><span class=\"line\"># 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</span><br><span class=\"line\">npm install &lt;package&gt; -g</span><br><span class=\"line\"># 简写</span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级全局安装的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下全部模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>升级node自身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一个叫n的模块</span><br><span class=\"line\">npm install -g n</span><br><span class=\"line\"># 升级到最新稳定版</span><br><span class=\"line\">n stable</span><br><span class=\"line\"># 升级到指定版本</span><br><span class=\"line\">n v0.10.26</span><br></pre></td></tr></table></figure></p>\n<p>卸载移除指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall &lt;package&gt;</span><br><span class=\"line\"># 别名：remove, rm, r, un, unlink</span><br></pre></td></tr></table></figure></p>\n<p>显示已安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list</span><br></pre></td></tr></table></figure></p>\n<p>显示模块详细信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm show &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>查看全局包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure></p>\n<p>查看当前包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看npm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure></p>\n<p>查看帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help</span><br></pre></td></tr></table></figure></p>\n<p>查看相关命令的帮助文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &lt;command&gt;</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:54:42 GMT+0800 (China Standard Time)","title":"npm入门命令","path":"2016/07/06/npm入门命令/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-07-06T15:46:37.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["npm","Nodejs"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":626},{"title":"pip常用命令","date":"2015-01-01T15:38:56.000Z","_content":"## 列出已安装的包\n \n`pip freeze` or `pip list`\n \n<!--more-->\n \n### 导出requirements.txt\n \n`pip freeze > <目录>/requirements.txt`\n \n## 安装包\n \n### 在线安装\n \n`pip install <包名>` 或 `pip install -r requirements.txt`\n \n```\n# 安装1.9版本的django\npip install django==1.9\n# 安装版本号大于1.9的django，注意有引号\npip install \"django>1.9\"\npip install \"django>=1.9\"\npip install \"django<1.9\"\npip install \"django<=1.9\"\npip install \"django><1.9\"\n```\n \nrequirements.txt内容格式为：\n \n    APScheduler==2.1.2\n    Django==1.5.4\n    MySQL-Connector-Python==2.0.1\n    MySQL-python==1.2.3\n    PIL==1.1.7\n    South==1.0.2\n    django-grappelli==2.6.3\n    django-pagination==1.0.7\n \n### 安装本地安装包\n \n`pip install <目录>/<文件名>` 或 `pip install --use-wheel --no-index --find-links=wheelhouse/ <包名>`\n \n*<包名>前有空格*\n \n可简写为\n \n`pip install --no-index -f=<目录>/ <包名>`\n \n### 卸载包\n \n`pip uninstall <包名>` 或 `pip uninstall -r requirements.txt`\n \n### 升级包\n \n`pip install -U <包名>`\n \n### 升级pip\n \n`pip install -U pip`\n \n \n## 显示包所在的目录\n \n`pip show -f <包名>`\n \n## 搜索包\n \n`pip search <搜索关键字>`\n \n## 查询可升级的包\n \n`pip list -o`\n \n## 下载包而不安装\n \n `pip install <包名> -d  <目录> ` 或 `pip install -d <目录> -r requirements.txt`\n \n## 打包\n \n`pip wheel <包名>`\n \n## 更换国内pypi镜像\n \n### 国内pypi镜像\n \n- 豆瓣：[https://pypi.douban.com/simple](https://pypi.douban.com/simple)\n- 中国科学技术大学：[https://mirrors.ustc.edu.cn/pypi/web/simple/](https://mirrors.ustc.edu.cn/pypi/web/simple/)\n- 清华大学TUNA：[https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)\n[https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/](https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/)\n \n### 指定单次安装源\n \n`pip install <包名> -i http://pypi.v2ex.com/simple`\n \n### 指定全局安装源\n \n在unix和macos，配置文件为：$HOME/.pip/pip.conf \n在windows上，配置文件为：%HOME%\\pip\\pip.ini \n \n    [global]\n    timeout = 6000\n    index-url = http://pypi.douban.com/simple\n \n---\n \n## 参考资料\n> [pip documentation](https://pip.pypa.io/en/latest/)\n\n","source":"_posts/pip常用命令.md","raw":"title: pip常用命令\ndate: 2015-01-01 23:38:56\ncategories: [程序猿]\ntags: [Python, pip, 命令, 教程]\n---\n## 列出已安装的包\n \n`pip freeze` or `pip list`\n \n<!--more-->\n \n### 导出requirements.txt\n \n`pip freeze > <目录>/requirements.txt`\n \n## 安装包\n \n### 在线安装\n \n`pip install <包名>` 或 `pip install -r requirements.txt`\n \n```\n# 安装1.9版本的django\npip install django==1.9\n# 安装版本号大于1.9的django，注意有引号\npip install \"django>1.9\"\npip install \"django>=1.9\"\npip install \"django<1.9\"\npip install \"django<=1.9\"\npip install \"django><1.9\"\n```\n \nrequirements.txt内容格式为：\n \n    APScheduler==2.1.2\n    Django==1.5.4\n    MySQL-Connector-Python==2.0.1\n    MySQL-python==1.2.3\n    PIL==1.1.7\n    South==1.0.2\n    django-grappelli==2.6.3\n    django-pagination==1.0.7\n \n### 安装本地安装包\n \n`pip install <目录>/<文件名>` 或 `pip install --use-wheel --no-index --find-links=wheelhouse/ <包名>`\n \n*<包名>前有空格*\n \n可简写为\n \n`pip install --no-index -f=<目录>/ <包名>`\n \n### 卸载包\n \n`pip uninstall <包名>` 或 `pip uninstall -r requirements.txt`\n \n### 升级包\n \n`pip install -U <包名>`\n \n### 升级pip\n \n`pip install -U pip`\n \n \n## 显示包所在的目录\n \n`pip show -f <包名>`\n \n## 搜索包\n \n`pip search <搜索关键字>`\n \n## 查询可升级的包\n \n`pip list -o`\n \n## 下载包而不安装\n \n `pip install <包名> -d  <目录> ` 或 `pip install -d <目录> -r requirements.txt`\n \n## 打包\n \n`pip wheel <包名>`\n \n## 更换国内pypi镜像\n \n### 国内pypi镜像\n \n- 豆瓣：[https://pypi.douban.com/simple](https://pypi.douban.com/simple)\n- 中国科学技术大学：[https://mirrors.ustc.edu.cn/pypi/web/simple/](https://mirrors.ustc.edu.cn/pypi/web/simple/)\n- 清华大学TUNA：[https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)\n[https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/](https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/)\n \n### 指定单次安装源\n \n`pip install <包名> -i http://pypi.v2ex.com/simple`\n \n### 指定全局安装源\n \n在unix和macos，配置文件为：$HOME/.pip/pip.conf \n在windows上，配置文件为：%HOME%\\pip\\pip.ini \n \n    [global]\n    timeout = 6000\n    index-url = http://pypi.douban.com/simple\n \n---\n \n## 参考资料\n> [pip documentation](https://pip.pypa.io/en/latest/)\n\n","slug":"pip常用命令","published":1,"updated":"2020-01-17T07:16:27.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yko0013ssyhg0lb0gsv","content":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>\n<a id=\"more\"></a>\n<h3 id=\"导出requirements-txt\"><a href=\"#导出requirements-txt\" class=\"headerlink\" title=\"导出requirements.txt\"></a>导出requirements.txt</h3><p><code>pip freeze &gt; &lt;目录&gt;/requirements.txt</code></p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p><code>pip install &lt;包名&gt;</code> 或 <code>pip install -r requirements.txt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装1.9版本的django</span><br><span class=\"line\">pip install django==1.9</span><br><span class=\"line\"># 安装版本号大于1.9的django，注意有引号</span><br><span class=\"line\">pip install &quot;django&gt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;&lt;1.9&quot;</span><br></pre></td></tr></table></figure>\n<p>requirements.txt内容格式为：</p>\n<pre><code>APScheduler==2.1.2\nDjango==1.5.4\nMySQL-Connector-Python==2.0.1\nMySQL-python==1.2.3\nPIL==1.1.7\nSouth==1.0.2\ndjango-grappelli==2.6.3\ndjango-pagination==1.0.7\n</code></pre><h3 id=\"安装本地安装包\"><a href=\"#安装本地安装包\" class=\"headerlink\" title=\"安装本地安装包\"></a>安装本地安装包</h3><p><code>pip install &lt;目录&gt;/&lt;文件名&gt;</code> 或 <code>pip install --use-wheel --no-index --find-links=wheelhouse/ &lt;包名&gt;</code></p>\n<p><em>&lt;包名&gt;前有空格</em></p>\n<p>可简写为</p>\n<p><code>pip install --no-index -f=&lt;目录&gt;/ &lt;包名&gt;</code></p>\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><p><code>pip uninstall &lt;包名&gt;</code> 或 <code>pip uninstall -r requirements.txt</code></p>\n<h3 id=\"升级包\"><a href=\"#升级包\" class=\"headerlink\" title=\"升级包\"></a>升级包</h3><p><code>pip install -U &lt;包名&gt;</code></p>\n<h3 id=\"升级pip\"><a href=\"#升级pip\" class=\"headerlink\" title=\"升级pip\"></a>升级pip</h3><p><code>pip install -U pip</code></p>\n<h2 id=\"显示包所在的目录\"><a href=\"#显示包所在的目录\" class=\"headerlink\" title=\"显示包所在的目录\"></a>显示包所在的目录</h2><p><code>pip show -f &lt;包名&gt;</code></p>\n<h2 id=\"搜索包\"><a href=\"#搜索包\" class=\"headerlink\" title=\"搜索包\"></a>搜索包</h2><p><code>pip search &lt;搜索关键字&gt;</code></p>\n<h2 id=\"查询可升级的包\"><a href=\"#查询可升级的包\" class=\"headerlink\" title=\"查询可升级的包\"></a>查询可升级的包</h2><p><code>pip list -o</code></p>\n<h2 id=\"下载包而不安装\"><a href=\"#下载包而不安装\" class=\"headerlink\" title=\"下载包而不安装\"></a>下载包而不安装</h2><p> <code>pip install &lt;包名&gt; -d  &lt;目录&gt;</code> 或 <code>pip install -d &lt;目录&gt; -r requirements.txt</code></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><code>pip wheel &lt;包名&gt;</code></p>\n<h2 id=\"更换国内pypi镜像\"><a href=\"#更换国内pypi镜像\" class=\"headerlink\" title=\"更换国内pypi镜像\"></a>更换国内pypi镜像</h2><h3 id=\"国内pypi镜像\"><a href=\"#国内pypi镜像\" class=\"headerlink\" title=\"国内pypi镜像\"></a>国内pypi镜像</h3><ul>\n<li>豆瓣：<a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a></li>\n<li>中国科学技术大学：<a href=\"https://mirrors.ustc.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.ustc.edu.cn/pypi/web/simple/</a></li>\n<li>清华大学TUNA：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</a></li>\n</ul>\n<h3 id=\"指定单次安装源\"><a href=\"#指定单次安装源\" class=\"headerlink\" title=\"指定单次安装源\"></a>指定单次安装源</h3><p><code>pip install &lt;包名&gt; -i http://pypi.v2ex.com/simple</code></p>\n<h3 id=\"指定全局安装源\"><a href=\"#指定全局安装源\" class=\"headerlink\" title=\"指定全局安装源\"></a>指定全局安装源</h3><p>在unix和macos，配置文件为：$HOME/.pip/pip.conf<br>在windows上，配置文件为：%HOME%\\pip\\pip.ini </p>\n<pre><code>[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple\n</code></pre><hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://pip.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">pip documentation</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>","more":"<h3 id=\"导出requirements-txt\"><a href=\"#导出requirements-txt\" class=\"headerlink\" title=\"导出requirements.txt\"></a>导出requirements.txt</h3><p><code>pip freeze &gt; &lt;目录&gt;/requirements.txt</code></p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p><code>pip install &lt;包名&gt;</code> 或 <code>pip install -r requirements.txt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装1.9版本的django</span><br><span class=\"line\">pip install django==1.9</span><br><span class=\"line\"># 安装版本号大于1.9的django，注意有引号</span><br><span class=\"line\">pip install &quot;django&gt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;&lt;1.9&quot;</span><br></pre></td></tr></table></figure>\n<p>requirements.txt内容格式为：</p>\n<pre><code>APScheduler==2.1.2\nDjango==1.5.4\nMySQL-Connector-Python==2.0.1\nMySQL-python==1.2.3\nPIL==1.1.7\nSouth==1.0.2\ndjango-grappelli==2.6.3\ndjango-pagination==1.0.7\n</code></pre><h3 id=\"安装本地安装包\"><a href=\"#安装本地安装包\" class=\"headerlink\" title=\"安装本地安装包\"></a>安装本地安装包</h3><p><code>pip install &lt;目录&gt;/&lt;文件名&gt;</code> 或 <code>pip install --use-wheel --no-index --find-links=wheelhouse/ &lt;包名&gt;</code></p>\n<p><em>&lt;包名&gt;前有空格</em></p>\n<p>可简写为</p>\n<p><code>pip install --no-index -f=&lt;目录&gt;/ &lt;包名&gt;</code></p>\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><p><code>pip uninstall &lt;包名&gt;</code> 或 <code>pip uninstall -r requirements.txt</code></p>\n<h3 id=\"升级包\"><a href=\"#升级包\" class=\"headerlink\" title=\"升级包\"></a>升级包</h3><p><code>pip install -U &lt;包名&gt;</code></p>\n<h3 id=\"升级pip\"><a href=\"#升级pip\" class=\"headerlink\" title=\"升级pip\"></a>升级pip</h3><p><code>pip install -U pip</code></p>\n<h2 id=\"显示包所在的目录\"><a href=\"#显示包所在的目录\" class=\"headerlink\" title=\"显示包所在的目录\"></a>显示包所在的目录</h2><p><code>pip show -f &lt;包名&gt;</code></p>\n<h2 id=\"搜索包\"><a href=\"#搜索包\" class=\"headerlink\" title=\"搜索包\"></a>搜索包</h2><p><code>pip search &lt;搜索关键字&gt;</code></p>\n<h2 id=\"查询可升级的包\"><a href=\"#查询可升级的包\" class=\"headerlink\" title=\"查询可升级的包\"></a>查询可升级的包</h2><p><code>pip list -o</code></p>\n<h2 id=\"下载包而不安装\"><a href=\"#下载包而不安装\" class=\"headerlink\" title=\"下载包而不安装\"></a>下载包而不安装</h2><p> <code>pip install &lt;包名&gt; -d  &lt;目录&gt;</code> 或 <code>pip install -d &lt;目录&gt; -r requirements.txt</code></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><code>pip wheel &lt;包名&gt;</code></p>\n<h2 id=\"更换国内pypi镜像\"><a href=\"#更换国内pypi镜像\" class=\"headerlink\" title=\"更换国内pypi镜像\"></a>更换国内pypi镜像</h2><h3 id=\"国内pypi镜像\"><a href=\"#国内pypi镜像\" class=\"headerlink\" title=\"国内pypi镜像\"></a>国内pypi镜像</h3><ul>\n<li>豆瓣：<a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a></li>\n<li>中国科学技术大学：<a href=\"https://mirrors.ustc.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.ustc.edu.cn/pypi/web/simple/</a></li>\n<li>清华大学TUNA：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</a></li>\n</ul>\n<h3 id=\"指定单次安装源\"><a href=\"#指定单次安装源\" class=\"headerlink\" title=\"指定单次安装源\"></a>指定单次安装源</h3><p><code>pip install &lt;包名&gt; -i http://pypi.v2ex.com/simple</code></p>\n<h3 id=\"指定全局安装源\"><a href=\"#指定全局安装源\" class=\"headerlink\" title=\"指定全局安装源\"></a>指定全局安装源</h3><p>在unix和macos，配置文件为：$HOME/.pip/pip.conf<br>在windows上，配置文件为：%HOME%\\pip\\pip.ini </p>\n<pre><code>[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple\n</code></pre><hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://pip.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">pip documentation</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:16:27 GMT+0800 (China Standard Time)","title":"pip常用命令","path":"2015/01/01/pip常用命令/","eyeCatchImage":null,"excerpt":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>","date":"2015-01-01T15:38:56.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["命令","教程","Python","pip"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1499},{"title":"python中的UUID","date":"2015-06-02T15:32:59.000Z","_content":"## 简介（维基百科）\n> 通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。  \nUUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[[3]][1]\n\n<!--more-->\n\n## 定义 :\nUUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考[随机UUID的重复机率](http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81)）。\n\n## 算法\n1. uuid1()——基于时间戳\n由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，\n但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。\n2. uuid2()——基于分布式计算环境DCE（Python中没有这个函数）\n算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。\n实际中很少用到该方法。\n3. uuid3()——基于名字的MD5散列值\n通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，\n和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。\n4. uuid4()——基于随机数\n由伪随机数得到，有一定的重复概率，该概率可以计算出来。\n5. uuid5()——基于名字的SHA-1散列值\n算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法\n\n## 在`python`中在生成UUID\n`import uuid`后即可使用\n示例代码\n```python\nimport uuid\nuuid.uuid1()\nuuid.uuid3(namespace, name)\nuuid.uuid4()\nuuid.uuid5(namespace, name)\n```\n\n## 参考\n> http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\n> https://docs.python.org/2/library/uuid.html\n\n[1]: http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81 \"通用唯一识别码\"","source":"_posts/python中的UUID.md","raw":"title: python中的UUID\ndate: 2015-06-02 23:32:59\ncategories: [程序猿]\ntags: [Python, UUID]\n---\n## 简介（维基百科）\n> 通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。  \nUUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[[3]][1]\n\n<!--more-->\n\n## 定义 :\nUUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考[随机UUID的重复机率](http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81)）。\n\n## 算法\n1. uuid1()——基于时间戳\n由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，\n但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。\n2. uuid2()——基于分布式计算环境DCE（Python中没有这个函数）\n算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。\n实际中很少用到该方法。\n3. uuid3()——基于名字的MD5散列值\n通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，\n和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。\n4. uuid4()——基于随机数\n由伪随机数得到，有一定的重复概率，该概率可以计算出来。\n5. uuid5()——基于名字的SHA-1散列值\n算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法\n\n## 在`python`中在生成UUID\n`import uuid`后即可使用\n示例代码\n```python\nimport uuid\nuuid.uuid1()\nuuid.uuid3(namespace, name)\nuuid.uuid4()\nuuid.uuid5(namespace, name)\n```\n\n## 参考\n> http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\n> https://docs.python.org/2/library/uuid.html\n\n[1]: http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81 \"通用唯一识别码\"","slug":"python中的UUID","published":1,"updated":"2020-01-17T07:54:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yks0014ssyh6tgf0tp7","content":"<h2 id=\"简介（维基百科）\"><a href=\"#简介（维基百科）\" class=\"headerlink\" title=\"简介（维基百科）\"></a>简介（维基百科）</h2><blockquote>\n<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" title=\"通用唯一识别码\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义 :\"></a>定义 :</h2><p>UUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">随机UUID的重复机率</a>）。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>\n<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</li>\n<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。</li>\n<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>\n<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</li>\n</ol>\n<h2 id=\"在python中在生成UUID\"><a href=\"#在python中在生成UUID\" class=\"headerlink\" title=\"在python中在生成UUID\"></a>在<code>python</code>中在生成UUID</h2><p><code>import uuid</code>后即可使用<br>示例代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\">uuid.uuid1()</span><br><span class=\"line\">uuid.uuid3(namespace, name)</span><br><span class=\"line\">uuid.uuid4()</span><br><span class=\"line\">uuid.uuid5(namespace, name)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81</a><br><a href=\"https://docs.python.org/2/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/uuid.html</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介（维基百科）\"><a href=\"#简介（维基百科）\" class=\"headerlink\" title=\"简介（维基百科）\"></a>简介（维基百科）</h2><blockquote>\n<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" title=\"通用唯一识别码\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n</blockquote>","more":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义 :\"></a>定义 :</h2><p>UUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">随机UUID的重复机率</a>）。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>\n<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</li>\n<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。</li>\n<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>\n<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</li>\n</ol>\n<h2 id=\"在python中在生成UUID\"><a href=\"#在python中在生成UUID\" class=\"headerlink\" title=\"在python中在生成UUID\"></a>在<code>python</code>中在生成UUID</h2><p><code>import uuid</code>后即可使用<br>示例代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\">uuid.uuid1()</span><br><span class=\"line\">uuid.uuid3(namespace, name)</span><br><span class=\"line\">uuid.uuid4()</span><br><span class=\"line\">uuid.uuid5(namespace, name)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81</a><br><a href=\"https://docs.python.org/2/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/uuid.html</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:54:27 GMT+0800 (China Standard Time)","title":"python中的UUID","path":"2015/06/02/python中的UUID/","eyeCatchImage":null,"excerpt":"<h2 id=\"简介（维基百科）\"><a href=\"#简介（维基百科）\" class=\"headerlink\" title=\"简介（维基百科）\"></a>简介（维基百科）</h2><blockquote>\n<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" title=\"通用唯一识别码\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n</blockquote>","date":"2015-06-02T15:32:59.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Python","UUID"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1109},{"title":"ubuntu从14.10升级到15.04","date":"2015-08-29T10:23:11.000Z","_content":"ubuntu-15.04-logo.jpg)\n\nubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。\n<!--more-->\n\n先检查系统更新，如果有则进行更新，在终端中输入以下命令\n```\nsudo apt-get update && sudo apt-get dist-upgrade\n```\n然后检查是否有可用的版本\n```\nsudo update-manager -d\n```\n回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。\n\n最后点击开始升级，然后就等着更新自动下载更新吧。\nubuntu-14.10-15.04-01.png)\n\n\n更新完后重启系统即可完成升级。\nubuntu-15.04-info.png)\n\n","source":"_posts/ubuntu从14-10升级到15-04.md","raw":"title: ubuntu从14.10升级到15.04\ndate: 2015-08-29 18:23:11\ncategories: [其它]\ntags: [Ubuntu]\n---\nubuntu-15.04-logo.jpg)\n\nubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。\n<!--more-->\n\n先检查系统更新，如果有则进行更新，在终端中输入以下命令\n```\nsudo apt-get update && sudo apt-get dist-upgrade\n```\n然后检查是否有可用的版本\n```\nsudo update-manager -d\n```\n回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。\n\n最后点击开始升级，然后就等着更新自动下载更新吧。\nubuntu-14.10-15.04-01.png)\n\n\n更新完后重启系统即可完成升级。\nubuntu-15.04-info.png)\n\n","slug":"ubuntu从14-10升级到15-04","published":1,"updated":"2020-01-17T07:53:58.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ykt0015ssyhxakn3591","content":"<p>ubuntu-15.04-logo.jpg)</p>\n<p>ubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。<br><a id=\"more\"></a></p>\n<p>先检查系统更新，如果有则进行更新，在终端中输入以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure></p>\n<p>然后检查是否有可用的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-manager -d</span><br></pre></td></tr></table></figure></p>\n<p>回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。</p>\n<p>最后点击开始升级，然后就等着更新自动下载更新吧。<br>ubuntu-14.10-15.04-01.png)</p>\n<p>更新完后重启系统即可完成升级。<br>ubuntu-15.04-info.png)</p>\n","site":{"data":{}},"excerpt":"<p>ubuntu-15.04-logo.jpg)</p>\n<p>ubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。<br>","more":"</p>\n<p>先检查系统更新，如果有则进行更新，在终端中输入以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update &amp;&amp; sudo apt-get dist-upgrade</span><br></pre></td></tr></table></figure></p>\n<p>然后检查是否有可用的版本<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-manager -d</span><br></pre></td></tr></table></figure></p>\n<p>回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。</p>\n<p>最后点击开始升级，然后就等着更新自动下载更新吧。<br>ubuntu-14.10-15.04-01.png)</p>\n<p>更新完后重启系统即可完成升级。<br>ubuntu-15.04-info.png)</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:53:58 GMT+0800 (China Standard Time)","title":"ubuntu从14.10升级到15.04","path":"2015/08/29/ubuntu从14-10升级到15-04/","eyeCatchImage":null,"excerpt":"<p>ubuntu-15.04-logo.jpg)</p>\n<p>ubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。<br>","date":"2015-08-29T10:23:11.000Z","pv":0,"totalPV":0,"categories":"其它","tags":["Ubuntu"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":391},{"title":"ubuntu安装JDK8","date":"2015-03-28T09:29:42.000Z","_content":"\n## 下载JDK8\n到[oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)网站下载JDK8\n<!--more-->\n## 解压安装\n```\nsudo tar xzvf jdk-8u40-linux-x64.tar.gz\nmkdir -p /usr/lib/jvm\nsudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm\ncd /usr/lib/jvm\nsudo ln -s jdk1.8.0_40 java-8\n```\n\n## 配置环境变量\n添加PATH,CLASSPATH,JAVA_HOME环境变量\n`gedit ~/.bashrc`\n在打开的窗口里添加以下内容\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n保存退出，执行命令使配置生效\n`source ~/.bashrc`\n\n## 配置默认JDK版本\n在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。\n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300\nsudo update-alternatives --config java\nsudo update-alternatives --config javac\n```\n\n## 验证是否成功\n`java -version`","source":"_posts/ubuntu安装JDK8.md","raw":"title: ubuntu安装JDK8\ndate: 2015-03-28 17:29:42\ncategories: [程序猿]\ntags: [Ubuntu, JDK]\n---\n\n## 下载JDK8\n到[oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)网站下载JDK8\n<!--more-->\n## 解压安装\n```\nsudo tar xzvf jdk-8u40-linux-x64.tar.gz\nmkdir -p /usr/lib/jvm\nsudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm\ncd /usr/lib/jvm\nsudo ln -s jdk1.8.0_40 java-8\n```\n\n## 配置环境变量\n添加PATH,CLASSPATH,JAVA_HOME环境变量\n`gedit ~/.bashrc`\n在打开的窗口里添加以下内容\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n保存退出，执行命令使配置生效\n`source ~/.bashrc`\n\n## 配置默认JDK版本\n在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。\n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300\nsudo update-alternatives --config java\nsudo update-alternatives --config javac\n```\n\n## 验证是否成功\n`java -version`","slug":"ubuntu安装JDK8","published":1,"updated":"2020-01-17T07:54:07.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yku0016ssyh02j9kvob","content":"<h2 id=\"下载JDK8\"><a href=\"#下载JDK8\" class=\"headerlink\" title=\"下载JDK8\"></a>下载JDK8</h2><p>到<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">oracle</a>网站下载JDK8<br><a id=\"more\"></a></p>\n<h2 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar xzvf jdk-8u40-linux-x64.tar.gz</span><br><span class=\"line\">mkdir -p /usr/lib/jvm</span><br><span class=\"line\">sudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm</span><br><span class=\"line\">cd /usr/lib/jvm</span><br><span class=\"line\">sudo ln -s jdk1.8.0_40 java-8</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>添加PATH,CLASSPATH,JAVA_HOME环境变量<br><code>gedit ~/.bashrc</code><br>在打开的窗口里添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-8</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>保存退出，执行命令使配置生效<br><code>source ~/.bashrc</code></p>\n<h2 id=\"配置默认JDK版本\"><a href=\"#配置默认JDK版本\" class=\"headerlink\" title=\"配置默认JDK版本\"></a>配置默认JDK版本</h2><p>在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300</span><br><span class=\"line\">sudo update-alternatives --config java</span><br><span class=\"line\">sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h2><p><code>java -version</code></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"下载JDK8\"><a href=\"#下载JDK8\" class=\"headerlink\" title=\"下载JDK8\"></a>下载JDK8</h2><p>到<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">oracle</a>网站下载JDK8<br>","more":"</p>\n<h2 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar xzvf jdk-8u40-linux-x64.tar.gz</span><br><span class=\"line\">mkdir -p /usr/lib/jvm</span><br><span class=\"line\">sudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm</span><br><span class=\"line\">cd /usr/lib/jvm</span><br><span class=\"line\">sudo ln -s jdk1.8.0_40 java-8</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>添加PATH,CLASSPATH,JAVA_HOME环境变量<br><code>gedit ~/.bashrc</code><br>在打开的窗口里添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-8</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>保存退出，执行命令使配置生效<br><code>source ~/.bashrc</code></p>\n<h2 id=\"配置默认JDK版本\"><a href=\"#配置默认JDK版本\" class=\"headerlink\" title=\"配置默认JDK版本\"></a>配置默认JDK版本</h2><p>在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300</span><br><span class=\"line\">sudo update-alternatives --config java</span><br><span class=\"line\">sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h2><p><code>java -version</code></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:54:07 GMT+0800 (China Standard Time)","title":"ubuntu安装JDK8","path":"2015/03/28/ubuntu安装JDK8/","eyeCatchImage":null,"excerpt":"<h2 id=\"下载JDK8\"><a href=\"#下载JDK8\" class=\"headerlink\" title=\"下载JDK8\"></a>下载JDK8</h2><p>到<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">oracle</a>网站下载JDK8<br>","date":"2015-03-28T09:29:42.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Ubuntu","JDK"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":823},{"title":"Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool","date":"2015-03-28T09:54:03.000Z","_content":"错误信息：\n`unable to run mksdcard sdk tool`\n原因：缺少库文件\n解决方法：\n`sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6`","source":"_posts/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.md","raw":"title: Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool\ndate: 2015-03-28 17:54:03\ncategories: [程序猿]\ntags: [Ubuntu, Android]\n---\n错误信息：\n`unable to run mksdcard sdk tool`\n原因：缺少库文件\n解决方法：\n`sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6`","slug":"ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool","published":1,"updated":"2020-01-17T07:54:15.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ykw0017ssyhy9c2luqx","content":"<p>错误信息：<br><code>unable to run mksdcard sdk tool</code><br>原因：缺少库文件<br>解决方法：<br><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</code></p>\n","site":{"data":{}},"excerpt":"","more":"<p>错误信息：<br><code>unable to run mksdcard sdk tool</code><br>原因：缺少库文件<br>解决方法：<br><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</code></p>\n","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:54:15 GMT+0800 (China Standard Time)","title":"Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool","path":"2015/03/28/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool/","eyeCatchImage":null,"excerpt":null,"date":"2015-03-28T09:54:03.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Android","Ubuntu"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":117},{"title":"ubuntu更新NV显卡驱动","date":"2015-03-27T12:26:27.000Z","_content":"\n昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<!--more-->\n\n## 下载驱动\n首页在[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers)选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run\n\n## 关闭X server\n输入`sudo /etc/init.d/gdm stop`或`sudo /etc/init.d/lightdm stop`停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式\n\n### 安装驱动\n进入驱动所在文件夹，执行`sudo sh NVIDIA.run`，安装驱动过程中会有几次对话框需要确认。\n\n## 启动GDM\n`sudo /etc/init.d/gdm start`或`sudo /etc/init.d/lightdm start`\n\n## 重启电脑\nsudo reboot\n\n这样NV的驱动就安装好了。\n\n","source":"_posts/ubuntu更新NV显卡驱动.md","raw":"title: ubuntu更新NV显卡驱动\ndate: 2015-03-27 20:26:27\ncategories: [其它]\ntags: [Ubuntu, 驱动]\n---\n\n昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<!--more-->\n\n## 下载驱动\n首页在[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers)选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run\n\n## 关闭X server\n输入`sudo /etc/init.d/gdm stop`或`sudo /etc/init.d/lightdm stop`停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式\n\n### 安装驱动\n进入驱动所在文件夹，执行`sudo sh NVIDIA.run`，安装驱动过程中会有几次对话框需要确认。\n\n## 启动GDM\n`sudo /etc/init.d/gdm start`或`sudo /etc/init.d/lightdm start`\n\n## 重启电脑\nsudo reboot\n\n这样NV的驱动就安装好了。\n\n","slug":"ubuntu更新NV显卡驱动","published":1,"updated":"2020-01-17T07:53:29.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ykx0018ssyhpm4fmjkb","content":"<p>昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<a id=\"more\"></a></p>\n<h2 id=\"下载驱动\"><a href=\"#下载驱动\" class=\"headerlink\" title=\"下载驱动\"></a>下载驱动</h2><p>首页在<a href=\"http://www.geforce.cn/drivers\" target=\"_blank\" rel=\"noopener\">http://www.geforce.cn/drivers</a>选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run</p>\n<h2 id=\"关闭X-server\"><a href=\"#关闭X-server\" class=\"headerlink\" title=\"关闭X server\"></a>关闭X server</h2><p>输入<code>sudo /etc/init.d/gdm stop</code>或<code>sudo /etc/init.d/lightdm stop</code>停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式</p>\n<h3 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h3><p>进入驱动所在文件夹，执行<code>sudo sh NVIDIA.run</code>，安装驱动过程中会有几次对话框需要确认。</p>\n<h2 id=\"启动GDM\"><a href=\"#启动GDM\" class=\"headerlink\" title=\"启动GDM\"></a>启动GDM</h2><p><code>sudo /etc/init.d/gdm start</code>或<code>sudo /etc/init.d/lightdm start</code></p>\n<h2 id=\"重启电脑\"><a href=\"#重启电脑\" class=\"headerlink\" title=\"重启电脑\"></a>重启电脑</h2><p>sudo reboot</p>\n<p>这样NV的驱动就安装好了。</p>\n","site":{"data":{}},"excerpt":"<p>昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。","more":"</p>\n<h2 id=\"下载驱动\"><a href=\"#下载驱动\" class=\"headerlink\" title=\"下载驱动\"></a>下载驱动</h2><p>首页在<a href=\"http://www.geforce.cn/drivers\" target=\"_blank\" rel=\"noopener\">http://www.geforce.cn/drivers</a>选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run</p>\n<h2 id=\"关闭X-server\"><a href=\"#关闭X-server\" class=\"headerlink\" title=\"关闭X server\"></a>关闭X server</h2><p>输入<code>sudo /etc/init.d/gdm stop</code>或<code>sudo /etc/init.d/lightdm stop</code>停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式</p>\n<h3 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h3><p>进入驱动所在文件夹，执行<code>sudo sh NVIDIA.run</code>，安装驱动过程中会有几次对话框需要确认。</p>\n<h2 id=\"启动GDM\"><a href=\"#启动GDM\" class=\"headerlink\" title=\"启动GDM\"></a>启动GDM</h2><p><code>sudo /etc/init.d/gdm start</code>或<code>sudo /etc/init.d/lightdm start</code></p>\n<h2 id=\"重启电脑\"><a href=\"#重启电脑\" class=\"headerlink\" title=\"重启电脑\"></a>重启电脑</h2><p>sudo reboot</p>\n<p>这样NV的驱动就安装好了。</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:53:29 GMT+0800 (China Standard Time)","title":"ubuntu更新NV显卡驱动","path":"2015/03/27/ubuntu更新NV显卡驱动/","eyeCatchImage":null,"excerpt":"<p>昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。","date":"2015-03-27T12:26:27.000Z","pv":0,"totalPV":0,"categories":"其它","tags":["Ubuntu","驱动"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":364},{"title":"ubuntu下运行shadowsocks客户端","date":"2015-03-28T08:54:44.000Z","_content":"Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,[项目地址](https://github.com/shadowsocks/shadowsocks)。<!--more-->\n\n## 下载\n```\nsudo apt-get install python-pip python-m2crypto\nsudo pip install shadowsocks\n```\n## 配置\n`sudo gedit /etc/shadowsocks/config.json`\n```\n{\n    \"server\":\"remote-shadowsocks-server-ip-addr\",\n    \"server_port\":8883,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"abcdef\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false,\n    \"workers\":1\n}\n```\n> 请根据实际情况配置\n\n## 启动客户端\n`sslocal -c /etc/shadowsocks.json`\n\n## 浏览器扩展\nFirefox可使用FoxyProxy Standard\nChrome可使用Proxy SwitchOmega\n配置请自行Google/百度","source":"_posts/ubuntu运行shadowsocks客户端.md","raw":"title: ubuntu下运行shadowsocks客户端\ndate: 2015-03-28 16:54:44\ncategories: [优化辅助]\ntags: [Ubuntu, Shadowsocks]\n---\nShadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,[项目地址](https://github.com/shadowsocks/shadowsocks)。<!--more-->\n\n## 下载\n```\nsudo apt-get install python-pip python-m2crypto\nsudo pip install shadowsocks\n```\n## 配置\n`sudo gedit /etc/shadowsocks/config.json`\n```\n{\n    \"server\":\"remote-shadowsocks-server-ip-addr\",\n    \"server_port\":8883,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"abcdef\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false,\n    \"workers\":1\n}\n```\n> 请根据实际情况配置\n\n## 启动客户端\n`sslocal -c /etc/shadowsocks.json`\n\n## 浏览器扩展\nFirefox可使用FoxyProxy Standard\nChrome可使用Proxy SwitchOmega\n配置请自行Google/百度","slug":"ubuntu运行shadowsocks客户端","published":1,"updated":"2020-01-17T07:53:21.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yky0019ssyh2tbh3p3u","content":"<p>Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,<a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">项目地址</a>。<a id=\"more\"></a></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip python-m2crypto</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><code>sudo gedit /etc/shadowsocks/config.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;remote-shadowsocks-server-ip-addr&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8883,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;abcdef&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;:1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>请根据实际情况配置</p>\n</blockquote>\n<h2 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h2><p><code>sslocal -c /etc/shadowsocks.json</code></p>\n<h2 id=\"浏览器扩展\"><a href=\"#浏览器扩展\" class=\"headerlink\" title=\"浏览器扩展\"></a>浏览器扩展</h2><p>Firefox可使用FoxyProxy Standard<br>Chrome可使用Proxy SwitchOmega<br>配置请自行Google/百度</p>\n","site":{"data":{}},"excerpt":"<p>Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,<a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">项目地址</a>。","more":"</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip python-m2crypto</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><code>sudo gedit /etc/shadowsocks/config.json</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;remote-shadowsocks-server-ip-addr&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8883,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;abcdef&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;:1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>请根据实际情况配置</p>\n</blockquote>\n<h2 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h2><p><code>sslocal -c /etc/shadowsocks.json</code></p>\n<h2 id=\"浏览器扩展\"><a href=\"#浏览器扩展\" class=\"headerlink\" title=\"浏览器扩展\"></a>浏览器扩展</h2><p>Firefox可使用FoxyProxy Standard<br>Chrome可使用Proxy SwitchOmega<br>配置请自行Google/百度</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:53:21 GMT+0800 (China Standard Time)","title":"ubuntu下运行shadowsocks客户端","path":"2015/03/28/ubuntu运行shadowsocks客户端/","eyeCatchImage":null,"excerpt":"<p>Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,<a href=\"https://github.com/shadowsocks/shadowsocks\" target=\"_blank\" rel=\"noopener\">项目地址</a>。","date":"2015-03-28T08:54:44.000Z","pv":0,"totalPV":0,"categories":"优化辅助","tags":["Ubuntu","Shadowsocks"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":675},{"title":"XY-Problem","date":"2015-07-04T15:51:40.000Z","_content":"\nXY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。\n\n \n对于“XY问题”，不同的人有不同的解释：\n \n> 你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。\n \n> — 来自 Re: sequencial file naming by Abigail<!--more-->\n\n---\n\n> 你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。\n> — 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo\n \n---\n\n> 有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。\n> — 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region\n \n---\n\n> 在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。\n> — 来自 <m18zt5muq9.fsf_-_@halfdome.holdit.com> by merlyn\n \n---\n\n> 也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。\n> — from <Pine.GHP.4.21.0009061210570.8800-100000@hpplus03.cern.ch> by Alan J. Flavell\n \n---\n\n> XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。\n> — 来自 <slrn89um8j.5g9.tadmc@magna.metronet.com> by Tad McClellan\n \n---\n\n> 当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..\n \n> 但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)\n \n> . . .\n \n> 另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）\n \n> . . .\n \n> 我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。\n> — 来自 <6lnb70$lct$1@monet.op.net> by MJD\n\n---\n\n部分内容引用自[外刊IT评论](http://www.vaikan.com/xy-problem/)","source":"_posts/xy-problem.md","raw":"title: \"XY-Problem\"\ndate: 2015-07-04 23:51:40\ncategories: [随笔]\ntags: [杂谈]\n---\n\nXY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。\n\n \n对于“XY问题”，不同的人有不同的解释：\n \n> 你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。\n \n> — 来自 Re: sequencial file naming by Abigail<!--more-->\n\n---\n\n> 你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。\n> — 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo\n \n---\n\n> 有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。\n> — 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region\n \n---\n\n> 在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。\n> — 来自 <m18zt5muq9.fsf_-_@halfdome.holdit.com> by merlyn\n \n---\n\n> 也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。\n> — from <Pine.GHP.4.21.0009061210570.8800-100000@hpplus03.cern.ch> by Alan J. Flavell\n \n---\n\n> XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。\n> — 来自 <slrn89um8j.5g9.tadmc@magna.metronet.com> by Tad McClellan\n \n---\n\n> 当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..\n \n> 但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)\n \n> . . .\n \n> 另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）\n \n> . . .\n \n> 我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。\n> — 来自 <6lnb70$lct$1@monet.op.net> by MJD\n\n---\n\n部分内容引用自[外刊IT评论](http://www.vaikan.com/xy-problem/)","slug":"xy-problem","published":1,"updated":"2015-09-22T12:41:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yl0001assyh05he0zil","content":"<p>XY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。</p>\n<p>对于“XY问题”，不同的人有不同的解释：</p>\n<blockquote>\n<p>你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。</p>\n</blockquote>\n<blockquote>\n<p>— 来自 Re: sequencial file naming by Abigail<a id=\"more\"></a></p>\n</blockquote>\n<hr>\n<blockquote>\n<p>你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。<br>— 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。<br>— 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。<br>— 来自 <a href=\"mailto:&#109;&#x31;&#x38;&#122;&#x74;&#53;&#x6d;&#117;&#x71;&#57;&#46;&#102;&#x73;&#102;&#x5f;&#45;&#x5f;&#64;&#104;&#97;&#108;&#x66;&#100;&#111;&#x6d;&#x65;&#46;&#104;&#x6f;&#108;&#100;&#105;&#x74;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#109;&#x31;&#x38;&#122;&#x74;&#53;&#x6d;&#117;&#x71;&#57;&#46;&#102;&#x73;&#102;&#x5f;&#45;&#x5f;&#64;&#104;&#97;&#108;&#x66;&#100;&#111;&#x6d;&#x65;&#46;&#104;&#x6f;&#108;&#100;&#105;&#x74;&#x2e;&#99;&#111;&#109;</a> by merlyn</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。<br>— from <a href=\"mailto:&#x50;&#105;&#x6e;&#101;&#46;&#71;&#x48;&#x50;&#46;&#52;&#46;&#50;&#x31;&#x2e;&#48;&#48;&#x30;&#57;&#48;&#x36;&#49;&#50;&#x31;&#x30;&#x35;&#x37;&#48;&#46;&#56;&#56;&#48;&#48;&#45;&#49;&#48;&#48;&#x30;&#x30;&#48;&#64;&#x68;&#112;&#x70;&#x6c;&#x75;&#x73;&#x30;&#x33;&#x2e;&#x63;&#101;&#x72;&#x6e;&#46;&#99;&#x68;\" target=\"_blank\" rel=\"noopener\">&#x50;&#105;&#x6e;&#101;&#46;&#71;&#x48;&#x50;&#46;&#52;&#46;&#50;&#x31;&#x2e;&#48;&#48;&#x30;&#57;&#48;&#x36;&#49;&#50;&#x31;&#x30;&#x35;&#x37;&#48;&#46;&#56;&#56;&#48;&#48;&#45;&#49;&#48;&#48;&#x30;&#x30;&#48;&#64;&#x68;&#112;&#x70;&#x6c;&#x75;&#x73;&#x30;&#x33;&#x2e;&#x63;&#101;&#x72;&#x6e;&#46;&#99;&#x68;</a> by Alan J. Flavell</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。<br>— 来自 <a href=\"mailto:&#x73;&#108;&#114;&#110;&#x38;&#x39;&#117;&#x6d;&#x38;&#x6a;&#46;&#53;&#x67;&#x39;&#46;&#116;&#x61;&#x64;&#x6d;&#x63;&#x40;&#109;&#97;&#x67;&#110;&#97;&#46;&#109;&#101;&#x74;&#x72;&#x6f;&#x6e;&#x65;&#x74;&#46;&#99;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x73;&#108;&#114;&#110;&#x38;&#x39;&#117;&#x6d;&#x38;&#x6a;&#46;&#53;&#x67;&#x39;&#46;&#116;&#x61;&#x64;&#x6d;&#x63;&#x40;&#109;&#97;&#x67;&#110;&#97;&#46;&#109;&#101;&#x74;&#x72;&#x6f;&#x6e;&#x65;&#x74;&#46;&#99;&#x6f;&#x6d;</a> by Tad McClellan</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..</p>\n</blockquote>\n<blockquote>\n<p>但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)</p>\n</blockquote>\n<blockquote>\n<p>. . .</p>\n</blockquote>\n<blockquote>\n<p>另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）</p>\n</blockquote>\n<blockquote>\n<p>. . .</p>\n</blockquote>\n<blockquote>\n<p>我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。<br>— 来自 <a href=\"mailto:&#54;&#108;&#x6e;&#98;&#x37;&#x30;&#36;&#108;&#x63;&#x74;&#x24;&#49;&#x40;&#109;&#x6f;&#x6e;&#x65;&#116;&#46;&#111;&#x70;&#x2e;&#110;&#101;&#x74;\" target=\"_blank\" rel=\"noopener\">&#54;&#108;&#x6e;&#98;&#x37;&#x30;&#36;&#108;&#x63;&#x74;&#x24;&#49;&#x40;&#109;&#x6f;&#x6e;&#x65;&#116;&#46;&#111;&#x70;&#x2e;&#110;&#101;&#x74;</a> by MJD</p>\n</blockquote>\n<hr>\n<p>部分内容引用自<a href=\"http://www.vaikan.com/xy-problem/\" target=\"_blank\" rel=\"noopener\">外刊IT评论</a></p>\n","site":{"data":{}},"excerpt":"<p>XY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。</p>\n<p>对于“XY问题”，不同的人有不同的解释：</p>\n<blockquote>\n<p>你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。</p>\n</blockquote>\n<blockquote>\n<p>— 来自 Re: sequencial file naming by Abigail","more":"</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。<br>— 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。<br>— 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。<br>— 来自 <a href=\"mailto:&#109;&#x31;&#x38;&#122;&#x74;&#53;&#x6d;&#117;&#x71;&#57;&#46;&#102;&#x73;&#102;&#x5f;&#45;&#x5f;&#64;&#104;&#97;&#108;&#x66;&#100;&#111;&#x6d;&#x65;&#46;&#104;&#x6f;&#108;&#100;&#105;&#x74;&#x2e;&#99;&#111;&#109;\" target=\"_blank\" rel=\"noopener\">&#109;&#x31;&#x38;&#122;&#x74;&#53;&#x6d;&#117;&#x71;&#57;&#46;&#102;&#x73;&#102;&#x5f;&#45;&#x5f;&#64;&#104;&#97;&#108;&#x66;&#100;&#111;&#x6d;&#x65;&#46;&#104;&#x6f;&#108;&#100;&#105;&#x74;&#x2e;&#99;&#111;&#109;</a> by merlyn</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。<br>— from <a href=\"mailto:&#x50;&#105;&#x6e;&#101;&#46;&#71;&#x48;&#x50;&#46;&#52;&#46;&#50;&#x31;&#x2e;&#48;&#48;&#x30;&#57;&#48;&#x36;&#49;&#50;&#x31;&#x30;&#x35;&#x37;&#48;&#46;&#56;&#56;&#48;&#48;&#45;&#49;&#48;&#48;&#x30;&#x30;&#48;&#64;&#x68;&#112;&#x70;&#x6c;&#x75;&#x73;&#x30;&#x33;&#x2e;&#x63;&#101;&#x72;&#x6e;&#46;&#99;&#x68;\" target=\"_blank\" rel=\"noopener\">&#x50;&#105;&#x6e;&#101;&#46;&#71;&#x48;&#x50;&#46;&#52;&#46;&#50;&#x31;&#x2e;&#48;&#48;&#x30;&#57;&#48;&#x36;&#49;&#50;&#x31;&#x30;&#x35;&#x37;&#48;&#46;&#56;&#56;&#48;&#48;&#45;&#49;&#48;&#48;&#x30;&#x30;&#48;&#64;&#x68;&#112;&#x70;&#x6c;&#x75;&#x73;&#x30;&#x33;&#x2e;&#x63;&#101;&#x72;&#x6e;&#46;&#99;&#x68;</a> by Alan J. Flavell</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。<br>— 来自 <a href=\"mailto:&#x73;&#108;&#114;&#110;&#x38;&#x39;&#117;&#x6d;&#x38;&#x6a;&#46;&#53;&#x67;&#x39;&#46;&#116;&#x61;&#x64;&#x6d;&#x63;&#x40;&#109;&#97;&#x67;&#110;&#97;&#46;&#109;&#101;&#x74;&#x72;&#x6f;&#x6e;&#x65;&#x74;&#46;&#99;&#x6f;&#x6d;\" target=\"_blank\" rel=\"noopener\">&#x73;&#108;&#114;&#110;&#x38;&#x39;&#117;&#x6d;&#x38;&#x6a;&#46;&#53;&#x67;&#x39;&#46;&#116;&#x61;&#x64;&#x6d;&#x63;&#x40;&#109;&#97;&#x67;&#110;&#97;&#46;&#109;&#101;&#x74;&#x72;&#x6f;&#x6e;&#x65;&#x74;&#46;&#99;&#x6f;&#x6d;</a> by Tad McClellan</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..</p>\n</blockquote>\n<blockquote>\n<p>但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)</p>\n</blockquote>\n<blockquote>\n<p>. . .</p>\n</blockquote>\n<blockquote>\n<p>另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）</p>\n</blockquote>\n<blockquote>\n<p>. . .</p>\n</blockquote>\n<blockquote>\n<p>我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。<br>— 来自 <a href=\"mailto:&#54;&#108;&#x6e;&#98;&#x37;&#x30;&#36;&#108;&#x63;&#x74;&#x24;&#49;&#x40;&#109;&#x6f;&#x6e;&#x65;&#116;&#46;&#111;&#x70;&#x2e;&#110;&#101;&#x74;\" target=\"_blank\" rel=\"noopener\">&#54;&#108;&#x6e;&#98;&#x37;&#x30;&#36;&#108;&#x63;&#x74;&#x24;&#49;&#x40;&#109;&#x6f;&#x6e;&#x65;&#116;&#46;&#111;&#x70;&#x2e;&#110;&#101;&#x74;</a> by MJD</p>\n</blockquote>\n<hr>\n<p>部分内容引用自<a href=\"http://www.vaikan.com/xy-problem/\" target=\"_blank\" rel=\"noopener\">外刊IT评论</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Sep 22 2015 20:41:36 GMT+0800 (China Standard Time)","title":"XY-Problem","path":"2015/07/04/xy-problem/","eyeCatchImage":null,"excerpt":"<p>XY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。</p>\n<p>对于“XY问题”，不同的人有不同的解释：</p>\n<blockquote>\n<p>你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。</p>\n</blockquote>\n<blockquote>\n<p>— 来自 Re: sequencial file naming by Abigail","date":"2015-07-04T15:51:40.000Z","pv":0,"totalPV":0,"categories":"随笔","tags":["杂谈"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1988},{"title":"使用alembic进行数据库版本管理","comments":1,"date":"2018-09-13T10:53:14.000Z","_content":"\n转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\n\n## 前言\n\n随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。\n\nAlembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。\n<!--more-->\n\n## 安装\n\n```bash\npip install alembic\n```\n\n通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令\n\n同时需要安装的还有 SQLAlchemy 和 PyMysql\n\n```bash\npip install sqlalchemy\npip install pymysql\n```\n\n## 初始化\n\n在使用 alembic 之前，需要进行初始化操作。\n\n```bash\nalembic init <YOUR_ALEMBIC_DIR>\n```\n\nYOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如\n\n```bash\nalembic init alembic\n```\n\n**此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。**\n\n**同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。**\n\n显示类似结果即初始化成功。\n\n```bash\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... done\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... done\nPlease edit configuration/connection/logging settings in 'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini' befor\ne proceeding.\n```\n\n初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。\n\n## 修改配置文件\n\n接下来对 alembic.ini 的信息进行修改。\n\n主要修改的是配置文件中的数据库连接部分。\n\n```python\nsqlalchemy.url = driver://user:pass@localhost:port/dbname\n```\n\n将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。\n\n如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下\n\n```python\nmysql+pymysql://demo_user:demo123456@127.0.0.1:3306/demo_db\n```\n\n## 修改 env.py\n\n除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。\n\n在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。\n\n将原先的\n\n```python\ntarget_metadata = None\n```\n\n修改成项目中的 model\n```python\nimport os\nimport sys\n\nsys.path.append(dirname(dirname(abspath(__file__))))\nfrom app import db\ntarget_metadata = db.metadata\n```\n\n## 创建新版本\n\n用 alembic revision -m + 注释 创建数据库版本\n\n```bash\nalembic revision --autogenerate -m \"init db\"\n```\n\n运行后，类似如下结果，即创建版本成功\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected removed table 'user'\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... done\n```\n\n每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。\n\n执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。\n\n## 变更数据库\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本\n\n**将数据库升级到最新版本**\n\n```bash\nalembic upgrade head\n```\n\n运行结果类似\n\n```bash\n(venv_win) D:\\Project\\py_sqlalchemy_demo>alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -> b034414f04cd, create tables02\n```\n\n其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。\n\n**将数据库降级到最初版本**\n\n```bash\nalembic downgrade base\n```\n\n**将数据库降级到执行版本**，使用 alembic downgrade + 版本号，不包含注释部分\n\n```bash\nalembic downgrade <version>\n```\n\n如\n\n```bash\nalembic downgrade 7b55b3d83158\n```\n\n运行结果\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running downgrade b034414f04cd -> 7b55b3d83158, create tables02\n```\n\n升级也是同样的道理，alembic upgrade + 版本号\n\n## 离线更新（生成 sql 脚本）\n\n在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：\n\n```bash\nalembic upgrade <version> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade ae1027a6acf --sql > migration.sql\n```\n\n从特定起始版本生成 sql 脚本：\n\n```bash\nalembic upgrade <vsersion>:<vsersion> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade 1975ea83b712:ae1027a6acf --sql > migration.sql\n```\n\n如果是数据库降级操作，把 upgrade 替换为 downgrade。\n\n## 查询当前数据库版本号\n\n在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。\n\n表中的 version_num 字段记录了当前的数据库版本号。\n\n## 清除所有版本\n\n如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。\n\n## 参考资料\n\n[http://alembic.zzzcomputing.com/en/latest/tutorial.html](http://alembic.zzzcomputing.com/en/latest/tutorial.html)\n\n[http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/](http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/)\n\n[http://blog.csdn.net/wenxuansoft/article/details/50242957](http://blog.csdn.net/wenxuansoft/article/details/50242957)","source":"_posts/使用alembic进行数据库版本管理.md","raw":"---\ntitle: 使用alembic进行数据库版本管理\ncomments: true\ntags: [Python, 教程]\ncategories: [程序猿]\ndate: 2018-09-13 18:53:14\n---\n\n转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\n\n## 前言\n\n随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。\n\nAlembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。\n<!--more-->\n\n## 安装\n\n```bash\npip install alembic\n```\n\n通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令\n\n同时需要安装的还有 SQLAlchemy 和 PyMysql\n\n```bash\npip install sqlalchemy\npip install pymysql\n```\n\n## 初始化\n\n在使用 alembic 之前，需要进行初始化操作。\n\n```bash\nalembic init <YOUR_ALEMBIC_DIR>\n```\n\nYOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如\n\n```bash\nalembic init alembic\n```\n\n**此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。**\n\n**同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。**\n\n显示类似结果即初始化成功。\n\n```bash\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... done\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... done\nPlease edit configuration/connection/logging settings in 'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini' befor\ne proceeding.\n```\n\n初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。\n\n## 修改配置文件\n\n接下来对 alembic.ini 的信息进行修改。\n\n主要修改的是配置文件中的数据库连接部分。\n\n```python\nsqlalchemy.url = driver://user:pass@localhost:port/dbname\n```\n\n将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。\n\n如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下\n\n```python\nmysql+pymysql://demo_user:demo123456@127.0.0.1:3306/demo_db\n```\n\n## 修改 env.py\n\n除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。\n\n在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。\n\n将原先的\n\n```python\ntarget_metadata = None\n```\n\n修改成项目中的 model\n```python\nimport os\nimport sys\n\nsys.path.append(dirname(dirname(abspath(__file__))))\nfrom app import db\ntarget_metadata = db.metadata\n```\n\n## 创建新版本\n\n用 alembic revision -m + 注释 创建数据库版本\n\n```bash\nalembic revision --autogenerate -m \"init db\"\n```\n\n运行后，类似如下结果，即创建版本成功\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected removed table 'user'\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... done\n```\n\n每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。\n\n执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。\n\n## 变更数据库\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本\n\n**将数据库升级到最新版本**\n\n```bash\nalembic upgrade head\n```\n\n运行结果类似\n\n```bash\n(venv_win) D:\\Project\\py_sqlalchemy_demo>alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -> b034414f04cd, create tables02\n```\n\n其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。\n\n**将数据库降级到最初版本**\n\n```bash\nalembic downgrade base\n```\n\n**将数据库降级到执行版本**，使用 alembic downgrade + 版本号，不包含注释部分\n\n```bash\nalembic downgrade <version>\n```\n\n如\n\n```bash\nalembic downgrade 7b55b3d83158\n```\n\n运行结果\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running downgrade b034414f04cd -> 7b55b3d83158, create tables02\n```\n\n升级也是同样的道理，alembic upgrade + 版本号\n\n## 离线更新（生成 sql 脚本）\n\n在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：\n\n```bash\nalembic upgrade <version> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade ae1027a6acf --sql > migration.sql\n```\n\n从特定起始版本生成 sql 脚本：\n\n```bash\nalembic upgrade <vsersion>:<vsersion> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade 1975ea83b712:ae1027a6acf --sql > migration.sql\n```\n\n如果是数据库降级操作，把 upgrade 替换为 downgrade。\n\n## 查询当前数据库版本号\n\n在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。\n\n表中的 version_num 字段记录了当前的数据库版本号。\n\n## 清除所有版本\n\n如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。\n\n## 参考资料\n\n[http://alembic.zzzcomputing.com/en/latest/tutorial.html](http://alembic.zzzcomputing.com/en/latest/tutorial.html)\n\n[http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/](http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/)\n\n[http://blog.csdn.net/wenxuansoft/article/details/50242957](http://blog.csdn.net/wenxuansoft/article/details/50242957)","slug":"使用alembic进行数据库版本管理","published":1,"updated":"2020-03-04T05:22:29.004Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yl6001bssyh9jc16gzz","content":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>\n","site":{"data":{}},"excerpt":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Wed Mar 04 2020 13:22:29 GMT+0800 (China Standard Time)","title":"使用alembic进行数据库版本管理","path":"2018/09/13/使用alembic进行数据库版本管理/","eyeCatchImage":null,"excerpt":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","date":"2018-09-13T10:53:14.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["教程","Python"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":3958},{"title":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","date":"2015-02-04T15:35:40.000Z","_content":"## 更新记录\n2016-03-04 更新教程\n2015-09-16 添加旧版软件下载\n2015-02-04 初稿\n\n鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<!--more-->\n\n## 配置步骤\n \n### 1. [注册ngrok账号](https://dashboard.ngrok.com/user/signup)\n注册成功后拿到授权码`auth token`，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；\n \n### 2. [下载ngrok](https://ngrok.com/download)，解压；\n\n### 3. 启动\n##### 方式一:\n让本地的‘http://127.0.0.1:80’ 可以让外网访问\n```yml\nngrok http 80\n```\nngrok会随机分配一个二级域名，可直接通过外网可通过`http://xxxx.tunnel.mobi`来访问本机的`http://127.0.0.1:80`网站\n\n##### 方式二：使用配置文件启动:\n在`ngrok.exe`目录下执行命令（不带尖括号），生成配置文件（配置文件会在`C:\\Users\\用户名/.ngrok2/ngrok.yml`下「windows」）\n```\nngrok authtoken <you authtoken>\n```\n修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）\n```\nauthtoken:<you authtoken>\ntunnels:\n  # 自定义隧道名 \n  iblogc:\n    #本地服务端口 \n    addr: 4000\n    # 用于http/https里的身份认证\n    #auth: \"username:password\"\n    proto: http\n    # 二级域名，如果运行提示重复，换一个就行\n    subdomain: iblogc\n  django:\n    addr: 8000\n    auth: \"abc:123456\"\n    proto: http\n    subdomain: django\n  weixin:\n    addr: 80\n    proto: http\n    subdomain: weixin\n```\n\n现在执行\n```\nngrok start iblogc\n```\n\n试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。\n`http://iblogc.ngrok.io` `https://iblogc.ngrok.io` 协议均可以访问。\nngrok-start-iblogc.png)\n\n你也可以同时启动两个tunnel\n```\nngrok start iblogc django weixin\n```\nngrok-start-iblogc-django-weixin.png)\n\n因为我的django tunnel配置文件里添加了`auth`配置所以访问`http://django.ngrok.io`需要输入用户名密码。\nngrok-auth.png)\n\n假设`weixin`就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用`weixin.ngrok.com`进行配置了，所有发向此域名的请求都会转发到你的本地`127.0.0.1:80`上。\n\n### 4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开`http://127.0.0.1:4040`查看详细信息\nnrok-web-interface.png)\n\n### 5. 参考文档\n官方文档：https://ngrok.com/docs\n\n","source":"_posts/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.md","raw":"title: 使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）\ndate: 2015-02-04 23:35:40\ncategories: [程序猿]\ntags: [微信公众号, 端口, ngrok, 内网穿透]\n---\n## 更新记录\n2016-03-04 更新教程\n2015-09-16 添加旧版软件下载\n2015-02-04 初稿\n\n鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<!--more-->\n\n## 配置步骤\n \n### 1. [注册ngrok账号](https://dashboard.ngrok.com/user/signup)\n注册成功后拿到授权码`auth token`，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；\n \n### 2. [下载ngrok](https://ngrok.com/download)，解压；\n\n### 3. 启动\n##### 方式一:\n让本地的‘http://127.0.0.1:80’ 可以让外网访问\n```yml\nngrok http 80\n```\nngrok会随机分配一个二级域名，可直接通过外网可通过`http://xxxx.tunnel.mobi`来访问本机的`http://127.0.0.1:80`网站\n\n##### 方式二：使用配置文件启动:\n在`ngrok.exe`目录下执行命令（不带尖括号），生成配置文件（配置文件会在`C:\\Users\\用户名/.ngrok2/ngrok.yml`下「windows」）\n```\nngrok authtoken <you authtoken>\n```\n修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）\n```\nauthtoken:<you authtoken>\ntunnels:\n  # 自定义隧道名 \n  iblogc:\n    #本地服务端口 \n    addr: 4000\n    # 用于http/https里的身份认证\n    #auth: \"username:password\"\n    proto: http\n    # 二级域名，如果运行提示重复，换一个就行\n    subdomain: iblogc\n  django:\n    addr: 8000\n    auth: \"abc:123456\"\n    proto: http\n    subdomain: django\n  weixin:\n    addr: 80\n    proto: http\n    subdomain: weixin\n```\n\n现在执行\n```\nngrok start iblogc\n```\n\n试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。\n`http://iblogc.ngrok.io` `https://iblogc.ngrok.io` 协议均可以访问。\nngrok-start-iblogc.png)\n\n你也可以同时启动两个tunnel\n```\nngrok start iblogc django weixin\n```\nngrok-start-iblogc-django-weixin.png)\n\n因为我的django tunnel配置文件里添加了`auth`配置所以访问`http://django.ngrok.io`需要输入用户名密码。\nngrok-auth.png)\n\n假设`weixin`就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用`weixin.ngrok.com`进行配置了，所有发向此域名的请求都会转发到你的本地`127.0.0.1:80`上。\n\n### 4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开`http://127.0.0.1:4040`查看详细信息\nnrok-web-interface.png)\n\n### 5. 参考文档\n官方文档：https://ngrok.com/docs\n\n","slug":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","published":1,"updated":"2019-01-31T06:27:41.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yl8001cssyhogkwxerp","content":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-03-04 更新教程<br>2015-09-16 添加旧版软件下载<br>2015-02-04 初稿</p>\n<p>鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<a id=\"more\"></a></p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><h3 id=\"1-注册ngrok账号\"><a href=\"#1-注册ngrok账号\" class=\"headerlink\" title=\"1. 注册ngrok账号\"></a>1. <a href=\"https://dashboard.ngrok.com/user/signup\" target=\"_blank\" rel=\"noopener\">注册ngrok账号</a></h3><p>注册成功后拿到授权码<code>auth token</code>，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；</p>\n<h3 id=\"2-下载ngrok，解压；\"><a href=\"#2-下载ngrok，解压；\" class=\"headerlink\" title=\"2. 下载ngrok，解压；\"></a>2. <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"noopener\">下载ngrok</a>，解压；</h3><h3 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h3><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>让本地的‘<a href=\"http://127.0.0.1:80’\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:80’</a> 可以让外网访问<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ngrok</span> <span class=\"string\">http</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></p>\n<p>ngrok会随机分配一个二级域名，可直接通过外网可通过<code>http://xxxx.tunnel.mobi</code>来访问本机的<code>http://127.0.0.1:80</code>网站</p>\n<h5 id=\"方式二：使用配置文件启动\"><a href=\"#方式二：使用配置文件启动\" class=\"headerlink\" title=\"方式二：使用配置文件启动:\"></a>方式二：使用配置文件启动:</h5><p>在<code>ngrok.exe</code>目录下执行命令（不带尖括号），生成配置文件（配置文件会在<code>C:\\Users\\用户名/.ngrok2/ngrok.yml</code>下「windows」）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok authtoken &lt;you authtoken&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authtoken:&lt;you authtoken&gt;</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  # 自定义隧道名 </span><br><span class=\"line\">  iblogc:</span><br><span class=\"line\">    #本地服务端口 </span><br><span class=\"line\">    addr: 4000</span><br><span class=\"line\">    # 用于http/https里的身份认证</span><br><span class=\"line\">    #auth: &quot;username:password&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    # 二级域名，如果运行提示重复，换一个就行</span><br><span class=\"line\">    subdomain: iblogc</span><br><span class=\"line\">  django:</span><br><span class=\"line\">    addr: 8000</span><br><span class=\"line\">    auth: &quot;abc:123456&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: django</span><br><span class=\"line\">  weixin:</span><br><span class=\"line\">    addr: 80</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: weixin</span><br></pre></td></tr></table></figure></p>\n<p>现在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc</span><br></pre></td></tr></table></figure></p>\n<p>试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。<br><code>http://iblogc.ngrok.io</code> <code>https://iblogc.ngrok.io</code> 协议均可以访问。<br>ngrok-start-iblogc.png)</p>\n<p>你也可以同时启动两个tunnel<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc django weixin</span><br></pre></td></tr></table></figure></p>\n<p>ngrok-start-iblogc-django-weixin.png)</p>\n<p>因为我的django tunnel配置文件里添加了<code>auth</code>配置所以访问<code>http://django.ngrok.io</code>需要输入用户名密码。<br>ngrok-auth.png)</p>\n<p>假设<code>weixin</code>就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用<code>weixin.ngrok.com</code>进行配置了，所有发向此域名的请求都会转发到你的本地<code>127.0.0.1:80</code>上。</p>\n<h3 id=\"4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\"><a href=\"#4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\" class=\"headerlink\" title=\"4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开http://127.0.0.1:4040查看详细信息\"></a>4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开<code>http://127.0.0.1:4040</code>查看详细信息</h3><p>nrok-web-interface.png)</p>\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>官方文档：<a href=\"https://ngrok.com/docs\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/docs</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-03-04 更新教程<br>2015-09-16 添加旧版软件下载<br>2015-02-04 初稿</p>\n<p>鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。","more":"</p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><h3 id=\"1-注册ngrok账号\"><a href=\"#1-注册ngrok账号\" class=\"headerlink\" title=\"1. 注册ngrok账号\"></a>1. <a href=\"https://dashboard.ngrok.com/user/signup\" target=\"_blank\" rel=\"noopener\">注册ngrok账号</a></h3><p>注册成功后拿到授权码<code>auth token</code>，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；</p>\n<h3 id=\"2-下载ngrok，解压；\"><a href=\"#2-下载ngrok，解压；\" class=\"headerlink\" title=\"2. 下载ngrok，解压；\"></a>2. <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"noopener\">下载ngrok</a>，解压；</h3><h3 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h3><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>让本地的‘<a href=\"http://127.0.0.1:80’\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:80’</a> 可以让外网访问<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ngrok</span> <span class=\"string\">http</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></p>\n<p>ngrok会随机分配一个二级域名，可直接通过外网可通过<code>http://xxxx.tunnel.mobi</code>来访问本机的<code>http://127.0.0.1:80</code>网站</p>\n<h5 id=\"方式二：使用配置文件启动\"><a href=\"#方式二：使用配置文件启动\" class=\"headerlink\" title=\"方式二：使用配置文件启动:\"></a>方式二：使用配置文件启动:</h5><p>在<code>ngrok.exe</code>目录下执行命令（不带尖括号），生成配置文件（配置文件会在<code>C:\\Users\\用户名/.ngrok2/ngrok.yml</code>下「windows」）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok authtoken &lt;you authtoken&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authtoken:&lt;you authtoken&gt;</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  # 自定义隧道名 </span><br><span class=\"line\">  iblogc:</span><br><span class=\"line\">    #本地服务端口 </span><br><span class=\"line\">    addr: 4000</span><br><span class=\"line\">    # 用于http/https里的身份认证</span><br><span class=\"line\">    #auth: &quot;username:password&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    # 二级域名，如果运行提示重复，换一个就行</span><br><span class=\"line\">    subdomain: iblogc</span><br><span class=\"line\">  django:</span><br><span class=\"line\">    addr: 8000</span><br><span class=\"line\">    auth: &quot;abc:123456&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: django</span><br><span class=\"line\">  weixin:</span><br><span class=\"line\">    addr: 80</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: weixin</span><br></pre></td></tr></table></figure></p>\n<p>现在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc</span><br></pre></td></tr></table></figure></p>\n<p>试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。<br><code>http://iblogc.ngrok.io</code> <code>https://iblogc.ngrok.io</code> 协议均可以访问。<br>ngrok-start-iblogc.png)</p>\n<p>你也可以同时启动两个tunnel<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc django weixin</span><br></pre></td></tr></table></figure></p>\n<p>ngrok-start-iblogc-django-weixin.png)</p>\n<p>因为我的django tunnel配置文件里添加了<code>auth</code>配置所以访问<code>http://django.ngrok.io</code>需要输入用户名密码。<br>ngrok-auth.png)</p>\n<p>假设<code>weixin</code>就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用<code>weixin.ngrok.com</code>进行配置了，所有发向此域名的请求都会转发到你的本地<code>127.0.0.1:80</code>上。</p>\n<h3 id=\"4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\"><a href=\"#4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\" class=\"headerlink\" title=\"4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开http://127.0.0.1:4040查看详细信息\"></a>4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开<code>http://127.0.0.1:4040</code>查看详细信息</h3><p>nrok-web-interface.png)</p>\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>官方文档：<a href=\"https://ngrok.com/docs\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/docs</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Thu Jan 31 2019 14:27:41 GMT+0800 (China Standard Time)","title":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","path":"2015/02/04/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）/","eyeCatchImage":null,"excerpt":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-03-04 更新教程<br>2015-09-16 添加旧版软件下载<br>2015-02-04 初稿</p>\n<p>鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。","date":"2015-02-04T15:35:40.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["微信公众号","端口","ngrok","内网穿透"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1452},{"title":"使用Virtualenv创建独立的Python运行环境","date":"2015-01-01T12:39:14.000Z","_content":"\n## 准备工作\n\n- python环境\n- pip\n\n## 安装\n\n```\npip install virtualenv\n```\n或\n```\npip install https://github.com/pypa/virtualenv/tarball/develop\n```\n\n<!--more-->\n\n## 创建虚拟环境\n\n```\nvirtualenv myVE\n```\n\n指定python解释器\n\n```\n -p PYTHON_EXE, --python=PYTHON_EXE\n```\n\n*创建虚拟环境时默认会自动安装setuptools和pip*\n\n不安装setuptool\n\n```\n--no--setuptools\n```\n\n不安装pip\n\n```\n--no--pip\n```\n\n*更多Options请参考[官方文档](https://virtualenv.pypa.io/en/latest/reference.html)* \n\n## 启动虚拟环境\n\n Mac OS\n\n```\ncd myVE\nsource ./bin/activate\n```\n        \nWindows\n\n```\ncd myVE\nscripts\\activate\n```\n\n启动成功后可以在开头显示\"(myVE)\"，说明已经进入刚刚创建的虚拟环境了\n\n## 退出\n\n```\ndeactivate\n```\n\n## virtualenvwrapper \n\n### 安装\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n> 1. 将所有虚拟环境整合在一个目录下\n> 2. 管理（新增，删除，复制）虚拟环境\n> 3. 切换虚拟环境\n\n```\npip install virtualenvwrapper\n```\nWindows下还需额外安装virtualenvwrapper-win\n```\npip install virtualenvwrapper-win\n```\nubuntu需要将下面这句加入到`~/.bashrc`里面\n```\nif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then\n    source /usr/local/bin/virtualenvwrapper.sh\nfi\n```\n加入后需要重启才能生效，如果想要立即生效，输入命令\n```\nsource ~/.bashrc\n```\n\n\n### 常用命令\n*部分命令在windows下无效*\n\n- `workon myEnv`: 切换虚拟环境\n- `mkvirtualenv`: 新建工作环境\n- `rmvirtualenv`: 删除工作环境\n- `cdproject`: 切换到工程目录\n- `workon`/`lsvirtualenv`: 列出所有虚拟环境\n- `deactivate`: 退出虚拟环境\n- `cpvirtualenv [source] [dest]` 复制一份虚拟环境。\n- `cdvirtualenv [subdir]` 把当前工作目录设置为所在的环境目录。\n- `cdsitepackages [subdir]` 把当前工作目录设置为所在环境的sitepackages路径。\n- `add2virtualenv [dir] [dir]` 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。\n- `toggleglobalsitepackages -q` 控制当前的环境是否使用全局的sitepackages目录。\n\n---\n## 参考资料\n\nhttps://virtualenv.pypa.io/en/latest/\n\nhttp://virtualenvwrapper.readthedocs.org/en/latest/\n\nhttps://github.com/davidmarble/virtualenvwrapper-win","source":"_posts/使用virtualenv创建独立的python运行环境.md","raw":"title: 使用Virtualenv创建独立的Python运行环境\ndate: 2015-01-01 20:39:14\ncategories: [程序猿]\ntags: [Virtualenv,virtualenvwrapper,独立,虚拟环境,Python,requirements]\n---\n\n## 准备工作\n\n- python环境\n- pip\n\n## 安装\n\n```\npip install virtualenv\n```\n或\n```\npip install https://github.com/pypa/virtualenv/tarball/develop\n```\n\n<!--more-->\n\n## 创建虚拟环境\n\n```\nvirtualenv myVE\n```\n\n指定python解释器\n\n```\n -p PYTHON_EXE, --python=PYTHON_EXE\n```\n\n*创建虚拟环境时默认会自动安装setuptools和pip*\n\n不安装setuptool\n\n```\n--no--setuptools\n```\n\n不安装pip\n\n```\n--no--pip\n```\n\n*更多Options请参考[官方文档](https://virtualenv.pypa.io/en/latest/reference.html)* \n\n## 启动虚拟环境\n\n Mac OS\n\n```\ncd myVE\nsource ./bin/activate\n```\n        \nWindows\n\n```\ncd myVE\nscripts\\activate\n```\n\n启动成功后可以在开头显示\"(myVE)\"，说明已经进入刚刚创建的虚拟环境了\n\n## 退出\n\n```\ndeactivate\n```\n\n## virtualenvwrapper \n\n### 安装\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n> 1. 将所有虚拟环境整合在一个目录下\n> 2. 管理（新增，删除，复制）虚拟环境\n> 3. 切换虚拟环境\n\n```\npip install virtualenvwrapper\n```\nWindows下还需额外安装virtualenvwrapper-win\n```\npip install virtualenvwrapper-win\n```\nubuntu需要将下面这句加入到`~/.bashrc`里面\n```\nif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then\n    source /usr/local/bin/virtualenvwrapper.sh\nfi\n```\n加入后需要重启才能生效，如果想要立即生效，输入命令\n```\nsource ~/.bashrc\n```\n\n\n### 常用命令\n*部分命令在windows下无效*\n\n- `workon myEnv`: 切换虚拟环境\n- `mkvirtualenv`: 新建工作环境\n- `rmvirtualenv`: 删除工作环境\n- `cdproject`: 切换到工程目录\n- `workon`/`lsvirtualenv`: 列出所有虚拟环境\n- `deactivate`: 退出虚拟环境\n- `cpvirtualenv [source] [dest]` 复制一份虚拟环境。\n- `cdvirtualenv [subdir]` 把当前工作目录设置为所在的环境目录。\n- `cdsitepackages [subdir]` 把当前工作目录设置为所在环境的sitepackages路径。\n- `add2virtualenv [dir] [dir]` 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。\n- `toggleglobalsitepackages -q` 控制当前的环境是否使用全局的sitepackages目录。\n\n---\n## 参考资料\n\nhttps://virtualenv.pypa.io/en/latest/\n\nhttp://virtualenvwrapper.readthedocs.org/en/latest/\n\nhttps://github.com/davidmarble/virtualenvwrapper-win","slug":"使用virtualenv创建独立的python运行环境","published":1,"updated":"2020-01-17T07:59:58.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yl9001dssyh3mshcle3","content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>python环境</li>\n<li>pip</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pypa/virtualenv/tarball/develop</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv myVE</span><br></pre></td></tr></table></figure>\n<p>指定python解释器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p PYTHON_EXE, --python=PYTHON_EXE</span><br></pre></td></tr></table></figure>\n<p><em>创建虚拟环境时默认会自动安装setuptools和pip</em></p>\n<p>不安装setuptool</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--setuptools</span><br></pre></td></tr></table></figure>\n<p>不安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--pip</span><br></pre></td></tr></table></figure>\n<p><em>更多Options请参考<a href=\"https://virtualenv.pypa.io/en/latest/reference.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></em> </p>\n<h2 id=\"启动虚拟环境\"><a href=\"#启动虚拟环境\" class=\"headerlink\" title=\"启动虚拟环境\"></a>启动虚拟环境</h2><p> Mac OS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">scripts\\activate</span><br></pre></td></tr></table></figure>\n<p>启动成功后可以在开头显示”(myVE)”，说明已经进入刚刚创建的虚拟环境了</p>\n<h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<h2 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ol>\n<li>将所有虚拟环境整合在一个目录下</li>\n<li>管理（新增，删除，复制）虚拟环境</li>\n<li>切换虚拟环境</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<p>Windows下还需额外安装virtualenvwrapper-win<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p>\n<p>ubuntu需要将下面这句加入到<code>~/.bashrc</code>里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then</span><br><span class=\"line\">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>加入后需要重启才能生效，如果想要立即生效，输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><em>部分命令在windows下无效</em></p>\n<ul>\n<li><code>workon myEnv</code>: 切换虚拟环境</li>\n<li><code>mkvirtualenv</code>: 新建工作环境</li>\n<li><code>rmvirtualenv</code>: 删除工作环境</li>\n<li><code>cdproject</code>: 切换到工程目录</li>\n<li><code>workon</code>/<code>lsvirtualenv</code>: 列出所有虚拟环境</li>\n<li><code>deactivate</code>: 退出虚拟环境</li>\n<li><code>cpvirtualenv [source] [dest]</code> 复制一份虚拟环境。</li>\n<li><code>cdvirtualenv [subdir]</code> 把当前工作目录设置为所在的环境目录。</li>\n<li><code>cdsitepackages [subdir]</code> 把当前工作目录设置为所在环境的sitepackages路径。</li>\n<li><code>add2virtualenv [dir] [dir]</code> 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。</li>\n<li><code>toggleglobalsitepackages -q</code> 控制当前的环境是否使用全局的sitepackages目录。</li>\n</ul>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://virtualenv.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://virtualenv.pypa.io/en/latest/</a></p>\n<p><a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"noopener\">http://virtualenvwrapper.readthedocs.org/en/latest/</a></p>\n<p><a href=\"https://github.com/davidmarble/virtualenvwrapper-win\" target=\"_blank\" rel=\"noopener\">https://github.com/davidmarble/virtualenvwrapper-win</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>python环境</li>\n<li>pip</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pypa/virtualenv/tarball/develop</span><br></pre></td></tr></table></figure></p>","more":"<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv myVE</span><br></pre></td></tr></table></figure>\n<p>指定python解释器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p PYTHON_EXE, --python=PYTHON_EXE</span><br></pre></td></tr></table></figure>\n<p><em>创建虚拟环境时默认会自动安装setuptools和pip</em></p>\n<p>不安装setuptool</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--setuptools</span><br></pre></td></tr></table></figure>\n<p>不安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--pip</span><br></pre></td></tr></table></figure>\n<p><em>更多Options请参考<a href=\"https://virtualenv.pypa.io/en/latest/reference.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></em> </p>\n<h2 id=\"启动虚拟环境\"><a href=\"#启动虚拟环境\" class=\"headerlink\" title=\"启动虚拟环境\"></a>启动虚拟环境</h2><p> Mac OS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">scripts\\activate</span><br></pre></td></tr></table></figure>\n<p>启动成功后可以在开头显示”(myVE)”，说明已经进入刚刚创建的虚拟环境了</p>\n<h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<h2 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ol>\n<li>将所有虚拟环境整合在一个目录下</li>\n<li>管理（新增，删除，复制）虚拟环境</li>\n<li>切换虚拟环境</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<p>Windows下还需额外安装virtualenvwrapper-win<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p>\n<p>ubuntu需要将下面这句加入到<code>~/.bashrc</code>里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then</span><br><span class=\"line\">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>加入后需要重启才能生效，如果想要立即生效，输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><em>部分命令在windows下无效</em></p>\n<ul>\n<li><code>workon myEnv</code>: 切换虚拟环境</li>\n<li><code>mkvirtualenv</code>: 新建工作环境</li>\n<li><code>rmvirtualenv</code>: 删除工作环境</li>\n<li><code>cdproject</code>: 切换到工程目录</li>\n<li><code>workon</code>/<code>lsvirtualenv</code>: 列出所有虚拟环境</li>\n<li><code>deactivate</code>: 退出虚拟环境</li>\n<li><code>cpvirtualenv [source] [dest]</code> 复制一份虚拟环境。</li>\n<li><code>cdvirtualenv [subdir]</code> 把当前工作目录设置为所在的环境目录。</li>\n<li><code>cdsitepackages [subdir]</code> 把当前工作目录设置为所在环境的sitepackages路径。</li>\n<li><code>add2virtualenv [dir] [dir]</code> 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。</li>\n<li><code>toggleglobalsitepackages -q</code> 控制当前的环境是否使用全局的sitepackages目录。</li>\n</ul>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://virtualenv.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://virtualenv.pypa.io/en/latest/</a></p>\n<p><a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"noopener\">http://virtualenvwrapper.readthedocs.org/en/latest/</a></p>\n<p><a href=\"https://github.com/davidmarble/virtualenvwrapper-win\" target=\"_blank\" rel=\"noopener\">https://github.com/davidmarble/virtualenvwrapper-win</a></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:59:58 GMT+0800 (China Standard Time)","title":"使用Virtualenv创建独立的Python运行环境","path":"2015/01/01/使用virtualenv创建独立的python运行环境/","eyeCatchImage":null,"excerpt":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>python环境</li>\n<li>pip</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pypa/virtualenv/tarball/develop</span><br></pre></td></tr></table></figure></p>","date":"2015-01-01T12:39:14.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Python","Virtualenv","virtualenvwrapper","独立","虚拟环境","requirements"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1320},{"title":"使用Synergy实现多台电脑共享一套键鼠","date":"2015-08-29T15:52:41.000Z","_content":"![Synery-log.png](/media/Synergy-logo.png)\n\n因为家里有一台台式和一台笔记本，台式`Windows10`为日常使用，笔记本`Ubuntu&Windows7`，以前一直在`Windows`上敲代码，现在正转向`Ubuntu`，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫`Synergy`的软件，支持`Windows`, `Mac OS X`, `Linux `三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。\n<!--more-->\n## 安装\n在`Ubuntu`里打开终端，输入以下命令进行安装\n```\nsudo apt-get install synergy\n```\n在`Windwos`上双击安装。\n\n*`Ubuntu`我安装的是1.6.2，`Windwos`上是1.7.4 x64*\n\n## 配置\n\n### 服务器设置\n> `synergy`需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。\n> 本来是我想选择`Ubuntu`做为服务端的，但设置好后链接失败提示为`WARNING: failed to connect to server: incompatible client 1.5`，似乎是不兼容，但我的客户端版本是`1.6.2`不是`1.5`啊，所以作罢，只得选用`Windwos`来做服务端。\n\n1. 我们选用`Windwos`来做服务端，在`Windwos`打开软件，选择「server」；\nSynergy-Windows服务端配置首页.png)\n\n2. 点击「设置服务端」进行添加客户端操作；\nSynergy-Windows服务端添加客户端-01.png)\n\n3. 从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；\nSynergy-Windows服务端添加客户端-02.png)\n\n4. 双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；\nSynergy-Windows服务端添加客户端-03.png)\n\n5. 设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；\nSynergy-Windows服务端启动.png)\n\n### 客户端设置\n1. 客户端比较简单，在`Ubuntu`上打开`Synergy`，选择「Client」，在`Server IP`里输入服务端的IP，点击「Start」即可；\nSynergy-Ubuntu客户端配置首页.png)\n\n### 开机自启\n要在`Ubuntu`开机在登录界面前启动`synergy`，编辑`/etc/lightdm/lightdm.conf`文件添加`display-setup-script=/usr/bin/synergyc 192.168.9.102`，把`192.168.9.102`换成你自己的`synergy`服务端IP。\n\n## 完成\n到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在`Windows`左侧添加了`Ubuntu`，所以当我在`Windows`上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在`Ubuntu`屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。\n> 网上说`Synergy`支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。\n\n## 相关\n项目主页：https://github.com/synergy/synergy\n\n## 更新记录\n2015-08-29 初稿\n2015-09-03 补充`Ubuntu`客户端自启明说\n\n\n","source":"_posts/使用synergy实现多台电脑共享一套键鼠.md","raw":"title: 使用Synergy实现多台电脑共享一套键鼠\ndate: 2015-08-29 23:52:41\ncategories: [优化辅助]\ntags: [Synergy, 共享, 键盘]\n---\n![Synery-log.png](/media/Synergy-logo.png)\n\n因为家里有一台台式和一台笔记本，台式`Windows10`为日常使用，笔记本`Ubuntu&Windows7`，以前一直在`Windows`上敲代码，现在正转向`Ubuntu`，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫`Synergy`的软件，支持`Windows`, `Mac OS X`, `Linux `三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。\n<!--more-->\n## 安装\n在`Ubuntu`里打开终端，输入以下命令进行安装\n```\nsudo apt-get install synergy\n```\n在`Windwos`上双击安装。\n\n*`Ubuntu`我安装的是1.6.2，`Windwos`上是1.7.4 x64*\n\n## 配置\n\n### 服务器设置\n> `synergy`需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。\n> 本来是我想选择`Ubuntu`做为服务端的，但设置好后链接失败提示为`WARNING: failed to connect to server: incompatible client 1.5`，似乎是不兼容，但我的客户端版本是`1.6.2`不是`1.5`啊，所以作罢，只得选用`Windwos`来做服务端。\n\n1. 我们选用`Windwos`来做服务端，在`Windwos`打开软件，选择「server」；\nSynergy-Windows服务端配置首页.png)\n\n2. 点击「设置服务端」进行添加客户端操作；\nSynergy-Windows服务端添加客户端-01.png)\n\n3. 从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；\nSynergy-Windows服务端添加客户端-02.png)\n\n4. 双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；\nSynergy-Windows服务端添加客户端-03.png)\n\n5. 设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；\nSynergy-Windows服务端启动.png)\n\n### 客户端设置\n1. 客户端比较简单，在`Ubuntu`上打开`Synergy`，选择「Client」，在`Server IP`里输入服务端的IP，点击「Start」即可；\nSynergy-Ubuntu客户端配置首页.png)\n\n### 开机自启\n要在`Ubuntu`开机在登录界面前启动`synergy`，编辑`/etc/lightdm/lightdm.conf`文件添加`display-setup-script=/usr/bin/synergyc 192.168.9.102`，把`192.168.9.102`换成你自己的`synergy`服务端IP。\n\n## 完成\n到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在`Windows`左侧添加了`Ubuntu`，所以当我在`Windows`上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在`Ubuntu`屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。\n> 网上说`Synergy`支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。\n\n## 相关\n项目主页：https://github.com/synergy/synergy\n\n## 更新记录\n2015-08-29 初稿\n2015-09-03 补充`Ubuntu`客户端自启明说\n\n\n","slug":"使用synergy实现多台电脑共享一套键鼠","published":1,"updated":"2020-01-17T08:00:02.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yla001essyhy5ew753d","content":"<p><img alt=\"Synery-log.png\" data-src=\"/media/Synergy-logo.png\"></p>\n<p>因为家里有一台台式和一台笔记本，台式<code>Windows10</code>为日常使用，笔记本<code>Ubuntu&amp;Windows7</code>，以前一直在<code>Windows</code>上敲代码，现在正转向<code>Ubuntu</code>，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫<code>Synergy</code>的软件，支持<code>Windows</code>, <code>Mac OS X</code>, <code>Linux</code>三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在<code>Ubuntu</code>里打开终端，输入以下命令进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install synergy</span><br></pre></td></tr></table></figure></p>\n<p>在<code>Windwos</code>上双击安装。</p>\n<p><em><code>Ubuntu</code>我安装的是1.6.2，<code>Windwos</code>上是1.7.4 x64</em></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"服务器设置\"><a href=\"#服务器设置\" class=\"headerlink\" title=\"服务器设置\"></a>服务器设置</h3><blockquote>\n<p><code>synergy</code>需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。<br>本来是我想选择<code>Ubuntu</code>做为服务端的，但设置好后链接失败提示为<code>WARNING: failed to connect to server: incompatible client 1.5</code>，似乎是不兼容，但我的客户端版本是<code>1.6.2</code>不是<code>1.5</code>啊，所以作罢，只得选用<code>Windwos</code>来做服务端。</p>\n</blockquote>\n<ol>\n<li><p>我们选用<code>Windwos</code>来做服务端，在<code>Windwos</code>打开软件，选择「server」；<br>Synergy-Windows服务端配置首页.png)</p>\n</li>\n<li><p>点击「设置服务端」进行添加客户端操作；<br>Synergy-Windows服务端添加客户端-01.png)</p>\n</li>\n<li><p>从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；<br>Synergy-Windows服务端添加客户端-02.png)</p>\n</li>\n<li><p>双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；<br>Synergy-Windows服务端添加客户端-03.png)</p>\n</li>\n<li><p>设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；<br>Synergy-Windows服务端启动.png)</p>\n</li>\n</ol>\n<h3 id=\"客户端设置\"><a href=\"#客户端设置\" class=\"headerlink\" title=\"客户端设置\"></a>客户端设置</h3><ol>\n<li>客户端比较简单，在<code>Ubuntu</code>上打开<code>Synergy</code>，选择「Client」，在<code>Server IP</code>里输入服务端的IP，点击「Start」即可；<br>Synergy-Ubuntu客户端配置首页.png)</li>\n</ol>\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><p>要在<code>Ubuntu</code>开机在登录界面前启动<code>synergy</code>，编辑<code>/etc/lightdm/lightdm.conf</code>文件添加<code>display-setup-script=/usr/bin/synergyc 192.168.9.102</code>，把<code>192.168.9.102</code>换成你自己的<code>synergy</code>服务端IP。</p>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在<code>Windows</code>左侧添加了<code>Ubuntu</code>，所以当我在<code>Windows</code>上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在<code>Ubuntu</code>屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。</p>\n<blockquote>\n<p>网上说<code>Synergy</code>支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。</p>\n</blockquote>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><p>项目主页：<a href=\"https://github.com/synergy/synergy\" target=\"_blank\" rel=\"noopener\">https://github.com/synergy/synergy</a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-08-29 初稿<br>2015-09-03 补充<code>Ubuntu</code>客户端自启明说</p>\n","site":{"data":{}},"excerpt":"<p><img src=\"/media/Synergy-logo.png\" alt=\"Synery-log.png\"></p>\n<p>因为家里有一台台式和一台笔记本，台式<code>Windows10</code>为日常使用，笔记本<code>Ubuntu&amp;Windows7</code>，以前一直在<code>Windows</code>上敲代码，现在正转向<code>Ubuntu</code>，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫<code>Synergy</code>的软件，支持<code>Windows</code>, <code>Mac OS X</code>, <code>Linux</code>三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。<br>","more":"</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>在<code>Ubuntu</code>里打开终端，输入以下命令进行安装<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install synergy</span><br></pre></td></tr></table></figure></p>\n<p>在<code>Windwos</code>上双击安装。</p>\n<p><em><code>Ubuntu</code>我安装的是1.6.2，<code>Windwos</code>上是1.7.4 x64</em></p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"服务器设置\"><a href=\"#服务器设置\" class=\"headerlink\" title=\"服务器设置\"></a>服务器设置</h3><blockquote>\n<p><code>synergy</code>需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。<br>本来是我想选择<code>Ubuntu</code>做为服务端的，但设置好后链接失败提示为<code>WARNING: failed to connect to server: incompatible client 1.5</code>，似乎是不兼容，但我的客户端版本是<code>1.6.2</code>不是<code>1.5</code>啊，所以作罢，只得选用<code>Windwos</code>来做服务端。</p>\n</blockquote>\n<ol>\n<li><p>我们选用<code>Windwos</code>来做服务端，在<code>Windwos</code>打开软件，选择「server」；<br>Synergy-Windows服务端配置首页.png)</p>\n</li>\n<li><p>点击「设置服务端」进行添加客户端操作；<br>Synergy-Windows服务端添加客户端-01.png)</p>\n</li>\n<li><p>从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；<br>Synergy-Windows服务端添加客户端-02.png)</p>\n</li>\n<li><p>双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；<br>Synergy-Windows服务端添加客户端-03.png)</p>\n</li>\n<li><p>设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；<br>Synergy-Windows服务端启动.png)</p>\n</li>\n</ol>\n<h3 id=\"客户端设置\"><a href=\"#客户端设置\" class=\"headerlink\" title=\"客户端设置\"></a>客户端设置</h3><ol>\n<li>客户端比较简单，在<code>Ubuntu</code>上打开<code>Synergy</code>，选择「Client」，在<code>Server IP</code>里输入服务端的IP，点击「Start」即可；<br>Synergy-Ubuntu客户端配置首页.png)</li>\n</ol>\n<h3 id=\"开机自启\"><a href=\"#开机自启\" class=\"headerlink\" title=\"开机自启\"></a>开机自启</h3><p>要在<code>Ubuntu</code>开机在登录界面前启动<code>synergy</code>，编辑<code>/etc/lightdm/lightdm.conf</code>文件添加<code>display-setup-script=/usr/bin/synergyc 192.168.9.102</code>，把<code>192.168.9.102</code>换成你自己的<code>synergy</code>服务端IP。</p>\n<h2 id=\"完成\"><a href=\"#完成\" class=\"headerlink\" title=\"完成\"></a>完成</h2><p>到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在<code>Windows</code>左侧添加了<code>Ubuntu</code>，所以当我在<code>Windows</code>上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在<code>Ubuntu</code>屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。</p>\n<blockquote>\n<p>网上说<code>Synergy</code>支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。</p>\n</blockquote>\n<h2 id=\"相关\"><a href=\"#相关\" class=\"headerlink\" title=\"相关\"></a>相关</h2><p>项目主页：<a href=\"https://github.com/synergy/synergy\" target=\"_blank\" rel=\"noopener\">https://github.com/synergy/synergy</a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-08-29 初稿<br>2015-09-03 补充<code>Ubuntu</code>客户端自启明说</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 16:00:02 GMT+0800 (China Standard Time)","title":"使用Synergy实现多台电脑共享一套键鼠","path":"2015/08/29/使用synergy实现多台电脑共享一套键鼠/","eyeCatchImage":null,"excerpt":"<p><img src=\"/media/Synergy-logo.png\" alt=\"Synery-log.png\"></p>\n<p>因为家里有一台台式和一台笔记本，台式<code>Windows10</code>为日常使用，笔记本<code>Ubuntu&amp;Windows7</code>，以前一直在<code>Windows</code>上敲代码，现在正转向<code>Ubuntu</code>，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫<code>Synergy</code>的软件，支持<code>Windows</code>, <code>Mac OS X</code>, <code>Linux</code>三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。<br>","date":"2015-08-29T15:52:41.000Z","pv":0,"totalPV":0,"categories":"优化辅助","tags":["Synergy","共享","键盘"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1387},{"title":"内网穿透工具frp客户端自定义子域名访问配置","date":"2017-08-16T08:36:56.000Z","_content":"<br />\n<!--more-->\n## 前提\nA: 公网电脑\nB: 内网电脑\n\n## 下载\n从[releases]([Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases))下载系统对应的压缩包，Mac可使用`darwin amd64`的包，在公网电脑和本地电脑各放一份。\n\n## 配置\n公网电脑上`frps.ini`\n```\n[common]\n# 用于接收 frpc 连接的端口\nbind_port = 7000\n# 通过此端口访问http服务\nvhost_http_port = 8080\n# 日志文件输出位置\nlog_file = ./frps.log\n# 日志等级\nlog_level = info\n# 域名\nsubdomain_host = example.com\n# frp管理后台端口\ndashboard_port = 7500\n# frp管理后台用户名\ndashboard_user = admin\n# frp管理后台密码\ndashboard_pwd = admin\n```\n\n本地电脑上`frpc.ini`\n```\n[common]\n# 公网电脑IP\nserver_addr = 111.111.111.111\n# frp连接的端口\nserver_port = 7000\n\n[web]\ntype = http\n# 本地http服务端口\nlocal_port = 8080\n# 子域名前缀, 子域名前缀里不要使用下划线\"_\"，不然可能会出现莫名其妙的400错误可以用\"-\"代替。\nsubdomain = iblogc\n```\n\n配置域名`example.com`的A记录的泛解析\n`*.example.com`指向公网电脑IP`111.111.111.111`\n\n## 运行\n1. 在内网电脑B上`8080`端口运行`http`服务\n2. 在公网电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frps -c ./frps.ini\n```\n3. 在本地电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frpc -c ./frpc.ini\n```\n\n## 成功\n在任何一台能联网的机器上访问 `http://iblogc.example.com:8080` 即可访问内网电脑B上的http服务。\n在任务一台能联网的机器上访问`111.111.111.111:7500`即可访问frp的管理后台。\n\n## frps服务端与nginx可共用80端口\n\n```\nserver {\n       listen 80;\n       server_name *.example.com;\n       location / {\n           proxy_pass http://127.0.0.1:8080;\n           proxy_redirect http://$host/ http://$http_host/;\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header Host $host;\n       }\n}\n```","source":"_posts/内网穿透工具frp客户端自定义子域名访问配置.md","raw":"---\ntitle: 内网穿透工具frp客户端自定义子域名访问配置\ndate: 2017-08-16 16:36:56\ntags: [教程, 内网穿透]\ncategories: [程序猿]\n---\n<br />\n<!--more-->\n## 前提\nA: 公网电脑\nB: 内网电脑\n\n## 下载\n从[releases]([Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases))下载系统对应的压缩包，Mac可使用`darwin amd64`的包，在公网电脑和本地电脑各放一份。\n\n## 配置\n公网电脑上`frps.ini`\n```\n[common]\n# 用于接收 frpc 连接的端口\nbind_port = 7000\n# 通过此端口访问http服务\nvhost_http_port = 8080\n# 日志文件输出位置\nlog_file = ./frps.log\n# 日志等级\nlog_level = info\n# 域名\nsubdomain_host = example.com\n# frp管理后台端口\ndashboard_port = 7500\n# frp管理后台用户名\ndashboard_user = admin\n# frp管理后台密码\ndashboard_pwd = admin\n```\n\n本地电脑上`frpc.ini`\n```\n[common]\n# 公网电脑IP\nserver_addr = 111.111.111.111\n# frp连接的端口\nserver_port = 7000\n\n[web]\ntype = http\n# 本地http服务端口\nlocal_port = 8080\n# 子域名前缀, 子域名前缀里不要使用下划线\"_\"，不然可能会出现莫名其妙的400错误可以用\"-\"代替。\nsubdomain = iblogc\n```\n\n配置域名`example.com`的A记录的泛解析\n`*.example.com`指向公网电脑IP`111.111.111.111`\n\n## 运行\n1. 在内网电脑B上`8080`端口运行`http`服务\n2. 在公网电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frps -c ./frps.ini\n```\n3. 在本地电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frpc -c ./frpc.ini\n```\n\n## 成功\n在任何一台能联网的机器上访问 `http://iblogc.example.com:8080` 即可访问内网电脑B上的http服务。\n在任务一台能联网的机器上访问`111.111.111.111:7500`即可访问frp的管理后台。\n\n## frps服务端与nginx可共用80端口\n\n```\nserver {\n       listen 80;\n       server_name *.example.com;\n       location / {\n           proxy_pass http://127.0.0.1:8080;\n           proxy_redirect http://$host/ http://$http_host/;\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header Host $host;\n       }\n}\n```","slug":"内网穿透工具frp客户端自定义子域名访问配置","published":1,"updated":"2019-04-09T03:26:20.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0ylc001fssyho8hrenqt","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>A: 公网电脑<br>B: 内网电脑</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>从<a href=\"[Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases\">releases</a>)下载系统对应的压缩包，Mac可使用<code>darwin amd64</code>的包，在公网电脑和本地电脑各放一份。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>公网电脑上<code>frps.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 用于接收 frpc 连接的端口</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"># 通过此端口访问http服务</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\"># 日志文件输出位置</span><br><span class=\"line\">log_file = ./frps.log</span><br><span class=\"line\"># 日志等级</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\"># 域名</span><br><span class=\"line\">subdomain_host = example.com</span><br><span class=\"line\"># frp管理后台端口</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># frp管理后台用户名</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\"># frp管理后台密码</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></p>\n<p>本地电脑上<code>frpc.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 公网电脑IP</span><br><span class=\"line\">server_addr = 111.111.111.111</span><br><span class=\"line\"># frp连接的端口</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地http服务端口</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 子域名前缀, 子域名前缀里不要使用下划线&quot;_&quot;，不然可能会出现莫名其妙的400错误可以用&quot;-&quot;代替。</span><br><span class=\"line\">subdomain = iblogc</span><br></pre></td></tr></table></figure></p>\n<p>配置域名<code>example.com</code>的A记录的泛解析<br><code>*.example.com</code>指向公网电脑IP<code>111.111.111.111</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>在内网电脑B上<code>8080</code>端口运行<code>http</code>服务</li>\n<li><p>在公网电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2><p>在任何一台能联网的机器上访问 <code>http://iblogc.example.com:8080</code> 即可访问内网电脑B上的http服务。<br>在任务一台能联网的机器上访问<code>111.111.111.111:7500</code>即可访问frp的管理后台。</p>\n<h2 id=\"frps服务端与nginx可共用80端口\"><a href=\"#frps服务端与nginx可共用80端口\" class=\"headerlink\" title=\"frps服务端与nginx可共用80端口\"></a>frps服务端与nginx可共用80端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen 80;</span><br><span class=\"line\">       server_name *.example.com;</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">           proxy_redirect http://$host/ http://$http_host/;</span><br><span class=\"line\">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">           proxy_set_header Host $host;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>A: 公网电脑<br>B: 内网电脑</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>从<a href=\"[Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases\">releases</a>)下载系统对应的压缩包，Mac可使用<code>darwin amd64</code>的包，在公网电脑和本地电脑各放一份。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>公网电脑上<code>frps.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 用于接收 frpc 连接的端口</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"># 通过此端口访问http服务</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\"># 日志文件输出位置</span><br><span class=\"line\">log_file = ./frps.log</span><br><span class=\"line\"># 日志等级</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\"># 域名</span><br><span class=\"line\">subdomain_host = example.com</span><br><span class=\"line\"># frp管理后台端口</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># frp管理后台用户名</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\"># frp管理后台密码</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></p>\n<p>本地电脑上<code>frpc.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 公网电脑IP</span><br><span class=\"line\">server_addr = 111.111.111.111</span><br><span class=\"line\"># frp连接的端口</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地http服务端口</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 子域名前缀, 子域名前缀里不要使用下划线&quot;_&quot;，不然可能会出现莫名其妙的400错误可以用&quot;-&quot;代替。</span><br><span class=\"line\">subdomain = iblogc</span><br></pre></td></tr></table></figure></p>\n<p>配置域名<code>example.com</code>的A记录的泛解析<br><code>*.example.com</code>指向公网电脑IP<code>111.111.111.111</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>在内网电脑B上<code>8080</code>端口运行<code>http</code>服务</li>\n<li><p>在公网电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2><p>在任何一台能联网的机器上访问 <code>http://iblogc.example.com:8080</code> 即可访问内网电脑B上的http服务。<br>在任务一台能联网的机器上访问<code>111.111.111.111:7500</code>即可访问frp的管理后台。</p>\n<h2 id=\"frps服务端与nginx可共用80端口\"><a href=\"#frps服务端与nginx可共用80端口\" class=\"headerlink\" title=\"frps服务端与nginx可共用80端口\"></a>frps服务端与nginx可共用80端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen 80;</span><br><span class=\"line\">       server_name *.example.com;</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">           proxy_redirect http://$host/ http://$http_host/;</span><br><span class=\"line\">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">           proxy_set_header Host $host;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Apr 09 2019 11:26:20 GMT+0800 (China Standard Time)","title":"内网穿透工具frp客户端自定义子域名访问配置","path":"2017/08/16/内网穿透工具frp客户端自定义子域名访问配置/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2017-08-16T08:36:56.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["教程","内网穿透"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1306},{"title":"在macOS上更改Jenkins的默认用户，解决权限问题","comments":1,"date":"2017-08-24T06:29:14.000Z","_content":"<br />\n<!--more-->\n在MacOS上使用`dmg`安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为`jenkins`的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。\n\n```shell\n#停止Jenkins\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n# 修改Group和User\n# <用户名>填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号\n$ sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/<用户名> +wq org.jenkins-ci.plist\n\n# 可能相应文件夹的权限\nsudo chown -R <用户名>:staff /Users/Shared/Jenkins/\nsudo chown -R <用户名>:staff /var/log/jenkins/\n\n# 启动Jenkins\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```","source":"_posts/在macos上更改jenkins默认用户解决权限问题.md","raw":"---\ntitle: 在macOS上更改Jenkins的默认用户，解决权限问题\ncomments: true\ndate: 2017-08-24 14:29:14\ntags: [Jenkins,macOS,权限,用户]\ncategories: [程序猿]\n---\n<br />\n<!--more-->\n在MacOS上使用`dmg`安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为`jenkins`的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。\n\n```shell\n#停止Jenkins\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n# 修改Group和User\n# <用户名>填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号\n$ sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/<用户名> +wq org.jenkins-ci.plist\n\n# 可能相应文件夹的权限\nsudo chown -R <用户名>:staff /Users/Shared/Jenkins/\nsudo chown -R <用户名>:staff /var/log/jenkins/\n\n# 启动Jenkins\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```","slug":"在macos上更改jenkins默认用户解决权限问题","published":1,"updated":"2020-01-17T07:58:33.377Z","layout":"post","photos":[],"link":"","_id":"ck8kk0yld001gssyhmizb1ewp","content":"<p><br><br><a id=\"more\"></a><br>在MacOS上使用<code>dmg</code>安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为<code>jenkins</code>的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止Jenkins</span></span><br><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改Group和User</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &lt;用户名&gt;填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/&lt;用户名&gt; +wq org.jenkins-ci.plist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可能相应文件夹的权限</span></span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /Users/Shared/Jenkins/</span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /var/log/jenkins/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Jenkins</span></span><br><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p><br><br>","more":"<br>在MacOS上使用<code>dmg</code>安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为<code>jenkins</code>的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止Jenkins</span></span><br><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改Group和User</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &lt;用户名&gt;填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/&lt;用户名&gt; +wq org.jenkins-ci.plist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可能相应文件夹的权限</span></span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /Users/Shared/Jenkins/</span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /var/log/jenkins/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Jenkins</span></span><br><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:58:33 GMT+0800 (China Standard Time)","title":"在macOS上更改Jenkins的默认用户，解决权限问题","path":"2017/08/24/在macos上更改jenkins默认用户解决权限问题/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2017-08-24T06:29:14.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["macOS","Jenkins","权限","用户"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":601},{"title":"电影《小黄人》中文预告片","date":"2014-11-09T14:04:05.000Z","_content":"<!--more-->\n导演: 凯尔·巴尔达 / 皮埃尔·科芬\n编剧: 布莱恩·林奇\n主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum\n类型: 喜剧 / 动画 / 家庭\n制片国家/地区: 美国\n语言: 英语\n上映日期: 2015-07-10(美国)\n又名: 小黄人大电影\n豆瓣链接: [小黄人](http://movie.douban.com/subject/11624706/)\n预告版:\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=0 allowfullscreen></iframe>","source":"_posts/电影《小黄人》中文预告片.md","raw":"title: 电影《小黄人》中文预告片\ndate: 2014-11-09 22:04:05\ncategories: [影视]\ntags: [电影,小黄人,预告片]\n---\n<!--more-->\n导演: 凯尔·巴尔达 / 皮埃尔·科芬\n编剧: 布莱恩·林奇\n主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum\n类型: 喜剧 / 动画 / 家庭\n制片国家/地区: 美国\n语言: 英语\n上映日期: 2015-07-10(美国)\n又名: 小黄人大电影\n豆瓣链接: [小黄人](http://movie.douban.com/subject/11624706/)\n预告版:\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=0 allowfullscreen></iframe>","slug":"电影《小黄人》中文预告片","published":1,"updated":"2020-01-17T08:00:19.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0yle001hssyhxmu307m6","content":"<a id=\"more\"></a>\n<p>导演: 凯尔·巴尔达 / 皮埃尔·科芬<br>编剧: 布莱恩·林奇<br>主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum<br>类型: 喜剧 / 动画 / 家庭<br>制片国家/地区: 美国<br>语言: 英语<br>上映日期: 2015-07-10(美国)<br>又名: 小黄人大电影<br>豆瓣链接: <a href=\"http://movie.douban.com/subject/11624706/\" target=\"_blank\" rel=\"noopener\">小黄人</a><br>预告版:</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=\"0\" allowfullscreen></iframe>","site":{"data":{}},"excerpt":"","more":"<p>导演: 凯尔·巴尔达 / 皮埃尔·科芬<br>编剧: 布莱恩·林奇<br>主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum<br>类型: 喜剧 / 动画 / 家庭<br>制片国家/地区: 美国<br>语言: 英语<br>上映日期: 2015-07-10(美国)<br>又名: 小黄人大电影<br>豆瓣链接: <a href=\"http://movie.douban.com/subject/11624706/\" target=\"_blank\" rel=\"noopener\">小黄人</a><br>预告版:</p>\n<iframe height=\"498\" width=\"510\" src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=\"0\" allowfullscreen></iframe>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 16:00:19 GMT+0800 (China Standard Time)","title":"电影《小黄人》中文预告片","path":"2014/11/09/电影《小黄人》中文预告片/","eyeCatchImage":null,"excerpt":null,"date":"2014-11-09T14:04:05.000Z","pv":0,"totalPV":0,"categories":"影视","tags":["电影","小黄人","预告片"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":195},{"title":"代码托管平台码云(Gitee)到Gitea迁移记","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-03-01T11:42:34.000Z","_content":"团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。\n\n<!--more-->\n\n### 安装Gitea\n\n因为服务器上刚好装有docker，按照[官方文档](https://docs.gitea.io/zh-cn/install-with-docker/)选择了最简单的docker安装。\n\n```shell\ndocker pull gitea/gitea:latest\nsudo mkdir -p /data/gitea\ndocker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest\n// 重启gitea\ndocker restart gitea\n```\n\n安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章\n\n[Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH](https://github.com/xhlwill/blog/issues/17)，按照此方法解决。\n\n\n\n### 配置Nginx\n\n在服务器Nginx上配置反向代理\n\nvi /etc/nginx/conf.d/gitea.conf\n\n```ini\nupstream gitea {\n    server 127.0.0.1:10080;\n    keepalive 2000;\n}\nserver {\n    listen       80;\n    server_name  git.i.example.com;\n    client_max_body_size 1024M;\n\n    location / {\n        proxy_pass http://gitea/;\n        proxy_set_header Host $host:$server_port;\n    }\n}\n```\n\n重新加载配置\n\n```shell\nsudo nginx -s reload\n```\n\n\n\n### 域名解析\n\ngit.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。\n\n\n\n### Gitea初始化\n\n打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件[配置说明](https://docs.gitea.io/zh-cn/config-cheat-sheet/)，修改完成后重启下gitea即可生效。\n\n\n\n### 仓库迁移\n\n因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来**[操作1]**，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码**[操作2]**，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作**[操作3]**\n\n\n\n**[操作1]**：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是\n\n```\nPOST /repos/migrate?access_token=<your gitea admin access token>\n\nRequest body\n{\n    description: MigrateRepoForm form for migrating repository\n    auth_password: string\n    auth_username: string\n    clone_addr*: string\n    description: string\n    issues: boolean\n    labels: boolean\n    milestones: boolean\n    mirror: boolean\n    private: boolean\n    pull_requests: boolean\n    releases: boolean\n    repo_name*: string\n    uid*: integer($int64)\n    wiki: boolean\n}\n```\n\n***注：***\n\n1. access_token 请在有管理员权限的账号的设置>应用中创建；\n\n2. Request body 中的uid即管理后台>账户管理/组织管理中的ID列值；\n\n   \n\n找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似\n\nvi gitee-url.txt\n\n```\nhttps://gitee.com/example/project_a.git\nhttps://gitee.com/example/project_b.git\n```\n\n使用shell脚本逐行读取url，并调用Gitea api迁移仓库。\n\n```shell\n#!/bin/bash\n\nfor line in $(<gitee-url.txt);\ndo\n\t\t# Windows注释下面这行\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=<your gitea admin access token>\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"auth_password\\\": \\\"NDY2&F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true}\";\ndone\n```\n\n\n\n**[操作2]**：从Gitee上同步最新代码\n\n```shell\nfor line in $(<gitee-url.txt);\ndo\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/{owner}/$project_name/mirror-sync?access_token=<your gitea admin access token>\" -H \"accept: application/json\"\ndone\n```\n\n***注：***owner为项目拥有者用户名/组织名\n\n\n\n**[操作3]**：原本地仓库Git远程仓库地址替换\n\n```shell\n// http地址\n// 原代码仓库http地址：https://gitee.com/example/project_a.git\n// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git\n// https://gitee.com/example > http://git.i.example.com/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config\n\n// ssh地址\n// 原代码仓库ssh地址：git@gitee.com:example/project_a.git\n// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git\n// git@gitee.com:example > ssh://git@git.i.example.com:10022/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config\n```\n\n1. 如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；\n\n2. 如果以前是用ssh克隆的仓库的话，现在在Gitea的设置>SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；\n\n\n### 仓库备份\n\nGitea有自己的备份与恢复功能[备份与恢复](https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D)，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：\n\nbackup.py\n\n> 如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。\n\n** python\n```python\n#!/usr/bin/python3\nimport os\nimport platform\nimport requests\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\naccess_token = \"<your access token>\"\nrepos_url = 'http://git.i.example.com/api/v1/repos/search?access_token={}&page={}&limit={}'\nbranches_url = 'http://git.i.example.com/api/v1/repos/{}/branches?access_token={}'\nrepo_key_url = 'http://git.i.example.com/api/v1/repos/{}/{}/keys?access_token={}'\n\n\ndef repos():\n    page = 1\n    limit = 50\n    has_next = True\n    while has_next:\n        r = requests.get(repos_url.format(access_token, page, limit))\n        for repo in r.json()['data']:\n            yield repo\n        page += 1\n        has_next = len(r.json()['data']) == limit\n\n\n\"\"\"拉取项目所有分支代码到本地\"\"\"\n\n\ndef sync_repo():\n    repo_index = 0\n    for repo in repos():\n        repo_index += 1\n        # 克隆仓库\n        os.chdir(current_dir)\n        print('克隆第 {} 个仓库 {} '.format(repo_index, repo['name']))\n        os.system(\"git clone {}\".format(repo['ssh_url']))\n        os.chdir(os.path.join(current_dir, repo['name']))\n        # 更新仓库\n        print('同步 {} 仓库所有分支'.format(repo['name']))\n        os.system('git fetch --all')\n        # if platform.system() == 'Windows':\n        # Windows\n        branches = requests.get(branches_url.format(\n            repo['full_name'], access_token)).json()\n        for branch in branches:\n            branch_name = branch['name']\n            os.system('git branch --track {} origin/{}'.format(branch_name, branch_name))\n            # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n            os.system('git checkout {} && git reset --hard origin/{}'.format(branch_name, branch_name))\n        # else:\n        #     # Linux/macOS\n        #     # git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\n        #     # os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\")\n        #     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n        #     os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; git checkout ${remote#origin/}; git reset --hard $remote; done\")\n\n\n\"\"\"设置项目部署公钥\"\"\"\n\n\ndef set_pub_key():\n    repo_index = 0\n    body = {\n        \"key\": \"ssh-rsa aabbcc\",\n        \"read_only\": True,\n        \"title\": \"SandBox\"\n    }\n    for repo in repos():\n        repo_index += 1\n        print('==={}. {}==='.format(repo_index, repo['name']))\n        r = requests.post(repo_key_url.format(\n            repo['owner']['username'], repo['name'], access_token), data=body)\n        print(r.json())\n\n\nif __name__ == '__main__':\n    sync_repo()\n    # set_pub_key()\n```\n\n可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行`python backup.py`\n\n*[Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。](https://blog.csdn.net/flydragon0815/article/details/46006473)*","source":"_posts/Gitee2Gitea.md","raw":"---\ntitle: 代码托管平台码云(Gitee)到Gitea迁移记\ncomments: true\ntags: [Git, Gitee, GitLab, Gite, Gogs, 迁移, 代码, Python]\ncategories: [程序猿]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-03-01 19:42:34\n---\n团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。\n\n<!--more-->\n\n### 安装Gitea\n\n因为服务器上刚好装有docker，按照[官方文档](https://docs.gitea.io/zh-cn/install-with-docker/)选择了最简单的docker安装。\n\n```shell\ndocker pull gitea/gitea:latest\nsudo mkdir -p /data/gitea\ndocker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest\n// 重启gitea\ndocker restart gitea\n```\n\n安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章\n\n[Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH](https://github.com/xhlwill/blog/issues/17)，按照此方法解决。\n\n\n\n### 配置Nginx\n\n在服务器Nginx上配置反向代理\n\nvi /etc/nginx/conf.d/gitea.conf\n\n```ini\nupstream gitea {\n    server 127.0.0.1:10080;\n    keepalive 2000;\n}\nserver {\n    listen       80;\n    server_name  git.i.example.com;\n    client_max_body_size 1024M;\n\n    location / {\n        proxy_pass http://gitea/;\n        proxy_set_header Host $host:$server_port;\n    }\n}\n```\n\n重新加载配置\n\n```shell\nsudo nginx -s reload\n```\n\n\n\n### 域名解析\n\ngit.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。\n\n\n\n### Gitea初始化\n\n打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件[配置说明](https://docs.gitea.io/zh-cn/config-cheat-sheet/)，修改完成后重启下gitea即可生效。\n\n\n\n### 仓库迁移\n\n因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来**[操作1]**，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码**[操作2]**，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作**[操作3]**\n\n\n\n**[操作1]**：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是\n\n```\nPOST /repos/migrate?access_token=<your gitea admin access token>\n\nRequest body\n{\n    description: MigrateRepoForm form for migrating repository\n    auth_password: string\n    auth_username: string\n    clone_addr*: string\n    description: string\n    issues: boolean\n    labels: boolean\n    milestones: boolean\n    mirror: boolean\n    private: boolean\n    pull_requests: boolean\n    releases: boolean\n    repo_name*: string\n    uid*: integer($int64)\n    wiki: boolean\n}\n```\n\n***注：***\n\n1. access_token 请在有管理员权限的账号的设置>应用中创建；\n\n2. Request body 中的uid即管理后台>账户管理/组织管理中的ID列值；\n\n   \n\n找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似\n\nvi gitee-url.txt\n\n```\nhttps://gitee.com/example/project_a.git\nhttps://gitee.com/example/project_b.git\n```\n\n使用shell脚本逐行读取url，并调用Gitea api迁移仓库。\n\n```shell\n#!/bin/bash\n\nfor line in $(<gitee-url.txt);\ndo\n\t\t# Windows注释下面这行\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=<your gitea admin access token>\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"auth_password\\\": \\\"NDY2&F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true}\";\ndone\n```\n\n\n\n**[操作2]**：从Gitee上同步最新代码\n\n```shell\nfor line in $(<gitee-url.txt);\ndo\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/{owner}/$project_name/mirror-sync?access_token=<your gitea admin access token>\" -H \"accept: application/json\"\ndone\n```\n\n***注：***owner为项目拥有者用户名/组织名\n\n\n\n**[操作3]**：原本地仓库Git远程仓库地址替换\n\n```shell\n// http地址\n// 原代码仓库http地址：https://gitee.com/example/project_a.git\n// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git\n// https://gitee.com/example > http://git.i.example.com/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config\n\n// ssh地址\n// 原代码仓库ssh地址：git@gitee.com:example/project_a.git\n// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git\n// git@gitee.com:example > ssh://git@git.i.example.com:10022/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config\n```\n\n1. 如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；\n\n2. 如果以前是用ssh克隆的仓库的话，现在在Gitea的设置>SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；\n\n\n### 仓库备份\n\nGitea有自己的备份与恢复功能[备份与恢复](https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D)，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：\n\nbackup.py\n\n> 如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。\n\n** python\n```python\n#!/usr/bin/python3\nimport os\nimport platform\nimport requests\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\naccess_token = \"<your access token>\"\nrepos_url = 'http://git.i.example.com/api/v1/repos/search?access_token={}&page={}&limit={}'\nbranches_url = 'http://git.i.example.com/api/v1/repos/{}/branches?access_token={}'\nrepo_key_url = 'http://git.i.example.com/api/v1/repos/{}/{}/keys?access_token={}'\n\n\ndef repos():\n    page = 1\n    limit = 50\n    has_next = True\n    while has_next:\n        r = requests.get(repos_url.format(access_token, page, limit))\n        for repo in r.json()['data']:\n            yield repo\n        page += 1\n        has_next = len(r.json()['data']) == limit\n\n\n\"\"\"拉取项目所有分支代码到本地\"\"\"\n\n\ndef sync_repo():\n    repo_index = 0\n    for repo in repos():\n        repo_index += 1\n        # 克隆仓库\n        os.chdir(current_dir)\n        print('克隆第 {} 个仓库 {} '.format(repo_index, repo['name']))\n        os.system(\"git clone {}\".format(repo['ssh_url']))\n        os.chdir(os.path.join(current_dir, repo['name']))\n        # 更新仓库\n        print('同步 {} 仓库所有分支'.format(repo['name']))\n        os.system('git fetch --all')\n        # if platform.system() == 'Windows':\n        # Windows\n        branches = requests.get(branches_url.format(\n            repo['full_name'], access_token)).json()\n        for branch in branches:\n            branch_name = branch['name']\n            os.system('git branch --track {} origin/{}'.format(branch_name, branch_name))\n            # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n            os.system('git checkout {} && git reset --hard origin/{}'.format(branch_name, branch_name))\n        # else:\n        #     # Linux/macOS\n        #     # git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\n        #     # os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\")\n        #     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n        #     os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; git checkout ${remote#origin/}; git reset --hard $remote; done\")\n\n\n\"\"\"设置项目部署公钥\"\"\"\n\n\ndef set_pub_key():\n    repo_index = 0\n    body = {\n        \"key\": \"ssh-rsa aabbcc\",\n        \"read_only\": True,\n        \"title\": \"SandBox\"\n    }\n    for repo in repos():\n        repo_index += 1\n        print('==={}. {}==='.format(repo_index, repo['name']))\n        r = requests.post(repo_key_url.format(\n            repo['owner']['username'], repo['name'], access_token), data=body)\n        print(r.json())\n\n\nif __name__ == '__main__':\n    sync_repo()\n    # set_pub_key()\n```\n\n可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行`python backup.py`\n\n*[Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。](https://blog.csdn.net/flydragon0815/article/details/46006473)*","slug":"Gitee2Gitea","published":1,"updated":"2020-03-24T06:15:27.492Z","layout":"post","photos":[],"link":"","_id":"ck8kk0zce001kssyhnz1rc1mk","content":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\" target=\"_blank\" rel=\"noopener\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\" target=\"_blank\" rel=\"noopener\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080;</span><br><span class=\"line\">    keepalive 2000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  git.i.example.com;</span><br><span class=\"line\">    client_max_body_size 1024M;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/;</span><br><span class=\"line\">        proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta\">\t\t#</span><span class=\"bash\"> Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"&#123; \\\"auth_password\\\": \\\"NDY2&amp;F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true&#125;\";</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\"</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\" target=\"_blank\" rel=\"noopener\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">\"&lt;your access token&gt;\"</span></span><br><span class=\"line\">repos_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;'</span></span><br><span class=\"line\">branches_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;'</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repos</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.format(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">'data'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = len(r.json()[<span class=\"string\">'data'</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"拉取项目所有分支代码到本地\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sync_repo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        print(<span class=\"string\">'克隆第 &#123;&#125; 个仓库 &#123;&#125; '</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">\"git clone &#123;&#125;\"</span>.format(repo[<span class=\"string\">'ssh_url'</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        print(<span class=\"string\">'同步 &#123;&#125; 仓库所有分支'</span>.format(repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">'git fetch --all'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == 'Windows':</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'full_name'</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">'git branch --track &#123;&#125; origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">'git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all\")</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"设置项目部署公钥\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_pub_key</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"ssh-rsa aabbcc\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"read_only\"</span>: <span class=\"keyword\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"SandBox\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'===&#123;&#125;. &#123;&#125;==='</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'owner'</span>][<span class=\"string\">'username'</span>], repo[<span class=\"string\">'name'</span>], access_token), data=body)</span><br><span class=\"line\">        print(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\" target=\"_blank\" rel=\"noopener\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>\n","site":{"data":{}},"excerpt":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>","more":"<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\" target=\"_blank\" rel=\"noopener\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\" target=\"_blank\" rel=\"noopener\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080;</span><br><span class=\"line\">    keepalive 2000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  git.i.example.com;</span><br><span class=\"line\">    client_max_body_size 1024M;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/;</span><br><span class=\"line\">        proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta\">\t\t#</span><span class=\"bash\"> Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"&#123; \\\"auth_password\\\": \\\"NDY2&amp;F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true&#125;\";</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\"</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\" target=\"_blank\" rel=\"noopener\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">\"&lt;your access token&gt;\"</span></span><br><span class=\"line\">repos_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;'</span></span><br><span class=\"line\">branches_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;'</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repos</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.format(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">'data'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = len(r.json()[<span class=\"string\">'data'</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"拉取项目所有分支代码到本地\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sync_repo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        print(<span class=\"string\">'克隆第 &#123;&#125; 个仓库 &#123;&#125; '</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">\"git clone &#123;&#125;\"</span>.format(repo[<span class=\"string\">'ssh_url'</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        print(<span class=\"string\">'同步 &#123;&#125; 仓库所有分支'</span>.format(repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">'git fetch --all'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == 'Windows':</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'full_name'</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">'git branch --track &#123;&#125; origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">'git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all\")</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"设置项目部署公钥\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_pub_key</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"ssh-rsa aabbcc\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"read_only\"</span>: <span class=\"keyword\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"SandBox\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'===&#123;&#125;. &#123;&#125;==='</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'owner'</span>][<span class=\"string\">'username'</span>], repo[<span class=\"string\">'name'</span>], access_token), data=body)</span><br><span class=\"line\">        print(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\" target=\"_blank\" rel=\"noopener\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Tue Mar 24 2020 14:15:27 GMT+0800 (China Standard Time)","title":"代码托管平台码云(Gitee)到Gitea迁移记","path":"2020/03/01/Gitee2Gitea/","eyeCatchImage":null,"excerpt":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>","date":"2020-03-01T11:42:34.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Python","Git","Gitee","GitLab","Gite","Gogs","迁移","代码"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":7819},{"title":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","_content":"\n![Git工作流图示](/media/Git工作流图示.jpg)\n\nGit是软件开发人员在开发中常用的一种工具,是开发之利器。\n> Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。\n<!--more-->\n\n## 工作流图示\n\n![工作流图示](/media/git-reset_drbfhd.png)\n\n\n## 命令\n\n### 配置\n\n- `git config --global user.name 'Your Name'` 设置git提交显示的名字\n\n- `git config --global user.email your_email@example.com` 设置git提交显示的邮箱\n\n- `git config --global alias.unstage \"reset HEAD\"` 替换命令 `git reset HEAD`命令改为 `git unstage`\n\n- `ssh-keygen -t rsa -C your_email@example.com` 生成SSH Key\n\n- `git config --global core.editor emacs` 设置文件编辑器\n\n- `git config --global merge.tool vimdiff` 设置差异分析工具\n\n- `git config --list` 查看配置信息\n\n\n\n### 简洁版\n\n初始化仓库\n`git init`\n\n添加远程仓库\n`git remote add <自定义名字> <远程仓库url> `\n\n给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）\n`git remote set-url --add <自定义名字> <远程仓库url>`    \n\n更新项目\n`git pull`\n\n合并分支到当前分支\n`git merge <分支名>`\n\n创建标签\n`git tag <标签名字> <提交id前10位字符>` *可通过`git log`获取*\n\n获取log\n`git log`\n\n切换分支\n`git checkout <分支名>`\n\n创建分支并切换过去\n`git checkout -b <分支名>`\n\n删除分支\n`git branch -D <分支名>`\n\n推送\n`git push origin <分支名/标签名>`\n\n强制推送更新\n`git push -f origin <分支名/标签名>`\n\n推送所有分支\n`git push origin --all`\n\n推送所有标签\n`git push origin --tags`\n\n撤消本地改动（新文件和提交到缓存区的改动，不受影响）\n`git checkout -- <目录><文件名>`\n\n撤消本地所有提交与改动\n***假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它***\n`git fetch origin`\n`git reset --hard origin/master`\n\n其它命令\n- `gitk ` 获取当前分支图形个界面\n  - 参数`<分支名>`: 获取某分支图形界面\n  - 参数`=--all`: 获取所有分支图形个界面\n  - `cat <目录><文件名> ` 查看文件内容\n\n---\n\n### 详细版\n\n初始\n\n- `git init` 初始化仓库\n\n- `ls` 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）\n\n  - 参数`-a`显示目录下所有文件及文件夹\n\n- `git clone <url>` 克隆项目\n\n提交\n\n- `git add <目录><文件名>` 添加文件到版本库，*可以多个文件一起添加，中间用空格隔开*\n\n- `git add *` 或 `git add .` 添加所有文件到版本库\n\n![status示例图](http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png)\n\n- `git status` 查看项目当前状态，详细信息\n\n  - 参数`-s`: 显示简洁版\n\n  > 绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的\n  > A新增  M修改  D删除 U冲突 R重命名？\n  > push会把绿色部分提交，红色部分不提交\n  > 已有记录文件做过改动和新文件，需要`git add`\n\n- `git diff ` 查看整个项目里的文件改动情况（工作区和缓存区比较）\n\n  - 参数`<目录><文件名>`: 查看单个文件改动情况（工作区和缓存区比较）\n  -参数`<标签名>`: 查看自当前标签发布之后项目的改动情况\n  - 参数`--cached`: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）\n  - 参数 `HEAD`: 查看整个项目里的文件改动情况（工作区和本地仓库比较）\n  - 参数`--stat`: 显示摘要，而非完整diff\n\n- `git commit`: 提交到缓存\n\n  - 参数`-m`: 后面空格接提交信息\n  - 参数`-a`: 为所有已有记录文件执行`git add`（新添加文件还是需要手动`git add`）\n\n- `git reset HEAD` 取消缓存已缓存的内容\n  - 参数`<目录><文件名>`: 单个文件取消缓存已缓存内容\n\n- `git rm <目录><文件名>`:  将文件从缓存区和硬盘上移除\n\n  - 参数`--cached`: 删除缓存中的文件，保留硬盘上的文件\n\n- `git mv` 不推荐用\n\n- `git log` 显示当前分支提交记录\n\n  - 参数`--author=<authorname>`: 只寻找某个特定作者的提交\n  - 参数`--oneline`: 显示简洁版\n    - 参数`--oneline -<数字N>`: 显示简洁版，显示最近N次提交的记录\n  - 参数`--graph`: 显示拓扑图（查看历史中什么时候出现了分支、合并）\n  - 参数`--grep=<关键字>`: 根据提交注释关键字过滤提交记录\n  > Git 会对所有的 --grep 和 --author 参数作逻辑或。 如果你用 --grep 和 --author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 --all-match 选项。 在这些例子中，我会用上 --format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)\n  - 参数`<分支名>`:显示指定分支“可及”的提交记录\n  - 参数`<分支名1> ^<分支名1>`: 查看在分支1不在分支2中的提交记录\n  > 分支可以是本地的也可以是远端的\n  - 参数`--decorate`: 显示带tag的记录\n  - 参数`-p`: 显示每个提交引入的补丁\n  - 参数`--stat`: 显示每个提交引入的差值统计\n  - 其它参数 `--since` `--before` `--until` `--after`\n  > git log --since --before 根据日期过滤提交记录\n如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 --since 和 --before，但是你也可以用 --until 和 --after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)：\n\n  \n      $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n      5469e2d Git 1.7.1-rc2\n      d43427d Documentation/remote-helpers: Fix typos and improve language\n      272a36b Fixup: Second argument may be any arbitrary string\n      b6c8d2d Documentation/remote-helpers: Add invocation section\n      5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n      00b84e9 Documentation/remote-helpers: Rewrite description\n      03aa87e Documentation: Describe other situations where -z affects git diff\n      77bc694 rebase-interactive: silence warning when no commits rewritten\n      636db2c t3301: add tests to use --format=\"%N\"\n\n分支\n\n- `git branch`列出当前项目的可用分支，并显示当前工作目录当前分支\n\n- 参数`<分支名>`: 创建分支\n\n- `git checkout <分支名>` 切换到对应分支\n\n  - 参数`-b` 创建分支并立即切换到新分支\n\n- `git merge <分支名>` 合并指定分支到当前分支\n\n标签\n\n- `git tag` 显示当前项目的标签\n\n  - 参数`<标签名>` 给某个历史记录打标签\n  - 参数`-a`: 添加注解\n  - 参数`<SHA>`: 提交id前n位字符，可通过`git log`获取，n位基于SHA唯一就行（建议5~7位）\n\n远程\n\n- `git remote` 列出远端别名\n  -参数`-v`: 列出远端别名及链接\n  > 一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接\n  -`add <仓库别名> <仓库链接>`: 为项目添加一个新的远端仓库\n  - `rm <仓库别名>`: 为项目删除一个远端仓库\n  > 只是本地删掉和远端仓库的链接，不会对远端仓库造成影响\n\n- `git fetch` 从远端仓库下载最新的分支与数据\n\n- `git pull` 从远端仓库下载最新数据，并尝试合并到当前分支\n  - 参数`<仓库别名>`: 从哪个仓库拉取更新，默认为origin\n> `git pull`实际是先`git fetch`后`git merge`\n\n- `git push` 推送更新\n  - 参数`<仓库别名> <分支名>`: 推送新分支与数据到某个远端仓库\n  - 参数`<仓库别名> --all`: 推送所有分支\n  - 参数`<仓库别名> --tagsl`: 推送所有标签\n\n\n\n## 参考资料\n> [Git 参考手册](http://gitref.org/zh)\n> [git - 简易指南](http://www.bootcss.com/p/git-guide/)\n\n\n\n","source":"_posts/Git命令使用指南.md","raw":"---\ntitle: Git命令使用指南\ndate: 2015-01-16 22:33:30\ncategories: [程序猿]\ntags: [Git, 教程]\n---\n\n![Git工作流图示](/media/Git工作流图示.jpg)\n\nGit是软件开发人员在开发中常用的一种工具,是开发之利器。\n> Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。\n<!--more-->\n\n## 工作流图示\n\n![工作流图示](/media/git-reset_drbfhd.png)\n\n\n## 命令\n\n### 配置\n\n- `git config --global user.name 'Your Name'` 设置git提交显示的名字\n\n- `git config --global user.email your_email@example.com` 设置git提交显示的邮箱\n\n- `git config --global alias.unstage \"reset HEAD\"` 替换命令 `git reset HEAD`命令改为 `git unstage`\n\n- `ssh-keygen -t rsa -C your_email@example.com` 生成SSH Key\n\n- `git config --global core.editor emacs` 设置文件编辑器\n\n- `git config --global merge.tool vimdiff` 设置差异分析工具\n\n- `git config --list` 查看配置信息\n\n\n\n### 简洁版\n\n初始化仓库\n`git init`\n\n添加远程仓库\n`git remote add <自定义名字> <远程仓库url> `\n\n给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）\n`git remote set-url --add <自定义名字> <远程仓库url>`    \n\n更新项目\n`git pull`\n\n合并分支到当前分支\n`git merge <分支名>`\n\n创建标签\n`git tag <标签名字> <提交id前10位字符>` *可通过`git log`获取*\n\n获取log\n`git log`\n\n切换分支\n`git checkout <分支名>`\n\n创建分支并切换过去\n`git checkout -b <分支名>`\n\n删除分支\n`git branch -D <分支名>`\n\n推送\n`git push origin <分支名/标签名>`\n\n强制推送更新\n`git push -f origin <分支名/标签名>`\n\n推送所有分支\n`git push origin --all`\n\n推送所有标签\n`git push origin --tags`\n\n撤消本地改动（新文件和提交到缓存区的改动，不受影响）\n`git checkout -- <目录><文件名>`\n\n撤消本地所有提交与改动\n***假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它***\n`git fetch origin`\n`git reset --hard origin/master`\n\n其它命令\n- `gitk ` 获取当前分支图形个界面\n  - 参数`<分支名>`: 获取某分支图形界面\n  - 参数`=--all`: 获取所有分支图形个界面\n  - `cat <目录><文件名> ` 查看文件内容\n\n---\n\n### 详细版\n\n初始\n\n- `git init` 初始化仓库\n\n- `ls` 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）\n\n  - 参数`-a`显示目录下所有文件及文件夹\n\n- `git clone <url>` 克隆项目\n\n提交\n\n- `git add <目录><文件名>` 添加文件到版本库，*可以多个文件一起添加，中间用空格隔开*\n\n- `git add *` 或 `git add .` 添加所有文件到版本库\n\n![status示例图](http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png)\n\n- `git status` 查看项目当前状态，详细信息\n\n  - 参数`-s`: 显示简洁版\n\n  > 绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的\n  > A新增  M修改  D删除 U冲突 R重命名？\n  > push会把绿色部分提交，红色部分不提交\n  > 已有记录文件做过改动和新文件，需要`git add`\n\n- `git diff ` 查看整个项目里的文件改动情况（工作区和缓存区比较）\n\n  - 参数`<目录><文件名>`: 查看单个文件改动情况（工作区和缓存区比较）\n  -参数`<标签名>`: 查看自当前标签发布之后项目的改动情况\n  - 参数`--cached`: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）\n  - 参数 `HEAD`: 查看整个项目里的文件改动情况（工作区和本地仓库比较）\n  - 参数`--stat`: 显示摘要，而非完整diff\n\n- `git commit`: 提交到缓存\n\n  - 参数`-m`: 后面空格接提交信息\n  - 参数`-a`: 为所有已有记录文件执行`git add`（新添加文件还是需要手动`git add`）\n\n- `git reset HEAD` 取消缓存已缓存的内容\n  - 参数`<目录><文件名>`: 单个文件取消缓存已缓存内容\n\n- `git rm <目录><文件名>`:  将文件从缓存区和硬盘上移除\n\n  - 参数`--cached`: 删除缓存中的文件，保留硬盘上的文件\n\n- `git mv` 不推荐用\n\n- `git log` 显示当前分支提交记录\n\n  - 参数`--author=<authorname>`: 只寻找某个特定作者的提交\n  - 参数`--oneline`: 显示简洁版\n    - 参数`--oneline -<数字N>`: 显示简洁版，显示最近N次提交的记录\n  - 参数`--graph`: 显示拓扑图（查看历史中什么时候出现了分支、合并）\n  - 参数`--grep=<关键字>`: 根据提交注释关键字过滤提交记录\n  > Git 会对所有的 --grep 和 --author 参数作逻辑或。 如果你用 --grep 和 --author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 --all-match 选项。 在这些例子中，我会用上 --format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)\n  - 参数`<分支名>`:显示指定分支“可及”的提交记录\n  - 参数`<分支名1> ^<分支名1>`: 查看在分支1不在分支2中的提交记录\n  > 分支可以是本地的也可以是远端的\n  - 参数`--decorate`: 显示带tag的记录\n  - 参数`-p`: 显示每个提交引入的补丁\n  - 参数`--stat`: 显示每个提交引入的差值统计\n  - 其它参数 `--since` `--before` `--until` `--after`\n  > git log --since --before 根据日期过滤提交记录\n如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 --since 和 --before，但是你也可以用 --until 和 --after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)：\n\n  \n      $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n      5469e2d Git 1.7.1-rc2\n      d43427d Documentation/remote-helpers: Fix typos and improve language\n      272a36b Fixup: Second argument may be any arbitrary string\n      b6c8d2d Documentation/remote-helpers: Add invocation section\n      5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n      00b84e9 Documentation/remote-helpers: Rewrite description\n      03aa87e Documentation: Describe other situations where -z affects git diff\n      77bc694 rebase-interactive: silence warning when no commits rewritten\n      636db2c t3301: add tests to use --format=\"%N\"\n\n分支\n\n- `git branch`列出当前项目的可用分支，并显示当前工作目录当前分支\n\n- 参数`<分支名>`: 创建分支\n\n- `git checkout <分支名>` 切换到对应分支\n\n  - 参数`-b` 创建分支并立即切换到新分支\n\n- `git merge <分支名>` 合并指定分支到当前分支\n\n标签\n\n- `git tag` 显示当前项目的标签\n\n  - 参数`<标签名>` 给某个历史记录打标签\n  - 参数`-a`: 添加注解\n  - 参数`<SHA>`: 提交id前n位字符，可通过`git log`获取，n位基于SHA唯一就行（建议5~7位）\n\n远程\n\n- `git remote` 列出远端别名\n  -参数`-v`: 列出远端别名及链接\n  > 一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接\n  -`add <仓库别名> <仓库链接>`: 为项目添加一个新的远端仓库\n  - `rm <仓库别名>`: 为项目删除一个远端仓库\n  > 只是本地删掉和远端仓库的链接，不会对远端仓库造成影响\n\n- `git fetch` 从远端仓库下载最新的分支与数据\n\n- `git pull` 从远端仓库下载最新数据，并尝试合并到当前分支\n  - 参数`<仓库别名>`: 从哪个仓库拉取更新，默认为origin\n> `git pull`实际是先`git fetch`后`git merge`\n\n- `git push` 推送更新\n  - 参数`<仓库别名> <分支名>`: 推送新分支与数据到某个远端仓库\n  - 参数`<仓库别名> --all`: 推送所有分支\n  - 参数`<仓库别名> --tagsl`: 推送所有标签\n\n\n\n## 参考资料\n> [Git 参考手册](http://gitref.org/zh)\n> [git - 简易指南](http://www.bootcss.com/p/git-guide/)\n\n\n\n","slug":"Git命令使用指南","published":1,"updated":"2020-01-17T07:55:59.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck8kk0zch001lssyhp131loe0","content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img alt=\"工作流图示\" data-src=\"/media/git-reset_drbfhd.png\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name &#39;Your Name&#39;</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage &quot;reset HEAD&quot;</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img alt=\"status示例图\" data-src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\" target=\"_blank\" rel=\"noopener\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git - 简易指南</a></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p><img src=\"/media/Git工作流图示.jpg\" alt=\"Git工作流图示\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br>","more":"</p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img src=\"/media/git-reset_drbfhd.png\" alt=\"工作流图示\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name &#39;Your Name&#39;</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage &quot;reset HEAD&quot;</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\" alt=\"status示例图\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\" target=\"_blank\" rel=\"noopener\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git - 简易指南</a></p>\n</blockquote>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:55:59 GMT+0800 (China Standard Time)","title":"Git命令使用指南","path":"2015/01/16/Git命令使用指南/","eyeCatchImage":null,"excerpt":"<p><img src=\"/media/Git工作流图示.jpg\" alt=\"Git工作流图示\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br>","date":"2015-01-16T14:33:30.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["教程","Git"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":4004},{"title":"(猫)花木兰领养注意事项","comments":1,"toc":false,"date":"2019-09-17T03:22:04.000Z","visible":"hide","_content":"![](/media/花木兰/15.jpg)\n<!--more-->\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>{% note warning %} 领养前请确认能否接受以下几点，如果否，不建议领养 {% endnote %}<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p>\n<h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p>\n</section>\n\n{% gp 14-0 %}\n![](/media/花木兰/1.jpg)\n![](/media/花木兰/2.jpg)\n![](/media/花木兰/3.jpg)\n![](/media/花木兰/4.jpg)\n![](/media/花木兰/5.jpg)\n![](/media/花木兰/6.jpg)\n![](/media/花木兰/7.jpg)\n![](/media/花木兰/8.jpg)\n![](/media/花木兰/9.jpg)\n![](/media/花木兰/10.jpg)\n![](/media/花木兰/11.jpg)\n![](/media/花木兰/12.jpg)\n![](/media/花木兰/13.jpg)\n![](/media/花木兰/14.jpg)\n{% endgp %}","source":"_posts/adoption-cat-Hua-Mulan.md","raw":"---\ntitle: (猫)花木兰领养注意事项\ncomments: true\ntags: [猫, Cat]\ncategories: [猫]\ntoc: false\ndate: 2019-09-17 11:22:04\nvisible: hide\n---\n![](/media/花木兰/15.jpg)\n<!--more-->\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>{% note warning %} 领养前请确认能否接受以下几点，如果否，不建议领养 {% endnote %}<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p>\n<h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p>\n</section>\n\n{% gp 14-0 %}\n![](/media/花木兰/1.jpg)\n![](/media/花木兰/2.jpg)\n![](/media/花木兰/3.jpg)\n![](/media/花木兰/4.jpg)\n![](/media/花木兰/5.jpg)\n![](/media/花木兰/6.jpg)\n![](/media/花木兰/7.jpg)\n![](/media/花木兰/8.jpg)\n![](/media/花木兰/9.jpg)\n![](/media/花木兰/10.jpg)\n![](/media/花木兰/11.jpg)\n![](/media/花木兰/12.jpg)\n![](/media/花木兰/13.jpg)\n![](/media/花木兰/14.jpg)\n{% endgp %}","slug":"adoption-cat-Hua-Mulan","published":1,"updated":"2020-01-17T07:58:10.992Z","layout":"post","photos":[],"link":"","_id":"ck8kk0zcj001mssyhhmutv2pp","content":"<p><img alt=\"\" data-src=\"/media/花木兰/15.jpg\"><br><a id=\"more\"></a></p>\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><div class=\"note warning\">\n            <p>领养前请确认能否接受以下几点，如果否，不建议领养 </p>\n          </div><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p><br><h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p><br></section>\n\n<div class=\"group-picture\"><div class=\"group-picture-container\"><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/1.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/2.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/3.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/4.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/5.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/6.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/7.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/8.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/9.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/10.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/11.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/12.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 50%;\"><img alt=\"\" data-src=\"/media/花木兰/13.jpg\"></div><div class=\"group-picture-column\" style=\"width: 50%;\"><img alt=\"\" data-src=\"/media/花木兰/14.jpg\"></div></div></div></div>","site":{"data":{}},"excerpt":"<p><img src=\"/media/花木兰/15.jpg\" alt=\"\"><br>","more":"</p>\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><div class=\"note warning\">\n            <p>领养前请确认能否接受以下几点，如果否，不建议领养 </p>\n          </div><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p><br><h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p><br></section>\n\n<div class=\"group-picture\"><div class=\"group-picture-container\"><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/1.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/2.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/3.jpg\" alt=\"\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/4.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/5.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/6.jpg\" alt=\"\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/7.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/8.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/9.jpg\" alt=\"\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/10.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/11.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img src=\"/media/花木兰/12.jpg\" alt=\"\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 50%;\"><img src=\"/media/花木兰/13.jpg\" alt=\"\"></div><div class=\"group-picture-column\" style=\"width: 50%;\"><img src=\"/media/花木兰/14.jpg\" alt=\"\"></div></div></div></div>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:58:10 GMT+0800 (China Standard Time)","title":"(猫)花木兰领养注意事项","path":"2019/09/17/adoption-cat-Hua-Mulan/","eyeCatchImage":null,"excerpt":"<p><img src=\"/media/花木兰/15.jpg\" alt=\"\"><br>","date":"2019-09-17T03:22:04.000Z","pv":0,"totalPV":0,"categories":"猫","tags":["猫","Cat"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":1059},{"title":"Django Rest framework入门笔记及跳坑记录","comments":1,"date":"2016-12-17T07:03:10.000Z","sticky":null,"_content":"<br />\n<!--more-->\n## 更新记录\n2016-01-26 初稿\n\n## 序列化时嵌套显示外键关联字段\n- 自动\n使用`depth`参数指定外键深度\n\n- 手动指定\n使用外键对应`model`的小写为属性，外键对应的`model`序列化程序为值\n以下例子在`HospitalPic`序列化结果里嵌套显示`Hospital`\nmodels.py\n  ```python\n  from django.db import models\n\n  class Hospital(models.Model):\n      name = models.CharField()\n \n  class HospitalPic(models.Model):\n      hospital = models.ForeignKey(Hospital)\n  ```\nserializers.py\n  ```python\n  from rest_framework import serializers\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      class Meta:\n          model = Hospital \n          fields = '__all__'\n \n \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n      hospital = HospitalSerializer()\n \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n  ```\n***反向关系嵌套***\n在`Hospital`序列化结果里嵌套显示`HospitalPic`\nserializers.py\n  ```python\n  from rest_framework import serializers\n  \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      hospitalpic_set = HospitalPicSerializer(many=Ture)\n      class Meta:\n          model = Hospital\n          fields = '__all__'\n  ```\n\n## 在序列化对象里添加关联表的字段内容\n定义一个`serializer Field`，并添加参数`source`指向外键对对应的字段（`source`值其实是从当前序列化的实例的属性）\n```python\nmy_address= serializers.ReadOnlyField(source='address.full_address')\n```\n\n## 在序列化对象里添加自定义内容\n```python\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n \nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n \n    class Meta:\n        model = User\n \n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n```\n\n## 使用`ViewSet`，并不有设置`queryset`，而是重写了`get_queryset`时，需要在`router`里增加`base_name`参数（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nviews.py\n```python\nclass ContactViewSet(viewsets.ModelViewSet):\n    serializer_class = ContactSerializer\n    permission_classes = (permissions.IsAuthenticated,)\n \n    def get_queryset(self):\n        return self.request.user.contact_set.all()\n```\n\nurls.py\n```python\nrouter.register(r'contact', ContactViewSet, base_name='contact')\n```\n未设置`base_name`会报下面错误\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n\n## 给api接口的url添加了命名空间`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n需要对`HyperlinkedRelatedField`字段的参数进行修改\nserializers.py\n```python\nclass HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = HospitalPic\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:hospitalpic-detail'},\n            'hospital': {'view_name': 'api:hospital-detail'}\n        }\n```\n\n不然会出现以下错误\n```python\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n不过话说我们全api的url加`namespace`一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于`namespace`的版本控制，这样就不需要修改`HyperlinkedRelatedField`字段的`view_name`了\nurls.py\n```python\nurl(r'^api/v1/', include(router.urls, namespace='v1')),\nurl(r'^api/v2/', include(router.urls, namespace='v2')),\n```\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```\n\n## 要drf的错误提示为中文，需要设置\n```python\nLANGUAGE_CODE = 'zh-CN'\n```\n如果设置为\n```python\nLANGUAGE_CODE = 'zh-Hans'\n```\n虽然django默认表单错误会输出中文，但drf还是输出英文\n\n## django的`validators`可以直接在drf中使用，不需要做任何修改\n\n## 当字段里的属性`editable=False`时，`ModelSerializer`里该字段会抛弃`model`里显式和隐式（unique）的所有`validators`\n\n## `Serializer`里`write_only`写在`field`里和写在`extra_kwargs`里是有区别的，\n```python\nclass UserRegisterSerializer(serializers.ModelSerializer):\n    \"\"\"用户注册Serializer\"\"\"\n \n    code = serializers.CharField(min_length=4, max_length=6, label=_('验证码'),\n                                 help_text=_('验证码'), write_only=True)\n    re_password = serializers.CharField(label=_('重复密码'), help_text=_('重复密码'),\n                                        validators=validators.password_validators(),\n                                        write_only=True)\n \n    class Meta:\n        model = User\n        fields = ('mobile_phone', 'code', 'password', 're_password')\n        extra_kwargs = {'password':\n                            {'write_only': True}\n                        }\n \n    def validate(self, attrs):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if attrs['password'] != attrs['re_password']:\n            raise serializers.ValidationError(_('密码不一致'))\n \n        # 校验验证码\n        verify_result = Sms(attrs['mobile_phone']).verify_sms_code(\n            attrs.pop('code'))\n        if not verify_result:\n            error = verify_result.get('error')\n            raise ParseError(error)\n        return attrs\n \n    def create(self, validated_data):\n        user = User(\n            username=validated_data['mobile_phone'],\n            mobile_phone=validated_data['mobile_phone'],\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n```\n因为`create()`这个方法return了一个`user`实例，`User`里没有的字段`code`和`re_password`需要将`write_only `写在`field`参数里，不然会报以下错误\n```\nAttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.\nThe serializer field might be named incorrectly and not match any attribute or key on the `User` instance.\nOriginal exception text was: 'User' object has no attribute 'code'.\n```\n\n## 如果使用`django-rest-swagger`报以下错误\n```\nCan't read from server. It may not have the appropriate access-control-origin settings.\n```\n注释掉设置里的\n```python\n    # 'base_path': '127.0.0.1:8000/docs',\n```\n\n## `serializer.data`和`serializer.validated_data`\n在`serializer`只使用`data`参数实例化的时：\n- `serializer.data`是原始数据（字符串），`serializer.validated_data`是进行数据验证并转换成对应数据类型的数据。\n- 两者者必须在`serializer`调用`is_valid`方法后才能调用\n在`serializer`只使用`instance`参数实例化时：\n- 只有`serializer.data`没有`serializer.validated_data`，并且`serializer.data`里的数据也是字符串；\n- 没有方法`is_valid`；\n- 即`is_valid`和`validated_data`只在有data参数实例化时才可调用；\n\n## 在`serializer`里获取原始请求信息\n默认的，上下文信息会被传递到`serializer`里，所以在`serializer`可以直接使用`self.context['request']`来获取请求信息。（在要继承自`viewsets.GenericViewSet`的类里使用的`serializer`才能取到，如果是继承`APIView`的，自己传入即可`serializer = self.serializer_class(data=request.data, context={'request': request})`）\n\n## 自定义`serializer`字段\n自定义字段继承`serializers.Field`，`to_representation`方法处理出来的数据用来序列化显示，`to_internal_value`处理接收到的数据，`get_attribute`方法指定这个字段访问的实例属性，`get_value`方法指定\n```python\nclass QiNiuField(serializers.Field):\n    def get_attribute(self, instance):\n        # （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定\n        return instance.key\n    \n    def get_value(self, dictionary):\n        # （反序列化时）从传入数据中提取一个值给这个字段处理\n        return super(QiNiuField, self).get_value(dictionary)\n\n    def to_representation(self, value):\n        # （序列化时）处理出来的数据用来序列化显示\n        return value.url\n\n    def to_internal_value(self, data):\n        # （反序列化时）处理接收到的数据\n        return data['key']\n```\n\n## 嵌套序列化，传参问题\n官方文档中有这么一个例子[Dealing with nested objects](http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects)\n如果是以`Content-Type:application/json`形式传数据格式传数据，直接嵌套传就可以了`{'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}`，但如果是以,\n但是如果以`Content-Type:form-data`或`Content-Type:x-www-form-urlencoded`上传，则上传`user`信息进不是嵌套，而是就`.`连接了，`\"user.email\":\"foobar\"`.\n\n","source":"_posts/django-rest-framework入门笔记及跳坑记录.md","raw":"title: Django Rest framework入门笔记及跳坑记录\ncomments: true\ndate: 2016-12-17 15:03:10\ncategories:\ntags: [Django, restful, api, 问题]\nsticky:\n---\n<br />\n<!--more-->\n## 更新记录\n2016-01-26 初稿\n\n## 序列化时嵌套显示外键关联字段\n- 自动\n使用`depth`参数指定外键深度\n\n- 手动指定\n使用外键对应`model`的小写为属性，外键对应的`model`序列化程序为值\n以下例子在`HospitalPic`序列化结果里嵌套显示`Hospital`\nmodels.py\n  ```python\n  from django.db import models\n\n  class Hospital(models.Model):\n      name = models.CharField()\n \n  class HospitalPic(models.Model):\n      hospital = models.ForeignKey(Hospital)\n  ```\nserializers.py\n  ```python\n  from rest_framework import serializers\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      class Meta:\n          model = Hospital \n          fields = '__all__'\n \n \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n      hospital = HospitalSerializer()\n \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n  ```\n***反向关系嵌套***\n在`Hospital`序列化结果里嵌套显示`HospitalPic`\nserializers.py\n  ```python\n  from rest_framework import serializers\n  \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      hospitalpic_set = HospitalPicSerializer(many=Ture)\n      class Meta:\n          model = Hospital\n          fields = '__all__'\n  ```\n\n## 在序列化对象里添加关联表的字段内容\n定义一个`serializer Field`，并添加参数`source`指向外键对对应的字段（`source`值其实是从当前序列化的实例的属性）\n```python\nmy_address= serializers.ReadOnlyField(source='address.full_address')\n```\n\n## 在序列化对象里添加自定义内容\n```python\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n \nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n \n    class Meta:\n        model = User\n \n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n```\n\n## 使用`ViewSet`，并不有设置`queryset`，而是重写了`get_queryset`时，需要在`router`里增加`base_name`参数（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nviews.py\n```python\nclass ContactViewSet(viewsets.ModelViewSet):\n    serializer_class = ContactSerializer\n    permission_classes = (permissions.IsAuthenticated,)\n \n    def get_queryset(self):\n        return self.request.user.contact_set.all()\n```\n\nurls.py\n```python\nrouter.register(r'contact', ContactViewSet, base_name='contact')\n```\n未设置`base_name`会报下面错误\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n\n## 给api接口的url添加了命名空间`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n需要对`HyperlinkedRelatedField`字段的参数进行修改\nserializers.py\n```python\nclass HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = HospitalPic\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:hospitalpic-detail'},\n            'hospital': {'view_name': 'api:hospital-detail'}\n        }\n```\n\n不然会出现以下错误\n```python\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n不过话说我们全api的url加`namespace`一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于`namespace`的版本控制，这样就不需要修改`HyperlinkedRelatedField`字段的`view_name`了\nurls.py\n```python\nurl(r'^api/v1/', include(router.urls, namespace='v1')),\nurl(r'^api/v2/', include(router.urls, namespace='v2')),\n```\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```\n\n## 要drf的错误提示为中文，需要设置\n```python\nLANGUAGE_CODE = 'zh-CN'\n```\n如果设置为\n```python\nLANGUAGE_CODE = 'zh-Hans'\n```\n虽然django默认表单错误会输出中文，但drf还是输出英文\n\n## django的`validators`可以直接在drf中使用，不需要做任何修改\n\n## 当字段里的属性`editable=False`时，`ModelSerializer`里该字段会抛弃`model`里显式和隐式（unique）的所有`validators`\n\n## `Serializer`里`write_only`写在`field`里和写在`extra_kwargs`里是有区别的，\n```python\nclass UserRegisterSerializer(serializers.ModelSerializer):\n    \"\"\"用户注册Serializer\"\"\"\n \n    code = serializers.CharField(min_length=4, max_length=6, label=_('验证码'),\n                                 help_text=_('验证码'), write_only=True)\n    re_password = serializers.CharField(label=_('重复密码'), help_text=_('重复密码'),\n                                        validators=validators.password_validators(),\n                                        write_only=True)\n \n    class Meta:\n        model = User\n        fields = ('mobile_phone', 'code', 'password', 're_password')\n        extra_kwargs = {'password':\n                            {'write_only': True}\n                        }\n \n    def validate(self, attrs):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if attrs['password'] != attrs['re_password']:\n            raise serializers.ValidationError(_('密码不一致'))\n \n        # 校验验证码\n        verify_result = Sms(attrs['mobile_phone']).verify_sms_code(\n            attrs.pop('code'))\n        if not verify_result:\n            error = verify_result.get('error')\n            raise ParseError(error)\n        return attrs\n \n    def create(self, validated_data):\n        user = User(\n            username=validated_data['mobile_phone'],\n            mobile_phone=validated_data['mobile_phone'],\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n```\n因为`create()`这个方法return了一个`user`实例，`User`里没有的字段`code`和`re_password`需要将`write_only `写在`field`参数里，不然会报以下错误\n```\nAttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.\nThe serializer field might be named incorrectly and not match any attribute or key on the `User` instance.\nOriginal exception text was: 'User' object has no attribute 'code'.\n```\n\n## 如果使用`django-rest-swagger`报以下错误\n```\nCan't read from server. It may not have the appropriate access-control-origin settings.\n```\n注释掉设置里的\n```python\n    # 'base_path': '127.0.0.1:8000/docs',\n```\n\n## `serializer.data`和`serializer.validated_data`\n在`serializer`只使用`data`参数实例化的时：\n- `serializer.data`是原始数据（字符串），`serializer.validated_data`是进行数据验证并转换成对应数据类型的数据。\n- 两者者必须在`serializer`调用`is_valid`方法后才能调用\n在`serializer`只使用`instance`参数实例化时：\n- 只有`serializer.data`没有`serializer.validated_data`，并且`serializer.data`里的数据也是字符串；\n- 没有方法`is_valid`；\n- 即`is_valid`和`validated_data`只在有data参数实例化时才可调用；\n\n## 在`serializer`里获取原始请求信息\n默认的，上下文信息会被传递到`serializer`里，所以在`serializer`可以直接使用`self.context['request']`来获取请求信息。（在要继承自`viewsets.GenericViewSet`的类里使用的`serializer`才能取到，如果是继承`APIView`的，自己传入即可`serializer = self.serializer_class(data=request.data, context={'request': request})`）\n\n## 自定义`serializer`字段\n自定义字段继承`serializers.Field`，`to_representation`方法处理出来的数据用来序列化显示，`to_internal_value`处理接收到的数据，`get_attribute`方法指定这个字段访问的实例属性，`get_value`方法指定\n```python\nclass QiNiuField(serializers.Field):\n    def get_attribute(self, instance):\n        # （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定\n        return instance.key\n    \n    def get_value(self, dictionary):\n        # （反序列化时）从传入数据中提取一个值给这个字段处理\n        return super(QiNiuField, self).get_value(dictionary)\n\n    def to_representation(self, value):\n        # （序列化时）处理出来的数据用来序列化显示\n        return value.url\n\n    def to_internal_value(self, data):\n        # （反序列化时）处理接收到的数据\n        return data['key']\n```\n\n## 嵌套序列化，传参问题\n官方文档中有这么一个例子[Dealing with nested objects](http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects)\n如果是以`Content-Type:application/json`形式传数据格式传数据，直接嵌套传就可以了`{'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}`，但如果是以,\n但是如果以`Content-Type:form-data`或`Content-Type:x-www-form-urlencoded`上传，则上传`user`信息进不是嵌套，而是就`.`连接了，`\"user.email\":\"foobar\"`.\n\n","slug":"django-rest-framework入门笔记及跳坑记录","published":1,"updated":"2020-01-17T07:57:11.568Z","layout":"post","photos":[],"link":"","_id":"ck8kk0zcq001pssyh7k79tzuz","content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-26 初稿</p>\n<h2 id=\"序列化时嵌套显示外键关联字段\"><a href=\"#序列化时嵌套显示外键关联字段\" class=\"headerlink\" title=\"序列化时嵌套显示外键关联字段\"></a>序列化时嵌套显示外键关联字段</h2><ul>\n<li><p>自动<br>使用<code>depth</code>参数指定外键深度</p>\n</li>\n<li><p>手动指定<br>使用外键对应<code>model</code>的小写为属性，外键对应的<code>model</code>序列化程序为值<br>以下例子在<code>HospitalPic</code>序列化结果里嵌套显示<code>Hospital</code><br>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hospital</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    hospital = models.ForeignKey(Hospital)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital </span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    hospital = HospitalSerializer()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>反向关系嵌套</em></strong><br>在<code>Hospital</code>序列化结果里嵌套显示<code>HospitalPic</code><br>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    hospitalpic_set = HospitalPicSerializer(many=Ture)</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加关联表的字段内容\"><a href=\"#在序列化对象里添加关联表的字段内容\" class=\"headerlink\" title=\"在序列化对象里添加关联表的字段内容\"></a>在序列化对象里添加关联表的字段内容</h2><p>定义一个<code>serializer Field</code>，并添加参数<code>source</code>指向外键对对应的字段（<code>source</code>值其实是从当前序列化的实例的属性）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_address= serializers.ReadOnlyField(source=<span class=\"string\">'address.full_address'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加自定义内容\"><a href=\"#在序列化对象里添加自定义内容\" class=\"headerlink\" title=\"在序列化对象里添加自定义内容\"></a>在序列化对象里添加自定义内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.timezone <span class=\"keyword\">import</span> now</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    days_since_joined = serializers.SerializerMethodField()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_days_since_joined</span><span class=\"params\">(self, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (now() - obj.date_joined).days</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\"><a href=\"#使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\" class=\"headerlink\" title=\"使用ViewSet，并不有设置queryset，而是重写了get_queryset时，需要在router里增加base_name参数（base_name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）\"></a>使用<code>ViewSet</code>，并不有设置<code>queryset</code>，而是重写了<code>get_queryset</code>时，需要在<code>router</code>里增加<code>base_name</code>参数（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）</h2><p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></span><br><span class=\"line\">    serializer_class = ContactSerializer</span><br><span class=\"line\">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request.user.contact_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(<span class=\"string\">r'contact'</span>, ContactViewSet, base_name=<span class=\"string\">'contact'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>未设置<code>base_name</code>会报下面错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"给api接口的url添加了命名空间namespace\"><a href=\"#给api接口的url添加了命名空间namespace\" class=\"headerlink\" title=\"给api接口的url添加了命名空间namespace\"></a>给api接口的url添加了命名空间<code>namespace</code></h2><p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>需要对<code>HyperlinkedRelatedField</code>字段的参数进行修改<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospitalpic-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'hospital'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospital-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>不然会出现以下错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could <span class=\"keyword\">not</span> resolve URL <span class=\"keyword\">for</span> hyperlinked relationship using view name <span class=\"string\">\"user-detail\"</span>. You may have failed to include the related model <span class=\"keyword\">in</span> your API, <span class=\"keyword\">or</span> incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>不过话说我们全api的url加<code>namespace</code>一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于<code>namespace</code>的版本控制，这样就不需要修改<code>HyperlinkedRelatedField</code>字段的<code>view_name</code>了<br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/v1/'</span>, include(router.urls, namespace=<span class=\"string\">'v1'</span>)),</span><br><span class=\"line\">url(<span class=\"string\">r'^api/v2/'</span>, include(router.urls, namespace=<span class=\"string\">'v2'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"要drf的错误提示为中文，需要设置\"><a href=\"#要drf的错误提示为中文，需要设置\" class=\"headerlink\" title=\"要drf的错误提示为中文，需要设置\"></a>要drf的错误提示为中文，需要设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-CN'</span></span><br></pre></td></tr></table></figure>\n<p>如果设置为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-Hans'</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然django默认表单错误会输出中文，但drf还是输出英文</p>\n<h2 id=\"django的validators可以直接在drf中使用，不需要做任何修改\"><a href=\"#django的validators可以直接在drf中使用，不需要做任何修改\" class=\"headerlink\" title=\"django的validators可以直接在drf中使用，不需要做任何修改\"></a>django的<code>validators</code>可以直接在drf中使用，不需要做任何修改</h2><h2 id=\"当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"><a href=\"#当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\" class=\"headerlink\" title=\"当字段里的属性editable=False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"></a>当字段里的属性<code>editable=False</code>时，<code>ModelSerializer</code>里该字段会抛弃<code>model</code>里显式和隐式（unique）的所有<code>validators</code></h2><h2 id=\"Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\"><a href=\"#Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\" class=\"headerlink\" title=\"Serializer里write_only写在field里和写在extra_kwargs里是有区别的，\"></a><code>Serializer</code>里<code>write_only</code>写在<code>field</code>里和写在<code>extra_kwargs</code>里是有区别的，</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRegisterSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户注册Serializer\"\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    code = serializers.CharField(min_length=<span class=\"number\">4</span>, max_length=<span class=\"number\">6</span>, label=_(<span class=\"string\">'验证码'</span>),</span><br><span class=\"line\">                                 help_text=_(<span class=\"string\">'验证码'</span>), write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    re_password = serializers.CharField(label=_(<span class=\"string\">'重复密码'</span>), help_text=_(<span class=\"string\">'重复密码'</span>),</span><br><span class=\"line\">                                        validators=validators.password_validators(),</span><br><span class=\"line\">                                        write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'mobile_phone'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'re_password'</span>)</span><br><span class=\"line\">        extra_kwargs = &#123;<span class=\"string\">'password'</span>:</span><br><span class=\"line\">                            &#123;<span class=\"string\">'write_only'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Check that the start is before the stop.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> attrs[<span class=\"string\">'password'</span>] != attrs[<span class=\"string\">'re_password'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> serializers.ValidationError(_(<span class=\"string\">'密码不一致'</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 校验验证码</span></span><br><span class=\"line\">        verify_result = Sms(attrs[<span class=\"string\">'mobile_phone'</span>]).verify_sms_code(</span><br><span class=\"line\">            attrs.pop(<span class=\"string\">'code'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> verify_result:</span><br><span class=\"line\">            error = verify_result.get(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ParseError(error)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attrs</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        user = User(</span><br><span class=\"line\">            username=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">            mobile_phone=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">        )</span><br><span class=\"line\">        user.set_password(validated_data[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n<p>因为<code>create()</code>这个方法return了一个<code>user</code>实例，<code>User</code>里没有的字段<code>code</code>和<code>re_password</code>需要将<code>write_only</code>写在<code>field</code>参数里，不然会报以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.</span><br><span class=\"line\">The serializer field might be named incorrectly and not match any attribute or key on the `User` instance.</span><br><span class=\"line\">Original exception text was: &apos;User&apos; object has no attribute &apos;code&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如果使用django-rest-swagger报以下错误\"><a href=\"#如果使用django-rest-swagger报以下错误\" class=\"headerlink\" title=\"如果使用django-rest-swagger报以下错误\"></a>如果使用<code>django-rest-swagger</code>报以下错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t read from server. It may not have the appropriate access-control-origin settings.</span><br></pre></td></tr></table></figure>\n<p>注释掉设置里的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 'base_path': '127.0.0.1:8000/docs',</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"serializer-data和serializer-validated-data\"><a href=\"#serializer-data和serializer-validated-data\" class=\"headerlink\" title=\"serializer.data和serializer.validated_data\"></a><code>serializer.data</code>和<code>serializer.validated_data</code></h2><p>在<code>serializer</code>只使用<code>data</code>参数实例化的时：</p>\n<ul>\n<li><code>serializer.data</code>是原始数据（字符串），<code>serializer.validated_data</code>是进行数据验证并转换成对应数据类型的数据。</li>\n<li>两者者必须在<code>serializer</code>调用<code>is_valid</code>方法后才能调用<br>在<code>serializer</code>只使用<code>instance</code>参数实例化时：</li>\n<li>只有<code>serializer.data</code>没有<code>serializer.validated_data</code>，并且<code>serializer.data</code>里的数据也是字符串；</li>\n<li>没有方法<code>is_valid</code>；</li>\n<li>即<code>is_valid</code>和<code>validated_data</code>只在有data参数实例化时才可调用；</li>\n</ul>\n<h2 id=\"在serializer里获取原始请求信息\"><a href=\"#在serializer里获取原始请求信息\" class=\"headerlink\" title=\"在serializer里获取原始请求信息\"></a>在<code>serializer</code>里获取原始请求信息</h2><p>默认的，上下文信息会被传递到<code>serializer</code>里，所以在<code>serializer</code>可以直接使用<code>self.context[&#39;request&#39;]</code>来获取请求信息。（在要继承自<code>viewsets.GenericViewSet</code>的类里使用的<code>serializer</code>才能取到，如果是继承<code>APIView</code>的，自己传入即可<code>serializer = self.serializer_class(data=request.data, context={&#39;request&#39;: request})</code>）</p>\n<h2 id=\"自定义serializer字段\"><a href=\"#自定义serializer字段\" class=\"headerlink\" title=\"自定义serializer字段\"></a>自定义<code>serializer</code>字段</h2><p>自定义字段继承<code>serializers.Field</code>，<code>to_representation</code>方法处理出来的数据用来序列化显示，<code>to_internal_value</code>处理接收到的数据，<code>get_attribute</code>方法指定这个字段访问的实例属性，<code>get_value</code>方法指定<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuField</span><span class=\"params\">(serializers.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_attribute</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance.key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self, dictionary)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）从传入数据中提取一个值给这个字段处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(QiNiuField, self).get_value(dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）处理出来的数据用来序列化显示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_internal_value</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）处理接收到的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"string\">'key'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"嵌套序列化，传参问题\"><a href=\"#嵌套序列化，传参问题\" class=\"headerlink\" title=\"嵌套序列化，传参问题\"></a>嵌套序列化，传参问题</h2><p>官方文档中有这么一个例子<a href=\"http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects\" target=\"_blank\" rel=\"noopener\">Dealing with nested objects</a><br>如果是以<code>Content-Type:application/json</code>形式传数据格式传数据，直接嵌套传就可以了<code>{&#39;user&#39;: {&#39;email&#39;: &#39;foobar&#39;, &#39;username&#39;: &#39;doe&#39;}, &#39;content&#39;: &#39;baz&#39;}</code>，但如果是以,<br>但是如果以<code>Content-Type:form-data</code>或<code>Content-Type:x-www-form-urlencoded</code>上传，则上传<code>user</code>信息进不是嵌套，而是就<code>.</code>连接了，<code>&quot;user.email&quot;:&quot;foobar&quot;</code>.</p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-26 初稿</p>\n<h2 id=\"序列化时嵌套显示外键关联字段\"><a href=\"#序列化时嵌套显示外键关联字段\" class=\"headerlink\" title=\"序列化时嵌套显示外键关联字段\"></a>序列化时嵌套显示外键关联字段</h2><ul>\n<li><p>自动<br>使用<code>depth</code>参数指定外键深度</p>\n</li>\n<li><p>手动指定<br>使用外键对应<code>model</code>的小写为属性，外键对应的<code>model</code>序列化程序为值<br>以下例子在<code>HospitalPic</code>序列化结果里嵌套显示<code>Hospital</code><br>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hospital</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    hospital = models.ForeignKey(Hospital)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital </span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    hospital = HospitalSerializer()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>反向关系嵌套</em></strong><br>在<code>Hospital</code>序列化结果里嵌套显示<code>HospitalPic</code><br>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    hospitalpic_set = HospitalPicSerializer(many=Ture)</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加关联表的字段内容\"><a href=\"#在序列化对象里添加关联表的字段内容\" class=\"headerlink\" title=\"在序列化对象里添加关联表的字段内容\"></a>在序列化对象里添加关联表的字段内容</h2><p>定义一个<code>serializer Field</code>，并添加参数<code>source</code>指向外键对对应的字段（<code>source</code>值其实是从当前序列化的实例的属性）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_address= serializers.ReadOnlyField(source=<span class=\"string\">'address.full_address'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加自定义内容\"><a href=\"#在序列化对象里添加自定义内容\" class=\"headerlink\" title=\"在序列化对象里添加自定义内容\"></a>在序列化对象里添加自定义内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.timezone <span class=\"keyword\">import</span> now</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    days_since_joined = serializers.SerializerMethodField()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_days_since_joined</span><span class=\"params\">(self, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (now() - obj.date_joined).days</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\"><a href=\"#使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\" class=\"headerlink\" title=\"使用ViewSet，并不有设置queryset，而是重写了get_queryset时，需要在router里增加base_name参数（base_name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）\"></a>使用<code>ViewSet</code>，并不有设置<code>queryset</code>，而是重写了<code>get_queryset</code>时，需要在<code>router</code>里增加<code>base_name</code>参数（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）</h2><p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></span><br><span class=\"line\">    serializer_class = ContactSerializer</span><br><span class=\"line\">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request.user.contact_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(<span class=\"string\">r'contact'</span>, ContactViewSet, base_name=<span class=\"string\">'contact'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>未设置<code>base_name</code>会报下面错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"给api接口的url添加了命名空间namespace\"><a href=\"#给api接口的url添加了命名空间namespace\" class=\"headerlink\" title=\"给api接口的url添加了命名空间namespace\"></a>给api接口的url添加了命名空间<code>namespace</code></h2><p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>需要对<code>HyperlinkedRelatedField</code>字段的参数进行修改<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospitalpic-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'hospital'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospital-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>不然会出现以下错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could <span class=\"keyword\">not</span> resolve URL <span class=\"keyword\">for</span> hyperlinked relationship using view name <span class=\"string\">\"user-detail\"</span>. You may have failed to include the related model <span class=\"keyword\">in</span> your API, <span class=\"keyword\">or</span> incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>不过话说我们全api的url加<code>namespace</code>一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于<code>namespace</code>的版本控制，这样就不需要修改<code>HyperlinkedRelatedField</code>字段的<code>view_name</code>了<br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/v1/'</span>, include(router.urls, namespace=<span class=\"string\">'v1'</span>)),</span><br><span class=\"line\">url(<span class=\"string\">r'^api/v2/'</span>, include(router.urls, namespace=<span class=\"string\">'v2'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"要drf的错误提示为中文，需要设置\"><a href=\"#要drf的错误提示为中文，需要设置\" class=\"headerlink\" title=\"要drf的错误提示为中文，需要设置\"></a>要drf的错误提示为中文，需要设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-CN'</span></span><br></pre></td></tr></table></figure>\n<p>如果设置为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-Hans'</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然django默认表单错误会输出中文，但drf还是输出英文</p>\n<h2 id=\"django的validators可以直接在drf中使用，不需要做任何修改\"><a href=\"#django的validators可以直接在drf中使用，不需要做任何修改\" class=\"headerlink\" title=\"django的validators可以直接在drf中使用，不需要做任何修改\"></a>django的<code>validators</code>可以直接在drf中使用，不需要做任何修改</h2><h2 id=\"当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"><a href=\"#当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\" class=\"headerlink\" title=\"当字段里的属性editable=False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"></a>当字段里的属性<code>editable=False</code>时，<code>ModelSerializer</code>里该字段会抛弃<code>model</code>里显式和隐式（unique）的所有<code>validators</code></h2><h2 id=\"Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\"><a href=\"#Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\" class=\"headerlink\" title=\"Serializer里write_only写在field里和写在extra_kwargs里是有区别的，\"></a><code>Serializer</code>里<code>write_only</code>写在<code>field</code>里和写在<code>extra_kwargs</code>里是有区别的，</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRegisterSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户注册Serializer\"\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    code = serializers.CharField(min_length=<span class=\"number\">4</span>, max_length=<span class=\"number\">6</span>, label=_(<span class=\"string\">'验证码'</span>),</span><br><span class=\"line\">                                 help_text=_(<span class=\"string\">'验证码'</span>), write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    re_password = serializers.CharField(label=_(<span class=\"string\">'重复密码'</span>), help_text=_(<span class=\"string\">'重复密码'</span>),</span><br><span class=\"line\">                                        validators=validators.password_validators(),</span><br><span class=\"line\">                                        write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'mobile_phone'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'re_password'</span>)</span><br><span class=\"line\">        extra_kwargs = &#123;<span class=\"string\">'password'</span>:</span><br><span class=\"line\">                            &#123;<span class=\"string\">'write_only'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Check that the start is before the stop.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> attrs[<span class=\"string\">'password'</span>] != attrs[<span class=\"string\">'re_password'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> serializers.ValidationError(_(<span class=\"string\">'密码不一致'</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 校验验证码</span></span><br><span class=\"line\">        verify_result = Sms(attrs[<span class=\"string\">'mobile_phone'</span>]).verify_sms_code(</span><br><span class=\"line\">            attrs.pop(<span class=\"string\">'code'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> verify_result:</span><br><span class=\"line\">            error = verify_result.get(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ParseError(error)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attrs</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        user = User(</span><br><span class=\"line\">            username=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">            mobile_phone=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">        )</span><br><span class=\"line\">        user.set_password(validated_data[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n<p>因为<code>create()</code>这个方法return了一个<code>user</code>实例，<code>User</code>里没有的字段<code>code</code>和<code>re_password</code>需要将<code>write_only</code>写在<code>field</code>参数里，不然会报以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.</span><br><span class=\"line\">The serializer field might be named incorrectly and not match any attribute or key on the `User` instance.</span><br><span class=\"line\">Original exception text was: &apos;User&apos; object has no attribute &apos;code&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如果使用django-rest-swagger报以下错误\"><a href=\"#如果使用django-rest-swagger报以下错误\" class=\"headerlink\" title=\"如果使用django-rest-swagger报以下错误\"></a>如果使用<code>django-rest-swagger</code>报以下错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t read from server. It may not have the appropriate access-control-origin settings.</span><br></pre></td></tr></table></figure>\n<p>注释掉设置里的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 'base_path': '127.0.0.1:8000/docs',</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"serializer-data和serializer-validated-data\"><a href=\"#serializer-data和serializer-validated-data\" class=\"headerlink\" title=\"serializer.data和serializer.validated_data\"></a><code>serializer.data</code>和<code>serializer.validated_data</code></h2><p>在<code>serializer</code>只使用<code>data</code>参数实例化的时：</p>\n<ul>\n<li><code>serializer.data</code>是原始数据（字符串），<code>serializer.validated_data</code>是进行数据验证并转换成对应数据类型的数据。</li>\n<li>两者者必须在<code>serializer</code>调用<code>is_valid</code>方法后才能调用<br>在<code>serializer</code>只使用<code>instance</code>参数实例化时：</li>\n<li>只有<code>serializer.data</code>没有<code>serializer.validated_data</code>，并且<code>serializer.data</code>里的数据也是字符串；</li>\n<li>没有方法<code>is_valid</code>；</li>\n<li>即<code>is_valid</code>和<code>validated_data</code>只在有data参数实例化时才可调用；</li>\n</ul>\n<h2 id=\"在serializer里获取原始请求信息\"><a href=\"#在serializer里获取原始请求信息\" class=\"headerlink\" title=\"在serializer里获取原始请求信息\"></a>在<code>serializer</code>里获取原始请求信息</h2><p>默认的，上下文信息会被传递到<code>serializer</code>里，所以在<code>serializer</code>可以直接使用<code>self.context[&#39;request&#39;]</code>来获取请求信息。（在要继承自<code>viewsets.GenericViewSet</code>的类里使用的<code>serializer</code>才能取到，如果是继承<code>APIView</code>的，自己传入即可<code>serializer = self.serializer_class(data=request.data, context={&#39;request&#39;: request})</code>）</p>\n<h2 id=\"自定义serializer字段\"><a href=\"#自定义serializer字段\" class=\"headerlink\" title=\"自定义serializer字段\"></a>自定义<code>serializer</code>字段</h2><p>自定义字段继承<code>serializers.Field</code>，<code>to_representation</code>方法处理出来的数据用来序列化显示，<code>to_internal_value</code>处理接收到的数据，<code>get_attribute</code>方法指定这个字段访问的实例属性，<code>get_value</code>方法指定<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuField</span><span class=\"params\">(serializers.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_attribute</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance.key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self, dictionary)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）从传入数据中提取一个值给这个字段处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(QiNiuField, self).get_value(dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）处理出来的数据用来序列化显示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_internal_value</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）处理接收到的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"string\">'key'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"嵌套序列化，传参问题\"><a href=\"#嵌套序列化，传参问题\" class=\"headerlink\" title=\"嵌套序列化，传参问题\"></a>嵌套序列化，传参问题</h2><p>官方文档中有这么一个例子<a href=\"http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects\" target=\"_blank\" rel=\"noopener\">Dealing with nested objects</a><br>如果是以<code>Content-Type:application/json</code>形式传数据格式传数据，直接嵌套传就可以了<code>{&#39;user&#39;: {&#39;email&#39;: &#39;foobar&#39;, &#39;username&#39;: &#39;doe&#39;}, &#39;content&#39;: &#39;baz&#39;}</code>，但如果是以,<br>但是如果以<code>Content-Type:form-data</code>或<code>Content-Type:x-www-form-urlencoded</code>上传，则上传<code>user</code>信息进不是嵌套，而是就<code>.</code>连接了，<code>&quot;user.email&quot;:&quot;foobar&quot;</code>.</p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:57:11 GMT+0800 (China Standard Time)","title":"Django Rest framework入门笔记及跳坑记录","path":"2016/12/17/django-rest-framework入门笔记及跳坑记录/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-12-17T07:03:10.000Z","pv":0,"totalPV":0,"categories":"","tags":["Django","restful","api","问题"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":7288},{"title":"在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django","comments":1,"date":"2016-12-08T15:19:59.000Z","sticky":null,"_content":"本文记录下在CentOS下部署Django项目的步骤。\n<!--more-->\n\n## MySQL\n \n### 安装mysql和mysql-devel\n```\nyum install mysql\nyum install mysql-devel\n```\n \n### 安装mysql-server\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n```\n \n### 重启mysql服务\n```\nservice mysqld restart\n```\n \n### 设置root密码\n初次安装mysql需要设置root密码\n```\nmysql -uroot\nset password for 'root'@'localhost' =password('password');\n```\n \n### 配置mysql\n在`/etc/my.cnf`文件中[mysql]和[mysql]中添加以下内容\n```\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ncharacter-set-server=utf8\n```\n字符编码保持和`/usr/share/mysql/charsets/Index.xml`中的一致。\n \n### 远程连接设置\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n```\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n如果是新用户而不是root，则要先新建用户\n```\nmysql>create user 'username'@'%' identified by 'password';\n```\n此时就可以进行远程连接了。\n \n## Virtualenv\n安装epel扩展源\n```\nyum install epel-release\n```\n安装pip\n```\nyum install python-pip\n```\n安装virtualenv和virtualenvwrapper\n```\npip install virtualenv virtualenvwrapper\n```\n编辑`~/.bashrc`文件，结尾添加以下内容\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n然后执行以下命令使配置生效\n```\nsource ~/.bashrc\n```\n创建env\n```\nmkvirtualenv explame\n```\n使用pip安装项目需要的包\n \n## WSGI\n在项目目录下新建`nginx_wsgi.py`文件\n```\ntouch nginx_wsgi.py\n```\n添加如下内容\n```\nimport sys\nimport site\nimport os\n \n# site-packages\nsite.addsitedir('/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages')\n# Add the  project  directory\n# sys.path.append('/home/nginxuser/nginxuser')\nPROJECT_DIR = '/home/nginxuser/projects/example'\nsys.path.insert(0, PROJECT_DIR)\nos.environ['DJANGO_SETTINGS_MODULE'] = 'example.settings.prod'\n# Activate your virtual env\nactivate_env = os.path.expanduser(\"/home/nginxuser/.virtualenvs/example/bin/activate_this.py\")\nexecfile(activate_env, dict(__file__=activate_env))\n \n# after activite env\nfrom django.core.wsgi import get_wsgi_application\n \napplication = get_wsgi_application()\n```\n \n## Nginx\n \n### 安装\n```\nyum install nginx\n```\n### 检查配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n \n### 启动nginx\n```\nservice nginx start\n```\n \n### 设置开机自启\n```\nsystemctl enable nginx\n```\n \n### 创建用户\n```\nuseradd nginxuser\npasswd nginxuser\n```\n### 修改nginx主配置\n```\nvim /etc/nginx/nginx.conf\n```\n非注释首行\n```\nuser nginx\n```\n改为\n```\nuser nginxuser\n```\n不然可能会出现网站静态文件访问报403问题。\n### 新建网站运行配置\n```\nvim /etc/nginx/conf.d/example.conf\n```\n```\nserver {                                                               \n    listen      80;                                                    \n    server_name example.com;                            \n    charset     utf-8;                                                 \n    client_max_body_size 75M;                                          \n    access_log /home/nginxuser/projects/example/nginxlogs/access.log;\n    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          \n \n    location /static {                                                 \n        alias /home/nginxuser/projects/explame/static;                \n    }                                                                  \n \n    location / {                                                       \n        proxy_pass http://127.0.0.1:8000;                              \n        proxy_set_header Host $host;                                   \n        proxy_set_header X-Real-IP $remote_addr;                       \n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   \n    }                                                                  \n}                                                                       jk\n```\n \n## Gunicorn\n### 安装\n```\npip install gunicorn\n```\n项目根目录下添加gunicorn运行配置文件gunicorn.conf.py\n```\nimport multiprocessing\nbind = \"127.0.0.1:8000\"\nworkers = 2\nerrorlog = \"/home/nginxuser/example/gunicorn.error.log\"\n#loglevel = \"debug\"\nproc_name = \"gunicorn_example\"\n```\n### 启动\n```\nsudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py\n```\n后台运行\n```\nsudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&\n```\n如果运行报错先使用以下命令检查下nginx配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n## Supervisor\n### 安装\n```\npip install supervisor\n```\n### 创建管理进程配置文件\n```\nvim /etc/supervisord.d/example.ini\n```\n（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）\n```\n[program:example]\ndirectory = /home/nginxuser/projects/example ; 程序的启动目录\ncommand = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = nginx         ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n**冒号后面要有空格**\n\n### 启动\n使用`-c`指定配置文件。\n```\nsupervisord -c /etc/supervisord.conf\n```\n如果启动时遇到以下报错信息\n```\nError: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.\nFor help, use /use/bin/supervisord -h\n```\n可以使用以下命令解决\n```\nsudo unlink /var/run/supervisor/supervisor.sock\n```\n\n### 命令行客户端工具supervisorctl\n启动时需要使用和`supervisorctl`使用一样的配置文件。\n```\nsupervisorctl -c /etc/supervisord.conf\n```\n启动后进入`supervisorctl`的shell，在此shell里可以执行以下命令\n```\nstatus # 查看程序状态\nstart example # 启动example程序\nstop example # 关闭example程序\nrestart example # 重启example程序\nreread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nupdate # 重启配置文件修改过的程序\n```\n也可以不进shell执行以上命令\n```\nsupervisorctl status # 查看程序状态\nsupervisorctl start example # 启动example程序\nsupervisorctl stop example # 关闭example程序\nsupervisorctl restart example # 重启example程序\nsupervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nsupervisorctl update # 重启配置文件修改过的程序\n```\n\n### 开启web管理界面\n如果要开启web管理界面，打开`/etc/supervisord.conf`把下面几行取消注释即可\n```\n:[inet_http_server]         ; inet (TCP) server disabled by default\n:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\n:username=user              ; (default is no username (open server))\n:password=123               ; (default is no password (open server))\n```\n\n\n","source":"_posts/在centos7使用mysql-nginx-gunicorn+supervisor部署django.md","raw":"title: 在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django\ncomments: true\ndate: 2016-12-08 23:19:59\ncategories: [程序猿]\ntags: [centOS, Django, Nginx, Gunicorn, MySQL, Supervisor]\nsticky: \n---\n本文记录下在CentOS下部署Django项目的步骤。\n<!--more-->\n\n## MySQL\n \n### 安装mysql和mysql-devel\n```\nyum install mysql\nyum install mysql-devel\n```\n \n### 安装mysql-server\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n```\n \n### 重启mysql服务\n```\nservice mysqld restart\n```\n \n### 设置root密码\n初次安装mysql需要设置root密码\n```\nmysql -uroot\nset password for 'root'@'localhost' =password('password');\n```\n \n### 配置mysql\n在`/etc/my.cnf`文件中[mysql]和[mysql]中添加以下内容\n```\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ncharacter-set-server=utf8\n```\n字符编码保持和`/usr/share/mysql/charsets/Index.xml`中的一致。\n \n### 远程连接设置\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n```\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n如果是新用户而不是root，则要先新建用户\n```\nmysql>create user 'username'@'%' identified by 'password';\n```\n此时就可以进行远程连接了。\n \n## Virtualenv\n安装epel扩展源\n```\nyum install epel-release\n```\n安装pip\n```\nyum install python-pip\n```\n安装virtualenv和virtualenvwrapper\n```\npip install virtualenv virtualenvwrapper\n```\n编辑`~/.bashrc`文件，结尾添加以下内容\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n然后执行以下命令使配置生效\n```\nsource ~/.bashrc\n```\n创建env\n```\nmkvirtualenv explame\n```\n使用pip安装项目需要的包\n \n## WSGI\n在项目目录下新建`nginx_wsgi.py`文件\n```\ntouch nginx_wsgi.py\n```\n添加如下内容\n```\nimport sys\nimport site\nimport os\n \n# site-packages\nsite.addsitedir('/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages')\n# Add the  project  directory\n# sys.path.append('/home/nginxuser/nginxuser')\nPROJECT_DIR = '/home/nginxuser/projects/example'\nsys.path.insert(0, PROJECT_DIR)\nos.environ['DJANGO_SETTINGS_MODULE'] = 'example.settings.prod'\n# Activate your virtual env\nactivate_env = os.path.expanduser(\"/home/nginxuser/.virtualenvs/example/bin/activate_this.py\")\nexecfile(activate_env, dict(__file__=activate_env))\n \n# after activite env\nfrom django.core.wsgi import get_wsgi_application\n \napplication = get_wsgi_application()\n```\n \n## Nginx\n \n### 安装\n```\nyum install nginx\n```\n### 检查配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n \n### 启动nginx\n```\nservice nginx start\n```\n \n### 设置开机自启\n```\nsystemctl enable nginx\n```\n \n### 创建用户\n```\nuseradd nginxuser\npasswd nginxuser\n```\n### 修改nginx主配置\n```\nvim /etc/nginx/nginx.conf\n```\n非注释首行\n```\nuser nginx\n```\n改为\n```\nuser nginxuser\n```\n不然可能会出现网站静态文件访问报403问题。\n### 新建网站运行配置\n```\nvim /etc/nginx/conf.d/example.conf\n```\n```\nserver {                                                               \n    listen      80;                                                    \n    server_name example.com;                            \n    charset     utf-8;                                                 \n    client_max_body_size 75M;                                          \n    access_log /home/nginxuser/projects/example/nginxlogs/access.log;\n    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          \n \n    location /static {                                                 \n        alias /home/nginxuser/projects/explame/static;                \n    }                                                                  \n \n    location / {                                                       \n        proxy_pass http://127.0.0.1:8000;                              \n        proxy_set_header Host $host;                                   \n        proxy_set_header X-Real-IP $remote_addr;                       \n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   \n    }                                                                  \n}                                                                       jk\n```\n \n## Gunicorn\n### 安装\n```\npip install gunicorn\n```\n项目根目录下添加gunicorn运行配置文件gunicorn.conf.py\n```\nimport multiprocessing\nbind = \"127.0.0.1:8000\"\nworkers = 2\nerrorlog = \"/home/nginxuser/example/gunicorn.error.log\"\n#loglevel = \"debug\"\nproc_name = \"gunicorn_example\"\n```\n### 启动\n```\nsudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py\n```\n后台运行\n```\nsudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&\n```\n如果运行报错先使用以下命令检查下nginx配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n## Supervisor\n### 安装\n```\npip install supervisor\n```\n### 创建管理进程配置文件\n```\nvim /etc/supervisord.d/example.ini\n```\n（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）\n```\n[program:example]\ndirectory = /home/nginxuser/projects/example ; 程序的启动目录\ncommand = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = nginx         ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n**冒号后面要有空格**\n\n### 启动\n使用`-c`指定配置文件。\n```\nsupervisord -c /etc/supervisord.conf\n```\n如果启动时遇到以下报错信息\n```\nError: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.\nFor help, use /use/bin/supervisord -h\n```\n可以使用以下命令解决\n```\nsudo unlink /var/run/supervisor/supervisor.sock\n```\n\n### 命令行客户端工具supervisorctl\n启动时需要使用和`supervisorctl`使用一样的配置文件。\n```\nsupervisorctl -c /etc/supervisord.conf\n```\n启动后进入`supervisorctl`的shell，在此shell里可以执行以下命令\n```\nstatus # 查看程序状态\nstart example # 启动example程序\nstop example # 关闭example程序\nrestart example # 重启example程序\nreread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nupdate # 重启配置文件修改过的程序\n```\n也可以不进shell执行以上命令\n```\nsupervisorctl status # 查看程序状态\nsupervisorctl start example # 启动example程序\nsupervisorctl stop example # 关闭example程序\nsupervisorctl restart example # 重启example程序\nsupervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nsupervisorctl update # 重启配置文件修改过的程序\n```\n\n### 开启web管理界面\n如果要开启web管理界面，打开`/etc/supervisord.conf`把下面几行取消注释即可\n```\n:[inet_http_server]         ; inet (TCP) server disabled by default\n:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\n:username=user              ; (default is no username (open server))\n:password=123               ; (default is no password (open server))\n```\n\n\n","slug":"在centos7使用mysql-nginx-gunicorn+supervisor部署django","published":1,"updated":"2020-01-17T07:59:15.669Z","layout":"post","photos":[],"link":"","_id":"ck8kk0zcx001qssyhy6rfdccq","content":"<p>本文记录下在CentOS下部署Django项目的步骤。<br><a id=\"more\"></a></p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"安装mysql和mysql-devel\"><a href=\"#安装mysql和mysql-devel\" class=\"headerlink\" title=\"安装mysql和mysql-devel\"></a>安装mysql和mysql-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql-server\"><a href=\"#安装mysql-server\" class=\"headerlink\" title=\"安装mysql-server\"></a>安装mysql-server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置root密码\"><a href=\"#设置root密码\" class=\"headerlink\" title=\"设置root密码\"></a>设置root密码</h3><p>初次安装mysql需要设置root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br><span class=\"line\">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>在<code>/etc/my.cnf</code>文件中[mysql]和[mysql]中添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>字符编码保持和<code>/usr/share/mysql/charsets/Index.xml</code>中的一致。</p>\n<h3 id=\"远程连接设置\"><a href=\"#远程连接设置\" class=\"headerlink\" title=\"远程连接设置\"></a>远程连接设置</h3><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>如果是新用户而不是root，则要先新建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以进行远程连接了。</p>\n<h2 id=\"Virtualenv\"><a href=\"#Virtualenv\" class=\"headerlink\" title=\"Virtualenv\"></a>Virtualenv</h2><p>安装epel扩展源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure></p>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure></p>\n<p>安装virtualenv和virtualenvwrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>编辑<code>~/.bashrc</code>文件，结尾添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/.virtualenvs</span><br><span class=\"line\">source /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后执行以下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>创建env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv explame</span><br></pre></td></tr></table></figure></p>\n<p>使用pip安装项目需要的包</p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>在项目目录下新建<code>nginx_wsgi.py</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx_wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>添加如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import site</span><br><span class=\"line\">import os</span><br><span class=\"line\"> </span><br><span class=\"line\"># site-packages</span><br><span class=\"line\">site.addsitedir(&apos;/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages&apos;)</span><br><span class=\"line\"># Add the  project  directory</span><br><span class=\"line\"># sys.path.append(&apos;/home/nginxuser/nginxuser&apos;)</span><br><span class=\"line\">PROJECT_DIR = &apos;/home/nginxuser/projects/example&apos;</span><br><span class=\"line\">sys.path.insert(0, PROJECT_DIR)</span><br><span class=\"line\">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;example.settings.prod&apos;</span><br><span class=\"line\"># Activate your virtual env</span><br><span class=\"line\">activate_env = os.path.expanduser(&quot;/home/nginxuser/.virtualenvs/example/bin/activate_this.py&quot;)</span><br><span class=\"line\">execfile(activate_env, dict(__file__=activate_env))</span><br><span class=\"line\"> </span><br><span class=\"line\"># after activite env</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\"> </span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否有错\"><a href=\"#检查配置是否有错\" class=\"headerlink\" title=\"检查配置是否有错\"></a>检查配置是否有错</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd nginxuser</span><br><span class=\"line\">passwd nginxuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改nginx主配置\"><a href=\"#修改nginx主配置\" class=\"headerlink\" title=\"修改nginx主配置\"></a>修改nginx主配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>非注释首行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginxuser</span><br></pre></td></tr></table></figure></p>\n<p>不然可能会出现网站静态文件访问报403问题。</p>\n<h3 id=\"新建网站运行配置\"><a href=\"#新建网站运行配置\" class=\"headerlink\" title=\"新建网站运行配置\"></a>新建网站运行配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/example.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;                                                               </span><br><span class=\"line\">    listen      80;                                                    </span><br><span class=\"line\">    server_name example.com;                            </span><br><span class=\"line\">    charset     utf-8;                                                 </span><br><span class=\"line\">    client_max_body_size 75M;                                          </span><br><span class=\"line\">    access_log /home/nginxuser/projects/example/nginxlogs/access.log;</span><br><span class=\"line\">    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          </span><br><span class=\"line\"> </span><br><span class=\"line\">    location /static &#123;                                                 </span><br><span class=\"line\">        alias /home/nginxuser/projects/explame/static;                </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;                                                       </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8000;                              </span><br><span class=\"line\">        proxy_set_header Host $host;                                   </span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;                       </span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\">&#125;                                                                       jk</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gunicorn</span><br></pre></td></tr></table></figure>\n<p>项目根目录下添加gunicorn运行配置文件gunicorn.conf.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">bind = &quot;127.0.0.1:8000&quot;</span><br><span class=\"line\">workers = 2</span><br><span class=\"line\">errorlog = &quot;/home/nginxuser/example/gunicorn.error.log&quot;</span><br><span class=\"line\">#loglevel = &quot;debug&quot;</span><br><span class=\"line\">proc_name = &quot;gunicorn_example&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py</span><br></pre></td></tr></table></figure>\n<p>后台运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&amp;</span><br></pre></td></tr></table></figure></p>\n<p>如果运行报错先使用以下命令检查下nginx配置是否有错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建管理进程配置文件\"><a href=\"#创建管理进程配置文件\" class=\"headerlink\" title=\"创建管理进程配置文件\"></a>创建管理进程配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisord.d/example.ini</span><br></pre></td></tr></table></figure>\n<p>（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:example]</span><br><span class=\"line\">directory = /home/nginxuser/projects/example ; 程序的启动目录</span><br><span class=\"line\">command = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</span><br><span class=\"line\">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">user = nginx         ; 用哪个用户启动</span><br><span class=\"line\">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class=\"line\">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure></p>\n<p><strong>冒号后面要有空格</strong></p>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>使用<code>-c</code>指定配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时遇到以下报错信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</span><br><span class=\"line\">For help, use /use/bin/supervisord -h</span><br></pre></td></tr></table></figure></p>\n<p>可以使用以下命令解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /var/run/supervisor/supervisor.sock</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令行客户端工具supervisorctl\"><a href=\"#命令行客户端工具supervisorctl\" class=\"headerlink\" title=\"命令行客户端工具supervisorctl\"></a>命令行客户端工具supervisorctl</h3><p>启动时需要使用和<code>supervisorctl</code>使用一样的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动后进入<code>supervisorctl</code>的shell，在此shell里可以执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status # 查看程序状态</span><br><span class=\"line\">start example # 启动example程序</span><br><span class=\"line\">stop example # 关闭example程序</span><br><span class=\"line\">restart example # 重启example程序</span><br><span class=\"line\">reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<p>也可以不进shell执行以上命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # 查看程序状态</span><br><span class=\"line\">supervisorctl start example # 启动example程序</span><br><span class=\"line\">supervisorctl stop example # 关闭example程序</span><br><span class=\"line\">supervisorctl restart example # 重启example程序</span><br><span class=\"line\">supervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">supervisorctl update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开启web管理界面\"><a href=\"#开启web管理界面\" class=\"headerlink\" title=\"开启web管理界面\"></a>开启web管理界面</h3><p>如果要开启web管理界面，打开<code>/etc/supervisord.conf</code>把下面几行取消注释即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">:username=user              ; (default is no username (open server))</span><br><span class=\"line\">:password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<p>本文记录下在CentOS下部署Django项目的步骤。<br>","more":"</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"安装mysql和mysql-devel\"><a href=\"#安装mysql和mysql-devel\" class=\"headerlink\" title=\"安装mysql和mysql-devel\"></a>安装mysql和mysql-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql-server\"><a href=\"#安装mysql-server\" class=\"headerlink\" title=\"安装mysql-server\"></a>安装mysql-server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置root密码\"><a href=\"#设置root密码\" class=\"headerlink\" title=\"设置root密码\"></a>设置root密码</h3><p>初次安装mysql需要设置root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br><span class=\"line\">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>在<code>/etc/my.cnf</code>文件中[mysql]和[mysql]中添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>字符编码保持和<code>/usr/share/mysql/charsets/Index.xml</code>中的一致。</p>\n<h3 id=\"远程连接设置\"><a href=\"#远程连接设置\" class=\"headerlink\" title=\"远程连接设置\"></a>远程连接设置</h3><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>如果是新用户而不是root，则要先新建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以进行远程连接了。</p>\n<h2 id=\"Virtualenv\"><a href=\"#Virtualenv\" class=\"headerlink\" title=\"Virtualenv\"></a>Virtualenv</h2><p>安装epel扩展源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure></p>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure></p>\n<p>安装virtualenv和virtualenvwrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>编辑<code>~/.bashrc</code>文件，结尾添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/.virtualenvs</span><br><span class=\"line\">source /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后执行以下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>创建env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv explame</span><br></pre></td></tr></table></figure></p>\n<p>使用pip安装项目需要的包</p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>在项目目录下新建<code>nginx_wsgi.py</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx_wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>添加如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import site</span><br><span class=\"line\">import os</span><br><span class=\"line\"> </span><br><span class=\"line\"># site-packages</span><br><span class=\"line\">site.addsitedir(&apos;/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages&apos;)</span><br><span class=\"line\"># Add the  project  directory</span><br><span class=\"line\"># sys.path.append(&apos;/home/nginxuser/nginxuser&apos;)</span><br><span class=\"line\">PROJECT_DIR = &apos;/home/nginxuser/projects/example&apos;</span><br><span class=\"line\">sys.path.insert(0, PROJECT_DIR)</span><br><span class=\"line\">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;example.settings.prod&apos;</span><br><span class=\"line\"># Activate your virtual env</span><br><span class=\"line\">activate_env = os.path.expanduser(&quot;/home/nginxuser/.virtualenvs/example/bin/activate_this.py&quot;)</span><br><span class=\"line\">execfile(activate_env, dict(__file__=activate_env))</span><br><span class=\"line\"> </span><br><span class=\"line\"># after activite env</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\"> </span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否有错\"><a href=\"#检查配置是否有错\" class=\"headerlink\" title=\"检查配置是否有错\"></a>检查配置是否有错</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd nginxuser</span><br><span class=\"line\">passwd nginxuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改nginx主配置\"><a href=\"#修改nginx主配置\" class=\"headerlink\" title=\"修改nginx主配置\"></a>修改nginx主配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>非注释首行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginxuser</span><br></pre></td></tr></table></figure></p>\n<p>不然可能会出现网站静态文件访问报403问题。</p>\n<h3 id=\"新建网站运行配置\"><a href=\"#新建网站运行配置\" class=\"headerlink\" title=\"新建网站运行配置\"></a>新建网站运行配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/example.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;                                                               </span><br><span class=\"line\">    listen      80;                                                    </span><br><span class=\"line\">    server_name example.com;                            </span><br><span class=\"line\">    charset     utf-8;                                                 </span><br><span class=\"line\">    client_max_body_size 75M;                                          </span><br><span class=\"line\">    access_log /home/nginxuser/projects/example/nginxlogs/access.log;</span><br><span class=\"line\">    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          </span><br><span class=\"line\"> </span><br><span class=\"line\">    location /static &#123;                                                 </span><br><span class=\"line\">        alias /home/nginxuser/projects/explame/static;                </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;                                                       </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8000;                              </span><br><span class=\"line\">        proxy_set_header Host $host;                                   </span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;                       </span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\">&#125;                                                                       jk</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gunicorn</span><br></pre></td></tr></table></figure>\n<p>项目根目录下添加gunicorn运行配置文件gunicorn.conf.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">bind = &quot;127.0.0.1:8000&quot;</span><br><span class=\"line\">workers = 2</span><br><span class=\"line\">errorlog = &quot;/home/nginxuser/example/gunicorn.error.log&quot;</span><br><span class=\"line\">#loglevel = &quot;debug&quot;</span><br><span class=\"line\">proc_name = &quot;gunicorn_example&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py</span><br></pre></td></tr></table></figure>\n<p>后台运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&amp;</span><br></pre></td></tr></table></figure></p>\n<p>如果运行报错先使用以下命令检查下nginx配置是否有错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建管理进程配置文件\"><a href=\"#创建管理进程配置文件\" class=\"headerlink\" title=\"创建管理进程配置文件\"></a>创建管理进程配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisord.d/example.ini</span><br></pre></td></tr></table></figure>\n<p>（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:example]</span><br><span class=\"line\">directory = /home/nginxuser/projects/example ; 程序的启动目录</span><br><span class=\"line\">command = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</span><br><span class=\"line\">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">user = nginx         ; 用哪个用户启动</span><br><span class=\"line\">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class=\"line\">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure></p>\n<p><strong>冒号后面要有空格</strong></p>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>使用<code>-c</code>指定配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时遇到以下报错信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</span><br><span class=\"line\">For help, use /use/bin/supervisord -h</span><br></pre></td></tr></table></figure></p>\n<p>可以使用以下命令解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /var/run/supervisor/supervisor.sock</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令行客户端工具supervisorctl\"><a href=\"#命令行客户端工具supervisorctl\" class=\"headerlink\" title=\"命令行客户端工具supervisorctl\"></a>命令行客户端工具supervisorctl</h3><p>启动时需要使用和<code>supervisorctl</code>使用一样的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动后进入<code>supervisorctl</code>的shell，在此shell里可以执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status # 查看程序状态</span><br><span class=\"line\">start example # 启动example程序</span><br><span class=\"line\">stop example # 关闭example程序</span><br><span class=\"line\">restart example # 重启example程序</span><br><span class=\"line\">reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<p>也可以不进shell执行以上命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # 查看程序状态</span><br><span class=\"line\">supervisorctl start example # 启动example程序</span><br><span class=\"line\">supervisorctl stop example # 关闭example程序</span><br><span class=\"line\">supervisorctl restart example # 重启example程序</span><br><span class=\"line\">supervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">supervisorctl update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开启web管理界面\"><a href=\"#开启web管理界面\" class=\"headerlink\" title=\"开启web管理界面\"></a>开启web管理界面</h3><p>如果要开启web管理界面，打开<code>/etc/supervisord.conf</code>把下面几行取消注释即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">:username=user              ; (default is no username (open server))</span><br><span class=\"line\">:password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:59:15 GMT+0800 (China Standard Time)","title":"在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django","path":"2016/12/08/在centos7使用mysql-nginx-gunicorn+supervisor部署django/","eyeCatchImage":null,"excerpt":"<p>本文记录下在CentOS下部署Django项目的步骤。<br>","date":"2016-12-08T15:19:59.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","centOS","Nginx","Gunicorn","MySQL","Supervisor"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":6181},{"title":"Django 1.9文档阅读笔记","comments":1,"date":"2016-04-04T07:27:20.000Z","_content":"<br/>\n<!--more-->\n\n\n<!--more-->\n \n## 更新记录\n2016-04-04 初稿\n2016-06-30 更新内容\n\n\n## [模型](http://python.usyiyi.cn/django/topics/db/models.html)\n[Model _meta API](http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api)\n\n限制普通字段的选择范围\n`choices `，value-text，\n显示`get_foo_display()`\n\n模型继承\n1. 抽象基类\n  - 默认继承元类\n2. 多表继承\n  - 一般情况不继承元类\n3. 代理模型\n\n多重继承主要用于`mix-in`类\n\n多表继承时使用`parent_link=True`显示指定OneToOne字段\n\n\n## [模型字段参考](http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships)\n\n与尚未定义的模型关联使用模型名字（字符串）而非本身（类）\n\n关联自己使用`self`\n\n`related_name` `relate_query_name`\n\n外键关联到特定字段\n`to_field `\n\n限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）\n`limit_choices_to `\n\n外键关联对象删除行为\n`on_delete`\n\n1.8以后保存模型时，未保存的外键对象将被忽略，除非设置`allow_unsaved_instance_assignment=True`\n\n关联自身的多对多关系默认对称，取消对称设置`symmetrical=False`\n\n`ImageField`中的`height_field`和`width_field`是用来存储存入图片的高度和宽度值的\n\n##[执行查询](http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships)\n\n[可自定义查询（高级查找）](http://python.usyiyi.cn/django/howto/custom-lookups.html)\n`exclude`多条件查询时是用or关系而不是and关系\n\n`F()`\n用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作\n支持.bitand() 和.bitor()位操作，`update()`也可以使用`F()`但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）\n\n查询集缓存\n当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。\n```python\n>>> queryset = Entry.objects.all()\n>>> print([p.headline for p in queryset]) # Evaluate the query set.\n>>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.\n```\n```python\n>>> queryset = Entry.objects.all()\n>>> print queryset[5] # Queries the database\n>>> print queryset[5] # Queries the database again\n```\n```\n>>> queryset = Entry.objects.all()\n>>> [entry for entry in queryset] # Queries the database\n>>> print queryset[5] # Uses cache\n>>> print queryset[5] # Uses cache\n```\n\n`Q()`\n可使用Q对象进行复杂查询\n\n判断两相模型实例是否相同，直接使用`==`比较即可\n\n默认批量删除对象时不会调用实例的`delete`方法\n\n拷贝实例，把`pk`设置为`None`再`save`即可（如果是继承的，则`pk`和`id`都需要设置为`None`）\n\n`update()`方法也不会调用模型的`save()`方法，不会发出`pre_save`和`post_save`信号，字段的`auto_now`也不会起作用\n\n一对多关联对象访问会缓存\n```python\n>>> e = Entry.objects.get(id=2)\n>>> print(e.blog)  # Hits the database to retrieve the associated Blog.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n```\n\n自定义反向管理器1.7+\n```python\nfrom django.db import models\n \nclass Entry(models.Model):\n    #...\n    objects = models.Manager()  # Default Manager\n    entries = EntryManager()    # Custom Manager\n \nb = Blog.objects.get(id=1)\nb.entry_set(manager='entries').all()\n```\n\n## [查询集API 参考](http://python.usyiyi.cn/django/ref/models/querysets.html)\n## [聚合](http://python.usyiyi.cn/django/topics/db/aggregation.html)\n一次创建多条数据（只有一条sql）\n`bulk_create`\n\n根据提供的一组`pk`查询出所有对应的对象\n`in_bulk`\n\n在查作者列表时要查每个作者有几篇博文\n```python\n>>> from django.db.models import Count\n>>> authors = Author.object.all().annotate(Count('blog'))\n# authors[0]作者的博文数\n>>> authors[0].blog__count\n3\n# 或\n>>> authors = Author.object.all().annotate(number_of_blog=Count('blog'))\n>>> authors[0].number_of_blog\n3\n```\n算出所有作者的年龄总合（不需要其它数据）\n```python\n>>> ageAuthor.objects.all().aggregate(Sum('age'))\n{'age__sum': 26}\n```\n~~`annotate`和~~`aggregate`都可写入多个注解表达式\n`annotate`和`aggregate`可聚合关联对象\n\n对注解进行过滤\n```python\n# 查询出作者数大于1的书本\n# 只有一条sql\nBook.objects.annotate(num_authors=Count('authors')).filter(num_authors__gt=1)\n```\n但顺序不一样，结果也不同，如：\n```python\nPublisher.objects.annotate(num_books=Count('book')).filter(book__rating__gt=3.0)\nPublisher.objects.filter(book__rating__gt=3.0).annotate(num_books=Count('book')) \n```\n对注解项进行排序\n```python\nBook.objects.annotate(num_authors=Count('authors')).order_by('num_authors')\n```\n`values()`使用注解时要小心，如果`values()`在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上\n> 与默认排序交换或order_by()¶\n \n> 在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：\n \n> 通过例子中的方法，假设有一个这样的模型：\n \n```python\nfrom django.db import models \nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    data = models.IntegerField() \n    class Meta:\n        ordering = [\"name\"]\n```\n \n> 关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：\n \n```python\n# Warning: not quite correct!\nItem.objects.values(\"data\").annotate(Count(\"id\"))\n```\n \n> ...这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：\n \n```python\nItem.objects.values(\"data\").annotate(Count(\"id\")).order_by()\n```\n \n> ...这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。\n \n> 这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。\n\n\n## 静态文件 \nhttp://python.usyiyi.cn/django/intro/tutorial06.html\nhttp://python.usyiyi.cn/django/ref/templates/builtins.html \n\n```html\n{% load static %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static user_stylesheet %}\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% get_static_prefix %}pools/style.css\" />\n{% get_static_prefix as STATIC_PREFIX %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{ STATIC_PREFIX }}pools/style.css\" />\n{% static \"images/hi.jpg\" as myphoto %}\n<img src=\"{{ myphoto }}\"></img>\n```\n\n还有`get_media_prefix`\n\n\n## [模型实例参考](http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model)\n\n从数据库中重新加载值\n`Model.refresh_from_db(using=None, fields=None, **kwargs)`\n\n返回模型中当前所有延迟字段的属性名称\n` Model.get_deferred_fields()`\n\n验证对象\n> 字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。\n> 先跑`form`里验证，再跑`modle`验证\n> 先跑验证器，再跑`clean`\n> 先跑单个字段验证，再跑整体验证\n> `Model.clean_field()`会覆盖`Model`里所有字段的验证器，但不会对`Form`里的验证器产生影响\n\n验证模型的字段`Model.clean_fields(exclude=None)`\n验证模型的完整性`Model.clean()`\n验证模型的唯一性`Model.validate_unique(exclude=None)`\n调用`full_clean()`时，上面三个方法都会执行（执行顺序即上面的书写顺序），`ModelForm`的`is_valid()`也会执行上所有验证\n`Model.full_clean(exclude=None, validate_unique=True)`\n `save()`时，`full_clean()`不会被调用，如果想验证数据，可手动调用\n\n`Model.clean()`时，引发特定字段的异常\n使用一个字典实例化`ValidationError`即可或使用`add_error(field, msg)`方法\n\n在数据库字段值的基础上进行简单的算法操作，应该尽量使用`F()`表达式，避免问题竞态条件\n\n> 指定要保存的字段\n \n> 如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：\n \n```python\nproduct.name = 'Name changed again'\nproduct.save(update_fields=['name'])\n```\n \n> `update_fields` 参数可以是任何包含字符串的可迭代对象。空的`update_fields`可迭代对象将会忽略保存。如果为`None`值，将执行所有字段上的更新。\n \n> 指定`update_fields`将强制使用更新操作。\n \n> 当保存通过延迟模型加载（`only()` 或`defer()`）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的`update_fields`。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。\n\nnew in 1.9\n使用`Model.delete()`删除多表继承的子表数据时，使用``keep_parents=True`可以保留上级数据，默认为`False`\n返回值为删除数据的条数\n\n`DateField`和`DateTimeField`字段如果`null=False`则支持下面两个方法\n```python \nModel.get_next_by_FOO(**kwargs)¶ \nModel.get_previous_by_FOO(**kwargs)\n```\n## [管理器](http://python.usyiyi.cn/django/topics/db/managers.html)\n\ndjango遇到的第一个管理器为默认管理器\n\n如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加`use_for_related_fields=True`，不然会调用朴素管理器\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.db import models\n \n \nclass DefaultManager(models.Manager):\n    def get_queryset(self):\n        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=False)\n        return queryset\n \n \nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    is_delete = models.BooleanField()\n    objects = DefaultManager()\n \n \nclass Post(models.Model):\n    author = models.ForeignKey(Author)\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    is_delete = models.BooleanField()\n    objects = DefaultManager()\n \n \nauthor = Author.objects.get(pk=1)\npost = Post.objects.get(pk=2)\n \n# 调用DefaultManager管理器\nauthor.post_set.all()\n# 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True\npost.author\n```\n*注：朴素管理器里找不到的方法会在默认管理器里查找*\n\n[从Manager中调用自定义的QuerySet](http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager)\n\n## [进行原始的SQL查询](http://python.usyiyi.cn/django/topics/db/sql.html)\n\n```python\nManager.raw(raw_query, params=None, translations=None)\n```\n\n> django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。\n\n## [数据库事务](http://python.usyiyi.cn/django/topics/db/transactions.html)\n\n详细笔记见django1.8事务.md\n\n将每个HTTP请求封装在一个数据库事务中\nsettings中设置`ATOMIC_REQUESTS=True`\n\n单独给一个方法加上数据库事务控制使用`atomic`\n```python\nfrom django.db import transaction\n \n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n```\n或\n```python\nfrom django.db import transaction\n \ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n \n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n```\n避免在 atomic里捕获异常!\n\n## 查询表达式\n使用数据库的方法\n```python\nfrom django.db.models import Func, F \nqueryset.annotate(field_lower=Func(F('field'), function='LOWER'))\n```\n或\n```python\nclass Lower(Func):\n    function = 'LOWER' \nqueryset.annotate(field_lower=Lower(F('field')))\n```\n\n## [条件表达式](http://python.usyiyi.cn/django/ref/models/conditional-expressions.html)\n高级用法查看在线版\n`When`\n`Case`\n\n## [数据库函数](http://python.usyiyi.cn/django/ref/models/database-functions.html)\n`Coalesce` 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）\n\n## [将遗留数据库整合到Django](http://python.usyiyi.cn/django/howto/legacy-databases.html)\n\n根据遗留数据库生成models\n```python\npython manage.py inspectdb > models.py\n```\n\n## [为模型提供初始数据](http://python.usyiyi.cn/django/howto/initial-data.html)\n\n使用fixtures\n```\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n导入数据命令\n```\npython manage.py loaddata <fixturename>\n```\n\n## 数据库访问优化\n\n添加索引，比任何查询语法优化都来的重要\n理解查询集\nQuerySets是延迟的。\n什么时候它们被计算出来。\n数据在内存中如何存储。\n\n使用`cached_property`装饰器，只要是同一个实例，一个方法就只会执行一次\n使用`with`模版标签\n使用`iterator`迭代器\n\n在数据库中而不是python中做数据库工作\n使用过滤器和反射过滤器对数据进行过滤\n使用`F()`表达式\n使用注解和聚合\n使用原始SQL\n\n用唯一的或被索引的列来检索独立对象\n\n在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。\n\n使用`select_related()`和`prefetch_related()`\n\n不检索你不需要的信息\n使用`QuerySet.values()`和`QuerySet.values_list()`\n\n使用`QuerySet.defer()`和`QuerySet.only()`\n\n计算数量不要使用`len(queryset)`而是使用`QuerySet.count()`\n\n判断是否存在结果使用`QuerySet.exists()`而不是用`if queryset`\n\n但不要过度使用`count()`和`exists()`，如果你本来就需要里面的数据，那就不要使用\n\n使用`QuerySet.update()`和`QuerySet.delete()`批量操作数据\n\n直接使用外键的值\n```python\nentry.blog_id\n# 而不是\nentry.blog.id\n```\n\n如果你并在意结果集的顺序，不要进行排序，移除`Meta.ordering`\n\n创建对象时尽可能使用`bulk_create()`来减少sql查询数量\n这也适用于`ManyToManyFields`的情况，一起`add`而不是一个一个`add`\n```python\nmy_band.members.add(me, my_friend) \n#更优于 \nmy_band.members.add(me)\nmy_band.members.add(my_friend)\n```\n\n## [URL调度器](http://python.usyiyi.cn/django/topics/http/urls.html)\n\nurl捕获的参数永远是字符串\n\n在根url上获取的参数不影响参数传递\n```python\n# In settings/urls/main.py\nfrom django.conf.urls import include, url\n \nurlpatterns = [\n    url(r'^(?P<username>\\w+)/blog/', include('foo.urls.blog')),\n]\n \n# In foo/urls/blog.py\nfrom django.conf.urls import url\nfrom . import views\n \nurlpatterns = [\n    url(r'^$', views.blog.index),\n    url(r'^archive/$', views.blog.archive),\n]\n```\n在上面的例子中，捕获的\"username\"变量将被如期传递给include()指向的URLconf。\n\n可嵌套\n```python\nfrom django.conf.urls import url\n \nurlpatterns = [\n    url(r'blog/(page-(\\d+)/)?$', blog_articles),                  # bad\n    url(r'comments/(?:page-(?P<page_number>\\d+)/)?$', comments),  # good\n]\n```\n \n传递额外的参数\n```python\nfrom django.conf.urls import url\nfrom . import views\n \nurlpatterns = [\n    url(r'^blog/(?P<year>[0-9]{4})/$', views.year_archive, {'foo': 'bar'}),\n]\n```\n当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值\n\n传递额外的参数给`include()`\n```python\n# main.py\nfrom django.conf.urls import include, url\n \nurlpatterns = [\n    url(r'^blog/', include('inner'), {'blogid': 3}),\n]\n \n# inner.py\nfrom django.conf.urls import url\nfrom mysite import views\n \nurlpatterns = [\n    url(r'^archive/$', views.archive),\n    url(r'^about/$', views.about),\n]\n```\n效果等同\n```python\n# main.py\nfrom django.conf.urls import include, url\nfrom mysite import views\n \nurlpatterns = [\n    url(r'^blog/', include('inner')),\n]\n \n# inner.py\nfrom django.conf.urls import url\n \nurlpatterns = [\n    url(r'^archive/$', views.archive, {'blogid': 3}),\n    url(r'^about/$', views.about, {'blogid': 3}),\n]\n```\n\n[反查带命名空间的URL](http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls)\n\n## [编写视图](http://python.usyiyi.cn/django/topics/http/views.html)\n\n`HttpResponse`子类，状态码\n- `HttpResponseRedirect` 临时重定向，302\n- `HttpResponsePermanentRedirect` 永久重定向，301\n- `HttpResponseNotModified` 没有任何修改，304\n- `HttpResponseBadRequest` 语义有误码，当前请求不被服务器理解，400\n- `HttpResponseNotFound` 页面没找到，404\n- `HttpResponseForbidden` 服务器理解请求，但拒绝执行，403\n- `HttpResponseNotAllowed` 请求中指定的请求方式不能用于请求相应资源，405\n- `HttpResponseGone` 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410\n- `HttpResponseServerError` 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500\n- `HttpResponse(status=201)` 自定义返回状态码\n\n重写错误视图（在url中）\n```\nhandler404 = 'mysite.views.my_custom_page_not_found_view'\nhandler500 = 'mysite.views.my_custom_error_view' \nhandler403 = 'mysite.views.my_custom_permission_denied_view'\nhandler400 = 'mysite.views.my_custom_bad_request_view' \n```\n\n## [Django 的快捷函数](http://python.usyiyi.cn/django/topics/http/shortcuts.html)\n\n`template_name`可传一个模版序列，django将使用存在的第一个模版\n\n`redirect(to, [permanent=False, ]*args, **kwargs)[source]`\n> 为传递进来的参数返回HttpResponseRedirect 给正确的URL 。 \n> 参数可以是：\n>  \n>     一个模型：将调用模型的get_absolute_url() 函数\n>     一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n>     一个绝对的或相对的URL，将原样作为重定向的位置。\n>  \n> 默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。\n\n`get_object_or_404(klass, *args, **kwargs)`可以传Model也可以传QuerySet实例和关联的管理器\n`get_list_or_404(klass, *args, **kwargs)`可以传Model也可以传QuerySet实例和关联的管理器\n\n## [视图装饰器](http://python.usyiyi.cn/django/topics/http/decorators.html)\n[按需内容处理](http://python.usyiyi.cn/django/topics/conditional-view-processing.html )\n`django.views.decorators.http`包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。\n`require_http_methods(request_method_list)`限制视图只能服务于规定的http方法（需要大写）\n`require_GET()`\n`require_POST()`\n`require_safe()`只允许视图接受GET和HEAD方法的装饰器。\n\n```python\n@condition(etag_func=None, last_modified_func=None)\n```\n```python\n@last_modified(last_modified_func)\n```\n根据最后修改时间来决定是否运行视图，可减少流量\n```python\n@etag(etag_func)\n```\n`etag`（版本？）和`last_modified`不能同时使用\n\n`GZip`对内容进行压缩，节省流量，但增加处理时间\n\n`vary_on_cookie`\n`vary_on_headers`\n基于特定的请求头部来控制缓存\n\n`never_cache`\n\n## [Request 对象和Response 对象](http://python.usyiyi.cn/django/ref/request-response.html)\n\n`HttpRequest`对象(除非特殊说明，所有属性都是只读，`session`属性是个例外)\n`HttpRequest.scheme` 请求方案（通常为http或https）\n`HttpRequest.body` 字节字符串，表示原始http请求正文\n`HttpRequest.path` 字符串，表示请求的页面的完整路径，不包含域名\n`HttpRequest.path_info`    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。 \n    例如，如果应用的WSGIScriptAlias 设置为\"/minfo\"，那么当path 是\"/minfo/music/bands/the_beatles/\" 时path_info 将是\"/music/bands/the_beatles/\"。\n`HttpRequest.method` 请求使用的http方法，大写\n`HttpRequest.encoding` 表示提交的数据的编码方式，可写\n`HttpRequest.GET`\n`HttpRequest.POST`\n`HttpRequest.REQUEST`不建议使用，使用`GET`和`POST`代替\n`HttpRequest.COOKIES` 字典，键和值都是字符串\n`HttpRequest.FILES` 类似字典的对象，包含所有的上传文件，<form>带有`enctype=\"multipart/form-data\"`才会有数据\n`HttpRequest.META` 标准的python字典，包含所有http请求头部\n`HttpRequest.user`\n`HttpRequest.session` 类似字典的对象\n`HttpRequest.urlconf` 如果其它地方设置了，则用来取代`ROOT_URLCONF `\n`HttpRequest.resolver_match` 会在url解析之后设置，一个`ResolverMatch`实例，表示解析之后的url\n`HttpRequest.get_host()` 获取原始主机地址\n`HttpRequest.get_port()` 获取请求端端口号\n`HttpRequest.get_full_path()` 返回完整的path，包括查询字符串\n`HttpRequest.build_absolute_uri(location)` 返回绝对url\n`HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)` 返回签名过的Cookie对应的值\n`HttpRequest.is_secure()` 如果请求是通过https发起的，则返回True\n`HttpRequest.is_ajax()` 如果请求是通过XMLHttpRequest发起的，则返回True\n```python \nHttpRequest.read(size=None)\nHttpRequest.readline()\nHttpRequest.readlines()\nHttpRequest.xreadlines()\nHttpRequest.__iter__()\n```\n这几个方法实现类文件的接口用于读取HttpRequest· 实例\n\n`QueryDict`对象\nrequest.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。\n\n## [TemplateResponse 和SimpleTemplateResponse](http://python.usyiyi.cn/django/ref/template-response.html)\n`SimpleTemplateResponse`\n`TemplateResponse`\nTemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。\n \n例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：\n```python\nfrom django.template.response import TemplateResponse\n \ndef blog_index(request):\n    return TemplateResponse(request, 'entry_list.html', {'entries': Entry.objects.all()})\n```\n \n## [文件上传](http://python.usyiyi.cn/django/topics/http/file-uploads.html)\n```python\ndef handle_uploaded_file(f):\n    with open('some/file/name.txt', 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n```\n遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。\n\n上传处理器\n```\n(\"django.core.files.uploadhandler.MemoryFileUploadHandler\",\n\"django.core.files.uploadhandler.TemporaryFileUploadHandler\",)\n```\nMemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。\n \n你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。\n\n更改上传处理器的行为\n``` \nDEFAULT_FILE_STORAGE\nFILE_CHARSET\nFILE_UPLOAD_HANDLERS\nFILE_UPLOAD_MAX_MEMORY_SIZE\nFILE_UPLOAD_PERMISSIONS\nFILE_UPLOAD_TEMP_DIR\nMEDIA_ROOT\nMEDIA_URL\n```\n\n在运行中更改上传处理器\n```pyhton\nrequest.upload_handlers.insert(0, ProgressBarUploadHandler())\n```\n\n>  注意\n \n>  你只可以在访问request.POST或者request.FILES之前修改上传处理器-- 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。\n \n>  所以，你应该在你的视图中尽早修改上传处理器。\n \n>  CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：\n \n> ```from django.views.decorators.csrf import csrf_exempt, csrf_protect \n@csrf_exempt\ndef upload_file_view(request):\n    request.upload_handlers.insert(0, ProgressBarUploadHandler())\n    return _upload_file_view(request) \n@csrf_protect\ndef _upload_file_view(request):\n    ... # Process request\n ```\n\n## [File对象](http://python.usyiyi.cn/django/ref/files/file.html)\n`File`类\n`ContentFile`类\n`ImageFile`类 比`File`多了`width`和`height`属性\n附加到对象的文件有额外的方法\n```\nFile.save(name, content[, save=True])\n```\n提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。\n测试出来直接`car.save()`也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串\n如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：\n```python\n>>> car.photo.save('myphoto.jpg', content, save=False)\n>>> car.save()\n``` \n等价于：\n```python\n>>> car.photo.save('myphoto.jpg', content, save=True)\n```\n\n\n从模型实例中移除文件，并且删除内部文件\n```\n File.delete([save=True])\n```\n在页面展示中，`ImageFile`自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而`File.delete()`会删除文件系统里的文件\n \n## [文件储存API](http://python.usyiyi.cn/django/ref/files/storage.html)\n \n`DefaultStorage`\n`FileSystemStorage`\n`Storage`\n \n## [管理文件](http://python.usyiyi.cn/django/topics/files.html)\n \n```python\nfrom django.db import models\n \nclass Car(models.Model):\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    photo = models.ImageField(upload_to='cars')\n```\n`photo`有以下方法\n`photo.path`相对路径\n`photo.url`绝对路径\n\n*实际测试有出入*\n```python\n# 官方示例\n>>> car.photo.path\n'/media/cars/chevy.jpg'\n>>> car.photo.url\n'http://media.example.com/cars/chevy.jpg'\n\n# 实际测试结果\n>>> car.photo.path\n'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'\n>>> car.photo.url\n'/upload/20151230171832_0.jpg'\n```\n \n更改一个文件的存储位置\n```python\n>>> import os\n>>> from django.conf import settings\n>>> initial_path = car.photo.path\n>>> car.photo.name = 'cars/chevy_ii.jpg'\n>>> new_path = settings.MEDIA_ROOT + car.photo.name\n>>> # Move the file on the filesystem\n>>> os.rename(initial_path, new_path)\n>>> car.save()\n>>> car.photo.path\n'/media/cars/chevy_ii.jpg'\n>>> car.photo.path == new_path\nTrue\n```\n \n## [编写自定义存储系统](http://python.usyiyi.cn/django/howto/custom-file-storage.html)\n \n1. 必须是`django.core.files.storage.Storage`的子类\n2. Django必须能够不带任何参数来实例化\n3. 必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法\n4. 你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）\n \n## [基于类的视图](http://python.usyiyi.cn/django/topics/class-based-views/index.html)\n \n## [基于类的内建通用视图](http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html)\n \n`ListView`类视图中，默认的对象列表名除了`object_list`，还有一个`<model_name>_list`\n \n## [使用基于类的视图处理表单](http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html)\n \n如果对应模型存在`get_absolute_url`方法的前提下`CreateView`和`UpdateView`类视图的`success_url`默认使用`get_absolute_url`\n \n如何定义`form_class`，即使`form_class`是`ModelForm`也还是需要指定模型\n \n如果没有定义`form_class`，则必须定义`fields`，`fields`和`form_class`不能同时存在\n\n如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过`template_name_field`来指定此字段。\n\n## [Mixin](http://python.usyiyi.cn/django/topics/class-based-views/mixins.html)\n \n## [基于类的视图的Mixin](http://python.usyiyi.cn/django/ref/class-based-views/mixins.html)\n`ContextMixin`所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。\n> Use alters_data where appropriate\n注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。\n很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。\n    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：\n    I will now delete this valuable data. {{ data.delete }}\n    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：\n```python\ndef sensitive_function(self):\n        self.database_record.delete()\n    sensitive_function.alters_data = True\n```\n> 有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。\n`query_pk_and_slug`如果为`True`,`get_object()`将使用两者一起来查找。可以防止只使用`pk`时，如果`pk`连续，直接被攻击者都遍历`pk`获取整个列表\n \n \n## [内建基于类的视图的API](http://python.usyiyi.cn/django/ref/class-based-views/index.html)\n \n \n```python\nurlpatterns = [\n    url(r'^view/$', MyView.as_view(size=42)),\n]\n```\n> 视图参数的线程安全性\n传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。\n \n## [基于类的通用视图 —— 索引](http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html)\n \n## [使用Django输出CSV](http://python.usyiyi.cn/django/howto/outputting-csv.html)\n \n```python\nimport csv\nfrom django.http import HttpResponse\n \ndef some_view(request):\n    # Create the HttpResponse object with the appropriate CSV header.\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"somefilename.csv\"'\n \n    writer = csv.writer(response)\n    writer.writerow(['First row', 'Foo', 'Bar', 'Baz'])\n    writer.writerow(['Second row', 'A', 'B', 'C', '\"Testing\"', \"Here's a quote\"])\n \n    return response\n```\n \n## [使用Django输出PDF](http://python.usyiyi.cn/django/howto/outputting-pdf.html)\n \n```python\nfrom reportlab.pdfgen import canvas\nfrom django.http import HttpResponse\n \ndef some_view(request):\n    # Create the HttpResponse object with the appropriate PDF headers.\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = 'attachment; filename=\"somefilename.pdf\"'\n \n    # Create the PDF object, using the response object as its \"file.\"\n    p = canvas.Canvas(response)\n \n    # Draw things on the PDF. Here's where the PDF generation happens.\n    # See the ReportLab documentation for the full list of functionality.\n    p.drawString(100, 100, \"Hello world.\")\n \n    # Close the PDF object cleanly, and we're done.\n    p.showPage()\n    p.save()\n    return response\n```\n \n## [中间件](http://python.usyiyi.cn/django/topics/http/middleware.html)\n \n中间件的顺序很重要\n接受请求时，自上向下调用中间件\n返回响应时，自下向上调用中间件\n`process_request(request)`\n在django决定执行哪个视图之前（也就是解析url之前）被调用\n返回`None`继续处理请求\n返回`HttpResponse`不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果\n \n`process_view(request, view_func, view_args, view_kwargs)`\n*注：`view_args`和`view_kwargs`都不包含`request`*\n在django调用视图之前被调用\n返回`None`继续处理请求\n返回`HttpResponse`不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果\n> 注意\n在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。\n类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。\n \n`process_template_response(request, response)`\n在视图刚好执行完毕之后被调用\n必须返回一个实现了`render`方法的响应对象\n \n`process_response(request, response)`\n在所有响应返回浏览器之前被调用\n必须返回`HttpResponse`或者`StreamingHttpResponse`对象\n***[处理流式响应](http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses)***\n \n`process_exception(request, exception)`\n在视图抛出异常时被调用\n返回`None`\n返回`HttpResponse` `process_template_response`和响应中间件会被调用\n**在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的`process_exception`返回了一个响应，那么这个中间件上面的中间件中的`process_exception`都不会被调用**\n \n`__init__()`\n大多数中间件类都不需要初始化方法\ndjango初始化中间件无需任何参数，所以不能定义一个有参数的`__init__方法\n`__init__`不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用\n`__init__`抛出`django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。\n \n- 中间件类不能是任何类的子类\n- 中间件可以放在python路径中的任务位置\n正常\n```\nA.init\nB.init\nC.init\nD.init\nA.process_request\nB.process_request\nC.process_request\nD.process_request\nA.process_view\nB.process_view\nC.process_view\nD.process_view\n \nD.process_template_response\nC.process_template_response\nB.process_template_response\nA.process_template_response\nD.process_responst\nC.process_responst\nB.process_responst\nA.process_responst\n```\n视图异常\n```\nA.init\nB.init\nC.init\nD.init\nA.process_request\nB.process_request\nC.process_request\nD.process_request\nA.process_view\nB.process_view\nC.process_view\nD.process_view\n\nD.process_responst\nC.process_responst\nB.process_responst\nA.process_responst\n```\n\n## [django中可用的中间件](http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering )\n \n### `class CommonMiddleware`\n`DISALLOWED_USER_AGENTS`禁用匹配的`user-agents`访问网站\n`APPEND_SLASH`如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次\n`PREPEND_WWW`如果url会重定向到www到头的网址\n`USE_ETAGS`设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。\n### `class BrokenLinkEmailsMiddleware`\n向`MANAGERS` 发送死链提醒邮件\n \n### `class GZipMiddleware`\n为支持`GZip`压缩的浏览器压缩内容\n建议放在中间件配置列表的第一个\n可通过`gzip_page()`装饰器使用独立的`GZip`压缩\n \n### `class ConditionalGetMiddleware`\n \n### `class LocaleMiddeware`\n基于请求中的数据开启语言选择，它可以为每个用户进行定制。\n \n### `class MessageMiddleware`\n开启基于`Cookie`和会话的消息支持\n \n### `class SecurityMiddleware`\n \n[中间件的排序](http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering )\n \n## [模版](http://python.usyiyi.cn/django/topics/templates.html)\n \n`DjangoTemplates`引擎`OPTIONS`配置项中接受以下参数\n`string_if_invalid`当模版变量无效时，使用此值代替\n可使用\ncomment \n和\nendcomment\n进行多行注释\n \n## [Django模版语言](http://python.usyiyi.cn/django/ref/templates/language.html )\n \n当模版系统遇到`.`时，按下面顺序查询\n从技术上来说，当模版系统遇到点(\".\")，它将以这样的顺序查询：\n- 字典查询（Dictionary lookup）\n- 属性或方法查询（Attribute or method lookup）\n- 数字索引查询（Numeric index lookup）\n \n模版变量最终解释成字面量，而不是变量值\n \nload\n可接受多个库名称\nload humanize i18n\nload\n不支持继承\n \n## [内置标签与过滤器](http://python.usyiyi.cn/django/ref/templates/builtins.html)\n \n### 标签\n`filter`对一段内容进行过滤，使用`|`对多个过滤器进行连接，且过滤器可以有参数\n*比如一段纯文本不能使用之前说的过滤器写法，则可以使用`filter`*\n`firstof`输出第一个不为`False`的参数\n```\n{% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\n```\n`ifchanged`检查循环中的一个值从最近一次重复其是否改变，支持`else\n \n`with`可往`include`的模版里传上下文件变量\n```\n{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}\n```\n```\n{% include \"name_snippet.html\" with greeting=\"Hi\" only %}\n```\n```\n{% lorem %}\n```\n设计人员工具，好像是生成随机单词和段落\n```django\n{% lorem %}\n{% lorem 3 p  %}\n{% lorem 10 w random %}\n```\n \n## [人性化](http://python.usyiyi.cn/django/ref/contrib/humanize.html)\n`apnumber`转换整数或整数的字符串形式为英文描述\n1 会变成one\n`intcomma`转换成第三位带一个逗号\n4500 会变成 4,500\n`intword`将大的整数转换为友好的文字表示\n1000000 会变成 1.0 million\n`naturalday`对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化\n`naturaltime`对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前\n例如（其中“现在”是2007年2月17日16时30分0秒）：\n17 Feb 2007 16:30:00 会变成 now\n17 Feb 2007 16:29:31 会变成 29 seconds ago\n`ordinal`将一个整数或是整数的字符串，转换为它的序数词\n1 会变成 1st\n2 会变成  2nd\n3 会变成  3rd\n \n## [Django 模板语言：面向Python程序员](http://python.usyiyi.cn/django/ref/templates/api.html)\n \n`string_if_invalid`建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题\n \n每个上下文都包含`True` `False` `None`\n \n### [使用`Context`对象]\n*[这里比较难理解](http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects)*\n```python\nContext.get(key, otherwise=None)\nContext.pop()\nContext.push()\nContext.update(other_dict)\n```\n \n> 上下文处理器应用的时机\n上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。\n如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：\n>```python\nfrom django.template import RequestContext\nrequest_context = RequestContext(request)\nrequest_context.push({\"my_name\": \"Adrian\"})\n```\nDjango 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。\n你还可以赋予`RequestContext `一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量\n```python\ndef some_view(request):\n    # ...\n    c = RequestContext(request, {\n        'foo': 'bar',\n    }, ['ip_address':'127.0.0.1'])\n    return HttpResponse(t.render(c))\n```\n上面例子中`ip_address`也会加入到上下文中\n \n### 内建的模板上下文处理器\n下面是内奸的上下文处理器所添加的内容\n`django.contrib.auth.context_processors.auth`\n- `user`\n- `perms`\n \n`django.template.context_processors.debug`\n- debug\n- sql_queryes\n一个{'sql': ..., 'time': ...} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。\n \n`django.template.context_processors.i18n`\n- `MEDIA_URL`\n \n`django.template.context_processors.static`\n- `STATIC_URL`\n \n`django.template.context_processors.csrf`\n- `csrf_token`\n \n`django.template.context_processors.request`\n- `request`\n \n`django.contrib.messages.context_processors.messages`\n- `messages`\n- `DEFAULT_MESSAGE_LEVELS`\n \n \n## [自定义模板标签和过滤器](http://python.usyiyi.cn/django/howto/custom-template-tags.html)\n \n### 自定义过滤器\n```python\nfrom django import template\nregister = template.Library()\n@register.filter(name='cut')\n \nregister.filter('cut', cut)\nregister.filter('lower', lower)\n# or\ndef cut(value, arg):\n    return value.replace(arg, '')\n \n@register.filter\ndef lower(value):\n    return value.lower()\n```\n可使用`SafeData`来验证是否是安全数据\n```python\nif isinstance(value, SafeData):\n    # Do something with the \"safe\" string.\n    ...\n```\n或使用`is_safe`来控制只接收的安全的数据\n```python\n@register.filter(is_safe=True)\ndef myfilter(value):\n    return value\n```\n \n### 自定义标签\n```python\nimport datetime\nfrom django import template\n \nregister = template.Library()\n \n@register.simple_tag\ndef current_time(format_string):\n    return datetime.datetime.now().strftime(format_string)\n```\n \n```\n{% show_results poll %}\n```\n \n写一个标签，实现下面的效果\n```html\n<ul>\n  <li>First choice</li>\n  <li>Second choice</li>\n  <li>Third choice</li>\n</ul>\n```\n例子1开始\n```python\n@register.inclusion_tag('results.html')\ndef show_results(poll):\n    choices = poll.choice_set.all()\n    return {'choices': choices}\n```\n \n`results.html`\n```html\n<ul>\n{% for choice in choices %}\n    <li> {{ choice }} </li>\n{% endfor %}\n</ul>\n```\n例子1结束\n \n可使用`takes_context=True`直接访问上下文件中的数据\n```python\n@register.inclusion_tag('link.html', takes_context=True)\ndef jump_link(context):\n    # 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context\n    return {\n        'link': context['home_link'],\n        'title': context['home_title'],\n    }\n```\n`link.html`\n```html\n<a href=\"{{ link }}\">{{ title }}</a>.\n```\n页面直接写\n```html\n{% jump_link %}\n```\n \n位置参数和关键字参数和`python`语法一样\n```python\n@register.inclusion_tag('my_template.html')\ndef my_tag(a, b, *args, **kwargs):\n    warning = kwargs['warning']\n    profile = kwargs['profile']\n    ...\n    return ...\n```\n```django\n{% my_tag 123 \"abcd\" book.title warning=message|lower profile=user.profile %}\n```\n还有一个`register.assignment_tag`与`register.simple_tag`功能一样，不知道有什么特殊作用\n \n## [使用表单](http://python.usyiyi.cn/django/topics/forms/index.html)\n \n一些表单输入自带有html5的验证，要禁用这些验证可以设置`form`标签的`novalidate`属性\n \n`is_bound`可以判断一个表单是否具有绑定数据\n```python\n# 未绑定表单\nf = ContactForm()\ndata = {'subject': 'hello',\n        'message': 'Hi there',\n        'sender': 'foo@example.com',\n        'cc_myself': True}\n# 已绑定的表单\nf = ContactForm(data)\n```\n \n当表单通过`is_valid()`方法验证后，可以直接在`form.cleaned_data`中拿值，并且是已经转换好的`python`格式的数据，但仍然可以从`request.POST`直接访问到未验证的数据。\n \n表单排列\n`{{ form.as_table }}`\n`{{ form.as_p }}`\n`{{ form.as_ul }}`\n \n表单属性\n`{{ form.name }}`字段html标签\n`{{ form.name.label_tag }}`字段的`lable`html标签\n`{{ form.name.id_for_label }}`字段`lable`标签上的`for`值，也是字段标签上的`id`\n \n`{{ form.hidden_fields }}`隐藏字段列表\n`{{ form.visible_fields }}`显示的字段列表\n \n \n错误信息\n`{{ form.non_field_errors }}`不是特定字段的错误\n`{{ form.errors }}`全部错误，一个字典\n`{{ form.name.errors }}`字段错误\n \n可从`form`从遍历出`field`\n`{{ field }}`有以下属性\n`{{ field.label }}``Model`或是`Form`上的`label`的值\n`{{ field.label_tag }}`整个`label`标签，包含冒号\n`{{ field.id_for_label }}`字段的id\n`{{ field.value }}`字段的值\n`{{ field.html_name }}`字段的`name`，考虑表单的前缀\n`{{ field.help_text }}`字段的帮助文档\n`{{ field.errors }}`字段的错误\n`{{ field.is_hidden }}`判断字段是否隐藏\n`{{ field.field }}`表单类中`Field`的实例，可以使用它来访问`Field`属性，如\n```python\nname.field.max_length\n```\n \n## [表单 API](http://python.usyiyi.cn/django/ref/forms/api.html)\n```python\n# 未绑定表单\nf = ContactForm()\ndata = {'subject': 'hello',\n        'message': 'Hi there',\n        'sender': 'foo@example.com',\n        'cc_myself': True}\n# 已绑定的表单\nf = ContactForm(data)\n```\n表单实例一但创建，数据不可更改\n \n### `Form.clean()`\n### `Form.is_valid()`\n \n### `Form.errors`\n> `Form.errors`\n访问errors 属性可以获得错误信息的一个字典：\n```python\n>>> f.errors\n{'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']}\n```\n在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。\n你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。\n验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。\n \n### `Form.errors.as_data()`\n> 返回一个字典，它映射字段到原始的ValidationError 实例\n \n### `Form.errors.as_json(escape_html=False)`\n> 返回JSON 序列化后的错误。\n \n### `Form.add_error(field, error)`\n> 这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息\n> Form.add_error() 会自动删除cleaned_data 中的相关字段\n \n### `Form.has_error(field, code=None)`\n> 这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。\n> 若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。\n \n### `Form.non_field_errors()`\n> 这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, \"...\") 添加的错误。\n \n未绑定表单的行为\n验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：\n \n```python\n>>> f = ContactForm()\n>>> f.is_valid()\nFalse\n>>> f.errors\n{}\n```\n \n### `Form.initial`\n```python\n>>> f = ContactForm(initial={'subject': 'Hi there!'})\n```\n这些值只显示在没有绑定的表单中，即使没有提供特定值它们也***不会作为后备的值***。\n优先级高于`Form`中的`initial`\n```python\n>>> from django import forms\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(initial='class')\n...     url = forms.URLField()\n...     comment = forms.CharField()\n>>> f = CommentForm(initial={'name': 'instance'}, auto_id=False)\n>>> print(f)\n<tr><th>Name:</th><td><input type=\"text\" name=\"name\" value=\"instance\" /></td></tr>\n<tr><th>Url:</th><td><input type=\"url\" name=\"url\" /></td></tr>\n<tr><th>Comment:</th><td><input type=\"text\" name=\"comment\" /></td></tr>\n```\n \n### `Form.has_changed()`\n**也有`Field.has_changed()`方法**\n检查表单数据是否从初始数据发生改变\n当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：\n```python\n>>> f = ContactForm(request.POST, initial=data)\n>>> f.has_changed()\n```\n如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。\n \n`Form.fields`\n从表单中访问字段\n是一个`OrderedDict`\n可你可以修改表单实例的字段来改变字段在表单中的表示：\n```python\n>>> f.as_table().split('\\n')[0]\n'<tr><th>Name:</th><td><input name=\"name\" type=\"text\" value=\"instance\" /></td></tr>'\n>>> f.fields['name'].label = \"Username\"\n>>> f.as_table().split('\\n')[0]\n'<tr><th>Username:</th><td><input name=\"name\" type=\"text\" value=\"instance\" /></td></tr>'\n```\n注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：\n```python\n>>> f.base_fields['name'].label = \"Username\"\n>>> another_f = CommentForm(auto_id=False)\n>>> another_f.as_table().split('\\n')[0]\n'<tr><th>Username:</th><td><input name=\"name\" type=\"text\" value=\"class\" /></td></tr>'\n```\n> cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。\ncleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。\n当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。\n\n### `Form.cleaned_data`\n \n### `Form.as_p`\n`Form.as_ul`\n`Form.as_table`\n \n### `Form.error_css_class` `Form.required_css_class`\n \n在`Form`类下可以用上面两个属性定义错误样式和必填样式，没有默认值，`required_css_class`也会回在`label`标签上\n \n## `Form.auto_id`\n控制表单上的`label`和表单元素的id，值为`True`，`False`或字符串，支持`%s`占位符，表示当前字段名\n> 如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。\n默认情况下，auto_id 设置为'id_%s'。\n \n### `Form.label_suffix`\n默认为英文的`:`\n \n### `BoundField`\n```python\nform = ContactForm()\nfor boundfield in form:\n    print(boundfield)\n# 或\nfrom['name']\n```\n`BoundField.errors`\n`BoundField.label_tag(contents=None, attrs=None, label_suffix=None)`\n`BoundField.css_classes()`\n`BoundField.value()`\n提供初始值，会被绑定值覆盖\n`BoundField.id_for_label`\n \n### `Form.is_multipart()`\n可判断表单是否需要`multipart`\n```django\n{% if form.is_multipart %}\n    <form enctype=\"multipart/form-data\" method=\"post\" action=\"/foo/\">\n{% else %}\n    <form method=\"post\" action=\"/foo/\">\n{% endif %}\n{{ form }}\n</form>\n```\n \n子类化表单时可通过设置`None`来删除从父类中继承过来的字段\n```python\n>>> from django import forms\n \n>>> class ParentForm(forms.Form):\n...     name = forms.CharField()\n...     age = forms.IntegerField()\n \n>>> class ChildForm(ParentForm):\n...     name = None\n \n>>> ChildForm().fields.keys()\n... ['age']\n```\n \n### `Form.prefix`\n如果在页面中需要放多个相同的表单，可以设置表单的前缀\n```python\n>>> father = PersonForm()\n>>> print(father.as_ul())\n<li><label for=\"id_first_name\">First name:</label> <input type=\"text\" name=\"first_name\" id=\"id_first_name\" /></li>\n<li><label for=\"id_last_name\">Last name:</label> <input type=\"text\" name=\"last_name\" id=\"id_last_name\" /></li>\n>>> mother = PersonForm(prefix=\"mother\")\n>>> print(mother.as_ul())\n<li><label for=\"id_mother-first_name\">First name:</label> <input type=\"text\" name=\"mother-first_name\" id=\"id_mother-first_name\" /></li>\n<li><label for=\"id_mother-last_name\">Last name:</label> <input type=\"text\" name=\"mother-last_name\" id=\"id_mother-last_name\" /></li>\n```\n \n## [表单字段](http://python.usyiyi.cn/django/ref/forms/fields.html)\n\n### `Field.has_change()`\n检查字段的值是否从初始值发生改变\n \n### 内建字段\n#### `BooleanField`\nWidget：`CheckboxInput`\n错误信息的键：`required`\n \n#### `CharField`\nWidget：`TextInput`\n错误信息的键：`required``max_length``min_length`\n接收两个可选参数\n`max_length``min_length`\n \n#### `ChoiceField`\nWidtget：`Select`\n错误信息的键：`required``invalid_choice`\n`invalid_choice`错误消息可能包含`%(value)s`，它将被选择的选项替换掉。\n接收一个额外的必选参数\n`choices`\n是一个二元组组成的可迭代对象\n \n#### `TypeChoiceField`\nWidget：`Select`\n错误信息的键：`required``invalid_choice`\n接收额外的参数\n`choices`\n是一个二元组组成的可迭代对象\n`coerce`\n    接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值\n`empty_value`\n    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择\n \n#### `DateField`\nWidget：`DateInput`\n错误信息的键：`required``invalid`\n接收一个可选参数\n`input_formats`\n一个格式的列表，用于转换一个字符串为`datateim.date`对象\n默认为\n```\n['%Y-%m-%d',      # '2006-10-25'\n'%m/%d/%Y',       # '10/25/2006'\n'%m/%d/%y']       # '10/25/06'\n```\n另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：\n```\n['%b %d %Y',      # 'Oct 25 2006'\n'%b %d, %Y',      # 'Oct 25, 2006'\n'%d %b %Y',       # '25 Oct 2006'\n'%d %b, %Y',      # '25 Oct, 2006'\n'%B %d %Y',       # 'October 25 2006'\n'%B %d, %Y',      # 'October 25, 2006'\n'%d %B %Y',       # '25 October 2006'\n'%d %B, %Y']      # '25 October, 2006'\n```\n \n#### `DateTimeField`\nWidget：`DateTimeInput`\n错误信息的键：`required``invalid`\n接收一个可选参数\n`input_formats`\n一个格式的列表，用于转换一个字符串为`datetime.datetime`对象\n默认为\n```\n['%Y-%m-%d %H:%M:%S',    # '2006-10-25 14:30:59'\n'%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\n'%Y-%m-%d',              # '2006-10-25'\n'%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\n'%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\n'%m/%d/%Y',              # '10/25/2006'\n'%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\n'%m/%d/%y %H:%M',        # '10/25/06 14:30'\n'%m/%d/%y']              # '10/25/06'\n```\n \n#### `DecimalField`\nWidget：当`Field.localize`是`False`时为NumberInput，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_digits``max_decimal_places``max_whole_digits`\n`max_value`和`min_value`错误信息可能包含`%(limit_value)s`，它们将被真正的限制值替换。类似地，`max_digits`、`max_decimal_places`和 `max_whole_digits`错误消息可能包含`%(max)s`\n接收四个可选参数\n`max_value`\n`min_value`\n`max_digits`最大位数\n`decimal_places`最大小数位\n \n#### `DurationField`\nWidget：`TextInput`\n错误信息的键：`required``invalid`\n \n#### `EmailField`\nWidget：`EmailInput`\n错误信息的键：`required``invalid`\n接收两个可选参数\n`max_length``min_length`\n \n#### `FileField`\nWidget：`ClearableFileInput`\n错误信息的键：`required``invalid``missing``empty``max_length`\n接收两个可选参数\n`max_length``allow_empty_file`如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功\n`max_length`错误信息表示文件名的长度。在错误信息中，`%(max)d`将替换为文件的最大长度，%`(length)d` 将替换为当前文件名的长度\n \n#### `FilePathField`\nWidget：`Select`\n错误信息的键：`required``invalid_choice`\n这个字段允许从一个特定的目录选择文件\n接收五个参数\n`path`\n必须\n想要列出的目录的绝对路径\n`recursive`\n可选\n布尔值，默认为`False`，是否需要递归这个目录\n`match`\n可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项\n`allow_files`\n可选\n布尔值，默认为`True`，表示是否应该包含指定位置的文件，它和`allow_folders`必须有一个为`True`\n`allow_folders`\n可选\n布尔值，默认为`True`，表示是否应该包含指定位置的目录，和`allow_files`必须有一个为`True`\n \n#### `FloatField`\nWidget：当`Field.localize`是False 时为`NumberInput`，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_value`\n接收两个可选参数\n`max_value``min_value`\n \n#### `ImageField`\nWidget：`ClearableFileInput`\n错误信息的键：`required``invalid``missing``empty``invalid_image`\n \n#### `IntegerField`\nWidget：当`Field.localize`是`False`时为`NumberInput`，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_value`\n接收两个可选参数\n`max_value``min_value`\n \n#### `IPAddressField`\n1.7弃用\n \n#### `GenericIPAddressField`\nWidget：`TextInput`\n错误信息的键：`required``invalid`\n接收两个可选参数\n`protocol``unpack_ipv4`\n \n#### `MultipleChoiceField`\nWidget：`SelectMultiple`\n错误信息的键：`required``invalid_choice``invalid_list`\n \n#### `TypedMultipleChoiceField`\n#### `NullBooleanField`\n#### `RegexField`\n#### `SlugField`\n#### `TimeField`\n#### `URLField`\n#### `UUIDField`\n输出时需要`.hex`\n#### `ComboField`\n```python\n>>> from django.forms import ComboField\n>>> f = ComboField(fields=[CharField(max_length=20), EmailField()])\n>>> f.clean('test@example.com')\n'test@example.com'\n>>> f.clean('longemailaddress@example.com')\nTraceback (most recent call last):\n...\nValidationError: ['Ensure this value has at most 20 characters (it has 28).']\n```\n#### `MultiValueField`\n#### `SplitDateTimeField`\n#### `ModelChoiceField`\n```python\n# A custom empty label\nfield1 = forms.ModelChoiceField(queryset=..., empty_label=\"(Nothing)\")\n \n# No empty label\nfield2 = forms.ModelChoiceField(queryset=..., empty_label=None)\n```\n \n#### `ModelMultipleChoiceField`\n \n## [Widgets](http://python.usyiyi.cn/django/ref/forms/widgets.html)\n \n处理文本输入的Widget\n- `TextInput`\n- `NumberInput`\n- `EmailInput`\n- `URLInput`\n- `PasswordInput`\n- `HiddenInput`\n- `DateInput`\n- `DateTimeInput`\n- `TimeInput`\n- `Textarea`\n \n选择和复选框Widget\n-  `CheckboxInput`\n-  `Select`\n-  `NullBooleanSelect`\n-  `SelectMultiple`\n-  `RadioSelect`\n-  `CheckboxSelectMultiple`\n \n文件上传`Widget`\n- `FileInput`\n- `ClearableFileInput`\n \n复合Widget\n- `MultipleHiddenInput`\n- `SplitDateTimeWidget`\n- `SplitHiddenDateTimeWidget`\n- `SelectDateWidget`\n \n \n## [从模型创建表单](http://python.usyiyi.cn/django/topics/forms/modelforms.html)\n下面两种方法效果相同\n```python\nauthor = Author(title='Mr')\nform = PartialAuthorForm(request.POST, instance=author)\nform.save()\n# or\nform = PartialAuthorForm(request.POST)\nauthor = form.save(commit=False)\nauthor.title = 'Mr'\nauthor.save()\n```\n \n显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。\n \n例如，如果Article 模型像下面这样：\n```python\nclass Article(models.Model):\n    headline = models.CharField(max_length=200, null=True, blank=True,\n                                help_text=\"Use puns liberally\")\n    content = models.TextField()\n```\n而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：\n \n```python\nclass ArticleForm(ModelForm):\n    headline = MyFormField(max_length=200, required=False,\n                           help_text=\"Use puns liberally\")\n \n    class Meta:\n        model = Article\n        fields = ['headline', 'content']\n```\n\n创建简单的表单或表单集可以使用`modelform_factory()``modelformset_factory()`方法来新建。\n\n启用字段的本地化功能¶\n \n默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。\n```python\n>>> from django.forms import ModelForm\n>>> from myapp.models import Author\n>>> class AuthorForm(ModelForm):\n...     class Meta:\n...         model = Author\n...         localized_fields = ('birth_date',)\n```\n如果localized_fields 设置为`'__all__' `这个特殊的值，所有的字段都将本地化。\n \n提供的初始值会覆盖从实例取得的值\n```python\n>>> article = Article.objects.get(pk=1)\n>>> article.headline\n'My headline'\n>>> form = ArticleForm(initial={'headline': 'Initial headline'}, instance=article)\n>>> form['headline'].value()\n'Initial headline'\n```\n \n如果不需要很多自定义，可以直接使用工厂方法来生成表单类\n```python\n>>> from django.forms.models import modelform_factory\n>>> from myapp.models import Book\n>>> BookForm = modelform_factory(Book, fields=(\"author\", \"title\"))\n>\n```\n```python\n>>> from django.forms import Textarea\n>>> Form = modelform_factory(Book, form=BookForm,\n...                          widgets={\"title\": Textarea()})\n```\n```python\n>>> Form = modelform_factory(Author, form=AuthorForm, localized_fields=(\"birth_date\",))\n```\n表单集\n```python\n>>> from django.forms.models import modelformset_factory\n>>> from myapp.models import Author\n>>> AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))\n```\n使用`model`生成的`formset `默认带一个包含全部对象的`queryset`\n`formset``save()`之后，会有新的属性\n```python\nmodels.BaseModelFormSet.changed_objects\nmodels.BaseModelFormSet.deleted_objects\nmodels.BaseModelFormSet.new_objects\n```\n`max_num`为最大的表单数，如果初始`queryset`长度比`max_num`，则按照`queryset`来，`extra`是可以额外添加的空表单的个数，但`extra`和`queryset`长度相加如果大于`max_num`，则`extra`和实例设置可能表现不一样，如`queryset`长度为2，`max_num`为4，`extra`不管是2还是5，最终表现出来都是2。\n```python\nAuthorFormSet = modelformset_factory(Author, fields=('name',), max_num=4, extra=2)\n```\n`max_num`默认只影响显示，不影响验证，如果需要影响验证添加`validate_max=True`即可\n\n## [表单素材 ( Media 类)](http://python.usyiyi.cn/django/topics/forms/media.html)\n \n**`Form`和`Widget`都可以定义素材**\n \n```python\nfrom django import forms\n \nclass CalendarWidget(forms.TextInput):\n    class Media:\n        css = {\n            'all': ('pretty.css',)\n        }\n        js = ('animations.js', 'actions.js')\n```\n使用`CalendarWidget`会自动引入下列资源\n```html\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n```\n`Widget`会默认继承父类的素材，如果不想继承在`Media`里使用`extend`禁止。\n \n动态定义\n```python\nclass CalendarWidget(forms.TextInput):\n    def _media(self):\n        return forms.Media(css={'all': ('pretty.css',)},\n                           js=('animations.js', 'actions.js'))\n    media = property(_media)\n```\n两个`Media`实例可以相加\n```python\n>>> from django import forms\n>>> class CalendarWidget(forms.TextInput):\n...     class Media:\n...         css = {\n...             'all': ('pretty.css',)\n...         }\n...         js = ('animations.js', 'actions.js')\n \n>>> class OtherWidget(forms.TextInput):\n...     class Media:\n...         js = ('whizbang.js',)\n \n>>> w1 = CalendarWidget()\n>>> w2 = OtherWidget()\n>>> print(w1.media + w2.media)\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"></script>\n```\n \n表单`Media`\n```python\n>>> class ContactForm(forms.Form):\n...     date = DateField(widget=CalendarWidget)\n...     name = CharField(max_length=40, widget=OtherWidget)\n...\n...     class Media:\n...         css = {\n...             'all': ('layout.css',)\n...         }\n \n>>> f = ContactForm()\n>>> f.media\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<link href=\"http://static.example.com/layout.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"></script\n```\n \n## [表单集](http://python.usyiyi.cn/django/topics/forms/formsets.html)\n \n表单集控制\n`max_num`\n`min_num`\n`validate_max`\n`validate_min`\n`can_order`\n`can_delete`\n\n其中`can_order``can_delete`默认以以下形式展现\n\n\n \n如果是使用`Model`生成的表单集，如果`delete`后，在调用`formset.save()`会自动删除相应的数据，但如果调用了`formset.save(commit=False)`，则需要手动删除（1.6或更早版还是会自动删除）\n```python\n>>> instances = formset.save(commit=False)\n>>> for obj in formset.deleted_objects:\n...     obj.delete()\n```\n如果要兼容1.6或更早版，可以这么写\n```python\n>>> try:\n>>>     # For Django 1.7+\n>>>     for obj in formset.deleted_objects:\n>>>         obj.delete()\n>>> except AssertionError:\n>>>     # Django 1.6 and earlier already deletes the objects, trying to\n>>>     # delete them a second time raises an AssertionError.\n>>>     pass\n```\n \n在表单集里添加额外的字段\n```python\n>>> from django.forms.formsets import BaseFormSet\n>>> from django.forms.formsets import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     def add_fields(self, form, index):\n...         super(BaseArticleFormSet, self).add_fields(form, index)\n...         form.fields[\"my_field\"] = forms.CharField()\n \n>>> ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)\n>>> formset = ArticleFormSet()\n>>> for form in formset:\n...     print(form.as_table())\n<tr><th><label for=\"id_form-0-title\">Title:</label></th><td><input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\" /></td></tr>\n<tr><th><label for=\"id_form-0-pub_date\">Pub date:</label></th><td><input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\" /></td></tr>\n<tr><th><label for=\"id_form-0-my_field\">My field:</label></th><td><input type=\"text\" name=\"form-0-my_field\" id=\"id_form-0-my_field\" /></td></tr>\n```\n \n表单集对应的模版写法\n```django\n<form method=\"post\" action=\"\">\n    <table>\n        {{ formset }}\n    </table>\n</form>\n```\n也可以手动渲染，不能缺少`{{ formset.management_form }}`\n```django\n<form method=\"post\" action=\"\">\n    {{ formset.management_form }}\n    <table>\n        {% for form in formset\n        {{ form }}\n        {% endfor\n    </table>\n</form>\n```\n如果是手动渲染，`can_order``can_delete`需要手动添加\n```django\n<form method=\"post\" action=\"\">\n    {{ formset.management_form }}\n    {% for form in formset\n        <ul>\n            <li>{{ form.title }}</li>\n            <li>{{ form.pub_date }}</li>\n            {% if formset.can_delete\n                <li>{{ form.DELETE }}</li>\n            {% endif\n        </ul>\n    {% endfor\n</form>\n```\n \n在一个视图中使用多个`FormSet`需要回前缀`prefix`\n```python\nfrom django.forms.formsets import formset_factory\nfrom django.shortcuts import render_to_response\nfrom myapp.forms import ArticleForm, BookForm\n \ndef manage_articles(request):\n    ArticleFormSet = formset_factory(ArticleForm)\n    BookFormSet = formset_factory(BookForm)\n    if request.method == 'POST':\n        article_formset = ArticleFormSet(request.POST, request.FILES, prefix='articles')\n        book_formset = BookFormSet(request.POST, request.FILES, prefix='books')\n        if article_formset.is_valid() and book_formset.is_valid():\n            # do something with the cleaned_data on the formsets.\n            pass\n    else:\n        article_formset = ArticleFormSet(prefix='articles')\n        book_formset = BookFormSet(prefix='books')\n    return render_to_response('manage_articles.html', {\n        'article_formset': article_formset,\n        'book_formset': book_formset,\n    })\n```\n\n## [表单验证和字段验证](http://python.usyiyi.cn/django/ref/forms/validation.html)\n格式标准\n抛出单个错误\n```python\nraise ValidationError(\n    _('Invalid value: %(value)s'),\n    code='invalid',\n    params={'value': '42'},\n)\n```\n招聘多个错误\n```python\n# Good\nraise ValidationError([\n    ValidationError(_('Error 1'), code='error1'),\n    ValidationError(_('Error 2'), code='error2'),\n])\n \n# Bad\nraise ValidationError([\n    _('Error 1'),\n    _('Error 2'),\n])\n```\n创建一个新的表单字段添加默认验证\n```python\nfrom django import forms\nfrom django.core.validators import validate_email\n \nclass MultiEmailField(forms.Field):\n    def to_python(self, value):\n        \"Normalize data to a list of strings.\"\n \n        # Return an empty list if no input was given.\n        if not value:\n            return []\n        return value.split(',')\n \n    def validate(self, value):\n        \"Check if value consists only of valid emails.\"\n \n        # Use the parent's handling of required fields, etc.\n        super(MultiEmailField, self).validate(value)\n \n        for email in value:\n            validate_email(email)\n```\n \n## [Django 的设置](http://python.usyiyi.cn/django/topics/settings.html)\ndjango-admin 工具\n \n当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。\n \n例如（Unix Bash shell）：\n```\nexport DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n例如（Windows shell）：\n```\nset DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n使用--settings 命令行参数可以手工指定设置：\n```\ndjango-admin runserver --settings=mysite.settings\n```\n \n使用下面的命令可以查询设置与默认设置的不同\n```python\npython manage.py diffsettings\n```\n在django app中使用设置应使用以下导入方式\n```python\nfrom django.conf import settings\n```\n注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：\n```python\nfrom django.conf.settings import DEBUG  # This won't work.\n```\n不要在应用运行时改变设置\n \n## [完整列表设置(Settings)](http://python.usyiyi.cn/django/ref/settings.html)\n \n`CSRF_COOKIE_SECURE=True`只通过`HTTPS`传递`cookie`\n \n`DATABASES['CONN_MAX_AGE']`数据库连接的戚时间，默认为0（历史遗留行为），设置为`None`表示无限的持久连接\n`DECIMAL_SEPARATOR`类型数据的分隔符默认为点`.`\n`DISALLOWED_USER_AGENTS`编写正则表达式元组禁用代码访问，需要启用`CommonMiddleware`中间件\n`INTERNAL_IPS`设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签\n\n## [应用](http://python.usyiyi.cn/django_182/ref/applications.html)\n \n```python\n# rock_n_roll/apps.py\n \nfrom django.apps import AppConfig\n \nclass RockNRollConfig(AppConfig):\n    name = 'rock_n_roll'\n    verbose_name = \"Rock ’n’ roll\"\n```\n \n```python\n# rock_n_roll/__init__.py\n \ndefault_app_config = 'rock_n_roll.apps.RockNRollConfig'\n```\n \n`AppConfig`可配置的属性\n- `AppConfig.name`\n- `AppConfig.label`\n- `AppConfig.verbose_name`\n- `Appconfig.path`\n \n`AppConfig`只读属性\n- `AppConfig.module`\n- `Appconfig.models_module`\n \n`AppConfig`方法\n- `AppConfig.get_models()`\n- `AppConfig..get_model(model_name)`\n- `AppConfigevaluate.ready()`\n \n```python\n>>> from django.apps import apps\n>>> apps.get_app_config('admin').verbose_name\n'Admin'\n```\n \n`APP`\n- `apps.ready`\n- `apps.get_app_configs()`\n- `apps.get_app_config(app_label)`\n- `apps.is_installed(app_name)`\n- `apps.get_model(app_label, model_name)`\n\n\n## [Django异常](python.usyiyi.cn/django_182/ref/exceptions.html)\n \n### 核心异常\n*`django.core.exceptions`*\n \n- `ObjectDoesNotExist`\n对象不存在\n`DoesNotExist`的基类\n对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常\n```python\nfrom django.core.exceptions import ObjectDoesNotExist\ntry:\n    e = Entry.objects.get(id=3)\n    b = Blog.objects.get(id=1)\nexcept ObjectDoesNotExist:\n    print(\"Either the entry or blog doesn't exist.\")\n```\n \n- `FieldDoesNotExist`\n当被请求的字段在模型或模型的父类中不存在时，`FieldDoesNotExist`异常由模型的 `_meta.get_field()`方法抛出\n \n- `MultipleObjectsReturned`\n查询时，预期只有一个对象，但是返回了多个对象会抛出此异常\n \n- `SuspiciousOperation`\n当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改`cookie`\n子类\n  - `DisallowedHost`\n  - `DisallowedModelAdminLookup`\n  - `DisallowedModelAdminToField`\n  - `DisallowedRedirect`\n  - `InvalidSessionKey`\n  - `SuspiciousFileOperation`\n  - `SuspiciousMultipartForm`\n  - `SuspiciousSession`\n \n- `PermissionDenied`\n当用户不被允许来执行请求的操作时产生\n \n- `ViewDoesNotExist`\n当请求的视图不存在时抛出此异常\n \n- `MiddlewareNotUsed`\n当中间件没有在服务器配置中出现时，抛出此异常\n \n- `ImproperlyConfigured`\ndjango配置不当时抛出此异常，如`settings.py`中的值不正确或者不可解析\n \n- `FieldError`\n当模型上的字段出现问题时，抛出此异常，由以下原因造成：\n  - 模型中的字段与抽象基类中的字段重名\n  - 排序造成了一个死循环\n  - 关键词不能由过滤器参数解析\n  - 字段不能由查询参数中的关键词决定\n  - 连接（join）不能在指定对象上使用\n  - 字段名称不可用\n  - 查询包含了无效的`order_by`参数\n \n  - `ValidationError`\n  当表单或模型字段验证失败时抛出此异常\n \n- `NON_FIELD_ERRORS`\n在表单或者模型中不属于特定字段的`ValidationError`被归类为`NON_FIELD_ERRORS`\n \n### URL解析器异常\n \n- `Resolver404`\n`django.http.Http404`的子类\n当向`resolve`传递的路径不能匹配到对应视图时抛出此异常\n \n- `NoReverseMatch`\n当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常\n \n### 数据库异常\n数据库异常由django.db导入\n- `Error`\n- `InterfaceError`\n- `DatabaseError`\n- `DataError`\n- `OperationalError`\n- `IntegrityError`\n- `InternalError`\n- `ProgrammingError`\n- `NotSupportedError`\n \n### HTTP异常\nHTTP异常由django.http导入\n \n- `UnreadablePostError`\n用户取消上传时抛出此异常\n \n### 事务异常\n事务异常定义由`django.db.transaction`导入\n \n### 测试框架异常\n由DJango django.test 包提供的异常\n \n- `RedirectCycleError`\n当测试客户端检测到重定向的循环或者过长的链时抛出此异常\n \n### `Python`异常\nDjango在适当的时候也会抛出Python的内建异常\n \n## [django-admin and manage.py](http://python.usyiyi.cn/django_182/ref/django-admin.html)\n \n- `dumpdata`\n该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。\n如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中\n`dumpdata --output data.json`\n \n- `flus`\n清空数据库，重新装载初始数据\n- `--noinput`\n- `--database`\n- `--no-initial-data`\n \n \n- `inspectdb`\n根据数据库结构生成model\n```python\npython manage.py inspectdb > models.py\n```\n \n- `loaddata`\n导入fixture数据\n \n- `runserver`\n启动本地上一个轻量级的Web服务器，默认多线程\n`--noreload`禁用自动重新载入\n`--nothreading`禁用多线程\n \n```python\nrunserver 0.0.0.0:80\n```\n\n## [ 添加自定义的命令](http://python.usyiyi.cn/django_182/howto/custom-management-commands.html)\n \n向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个`manage.py`命令。\n在Python 2上，请确保management和management/commands两个目录都包含`__init__.py` 文件。\n \n```python\nfrom django.core.management.base import BaseCommand, CommandError\nfrom polls.models import Poll\n \nclass Command(BaseCommand):\n    help = 'Closes the specified poll for voting'\n \n    def add_arguments(self, parser):\n        # 命令行接收一个或多个poll_id值\n        #\n        parser.add_argument('poll_id', nargs='+', type=int)\n \n    def handle(self, *args, **options):\n        for poll_id in options['poll_id']:\n            try:\n                poll = Poll.objects.get(pk=poll_id)\n            except Poll.DoesNotExist:\n                raise CommandError('Poll \"%s\" does not exist' % poll_id)\n \n            poll.opened = False\n            poll.save()\n \n            self.stdout.write('Successfully closed poll \"%s\"' % poll_id)\n```\n![django-commands](/media/django-commands.png)\n\n\n","source":"_posts/django1-9文档阅读笔记.md","raw":"title: Django 1.9文档阅读笔记\ncomments: true\ndate: 2016-04-04 15:27:20\ncategories: [程序猿]\ntags: [Django, 文档, 笔记]\n---\n<br/>\n<!--more-->\n\n\n<!--more-->\n \n## 更新记录\n2016-04-04 初稿\n2016-06-30 更新内容\n\n\n## [模型](http://python.usyiyi.cn/django/topics/db/models.html)\n[Model _meta API](http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api)\n\n限制普通字段的选择范围\n`choices `，value-text，\n显示`get_foo_display()`\n\n模型继承\n1. 抽象基类\n  - 默认继承元类\n2. 多表继承\n  - 一般情况不继承元类\n3. 代理模型\n\n多重继承主要用于`mix-in`类\n\n多表继承时使用`parent_link=True`显示指定OneToOne字段\n\n\n## [模型字段参考](http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships)\n\n与尚未定义的模型关联使用模型名字（字符串）而非本身（类）\n\n关联自己使用`self`\n\n`related_name` `relate_query_name`\n\n外键关联到特定字段\n`to_field `\n\n限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）\n`limit_choices_to `\n\n外键关联对象删除行为\n`on_delete`\n\n1.8以后保存模型时，未保存的外键对象将被忽略，除非设置`allow_unsaved_instance_assignment=True`\n\n关联自身的多对多关系默认对称，取消对称设置`symmetrical=False`\n\n`ImageField`中的`height_field`和`width_field`是用来存储存入图片的高度和宽度值的\n\n##[执行查询](http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships)\n\n[可自定义查询（高级查找）](http://python.usyiyi.cn/django/howto/custom-lookups.html)\n`exclude`多条件查询时是用or关系而不是and关系\n\n`F()`\n用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作\n支持.bitand() 和.bitor()位操作，`update()`也可以使用`F()`但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）\n\n查询集缓存\n当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。\n```python\n>>> queryset = Entry.objects.all()\n>>> print([p.headline for p in queryset]) # Evaluate the query set.\n>>> print([p.pub_date for p in queryset]) # Re-use the cache from the evaluation.\n```\n```python\n>>> queryset = Entry.objects.all()\n>>> print queryset[5] # Queries the database\n>>> print queryset[5] # Queries the database again\n```\n```\n>>> queryset = Entry.objects.all()\n>>> [entry for entry in queryset] # Queries the database\n>>> print queryset[5] # Uses cache\n>>> print queryset[5] # Uses cache\n```\n\n`Q()`\n可使用Q对象进行复杂查询\n\n判断两相模型实例是否相同，直接使用`==`比较即可\n\n默认批量删除对象时不会调用实例的`delete`方法\n\n拷贝实例，把`pk`设置为`None`再`save`即可（如果是继承的，则`pk`和`id`都需要设置为`None`）\n\n`update()`方法也不会调用模型的`save()`方法，不会发出`pre_save`和`post_save`信号，字段的`auto_now`也不会起作用\n\n一对多关联对象访问会缓存\n```python\n>>> e = Entry.objects.get(id=2)\n>>> print(e.blog)  # Hits the database to retrieve the associated Blog.\n>>> print(e.blog)  # Doesn't hit the database; uses cached version.\n```\n\n自定义反向管理器1.7+\n```python\nfrom django.db import models\n \nclass Entry(models.Model):\n    #...\n    objects = models.Manager()  # Default Manager\n    entries = EntryManager()    # Custom Manager\n \nb = Blog.objects.get(id=1)\nb.entry_set(manager='entries').all()\n```\n\n## [查询集API 参考](http://python.usyiyi.cn/django/ref/models/querysets.html)\n## [聚合](http://python.usyiyi.cn/django/topics/db/aggregation.html)\n一次创建多条数据（只有一条sql）\n`bulk_create`\n\n根据提供的一组`pk`查询出所有对应的对象\n`in_bulk`\n\n在查作者列表时要查每个作者有几篇博文\n```python\n>>> from django.db.models import Count\n>>> authors = Author.object.all().annotate(Count('blog'))\n# authors[0]作者的博文数\n>>> authors[0].blog__count\n3\n# 或\n>>> authors = Author.object.all().annotate(number_of_blog=Count('blog'))\n>>> authors[0].number_of_blog\n3\n```\n算出所有作者的年龄总合（不需要其它数据）\n```python\n>>> ageAuthor.objects.all().aggregate(Sum('age'))\n{'age__sum': 26}\n```\n~~`annotate`和~~`aggregate`都可写入多个注解表达式\n`annotate`和`aggregate`可聚合关联对象\n\n对注解进行过滤\n```python\n# 查询出作者数大于1的书本\n# 只有一条sql\nBook.objects.annotate(num_authors=Count('authors')).filter(num_authors__gt=1)\n```\n但顺序不一样，结果也不同，如：\n```python\nPublisher.objects.annotate(num_books=Count('book')).filter(book__rating__gt=3.0)\nPublisher.objects.filter(book__rating__gt=3.0).annotate(num_books=Count('book')) \n```\n对注解项进行排序\n```python\nBook.objects.annotate(num_authors=Count('authors')).order_by('num_authors')\n```\n`values()`使用注解时要小心，如果`values()`在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上\n> 与默认排序交换或order_by()¶\n \n> 在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：\n \n> 通过例子中的方法，假设有一个这样的模型：\n \n```python\nfrom django.db import models \nclass Item(models.Model):\n    name = models.CharField(max_length=10)\n    data = models.IntegerField() \n    class Meta:\n        ordering = [\"name\"]\n```\n \n> 关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：\n \n```python\n# Warning: not quite correct!\nItem.objects.values(\"data\").annotate(Count(\"id\"))\n```\n \n> ...这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：\n \n```python\nItem.objects.values(\"data\").annotate(Count(\"id\")).order_by()\n```\n \n> ...这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。\n \n> 这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。\n\n\n## 静态文件 \nhttp://python.usyiyi.cn/django/intro/tutorial06.html\nhttp://python.usyiyi.cn/django/ref/templates/builtins.html \n\n```html\n{% load static %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static user_stylesheet %}\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% static 'polls/style.css' %}\" />\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{% get_static_prefix %}pools/style.css\" />\n{% get_static_prefix as STATIC_PREFIX %}\n<link rel=\"stylesheet\" type=\"text/css\" href=\"{{ STATIC_PREFIX }}pools/style.css\" />\n{% static \"images/hi.jpg\" as myphoto %}\n<img src=\"{{ myphoto }}\"></img>\n```\n\n还有`get_media_prefix`\n\n\n## [模型实例参考](http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model)\n\n从数据库中重新加载值\n`Model.refresh_from_db(using=None, fields=None, **kwargs)`\n\n返回模型中当前所有延迟字段的属性名称\n` Model.get_deferred_fields()`\n\n验证对象\n> 字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。\n> 先跑`form`里验证，再跑`modle`验证\n> 先跑验证器，再跑`clean`\n> 先跑单个字段验证，再跑整体验证\n> `Model.clean_field()`会覆盖`Model`里所有字段的验证器，但不会对`Form`里的验证器产生影响\n\n验证模型的字段`Model.clean_fields(exclude=None)`\n验证模型的完整性`Model.clean()`\n验证模型的唯一性`Model.validate_unique(exclude=None)`\n调用`full_clean()`时，上面三个方法都会执行（执行顺序即上面的书写顺序），`ModelForm`的`is_valid()`也会执行上所有验证\n`Model.full_clean(exclude=None, validate_unique=True)`\n `save()`时，`full_clean()`不会被调用，如果想验证数据，可手动调用\n\n`Model.clean()`时，引发特定字段的异常\n使用一个字典实例化`ValidationError`即可或使用`add_error(field, msg)`方法\n\n在数据库字段值的基础上进行简单的算法操作，应该尽量使用`F()`表达式，避免问题竞态条件\n\n> 指定要保存的字段\n \n> 如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：\n \n```python\nproduct.name = 'Name changed again'\nproduct.save(update_fields=['name'])\n```\n \n> `update_fields` 参数可以是任何包含字符串的可迭代对象。空的`update_fields`可迭代对象将会忽略保存。如果为`None`值，将执行所有字段上的更新。\n \n> 指定`update_fields`将强制使用更新操作。\n \n> 当保存通过延迟模型加载（`only()` 或`defer()`）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的`update_fields`。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。\n\nnew in 1.9\n使用`Model.delete()`删除多表继承的子表数据时，使用``keep_parents=True`可以保留上级数据，默认为`False`\n返回值为删除数据的条数\n\n`DateField`和`DateTimeField`字段如果`null=False`则支持下面两个方法\n```python \nModel.get_next_by_FOO(**kwargs)¶ \nModel.get_previous_by_FOO(**kwargs)\n```\n## [管理器](http://python.usyiyi.cn/django/topics/db/managers.html)\n\ndjango遇到的第一个管理器为默认管理器\n\n如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加`use_for_related_fields=True`，不然会调用朴素管理器\n```python\n# -*- coding: utf-8 -*-\n \nfrom django.db import models\n \n \nclass DefaultManager(models.Manager):\n    def get_queryset(self):\n        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=False)\n        return queryset\n \n \nclass Author(models.Model):\n    name = models.CharField(max_length=100)\n    is_delete = models.BooleanField()\n    objects = DefaultManager()\n \n \nclass Post(models.Model):\n    author = models.ForeignKey(Author)\n    title = models.CharField(max_length=100)\n    content = models.TextField()\n    is_delete = models.BooleanField()\n    objects = DefaultManager()\n \n \nauthor = Author.objects.get(pk=1)\npost = Post.objects.get(pk=2)\n \n# 调用DefaultManager管理器\nauthor.post_set.all()\n# 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True\npost.author\n```\n*注：朴素管理器里找不到的方法会在默认管理器里查找*\n\n[从Manager中调用自定义的QuerySet](http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager)\n\n## [进行原始的SQL查询](http://python.usyiyi.cn/django/topics/db/sql.html)\n\n```python\nManager.raw(raw_query, params=None, translations=None)\n```\n\n> django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。\n\n## [数据库事务](http://python.usyiyi.cn/django/topics/db/transactions.html)\n\n详细笔记见django1.8事务.md\n\n将每个HTTP请求封装在一个数据库事务中\nsettings中设置`ATOMIC_REQUESTS=True`\n\n单独给一个方法加上数据库事务控制使用`atomic`\n```python\nfrom django.db import transaction\n \n@transaction.atomic\ndef viewfunc(request):\n    # This code executes inside a transaction.\n    do_stuff()\n```\n或\n```python\nfrom django.db import transaction\n \ndef viewfunc(request):\n    # This code executes in autocommit mode (Django's default).\n    do_stuff()\n \n    with transaction.atomic():\n        # This code executes inside a transaction.\n        do_more_stuff()\n```\n避免在 atomic里捕获异常!\n\n## 查询表达式\n使用数据库的方法\n```python\nfrom django.db.models import Func, F \nqueryset.annotate(field_lower=Func(F('field'), function='LOWER'))\n```\n或\n```python\nclass Lower(Func):\n    function = 'LOWER' \nqueryset.annotate(field_lower=Lower(F('field')))\n```\n\n## [条件表达式](http://python.usyiyi.cn/django/ref/models/conditional-expressions.html)\n高级用法查看在线版\n`When`\n`Case`\n\n## [数据库函数](http://python.usyiyi.cn/django/ref/models/database-functions.html)\n`Coalesce` 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）\n\n## [将遗留数据库整合到Django](http://python.usyiyi.cn/django/howto/legacy-databases.html)\n\n根据遗留数据库生成models\n```python\npython manage.py inspectdb > models.py\n```\n\n## [为模型提供初始数据](http://python.usyiyi.cn/django/howto/initial-data.html)\n\n使用fixtures\n```\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n导入数据命令\n```\npython manage.py loaddata <fixturename>\n```\n\n## 数据库访问优化\n\n添加索引，比任何查询语法优化都来的重要\n理解查询集\nQuerySets是延迟的。\n什么时候它们被计算出来。\n数据在内存中如何存储。\n\n使用`cached_property`装饰器，只要是同一个实例，一个方法就只会执行一次\n使用`with`模版标签\n使用`iterator`迭代器\n\n在数据库中而不是python中做数据库工作\n使用过滤器和反射过滤器对数据进行过滤\n使用`F()`表达式\n使用注解和聚合\n使用原始SQL\n\n用唯一的或被索引的列来检索独立对象\n\n在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。\n\n使用`select_related()`和`prefetch_related()`\n\n不检索你不需要的信息\n使用`QuerySet.values()`和`QuerySet.values_list()`\n\n使用`QuerySet.defer()`和`QuerySet.only()`\n\n计算数量不要使用`len(queryset)`而是使用`QuerySet.count()`\n\n判断是否存在结果使用`QuerySet.exists()`而不是用`if queryset`\n\n但不要过度使用`count()`和`exists()`，如果你本来就需要里面的数据，那就不要使用\n\n使用`QuerySet.update()`和`QuerySet.delete()`批量操作数据\n\n直接使用外键的值\n```python\nentry.blog_id\n# 而不是\nentry.blog.id\n```\n\n如果你并在意结果集的顺序，不要进行排序，移除`Meta.ordering`\n\n创建对象时尽可能使用`bulk_create()`来减少sql查询数量\n这也适用于`ManyToManyFields`的情况，一起`add`而不是一个一个`add`\n```python\nmy_band.members.add(me, my_friend) \n#更优于 \nmy_band.members.add(me)\nmy_band.members.add(my_friend)\n```\n\n## [URL调度器](http://python.usyiyi.cn/django/topics/http/urls.html)\n\nurl捕获的参数永远是字符串\n\n在根url上获取的参数不影响参数传递\n```python\n# In settings/urls/main.py\nfrom django.conf.urls import include, url\n \nurlpatterns = [\n    url(r'^(?P<username>\\w+)/blog/', include('foo.urls.blog')),\n]\n \n# In foo/urls/blog.py\nfrom django.conf.urls import url\nfrom . import views\n \nurlpatterns = [\n    url(r'^$', views.blog.index),\n    url(r'^archive/$', views.blog.archive),\n]\n```\n在上面的例子中，捕获的\"username\"变量将被如期传递给include()指向的URLconf。\n\n可嵌套\n```python\nfrom django.conf.urls import url\n \nurlpatterns = [\n    url(r'blog/(page-(\\d+)/)?$', blog_articles),                  # bad\n    url(r'comments/(?:page-(?P<page_number>\\d+)/)?$', comments),  # good\n]\n```\n \n传递额外的参数\n```python\nfrom django.conf.urls import url\nfrom . import views\n \nurlpatterns = [\n    url(r'^blog/(?P<year>[0-9]{4})/$', views.year_archive, {'foo': 'bar'}),\n]\n```\n当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值\n\n传递额外的参数给`include()`\n```python\n# main.py\nfrom django.conf.urls import include, url\n \nurlpatterns = [\n    url(r'^blog/', include('inner'), {'blogid': 3}),\n]\n \n# inner.py\nfrom django.conf.urls import url\nfrom mysite import views\n \nurlpatterns = [\n    url(r'^archive/$', views.archive),\n    url(r'^about/$', views.about),\n]\n```\n效果等同\n```python\n# main.py\nfrom django.conf.urls import include, url\nfrom mysite import views\n \nurlpatterns = [\n    url(r'^blog/', include('inner')),\n]\n \n# inner.py\nfrom django.conf.urls import url\n \nurlpatterns = [\n    url(r'^archive/$', views.archive, {'blogid': 3}),\n    url(r'^about/$', views.about, {'blogid': 3}),\n]\n```\n\n[反查带命名空间的URL](http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls)\n\n## [编写视图](http://python.usyiyi.cn/django/topics/http/views.html)\n\n`HttpResponse`子类，状态码\n- `HttpResponseRedirect` 临时重定向，302\n- `HttpResponsePermanentRedirect` 永久重定向，301\n- `HttpResponseNotModified` 没有任何修改，304\n- `HttpResponseBadRequest` 语义有误码，当前请求不被服务器理解，400\n- `HttpResponseNotFound` 页面没找到，404\n- `HttpResponseForbidden` 服务器理解请求，但拒绝执行，403\n- `HttpResponseNotAllowed` 请求中指定的请求方式不能用于请求相应资源，405\n- `HttpResponseGone` 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410\n- `HttpResponseServerError` 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500\n- `HttpResponse(status=201)` 自定义返回状态码\n\n重写错误视图（在url中）\n```\nhandler404 = 'mysite.views.my_custom_page_not_found_view'\nhandler500 = 'mysite.views.my_custom_error_view' \nhandler403 = 'mysite.views.my_custom_permission_denied_view'\nhandler400 = 'mysite.views.my_custom_bad_request_view' \n```\n\n## [Django 的快捷函数](http://python.usyiyi.cn/django/topics/http/shortcuts.html)\n\n`template_name`可传一个模版序列，django将使用存在的第一个模版\n\n`redirect(to, [permanent=False, ]*args, **kwargs)[source]`\n> 为传递进来的参数返回HttpResponseRedirect 给正确的URL 。 \n> 参数可以是：\n>  \n>     一个模型：将调用模型的get_absolute_url() 函数\n>     一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n>     一个绝对的或相对的URL，将原样作为重定向的位置。\n>  \n> 默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。\n\n`get_object_or_404(klass, *args, **kwargs)`可以传Model也可以传QuerySet实例和关联的管理器\n`get_list_or_404(klass, *args, **kwargs)`可以传Model也可以传QuerySet实例和关联的管理器\n\n## [视图装饰器](http://python.usyiyi.cn/django/topics/http/decorators.html)\n[按需内容处理](http://python.usyiyi.cn/django/topics/conditional-view-processing.html )\n`django.views.decorators.http`包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。\n`require_http_methods(request_method_list)`限制视图只能服务于规定的http方法（需要大写）\n`require_GET()`\n`require_POST()`\n`require_safe()`只允许视图接受GET和HEAD方法的装饰器。\n\n```python\n@condition(etag_func=None, last_modified_func=None)\n```\n```python\n@last_modified(last_modified_func)\n```\n根据最后修改时间来决定是否运行视图，可减少流量\n```python\n@etag(etag_func)\n```\n`etag`（版本？）和`last_modified`不能同时使用\n\n`GZip`对内容进行压缩，节省流量，但增加处理时间\n\n`vary_on_cookie`\n`vary_on_headers`\n基于特定的请求头部来控制缓存\n\n`never_cache`\n\n## [Request 对象和Response 对象](http://python.usyiyi.cn/django/ref/request-response.html)\n\n`HttpRequest`对象(除非特殊说明，所有属性都是只读，`session`属性是个例外)\n`HttpRequest.scheme` 请求方案（通常为http或https）\n`HttpRequest.body` 字节字符串，表示原始http请求正文\n`HttpRequest.path` 字符串，表示请求的页面的完整路径，不包含域名\n`HttpRequest.path_info`    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。 \n    例如，如果应用的WSGIScriptAlias 设置为\"/minfo\"，那么当path 是\"/minfo/music/bands/the_beatles/\" 时path_info 将是\"/music/bands/the_beatles/\"。\n`HttpRequest.method` 请求使用的http方法，大写\n`HttpRequest.encoding` 表示提交的数据的编码方式，可写\n`HttpRequest.GET`\n`HttpRequest.POST`\n`HttpRequest.REQUEST`不建议使用，使用`GET`和`POST`代替\n`HttpRequest.COOKIES` 字典，键和值都是字符串\n`HttpRequest.FILES` 类似字典的对象，包含所有的上传文件，<form>带有`enctype=\"multipart/form-data\"`才会有数据\n`HttpRequest.META` 标准的python字典，包含所有http请求头部\n`HttpRequest.user`\n`HttpRequest.session` 类似字典的对象\n`HttpRequest.urlconf` 如果其它地方设置了，则用来取代`ROOT_URLCONF `\n`HttpRequest.resolver_match` 会在url解析之后设置，一个`ResolverMatch`实例，表示解析之后的url\n`HttpRequest.get_host()` 获取原始主机地址\n`HttpRequest.get_port()` 获取请求端端口号\n`HttpRequest.get_full_path()` 返回完整的path，包括查询字符串\n`HttpRequest.build_absolute_uri(location)` 返回绝对url\n`HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)` 返回签名过的Cookie对应的值\n`HttpRequest.is_secure()` 如果请求是通过https发起的，则返回True\n`HttpRequest.is_ajax()` 如果请求是通过XMLHttpRequest发起的，则返回True\n```python \nHttpRequest.read(size=None)\nHttpRequest.readline()\nHttpRequest.readlines()\nHttpRequest.xreadlines()\nHttpRequest.__iter__()\n```\n这几个方法实现类文件的接口用于读取HttpRequest· 实例\n\n`QueryDict`对象\nrequest.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。\n\n## [TemplateResponse 和SimpleTemplateResponse](http://python.usyiyi.cn/django/ref/template-response.html)\n`SimpleTemplateResponse`\n`TemplateResponse`\nTemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。\n \n例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：\n```python\nfrom django.template.response import TemplateResponse\n \ndef blog_index(request):\n    return TemplateResponse(request, 'entry_list.html', {'entries': Entry.objects.all()})\n```\n \n## [文件上传](http://python.usyiyi.cn/django/topics/http/file-uploads.html)\n```python\ndef handle_uploaded_file(f):\n    with open('some/file/name.txt', 'wb+') as destination:\n        for chunk in f.chunks():\n            destination.write(chunk)\n```\n遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。\n\n上传处理器\n```\n(\"django.core.files.uploadhandler.MemoryFileUploadHandler\",\n\"django.core.files.uploadhandler.TemporaryFileUploadHandler\",)\n```\nMemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。\n \n你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。\n\n更改上传处理器的行为\n``` \nDEFAULT_FILE_STORAGE\nFILE_CHARSET\nFILE_UPLOAD_HANDLERS\nFILE_UPLOAD_MAX_MEMORY_SIZE\nFILE_UPLOAD_PERMISSIONS\nFILE_UPLOAD_TEMP_DIR\nMEDIA_ROOT\nMEDIA_URL\n```\n\n在运行中更改上传处理器\n```pyhton\nrequest.upload_handlers.insert(0, ProgressBarUploadHandler())\n```\n\n>  注意\n \n>  你只可以在访问request.POST或者request.FILES之前修改上传处理器-- 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。\n \n>  所以，你应该在你的视图中尽早修改上传处理器。\n \n>  CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：\n \n> ```from django.views.decorators.csrf import csrf_exempt, csrf_protect \n@csrf_exempt\ndef upload_file_view(request):\n    request.upload_handlers.insert(0, ProgressBarUploadHandler())\n    return _upload_file_view(request) \n@csrf_protect\ndef _upload_file_view(request):\n    ... # Process request\n ```\n\n## [File对象](http://python.usyiyi.cn/django/ref/files/file.html)\n`File`类\n`ContentFile`类\n`ImageFile`类 比`File`多了`width`和`height`属性\n附加到对象的文件有额外的方法\n```\nFile.save(name, content[, save=True])\n```\n提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。\n测试出来直接`car.save()`也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串\n如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：\n```python\n>>> car.photo.save('myphoto.jpg', content, save=False)\n>>> car.save()\n``` \n等价于：\n```python\n>>> car.photo.save('myphoto.jpg', content, save=True)\n```\n\n\n从模型实例中移除文件，并且删除内部文件\n```\n File.delete([save=True])\n```\n在页面展示中，`ImageFile`自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而`File.delete()`会删除文件系统里的文件\n \n## [文件储存API](http://python.usyiyi.cn/django/ref/files/storage.html)\n \n`DefaultStorage`\n`FileSystemStorage`\n`Storage`\n \n## [管理文件](http://python.usyiyi.cn/django/topics/files.html)\n \n```python\nfrom django.db import models\n \nclass Car(models.Model):\n    name = models.CharField(max_length=255)\n    price = models.DecimalField(max_digits=5, decimal_places=2)\n    photo = models.ImageField(upload_to='cars')\n```\n`photo`有以下方法\n`photo.path`相对路径\n`photo.url`绝对路径\n\n*实际测试有出入*\n```python\n# 官方示例\n>>> car.photo.path\n'/media/cars/chevy.jpg'\n>>> car.photo.url\n'http://media.example.com/cars/chevy.jpg'\n\n# 实际测试结果\n>>> car.photo.path\n'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'\n>>> car.photo.url\n'/upload/20151230171832_0.jpg'\n```\n \n更改一个文件的存储位置\n```python\n>>> import os\n>>> from django.conf import settings\n>>> initial_path = car.photo.path\n>>> car.photo.name = 'cars/chevy_ii.jpg'\n>>> new_path = settings.MEDIA_ROOT + car.photo.name\n>>> # Move the file on the filesystem\n>>> os.rename(initial_path, new_path)\n>>> car.save()\n>>> car.photo.path\n'/media/cars/chevy_ii.jpg'\n>>> car.photo.path == new_path\nTrue\n```\n \n## [编写自定义存储系统](http://python.usyiyi.cn/django/howto/custom-file-storage.html)\n \n1. 必须是`django.core.files.storage.Storage`的子类\n2. Django必须能够不带任何参数来实例化\n3. 必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法\n4. 你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）\n \n## [基于类的视图](http://python.usyiyi.cn/django/topics/class-based-views/index.html)\n \n## [基于类的内建通用视图](http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html)\n \n`ListView`类视图中，默认的对象列表名除了`object_list`，还有一个`<model_name>_list`\n \n## [使用基于类的视图处理表单](http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html)\n \n如果对应模型存在`get_absolute_url`方法的前提下`CreateView`和`UpdateView`类视图的`success_url`默认使用`get_absolute_url`\n \n如何定义`form_class`，即使`form_class`是`ModelForm`也还是需要指定模型\n \n如果没有定义`form_class`，则必须定义`fields`，`fields`和`form_class`不能同时存在\n\n如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过`template_name_field`来指定此字段。\n\n## [Mixin](http://python.usyiyi.cn/django/topics/class-based-views/mixins.html)\n \n## [基于类的视图的Mixin](http://python.usyiyi.cn/django/ref/class-based-views/mixins.html)\n`ContextMixin`所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。\n> Use alters_data where appropriate\n注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。\n很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。\n    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：\n    I will now delete this valuable data. {{ data.delete }}\n    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：\n```python\ndef sensitive_function(self):\n        self.database_record.delete()\n    sensitive_function.alters_data = True\n```\n> 有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。\n`query_pk_and_slug`如果为`True`,`get_object()`将使用两者一起来查找。可以防止只使用`pk`时，如果`pk`连续，直接被攻击者都遍历`pk`获取整个列表\n \n \n## [内建基于类的视图的API](http://python.usyiyi.cn/django/ref/class-based-views/index.html)\n \n \n```python\nurlpatterns = [\n    url(r'^view/$', MyView.as_view(size=42)),\n]\n```\n> 视图参数的线程安全性\n传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。\n \n## [基于类的通用视图 —— 索引](http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html)\n \n## [使用Django输出CSV](http://python.usyiyi.cn/django/howto/outputting-csv.html)\n \n```python\nimport csv\nfrom django.http import HttpResponse\n \ndef some_view(request):\n    # Create the HttpResponse object with the appropriate CSV header.\n    response = HttpResponse(content_type='text/csv')\n    response['Content-Disposition'] = 'attachment; filename=\"somefilename.csv\"'\n \n    writer = csv.writer(response)\n    writer.writerow(['First row', 'Foo', 'Bar', 'Baz'])\n    writer.writerow(['Second row', 'A', 'B', 'C', '\"Testing\"', \"Here's a quote\"])\n \n    return response\n```\n \n## [使用Django输出PDF](http://python.usyiyi.cn/django/howto/outputting-pdf.html)\n \n```python\nfrom reportlab.pdfgen import canvas\nfrom django.http import HttpResponse\n \ndef some_view(request):\n    # Create the HttpResponse object with the appropriate PDF headers.\n    response = HttpResponse(content_type='application/pdf')\n    response['Content-Disposition'] = 'attachment; filename=\"somefilename.pdf\"'\n \n    # Create the PDF object, using the response object as its \"file.\"\n    p = canvas.Canvas(response)\n \n    # Draw things on the PDF. Here's where the PDF generation happens.\n    # See the ReportLab documentation for the full list of functionality.\n    p.drawString(100, 100, \"Hello world.\")\n \n    # Close the PDF object cleanly, and we're done.\n    p.showPage()\n    p.save()\n    return response\n```\n \n## [中间件](http://python.usyiyi.cn/django/topics/http/middleware.html)\n \n中间件的顺序很重要\n接受请求时，自上向下调用中间件\n返回响应时，自下向上调用中间件\n`process_request(request)`\n在django决定执行哪个视图之前（也就是解析url之前）被调用\n返回`None`继续处理请求\n返回`HttpResponse`不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果\n \n`process_view(request, view_func, view_args, view_kwargs)`\n*注：`view_args`和`view_kwargs`都不包含`request`*\n在django调用视图之前被调用\n返回`None`继续处理请求\n返回`HttpResponse`不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果\n> 注意\n在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。\n类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。\n \n`process_template_response(request, response)`\n在视图刚好执行完毕之后被调用\n必须返回一个实现了`render`方法的响应对象\n \n`process_response(request, response)`\n在所有响应返回浏览器之前被调用\n必须返回`HttpResponse`或者`StreamingHttpResponse`对象\n***[处理流式响应](http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses)***\n \n`process_exception(request, exception)`\n在视图抛出异常时被调用\n返回`None`\n返回`HttpResponse` `process_template_response`和响应中间件会被调用\n**在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的`process_exception`返回了一个响应，那么这个中间件上面的中间件中的`process_exception`都不会被调用**\n \n`__init__()`\n大多数中间件类都不需要初始化方法\ndjango初始化中间件无需任何参数，所以不能定义一个有参数的`__init__方法\n`__init__`不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用\n`__init__`抛出`django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。\n \n- 中间件类不能是任何类的子类\n- 中间件可以放在python路径中的任务位置\n正常\n```\nA.init\nB.init\nC.init\nD.init\nA.process_request\nB.process_request\nC.process_request\nD.process_request\nA.process_view\nB.process_view\nC.process_view\nD.process_view\n \nD.process_template_response\nC.process_template_response\nB.process_template_response\nA.process_template_response\nD.process_responst\nC.process_responst\nB.process_responst\nA.process_responst\n```\n视图异常\n```\nA.init\nB.init\nC.init\nD.init\nA.process_request\nB.process_request\nC.process_request\nD.process_request\nA.process_view\nB.process_view\nC.process_view\nD.process_view\n\nD.process_responst\nC.process_responst\nB.process_responst\nA.process_responst\n```\n\n## [django中可用的中间件](http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering )\n \n### `class CommonMiddleware`\n`DISALLOWED_USER_AGENTS`禁用匹配的`user-agents`访问网站\n`APPEND_SLASH`如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次\n`PREPEND_WWW`如果url会重定向到www到头的网址\n`USE_ETAGS`设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。\n### `class BrokenLinkEmailsMiddleware`\n向`MANAGERS` 发送死链提醒邮件\n \n### `class GZipMiddleware`\n为支持`GZip`压缩的浏览器压缩内容\n建议放在中间件配置列表的第一个\n可通过`gzip_page()`装饰器使用独立的`GZip`压缩\n \n### `class ConditionalGetMiddleware`\n \n### `class LocaleMiddeware`\n基于请求中的数据开启语言选择，它可以为每个用户进行定制。\n \n### `class MessageMiddleware`\n开启基于`Cookie`和会话的消息支持\n \n### `class SecurityMiddleware`\n \n[中间件的排序](http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering )\n \n## [模版](http://python.usyiyi.cn/django/topics/templates.html)\n \n`DjangoTemplates`引擎`OPTIONS`配置项中接受以下参数\n`string_if_invalid`当模版变量无效时，使用此值代替\n可使用\ncomment \n和\nendcomment\n进行多行注释\n \n## [Django模版语言](http://python.usyiyi.cn/django/ref/templates/language.html )\n \n当模版系统遇到`.`时，按下面顺序查询\n从技术上来说，当模版系统遇到点(\".\")，它将以这样的顺序查询：\n- 字典查询（Dictionary lookup）\n- 属性或方法查询（Attribute or method lookup）\n- 数字索引查询（Numeric index lookup）\n \n模版变量最终解释成字面量，而不是变量值\n \nload\n可接受多个库名称\nload humanize i18n\nload\n不支持继承\n \n## [内置标签与过滤器](http://python.usyiyi.cn/django/ref/templates/builtins.html)\n \n### 标签\n`filter`对一段内容进行过滤，使用`|`对多个过滤器进行连接，且过滤器可以有参数\n*比如一段纯文本不能使用之前说的过滤器写法，则可以使用`filter`*\n`firstof`输出第一个不为`False`的参数\n```\n{% firstof var1 var2|safe var3 \"<strong>fallback value</strong>\"|safe %}\n```\n`ifchanged`检查循环中的一个值从最近一次重复其是否改变，支持`else\n \n`with`可往`include`的模版里传上下文件变量\n```\n{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}\n```\n```\n{% include \"name_snippet.html\" with greeting=\"Hi\" only %}\n```\n```\n{% lorem %}\n```\n设计人员工具，好像是生成随机单词和段落\n```django\n{% lorem %}\n{% lorem 3 p  %}\n{% lorem 10 w random %}\n```\n \n## [人性化](http://python.usyiyi.cn/django/ref/contrib/humanize.html)\n`apnumber`转换整数或整数的字符串形式为英文描述\n1 会变成one\n`intcomma`转换成第三位带一个逗号\n4500 会变成 4,500\n`intword`将大的整数转换为友好的文字表示\n1000000 会变成 1.0 million\n`naturalday`对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化\n`naturaltime`对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前\n例如（其中“现在”是2007年2月17日16时30分0秒）：\n17 Feb 2007 16:30:00 会变成 now\n17 Feb 2007 16:29:31 会变成 29 seconds ago\n`ordinal`将一个整数或是整数的字符串，转换为它的序数词\n1 会变成 1st\n2 会变成  2nd\n3 会变成  3rd\n \n## [Django 模板语言：面向Python程序员](http://python.usyiyi.cn/django/ref/templates/api.html)\n \n`string_if_invalid`建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题\n \n每个上下文都包含`True` `False` `None`\n \n### [使用`Context`对象]\n*[这里比较难理解](http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects)*\n```python\nContext.get(key, otherwise=None)\nContext.pop()\nContext.push()\nContext.update(other_dict)\n```\n \n> 上下文处理器应用的时机\n上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。\n如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：\n>```python\nfrom django.template import RequestContext\nrequest_context = RequestContext(request)\nrequest_context.push({\"my_name\": \"Adrian\"})\n```\nDjango 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。\n你还可以赋予`RequestContext `一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量\n```python\ndef some_view(request):\n    # ...\n    c = RequestContext(request, {\n        'foo': 'bar',\n    }, ['ip_address':'127.0.0.1'])\n    return HttpResponse(t.render(c))\n```\n上面例子中`ip_address`也会加入到上下文中\n \n### 内建的模板上下文处理器\n下面是内奸的上下文处理器所添加的内容\n`django.contrib.auth.context_processors.auth`\n- `user`\n- `perms`\n \n`django.template.context_processors.debug`\n- debug\n- sql_queryes\n一个{'sql': ..., 'time': ...} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。\n \n`django.template.context_processors.i18n`\n- `MEDIA_URL`\n \n`django.template.context_processors.static`\n- `STATIC_URL`\n \n`django.template.context_processors.csrf`\n- `csrf_token`\n \n`django.template.context_processors.request`\n- `request`\n \n`django.contrib.messages.context_processors.messages`\n- `messages`\n- `DEFAULT_MESSAGE_LEVELS`\n \n \n## [自定义模板标签和过滤器](http://python.usyiyi.cn/django/howto/custom-template-tags.html)\n \n### 自定义过滤器\n```python\nfrom django import template\nregister = template.Library()\n@register.filter(name='cut')\n \nregister.filter('cut', cut)\nregister.filter('lower', lower)\n# or\ndef cut(value, arg):\n    return value.replace(arg, '')\n \n@register.filter\ndef lower(value):\n    return value.lower()\n```\n可使用`SafeData`来验证是否是安全数据\n```python\nif isinstance(value, SafeData):\n    # Do something with the \"safe\" string.\n    ...\n```\n或使用`is_safe`来控制只接收的安全的数据\n```python\n@register.filter(is_safe=True)\ndef myfilter(value):\n    return value\n```\n \n### 自定义标签\n```python\nimport datetime\nfrom django import template\n \nregister = template.Library()\n \n@register.simple_tag\ndef current_time(format_string):\n    return datetime.datetime.now().strftime(format_string)\n```\n \n```\n{% show_results poll %}\n```\n \n写一个标签，实现下面的效果\n```html\n<ul>\n  <li>First choice</li>\n  <li>Second choice</li>\n  <li>Third choice</li>\n</ul>\n```\n例子1开始\n```python\n@register.inclusion_tag('results.html')\ndef show_results(poll):\n    choices = poll.choice_set.all()\n    return {'choices': choices}\n```\n \n`results.html`\n```html\n<ul>\n{% for choice in choices %}\n    <li> {{ choice }} </li>\n{% endfor %}\n</ul>\n```\n例子1结束\n \n可使用`takes_context=True`直接访问上下文件中的数据\n```python\n@register.inclusion_tag('link.html', takes_context=True)\ndef jump_link(context):\n    # 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context\n    return {\n        'link': context['home_link'],\n        'title': context['home_title'],\n    }\n```\n`link.html`\n```html\n<a href=\"{{ link }}\">{{ title }}</a>.\n```\n页面直接写\n```html\n{% jump_link %}\n```\n \n位置参数和关键字参数和`python`语法一样\n```python\n@register.inclusion_tag('my_template.html')\ndef my_tag(a, b, *args, **kwargs):\n    warning = kwargs['warning']\n    profile = kwargs['profile']\n    ...\n    return ...\n```\n```django\n{% my_tag 123 \"abcd\" book.title warning=message|lower profile=user.profile %}\n```\n还有一个`register.assignment_tag`与`register.simple_tag`功能一样，不知道有什么特殊作用\n \n## [使用表单](http://python.usyiyi.cn/django/topics/forms/index.html)\n \n一些表单输入自带有html5的验证，要禁用这些验证可以设置`form`标签的`novalidate`属性\n \n`is_bound`可以判断一个表单是否具有绑定数据\n```python\n# 未绑定表单\nf = ContactForm()\ndata = {'subject': 'hello',\n        'message': 'Hi there',\n        'sender': 'foo@example.com',\n        'cc_myself': True}\n# 已绑定的表单\nf = ContactForm(data)\n```\n \n当表单通过`is_valid()`方法验证后，可以直接在`form.cleaned_data`中拿值，并且是已经转换好的`python`格式的数据，但仍然可以从`request.POST`直接访问到未验证的数据。\n \n表单排列\n`{{ form.as_table }}`\n`{{ form.as_p }}`\n`{{ form.as_ul }}`\n \n表单属性\n`{{ form.name }}`字段html标签\n`{{ form.name.label_tag }}`字段的`lable`html标签\n`{{ form.name.id_for_label }}`字段`lable`标签上的`for`值，也是字段标签上的`id`\n \n`{{ form.hidden_fields }}`隐藏字段列表\n`{{ form.visible_fields }}`显示的字段列表\n \n \n错误信息\n`{{ form.non_field_errors }}`不是特定字段的错误\n`{{ form.errors }}`全部错误，一个字典\n`{{ form.name.errors }}`字段错误\n \n可从`form`从遍历出`field`\n`{{ field }}`有以下属性\n`{{ field.label }}``Model`或是`Form`上的`label`的值\n`{{ field.label_tag }}`整个`label`标签，包含冒号\n`{{ field.id_for_label }}`字段的id\n`{{ field.value }}`字段的值\n`{{ field.html_name }}`字段的`name`，考虑表单的前缀\n`{{ field.help_text }}`字段的帮助文档\n`{{ field.errors }}`字段的错误\n`{{ field.is_hidden }}`判断字段是否隐藏\n`{{ field.field }}`表单类中`Field`的实例，可以使用它来访问`Field`属性，如\n```python\nname.field.max_length\n```\n \n## [表单 API](http://python.usyiyi.cn/django/ref/forms/api.html)\n```python\n# 未绑定表单\nf = ContactForm()\ndata = {'subject': 'hello',\n        'message': 'Hi there',\n        'sender': 'foo@example.com',\n        'cc_myself': True}\n# 已绑定的表单\nf = ContactForm(data)\n```\n表单实例一但创建，数据不可更改\n \n### `Form.clean()`\n### `Form.is_valid()`\n \n### `Form.errors`\n> `Form.errors`\n访问errors 属性可以获得错误信息的一个字典：\n```python\n>>> f.errors\n{'sender': ['Enter a valid email address.'], 'subject': ['This field is required.']}\n```\n在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。\n你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。\n验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。\n \n### `Form.errors.as_data()`\n> 返回一个字典，它映射字段到原始的ValidationError 实例\n \n### `Form.errors.as_json(escape_html=False)`\n> 返回JSON 序列化后的错误。\n \n### `Form.add_error(field, error)`\n> 这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息\n> Form.add_error() 会自动删除cleaned_data 中的相关字段\n \n### `Form.has_error(field, code=None)`\n> 这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。\n> 若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。\n \n### `Form.non_field_errors()`\n> 这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, \"...\") 添加的错误。\n \n未绑定表单的行为\n验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：\n \n```python\n>>> f = ContactForm()\n>>> f.is_valid()\nFalse\n>>> f.errors\n{}\n```\n \n### `Form.initial`\n```python\n>>> f = ContactForm(initial={'subject': 'Hi there!'})\n```\n这些值只显示在没有绑定的表单中，即使没有提供特定值它们也***不会作为后备的值***。\n优先级高于`Form`中的`initial`\n```python\n>>> from django import forms\n>>> class CommentForm(forms.Form):\n...     name = forms.CharField(initial='class')\n...     url = forms.URLField()\n...     comment = forms.CharField()\n>>> f = CommentForm(initial={'name': 'instance'}, auto_id=False)\n>>> print(f)\n<tr><th>Name:</th><td><input type=\"text\" name=\"name\" value=\"instance\" /></td></tr>\n<tr><th>Url:</th><td><input type=\"url\" name=\"url\" /></td></tr>\n<tr><th>Comment:</th><td><input type=\"text\" name=\"comment\" /></td></tr>\n```\n \n### `Form.has_changed()`\n**也有`Field.has_changed()`方法**\n检查表单数据是否从初始数据发生改变\n当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：\n```python\n>>> f = ContactForm(request.POST, initial=data)\n>>> f.has_changed()\n```\n如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。\n \n`Form.fields`\n从表单中访问字段\n是一个`OrderedDict`\n可你可以修改表单实例的字段来改变字段在表单中的表示：\n```python\n>>> f.as_table().split('\\n')[0]\n'<tr><th>Name:</th><td><input name=\"name\" type=\"text\" value=\"instance\" /></td></tr>'\n>>> f.fields['name'].label = \"Username\"\n>>> f.as_table().split('\\n')[0]\n'<tr><th>Username:</th><td><input name=\"name\" type=\"text\" value=\"instance\" /></td></tr>'\n```\n注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：\n```python\n>>> f.base_fields['name'].label = \"Username\"\n>>> another_f = CommentForm(auto_id=False)\n>>> another_f.as_table().split('\\n')[0]\n'<tr><th>Username:</th><td><input name=\"name\" type=\"text\" value=\"class\" /></td></tr>'\n```\n> cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。\ncleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。\n当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。\n\n### `Form.cleaned_data`\n \n### `Form.as_p`\n`Form.as_ul`\n`Form.as_table`\n \n### `Form.error_css_class` `Form.required_css_class`\n \n在`Form`类下可以用上面两个属性定义错误样式和必填样式，没有默认值，`required_css_class`也会回在`label`标签上\n \n## `Form.auto_id`\n控制表单上的`label`和表单元素的id，值为`True`，`False`或字符串，支持`%s`占位符，表示当前字段名\n> 如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。\n默认情况下，auto_id 设置为'id_%s'。\n \n### `Form.label_suffix`\n默认为英文的`:`\n \n### `BoundField`\n```python\nform = ContactForm()\nfor boundfield in form:\n    print(boundfield)\n# 或\nfrom['name']\n```\n`BoundField.errors`\n`BoundField.label_tag(contents=None, attrs=None, label_suffix=None)`\n`BoundField.css_classes()`\n`BoundField.value()`\n提供初始值，会被绑定值覆盖\n`BoundField.id_for_label`\n \n### `Form.is_multipart()`\n可判断表单是否需要`multipart`\n```django\n{% if form.is_multipart %}\n    <form enctype=\"multipart/form-data\" method=\"post\" action=\"/foo/\">\n{% else %}\n    <form method=\"post\" action=\"/foo/\">\n{% endif %}\n{{ form }}\n</form>\n```\n \n子类化表单时可通过设置`None`来删除从父类中继承过来的字段\n```python\n>>> from django import forms\n \n>>> class ParentForm(forms.Form):\n...     name = forms.CharField()\n...     age = forms.IntegerField()\n \n>>> class ChildForm(ParentForm):\n...     name = None\n \n>>> ChildForm().fields.keys()\n... ['age']\n```\n \n### `Form.prefix`\n如果在页面中需要放多个相同的表单，可以设置表单的前缀\n```python\n>>> father = PersonForm()\n>>> print(father.as_ul())\n<li><label for=\"id_first_name\">First name:</label> <input type=\"text\" name=\"first_name\" id=\"id_first_name\" /></li>\n<li><label for=\"id_last_name\">Last name:</label> <input type=\"text\" name=\"last_name\" id=\"id_last_name\" /></li>\n>>> mother = PersonForm(prefix=\"mother\")\n>>> print(mother.as_ul())\n<li><label for=\"id_mother-first_name\">First name:</label> <input type=\"text\" name=\"mother-first_name\" id=\"id_mother-first_name\" /></li>\n<li><label for=\"id_mother-last_name\">Last name:</label> <input type=\"text\" name=\"mother-last_name\" id=\"id_mother-last_name\" /></li>\n```\n \n## [表单字段](http://python.usyiyi.cn/django/ref/forms/fields.html)\n\n### `Field.has_change()`\n检查字段的值是否从初始值发生改变\n \n### 内建字段\n#### `BooleanField`\nWidget：`CheckboxInput`\n错误信息的键：`required`\n \n#### `CharField`\nWidget：`TextInput`\n错误信息的键：`required``max_length``min_length`\n接收两个可选参数\n`max_length``min_length`\n \n#### `ChoiceField`\nWidtget：`Select`\n错误信息的键：`required``invalid_choice`\n`invalid_choice`错误消息可能包含`%(value)s`，它将被选择的选项替换掉。\n接收一个额外的必选参数\n`choices`\n是一个二元组组成的可迭代对象\n \n#### `TypeChoiceField`\nWidget：`Select`\n错误信息的键：`required``invalid_choice`\n接收额外的参数\n`choices`\n是一个二元组组成的可迭代对象\n`coerce`\n    接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值\n`empty_value`\n    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择\n \n#### `DateField`\nWidget：`DateInput`\n错误信息的键：`required``invalid`\n接收一个可选参数\n`input_formats`\n一个格式的列表，用于转换一个字符串为`datateim.date`对象\n默认为\n```\n['%Y-%m-%d',      # '2006-10-25'\n'%m/%d/%Y',       # '10/25/2006'\n'%m/%d/%y']       # '10/25/06'\n```\n另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：\n```\n['%b %d %Y',      # 'Oct 25 2006'\n'%b %d, %Y',      # 'Oct 25, 2006'\n'%d %b %Y',       # '25 Oct 2006'\n'%d %b, %Y',      # '25 Oct, 2006'\n'%B %d %Y',       # 'October 25 2006'\n'%B %d, %Y',      # 'October 25, 2006'\n'%d %B %Y',       # '25 October 2006'\n'%d %B, %Y']      # '25 October, 2006'\n```\n \n#### `DateTimeField`\nWidget：`DateTimeInput`\n错误信息的键：`required``invalid`\n接收一个可选参数\n`input_formats`\n一个格式的列表，用于转换一个字符串为`datetime.datetime`对象\n默认为\n```\n['%Y-%m-%d %H:%M:%S',    # '2006-10-25 14:30:59'\n'%Y-%m-%d %H:%M',        # '2006-10-25 14:30'\n'%Y-%m-%d',              # '2006-10-25'\n'%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'\n'%m/%d/%Y %H:%M',        # '10/25/2006 14:30'\n'%m/%d/%Y',              # '10/25/2006'\n'%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'\n'%m/%d/%y %H:%M',        # '10/25/06 14:30'\n'%m/%d/%y']              # '10/25/06'\n```\n \n#### `DecimalField`\nWidget：当`Field.localize`是`False`时为NumberInput，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_digits``max_decimal_places``max_whole_digits`\n`max_value`和`min_value`错误信息可能包含`%(limit_value)s`，它们将被真正的限制值替换。类似地，`max_digits`、`max_decimal_places`和 `max_whole_digits`错误消息可能包含`%(max)s`\n接收四个可选参数\n`max_value`\n`min_value`\n`max_digits`最大位数\n`decimal_places`最大小数位\n \n#### `DurationField`\nWidget：`TextInput`\n错误信息的键：`required``invalid`\n \n#### `EmailField`\nWidget：`EmailInput`\n错误信息的键：`required``invalid`\n接收两个可选参数\n`max_length``min_length`\n \n#### `FileField`\nWidget：`ClearableFileInput`\n错误信息的键：`required``invalid``missing``empty``max_length`\n接收两个可选参数\n`max_length``allow_empty_file`如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功\n`max_length`错误信息表示文件名的长度。在错误信息中，`%(max)d`将替换为文件的最大长度，%`(length)d` 将替换为当前文件名的长度\n \n#### `FilePathField`\nWidget：`Select`\n错误信息的键：`required``invalid_choice`\n这个字段允许从一个特定的目录选择文件\n接收五个参数\n`path`\n必须\n想要列出的目录的绝对路径\n`recursive`\n可选\n布尔值，默认为`False`，是否需要递归这个目录\n`match`\n可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项\n`allow_files`\n可选\n布尔值，默认为`True`，表示是否应该包含指定位置的文件，它和`allow_folders`必须有一个为`True`\n`allow_folders`\n可选\n布尔值，默认为`True`，表示是否应该包含指定位置的目录，和`allow_files`必须有一个为`True`\n \n#### `FloatField`\nWidget：当`Field.localize`是False 时为`NumberInput`，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_value`\n接收两个可选参数\n`max_value``min_value`\n \n#### `ImageField`\nWidget：`ClearableFileInput`\n错误信息的键：`required``invalid``missing``empty``invalid_image`\n \n#### `IntegerField`\nWidget：当`Field.localize`是`False`时为`NumberInput`，否则为`TextInput`\n错误信息的键：`required``invalid``max_value``min_value`\n接收两个可选参数\n`max_value``min_value`\n \n#### `IPAddressField`\n1.7弃用\n \n#### `GenericIPAddressField`\nWidget：`TextInput`\n错误信息的键：`required``invalid`\n接收两个可选参数\n`protocol``unpack_ipv4`\n \n#### `MultipleChoiceField`\nWidget：`SelectMultiple`\n错误信息的键：`required``invalid_choice``invalid_list`\n \n#### `TypedMultipleChoiceField`\n#### `NullBooleanField`\n#### `RegexField`\n#### `SlugField`\n#### `TimeField`\n#### `URLField`\n#### `UUIDField`\n输出时需要`.hex`\n#### `ComboField`\n```python\n>>> from django.forms import ComboField\n>>> f = ComboField(fields=[CharField(max_length=20), EmailField()])\n>>> f.clean('test@example.com')\n'test@example.com'\n>>> f.clean('longemailaddress@example.com')\nTraceback (most recent call last):\n...\nValidationError: ['Ensure this value has at most 20 characters (it has 28).']\n```\n#### `MultiValueField`\n#### `SplitDateTimeField`\n#### `ModelChoiceField`\n```python\n# A custom empty label\nfield1 = forms.ModelChoiceField(queryset=..., empty_label=\"(Nothing)\")\n \n# No empty label\nfield2 = forms.ModelChoiceField(queryset=..., empty_label=None)\n```\n \n#### `ModelMultipleChoiceField`\n \n## [Widgets](http://python.usyiyi.cn/django/ref/forms/widgets.html)\n \n处理文本输入的Widget\n- `TextInput`\n- `NumberInput`\n- `EmailInput`\n- `URLInput`\n- `PasswordInput`\n- `HiddenInput`\n- `DateInput`\n- `DateTimeInput`\n- `TimeInput`\n- `Textarea`\n \n选择和复选框Widget\n-  `CheckboxInput`\n-  `Select`\n-  `NullBooleanSelect`\n-  `SelectMultiple`\n-  `RadioSelect`\n-  `CheckboxSelectMultiple`\n \n文件上传`Widget`\n- `FileInput`\n- `ClearableFileInput`\n \n复合Widget\n- `MultipleHiddenInput`\n- `SplitDateTimeWidget`\n- `SplitHiddenDateTimeWidget`\n- `SelectDateWidget`\n \n \n## [从模型创建表单](http://python.usyiyi.cn/django/topics/forms/modelforms.html)\n下面两种方法效果相同\n```python\nauthor = Author(title='Mr')\nform = PartialAuthorForm(request.POST, instance=author)\nform.save()\n# or\nform = PartialAuthorForm(request.POST)\nauthor = form.save(commit=False)\nauthor.title = 'Mr'\nauthor.save()\n```\n \n显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。\n \n例如，如果Article 模型像下面这样：\n```python\nclass Article(models.Model):\n    headline = models.CharField(max_length=200, null=True, blank=True,\n                                help_text=\"Use puns liberally\")\n    content = models.TextField()\n```\n而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：\n \n```python\nclass ArticleForm(ModelForm):\n    headline = MyFormField(max_length=200, required=False,\n                           help_text=\"Use puns liberally\")\n \n    class Meta:\n        model = Article\n        fields = ['headline', 'content']\n```\n\n创建简单的表单或表单集可以使用`modelform_factory()``modelformset_factory()`方法来新建。\n\n启用字段的本地化功能¶\n \n默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。\n```python\n>>> from django.forms import ModelForm\n>>> from myapp.models import Author\n>>> class AuthorForm(ModelForm):\n...     class Meta:\n...         model = Author\n...         localized_fields = ('birth_date',)\n```\n如果localized_fields 设置为`'__all__' `这个特殊的值，所有的字段都将本地化。\n \n提供的初始值会覆盖从实例取得的值\n```python\n>>> article = Article.objects.get(pk=1)\n>>> article.headline\n'My headline'\n>>> form = ArticleForm(initial={'headline': 'Initial headline'}, instance=article)\n>>> form['headline'].value()\n'Initial headline'\n```\n \n如果不需要很多自定义，可以直接使用工厂方法来生成表单类\n```python\n>>> from django.forms.models import modelform_factory\n>>> from myapp.models import Book\n>>> BookForm = modelform_factory(Book, fields=(\"author\", \"title\"))\n>\n```\n```python\n>>> from django.forms import Textarea\n>>> Form = modelform_factory(Book, form=BookForm,\n...                          widgets={\"title\": Textarea()})\n```\n```python\n>>> Form = modelform_factory(Author, form=AuthorForm, localized_fields=(\"birth_date\",))\n```\n表单集\n```python\n>>> from django.forms.models import modelformset_factory\n>>> from myapp.models import Author\n>>> AuthorFormSet = modelformset_factory(Author, fields=('name', 'title'))\n```\n使用`model`生成的`formset `默认带一个包含全部对象的`queryset`\n`formset``save()`之后，会有新的属性\n```python\nmodels.BaseModelFormSet.changed_objects\nmodels.BaseModelFormSet.deleted_objects\nmodels.BaseModelFormSet.new_objects\n```\n`max_num`为最大的表单数，如果初始`queryset`长度比`max_num`，则按照`queryset`来，`extra`是可以额外添加的空表单的个数，但`extra`和`queryset`长度相加如果大于`max_num`，则`extra`和实例设置可能表现不一样，如`queryset`长度为2，`max_num`为4，`extra`不管是2还是5，最终表现出来都是2。\n```python\nAuthorFormSet = modelformset_factory(Author, fields=('name',), max_num=4, extra=2)\n```\n`max_num`默认只影响显示，不影响验证，如果需要影响验证添加`validate_max=True`即可\n\n## [表单素材 ( Media 类)](http://python.usyiyi.cn/django/topics/forms/media.html)\n \n**`Form`和`Widget`都可以定义素材**\n \n```python\nfrom django import forms\n \nclass CalendarWidget(forms.TextInput):\n    class Media:\n        css = {\n            'all': ('pretty.css',)\n        }\n        js = ('animations.js', 'actions.js')\n```\n使用`CalendarWidget`会自动引入下列资源\n```html\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n```\n`Widget`会默认继承父类的素材，如果不想继承在`Media`里使用`extend`禁止。\n \n动态定义\n```python\nclass CalendarWidget(forms.TextInput):\n    def _media(self):\n        return forms.Media(css={'all': ('pretty.css',)},\n                           js=('animations.js', 'actions.js'))\n    media = property(_media)\n```\n两个`Media`实例可以相加\n```python\n>>> from django import forms\n>>> class CalendarWidget(forms.TextInput):\n...     class Media:\n...         css = {\n...             'all': ('pretty.css',)\n...         }\n...         js = ('animations.js', 'actions.js')\n \n>>> class OtherWidget(forms.TextInput):\n...     class Media:\n...         js = ('whizbang.js',)\n \n>>> w1 = CalendarWidget()\n>>> w2 = OtherWidget()\n>>> print(w1.media + w2.media)\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"></script>\n```\n \n表单`Media`\n```python\n>>> class ContactForm(forms.Form):\n...     date = DateField(widget=CalendarWidget)\n...     name = CharField(max_length=40, widget=OtherWidget)\n...\n...     class Media:\n...         css = {\n...             'all': ('layout.css',)\n...         }\n \n>>> f = ContactForm()\n>>> f.media\n<link href=\"http://static.example.com/pretty.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<link href=\"http://static.example.com/layout.css\" type=\"text/css\" media=\"all\" rel=\"stylesheet\" />\n<script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"></script>\n<script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"></script\n```\n \n## [表单集](http://python.usyiyi.cn/django/topics/forms/formsets.html)\n \n表单集控制\n`max_num`\n`min_num`\n`validate_max`\n`validate_min`\n`can_order`\n`can_delete`\n\n其中`can_order``can_delete`默认以以下形式展现\n\n\n \n如果是使用`Model`生成的表单集，如果`delete`后，在调用`formset.save()`会自动删除相应的数据，但如果调用了`formset.save(commit=False)`，则需要手动删除（1.6或更早版还是会自动删除）\n```python\n>>> instances = formset.save(commit=False)\n>>> for obj in formset.deleted_objects:\n...     obj.delete()\n```\n如果要兼容1.6或更早版，可以这么写\n```python\n>>> try:\n>>>     # For Django 1.7+\n>>>     for obj in formset.deleted_objects:\n>>>         obj.delete()\n>>> except AssertionError:\n>>>     # Django 1.6 and earlier already deletes the objects, trying to\n>>>     # delete them a second time raises an AssertionError.\n>>>     pass\n```\n \n在表单集里添加额外的字段\n```python\n>>> from django.forms.formsets import BaseFormSet\n>>> from django.forms.formsets import formset_factory\n>>> from myapp.forms import ArticleForm\n>>> class BaseArticleFormSet(BaseFormSet):\n...     def add_fields(self, form, index):\n...         super(BaseArticleFormSet, self).add_fields(form, index)\n...         form.fields[\"my_field\"] = forms.CharField()\n \n>>> ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)\n>>> formset = ArticleFormSet()\n>>> for form in formset:\n...     print(form.as_table())\n<tr><th><label for=\"id_form-0-title\">Title:</label></th><td><input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\" /></td></tr>\n<tr><th><label for=\"id_form-0-pub_date\">Pub date:</label></th><td><input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\" /></td></tr>\n<tr><th><label for=\"id_form-0-my_field\">My field:</label></th><td><input type=\"text\" name=\"form-0-my_field\" id=\"id_form-0-my_field\" /></td></tr>\n```\n \n表单集对应的模版写法\n```django\n<form method=\"post\" action=\"\">\n    <table>\n        {{ formset }}\n    </table>\n</form>\n```\n也可以手动渲染，不能缺少`{{ formset.management_form }}`\n```django\n<form method=\"post\" action=\"\">\n    {{ formset.management_form }}\n    <table>\n        {% for form in formset\n        {{ form }}\n        {% endfor\n    </table>\n</form>\n```\n如果是手动渲染，`can_order``can_delete`需要手动添加\n```django\n<form method=\"post\" action=\"\">\n    {{ formset.management_form }}\n    {% for form in formset\n        <ul>\n            <li>{{ form.title }}</li>\n            <li>{{ form.pub_date }}</li>\n            {% if formset.can_delete\n                <li>{{ form.DELETE }}</li>\n            {% endif\n        </ul>\n    {% endfor\n</form>\n```\n \n在一个视图中使用多个`FormSet`需要回前缀`prefix`\n```python\nfrom django.forms.formsets import formset_factory\nfrom django.shortcuts import render_to_response\nfrom myapp.forms import ArticleForm, BookForm\n \ndef manage_articles(request):\n    ArticleFormSet = formset_factory(ArticleForm)\n    BookFormSet = formset_factory(BookForm)\n    if request.method == 'POST':\n        article_formset = ArticleFormSet(request.POST, request.FILES, prefix='articles')\n        book_formset = BookFormSet(request.POST, request.FILES, prefix='books')\n        if article_formset.is_valid() and book_formset.is_valid():\n            # do something with the cleaned_data on the formsets.\n            pass\n    else:\n        article_formset = ArticleFormSet(prefix='articles')\n        book_formset = BookFormSet(prefix='books')\n    return render_to_response('manage_articles.html', {\n        'article_formset': article_formset,\n        'book_formset': book_formset,\n    })\n```\n\n## [表单验证和字段验证](http://python.usyiyi.cn/django/ref/forms/validation.html)\n格式标准\n抛出单个错误\n```python\nraise ValidationError(\n    _('Invalid value: %(value)s'),\n    code='invalid',\n    params={'value': '42'},\n)\n```\n招聘多个错误\n```python\n# Good\nraise ValidationError([\n    ValidationError(_('Error 1'), code='error1'),\n    ValidationError(_('Error 2'), code='error2'),\n])\n \n# Bad\nraise ValidationError([\n    _('Error 1'),\n    _('Error 2'),\n])\n```\n创建一个新的表单字段添加默认验证\n```python\nfrom django import forms\nfrom django.core.validators import validate_email\n \nclass MultiEmailField(forms.Field):\n    def to_python(self, value):\n        \"Normalize data to a list of strings.\"\n \n        # Return an empty list if no input was given.\n        if not value:\n            return []\n        return value.split(',')\n \n    def validate(self, value):\n        \"Check if value consists only of valid emails.\"\n \n        # Use the parent's handling of required fields, etc.\n        super(MultiEmailField, self).validate(value)\n \n        for email in value:\n            validate_email(email)\n```\n \n## [Django 的设置](http://python.usyiyi.cn/django/topics/settings.html)\ndjango-admin 工具\n \n当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。\n \n例如（Unix Bash shell）：\n```\nexport DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n例如（Windows shell）：\n```\nset DJANGO_SETTINGS_MODULE=mysite.settings\ndjango-admin runserver\n```\n使用--settings 命令行参数可以手工指定设置：\n```\ndjango-admin runserver --settings=mysite.settings\n```\n \n使用下面的命令可以查询设置与默认设置的不同\n```python\npython manage.py diffsettings\n```\n在django app中使用设置应使用以下导入方式\n```python\nfrom django.conf import settings\n```\n注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：\n```python\nfrom django.conf.settings import DEBUG  # This won't work.\n```\n不要在应用运行时改变设置\n \n## [完整列表设置(Settings)](http://python.usyiyi.cn/django/ref/settings.html)\n \n`CSRF_COOKIE_SECURE=True`只通过`HTTPS`传递`cookie`\n \n`DATABASES['CONN_MAX_AGE']`数据库连接的戚时间，默认为0（历史遗留行为），设置为`None`表示无限的持久连接\n`DECIMAL_SEPARATOR`类型数据的分隔符默认为点`.`\n`DISALLOWED_USER_AGENTS`编写正则表达式元组禁用代码访问，需要启用`CommonMiddleware`中间件\n`INTERNAL_IPS`设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签\n\n## [应用](http://python.usyiyi.cn/django_182/ref/applications.html)\n \n```python\n# rock_n_roll/apps.py\n \nfrom django.apps import AppConfig\n \nclass RockNRollConfig(AppConfig):\n    name = 'rock_n_roll'\n    verbose_name = \"Rock ’n’ roll\"\n```\n \n```python\n# rock_n_roll/__init__.py\n \ndefault_app_config = 'rock_n_roll.apps.RockNRollConfig'\n```\n \n`AppConfig`可配置的属性\n- `AppConfig.name`\n- `AppConfig.label`\n- `AppConfig.verbose_name`\n- `Appconfig.path`\n \n`AppConfig`只读属性\n- `AppConfig.module`\n- `Appconfig.models_module`\n \n`AppConfig`方法\n- `AppConfig.get_models()`\n- `AppConfig..get_model(model_name)`\n- `AppConfigevaluate.ready()`\n \n```python\n>>> from django.apps import apps\n>>> apps.get_app_config('admin').verbose_name\n'Admin'\n```\n \n`APP`\n- `apps.ready`\n- `apps.get_app_configs()`\n- `apps.get_app_config(app_label)`\n- `apps.is_installed(app_name)`\n- `apps.get_model(app_label, model_name)`\n\n\n## [Django异常](python.usyiyi.cn/django_182/ref/exceptions.html)\n \n### 核心异常\n*`django.core.exceptions`*\n \n- `ObjectDoesNotExist`\n对象不存在\n`DoesNotExist`的基类\n对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常\n```python\nfrom django.core.exceptions import ObjectDoesNotExist\ntry:\n    e = Entry.objects.get(id=3)\n    b = Blog.objects.get(id=1)\nexcept ObjectDoesNotExist:\n    print(\"Either the entry or blog doesn't exist.\")\n```\n \n- `FieldDoesNotExist`\n当被请求的字段在模型或模型的父类中不存在时，`FieldDoesNotExist`异常由模型的 `_meta.get_field()`方法抛出\n \n- `MultipleObjectsReturned`\n查询时，预期只有一个对象，但是返回了多个对象会抛出此异常\n \n- `SuspiciousOperation`\n当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改`cookie`\n子类\n  - `DisallowedHost`\n  - `DisallowedModelAdminLookup`\n  - `DisallowedModelAdminToField`\n  - `DisallowedRedirect`\n  - `InvalidSessionKey`\n  - `SuspiciousFileOperation`\n  - `SuspiciousMultipartForm`\n  - `SuspiciousSession`\n \n- `PermissionDenied`\n当用户不被允许来执行请求的操作时产生\n \n- `ViewDoesNotExist`\n当请求的视图不存在时抛出此异常\n \n- `MiddlewareNotUsed`\n当中间件没有在服务器配置中出现时，抛出此异常\n \n- `ImproperlyConfigured`\ndjango配置不当时抛出此异常，如`settings.py`中的值不正确或者不可解析\n \n- `FieldError`\n当模型上的字段出现问题时，抛出此异常，由以下原因造成：\n  - 模型中的字段与抽象基类中的字段重名\n  - 排序造成了一个死循环\n  - 关键词不能由过滤器参数解析\n  - 字段不能由查询参数中的关键词决定\n  - 连接（join）不能在指定对象上使用\n  - 字段名称不可用\n  - 查询包含了无效的`order_by`参数\n \n  - `ValidationError`\n  当表单或模型字段验证失败时抛出此异常\n \n- `NON_FIELD_ERRORS`\n在表单或者模型中不属于特定字段的`ValidationError`被归类为`NON_FIELD_ERRORS`\n \n### URL解析器异常\n \n- `Resolver404`\n`django.http.Http404`的子类\n当向`resolve`传递的路径不能匹配到对应视图时抛出此异常\n \n- `NoReverseMatch`\n当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常\n \n### 数据库异常\n数据库异常由django.db导入\n- `Error`\n- `InterfaceError`\n- `DatabaseError`\n- `DataError`\n- `OperationalError`\n- `IntegrityError`\n- `InternalError`\n- `ProgrammingError`\n- `NotSupportedError`\n \n### HTTP异常\nHTTP异常由django.http导入\n \n- `UnreadablePostError`\n用户取消上传时抛出此异常\n \n### 事务异常\n事务异常定义由`django.db.transaction`导入\n \n### 测试框架异常\n由DJango django.test 包提供的异常\n \n- `RedirectCycleError`\n当测试客户端检测到重定向的循环或者过长的链时抛出此异常\n \n### `Python`异常\nDjango在适当的时候也会抛出Python的内建异常\n \n## [django-admin and manage.py](http://python.usyiyi.cn/django_182/ref/django-admin.html)\n \n- `dumpdata`\n该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。\n如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中\n`dumpdata --output data.json`\n \n- `flus`\n清空数据库，重新装载初始数据\n- `--noinput`\n- `--database`\n- `--no-initial-data`\n \n \n- `inspectdb`\n根据数据库结构生成model\n```python\npython manage.py inspectdb > models.py\n```\n \n- `loaddata`\n导入fixture数据\n \n- `runserver`\n启动本地上一个轻量级的Web服务器，默认多线程\n`--noreload`禁用自动重新载入\n`--nothreading`禁用多线程\n \n```python\nrunserver 0.0.0.0:80\n```\n\n## [ 添加自定义的命令](http://python.usyiyi.cn/django_182/howto/custom-management-commands.html)\n \n向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个`manage.py`命令。\n在Python 2上，请确保management和management/commands两个目录都包含`__init__.py` 文件。\n \n```python\nfrom django.core.management.base import BaseCommand, CommandError\nfrom polls.models import Poll\n \nclass Command(BaseCommand):\n    help = 'Closes the specified poll for voting'\n \n    def add_arguments(self, parser):\n        # 命令行接收一个或多个poll_id值\n        #\n        parser.add_argument('poll_id', nargs='+', type=int)\n \n    def handle(self, *args, **options):\n        for poll_id in options['poll_id']:\n            try:\n                poll = Poll.objects.get(pk=poll_id)\n            except Poll.DoesNotExist:\n                raise CommandError('Poll \"%s\" does not exist' % poll_id)\n \n            poll.opened = False\n            poll.save()\n \n            self.stdout.write('Successfully closed poll \"%s\"' % poll_id)\n```\n![django-commands](/media/django-commands.png)\n\n\n","slug":"django1-9文档阅读笔记","published":1,"updated":"2020-01-17T07:56:55.500Z","layout":"post","photos":[],"link":"","_id":"ck8kk11f600bhssyhmpvv3hsx","content":"<p><br><br><a id=\"more\"></a></p>\n<!--more-->\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/models.html\" target=\"_blank\" rel=\"noopener\">模型</a></h2><p><a href=\"http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api\" target=\"_blank\" rel=\"noopener\">Model _meta API</a></p>\n<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>\n<p>模型继承</p>\n<ol>\n<li>抽象基类<ul>\n<li>默认继承元类</li>\n</ul>\n</li>\n<li>多表继承<ul>\n<li>一般情况不继承元类</li>\n</ul>\n</li>\n<li>代理模型</li>\n</ol>\n<p>多重继承主要用于<code>mix-in</code>类</p>\n<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>\n<h2 id=\"模型字段参考\"><a href=\"#模型字段参考\" class=\"headerlink\" title=\"模型字段参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships\" target=\"_blank\" rel=\"noopener\">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>\n<p>关联自己使用<code>self</code></p>\n<p><code>related_name</code> <code>relate_query_name</code></p>\n<p>外键关联到特定字段<br><code>to_field</code></p>\n<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>\n<p>外键关联对象删除行为<br><code>on_delete</code></p>\n<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>\n<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>\n<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>\n<p>##<a href=\"http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships\" target=\"_blank\" rel=\"noopener\">执行查询</a></p>\n<p><a href=\"http://python.usyiyi.cn/django/howto/custom-lookups.html\" target=\"_blank\" rel=\"noopener\">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>\n<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>\n<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.headline <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Evaluate the query set.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.pub_date <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Re-use the cache from the evaluation.</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database again</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; queryset = Entry.objects.all()</span><br><span class=\"line\">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br></pre></td></tr></table></figure>\n<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>\n<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>\n<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>\n<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>\n<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>\n<p>一对多关联对象访问会缓存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Hits the database to retrieve the associated Blog.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Doesn't hit the database; uses cached version.</span></span><br></pre></td></tr></table></figure></p>\n<p>自定义反向管理器1.7+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#...</span></span><br><span class=\"line\">    objects = models.Manager()  <span class=\"comment\"># Default Manager</span></span><br><span class=\"line\">    entries = EntryManager()    <span class=\"comment\"># Custom Manager</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set(manager=<span class=\"string\">'entries'</span>).all()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"查询集API-参考\"><a href=\"#查询集API-参考\" class=\"headerlink\" title=\"查询集API 参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/querysets.html\" target=\"_blank\" rel=\"noopener\">查询集API 参考</a></h2><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/aggregation.html\" target=\"_blank\" rel=\"noopener\">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>\n<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>\n<p>在查作者列表时要查每个作者有几篇博文<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"comment\"># authors[0]作者的博文数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].blog__count</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(number_of_blog=Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].number_of_blog</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>算出所有作者的年龄总合（不需要其它数据）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ageAuthor.objects.all().aggregate(Sum(<span class=\"string\">'age'</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">'age__sum'</span>: <span class=\"number\">26</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象</p>\n<p>对注解进行过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出作者数大于1的书本</span></span><br><span class=\"line\"><span class=\"comment\"># 只有一条sql</span></span><br><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).filter(num_authors__gt=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但顺序不一样，结果也不同，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publisher.objects.annotate(num_books=Count(<span class=\"string\">'book'</span>)).filter(book__rating__gt=<span class=\"number\">3.0</span>)</span><br><span class=\"line\">Publisher.objects.filter(book__rating__gt=<span class=\"number\">3.0</span>).annotate(num_books=Count(<span class=\"string\">'book'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>对注解项进行排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).order_by(<span class=\"string\">'num_authors'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上</p>\n<blockquote>\n<p>与默认排序交换或order_by()¶</p>\n</blockquote>\n<blockquote>\n<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>\n</blockquote>\n<blockquote>\n<p>通过例子中的方法，假设有一个这样的模型：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    data = models.IntegerField() </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">\"name\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Warning: not quite correct!</span></span><br><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>)).order_by()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>\n</blockquote>\n<blockquote>\n<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>\n</blockquote>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><p><a href=\"http://python.usyiyi.cn/django/intro/tutorial06.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static user_stylesheet %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static 'polls/style.css' %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% get_static_prefix %&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; STATIC_PREFIX &#125;&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% static \"images/hi.jpg\" as myphoto %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; myphoto &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>还有<code>get_media_prefix</code></p>\n<h2 id=\"模型实例参考\"><a href=\"#模型实例参考\" class=\"headerlink\" title=\"模型实例参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model\" target=\"_blank\" rel=\"noopener\">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>\n<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>\n<p>验证对象</p>\n<blockquote>\n<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</fieldname></p>\n</blockquote>\n<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>\n<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>\n<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>\n<blockquote>\n<p>指定要保存的字段</p>\n</blockquote>\n<blockquote>\n<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product.name = <span class=\"string\">'Name changed again'</span></span><br><span class=\"line\">product.save(update_fields=[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>\n</blockquote>\n<blockquote>\n<p>指定<code>update_fields</code>将强制使用更新操作。</p>\n</blockquote>\n<blockquote>\n<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>\n</blockquote>\n<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code></code>keep_parents=True<code>可以保留上级数据，默认为</code>False`<br>返回值为删除数据的条数</p>\n<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.get_next_by_FOO(**kwargs)¶ </span><br><span class=\"line\">Model.get_previous_by_FOO(**kwargs)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"管理器\"><a href=\"#管理器\" class=\"headerlink\" title=\"管理器\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html\" target=\"_blank\" rel=\"noopener\">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>\n<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultManager</span><span class=\"params\">(models.Manager)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">post = Post.objects.get(pk=<span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 调用DefaultManager管理器</span></span><br><span class=\"line\">author.post_set.all()</span><br><span class=\"line\"><span class=\"comment\"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></span><br><span class=\"line\">post.author</span><br></pre></td></tr></table></figure></p>\n<p><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager\" target=\"_blank\" rel=\"noopener\">从Manager中调用自定义的QuerySet</a></p>\n<h2 id=\"进行原始的SQL查询\"><a href=\"#进行原始的SQL查询\" class=\"headerlink\" title=\"进行原始的SQL查询\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/sql.html\" target=\"_blank\" rel=\"noopener\">进行原始的SQL查询</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manager.raw(raw_query, params=<span class=\"keyword\">None</span>, translations=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>\n</blockquote>\n<h2 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/transactions.html\" target=\"_blank\" rel=\"noopener\">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>\n<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>\n<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@transaction.atomic</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">    do_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes in autocommit mode (Django's default).</span></span><br><span class=\"line\">    do_stuff()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</span><br><span class=\"line\">        <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">        do_more_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>避免在 atomic里捕获异常!</p>\n<h2 id=\"查询表达式\"><a href=\"#查询表达式\" class=\"headerlink\" title=\"查询表达式\"></a>查询表达式</h2><p>使用数据库的方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Func, F </span><br><span class=\"line\">queryset.annotate(field_lower=Func(F(<span class=\"string\">'field'</span>), function=<span class=\"string\">'LOWER'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lower</span><span class=\"params\">(Func)</span>:</span></span><br><span class=\"line\">    function = <span class=\"string\">'LOWER'</span> </span><br><span class=\"line\">queryset.annotate(field_lower=Lower(F(<span class=\"string\">'field'</span>)))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/conditional-expressions.html\" target=\"_blank\" rel=\"noopener\">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>\n<h2 id=\"数据库函数\"><a href=\"#数据库函数\" class=\"headerlink\" title=\"数据库函数\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/database-functions.html\" target=\"_blank\" rel=\"noopener\">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>\n<h2 id=\"将遗留数据库整合到Django\"><a href=\"#将遗留数据库整合到Django\" class=\"headerlink\" title=\"将遗留数据库整合到Django\"></a><a href=\"http://python.usyiyi.cn/django/howto/legacy-databases.html\" target=\"_blank\" rel=\"noopener\">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为模型提供初始数据\"><a href=\"#为模型提供初始数据\" class=\"headerlink\" title=\"为模型提供初始数据\"></a><a href=\"http://python.usyiyi.cn/django/howto/initial-data.html\" target=\"_blank\" rel=\"noopener\">为模型提供初始数据</a></h2><p>使用fixtures<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 1,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;Lennon&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 2,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;Paul&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;McCartney&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>导入数据命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py loaddata &lt;fixturename&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据库访问优化\"><a href=\"#数据库访问优化\" class=\"headerlink\" title=\"数据库访问优化\"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>\n<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>\n<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>\n<p>用唯一的或被索引的列来检索独立对象</p>\n<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>\n<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>\n<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>\n<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>\n<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>\n<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>\n<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>\n<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>\n<p>直接使用外键的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry.blog_id</span><br><span class=\"line\"><span class=\"comment\"># 而不是</span></span><br><span class=\"line\">entry.blog.id</span><br></pre></td></tr></table></figure></p>\n<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>\n<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_band.members.add(me, my_friend) </span><br><span class=\"line\"><span class=\"comment\">#更优于 </span></span><br><span class=\"line\">my_band.members.add(me)</span><br><span class=\"line\">my_band.members.add(my_friend)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"URL调度器\"><a href=\"#URL调度器\" class=\"headerlink\" title=\"URL调度器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html\" target=\"_blank\" rel=\"noopener\">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>\n<p>在根url上获取的参数不影响参数传递<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># In settings/urls/main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;username&gt;\\w+)/blog/'</span>, include(<span class=\"string\">'foo.urls.blog'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># In foo/urls/blog.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.blog.index),</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.blog.archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。</p>\n<p>可嵌套<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'blog/(page-(\\d+)/)?$'</span>, blog_articles),                  <span class=\"comment\"># bad</span></span><br><span class=\"line\">    url(<span class=\"string\">r'comments/(?:page-(?P&lt;page_number&gt;\\d+)/)?$'</span>, comments),  <span class=\"comment\"># good</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>传递额外的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive, &#123;<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值</p>\n<p>传递额外的参数给<code>include()</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>), &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>效果等同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls\" target=\"_blank\" rel=\"noopener\">反查带命名空间的URL</a></p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/views.html\" target=\"_blank\" rel=\"noopener\">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>\n<ul>\n<li><code>HttpResponseRedirect</code> 临时重定向，302</li>\n<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>\n<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>\n<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>\n<li><code>HttpResponseNotFound</code> 页面没找到，404</li>\n<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>\n<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>\n<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>\n<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>\n<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>\n</ul>\n<p>重写错误视图（在url中）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler404 = &apos;mysite.views.my_custom_page_not_found_view&apos;</span><br><span class=\"line\">handler500 = &apos;mysite.views.my_custom_error_view&apos; </span><br><span class=\"line\">handler403 = &apos;mysite.views.my_custom_permission_denied_view&apos;</span><br><span class=\"line\">handler400 = &apos;mysite.views.my_custom_bad_request_view&apos;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的快捷函数\"><a href=\"#Django-的快捷函数\" class=\"headerlink\" title=\"Django 的快捷函数\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/shortcuts.html\" target=\"_blank\" rel=\"noopener\">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>\n<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>\n<blockquote>\n<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>\n<pre><code>一个模型：将调用模型的get_absolute_url() 函数\n一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n一个绝对的或相对的URL，将原样作为重定向的位置。\n</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>\n</blockquote>\n<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/decorators.html\" target=\"_blank\" rel=\"noopener\">视图装饰器</a></h2><p><a href=\"http://python.usyiyi.cn/django/topics/conditional-view-processing.html\" target=\"_blank\" rel=\"noopener\">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@condition(etag_func=None, last_modified_func=None)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@last_modified(last_modified_func)</span></span><br></pre></td></tr></table></figure>\n<p>根据最后修改时间来决定是否运行视图，可减少流量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@etag(etag_func)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用</p>\n<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>\n<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>\n<p><code>never_cache</code></p>\n<h2 id=\"Request-对象和Response-对象\"><a href=\"#Request-对象和Response-对象\" class=\"headerlink\" title=\"Request 对象和Response 对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\" target=\"_blank\" rel=\"noopener\">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，<form>带有<code>enctype=&quot;multipart/form-data&quot;</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&#39;&#39;, max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpRequest.read(size=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">HttpRequest.readline()</span><br><span class=\"line\">HttpRequest.readlines()</span><br><span class=\"line\">HttpRequest.xreadlines()</span><br><span class=\"line\">HttpRequest.__iter__()</span><br></pre></td></tr></table></figure></form></p>\n<p>这几个方法实现类文件的接口用于读取HttpRequest· 实例</p>\n<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>\n<h2 id=\"TemplateResponse-和SimpleTemplateResponse\"><a href=\"#TemplateResponse-和SimpleTemplateResponse\" class=\"headerlink\" title=\"TemplateResponse 和SimpleTemplateResponse\"></a><a href=\"http://python.usyiyi.cn/django/ref/template-response.html\" target=\"_blank\" rel=\"noopener\">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>\n<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template.response <span class=\"keyword\">import</span> TemplateResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blog_index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TemplateResponse(request, <span class=\"string\">'entry_list.html'</span>, &#123;<span class=\"string\">'entries'</span>: Entry.objects.all()&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/file-uploads.html\" target=\"_blank\" rel=\"noopener\">文件上传</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_uploaded_file</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'some/file/name.txt'</span>, <span class=\"string\">'wb+'</span>) <span class=\"keyword\">as</span> destination:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> f.chunks():</span><br><span class=\"line\">            destination.write(chunk)</span><br></pre></td></tr></table></figure>\n<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>\n<p>上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;django.core.files.uploadhandler.MemoryFileUploadHandler&quot;,</span><br><span class=\"line\">&quot;django.core.files.uploadhandler.TemporaryFileUploadHandler&quot;,)</span><br></pre></td></tr></table></figure></p>\n<p>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。</p>\n<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>\n<p>更改上传处理器的行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFAULT_FILE_STORAGE</span><br><span class=\"line\">FILE_CHARSET</span><br><span class=\"line\">FILE_UPLOAD_HANDLERS</span><br><span class=\"line\">FILE_UPLOAD_MAX_MEMORY_SIZE</span><br><span class=\"line\">FILE_UPLOAD_PERMISSIONS</span><br><span class=\"line\">FILE_UPLOAD_TEMP_DIR</span><br><span class=\"line\">MEDIA_ROOT</span><br><span class=\"line\">MEDIA_URL</span><br></pre></td></tr></table></figure></p>\n<p>在运行中更改上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 注意</p>\n</blockquote>\n<blockquote>\n<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>\n</blockquote>\n<blockquote>\n<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>\n</blockquote>\n<blockquote>\n<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def upload_file_view(request):</span><br><span class=\"line\">    request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br><span class=\"line\">    return _upload_file_view(request) </span><br><span class=\"line\">@csrf_protect</span><br><span class=\"line\">def _upload_file_view(request):</span><br><span class=\"line\">    ... # Process request</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"File对象\"><a href=\"#File对象\" class=\"headerlink\" title=\"File对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/file.html\" target=\"_blank\" rel=\"noopener\">File对象</a></h2><p><code>File</code>类<br><code>ContentFile</code>类<br><code>ImageFile</code>类 比<code>File</code>多了<code>width</code>和<code>height</code>属性<br>附加到对象的文件有额外的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.save(name, content[, save=True])</span><br></pre></td></tr></table></figure></p>\n<p>提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。<br>测试出来直接<code>car.save()</code>也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串<br>如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\">``` </span><br><span class=\"line\">等价于：</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>从模型实例中移除文件，并且删除内部文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.delete([save=True])</span><br></pre></td></tr></table></figure></p>\n<p>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件</p>\n<h2 id=\"文件储存API\"><a href=\"#文件储存API\" class=\"headerlink\" title=\"文件储存API\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/storage.html\" target=\"_blank\" rel=\"noopener\">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>\n<h2 id=\"管理文件\"><a href=\"#管理文件\" class=\"headerlink\" title=\"管理文件\"></a><a href=\"http://python.usyiyi.cn/django/topics/files.html\" target=\"_blank\" rel=\"noopener\">管理文件</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">    price = models.DecimalField(max_digits=<span class=\"number\">5</span>, decimal_places=<span class=\"number\">2</span>)</span><br><span class=\"line\">    photo = models.ImageField(upload_to=<span class=\"string\">'cars'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>\n<p><em>实际测试有出入</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方示例</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'http://media.example.com/cars/chevy.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际测试结果</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'/upload/20151230171832_0.jpg'</span></span><br></pre></td></tr></table></figure></p>\n<p>更改一个文件的存储位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>initial_path = car.photo.path</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.name = <span class=\"string\">'cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Move the file on the filesystem</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path == new_path</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写自定义存储系统\"><a href=\"#编写自定义存储系统\" class=\"headerlink\" title=\"编写自定义存储系统\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-file-storage.html\" target=\"_blank\" rel=\"noopener\">编写自定义存储系统</a></h2><ol>\n<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>\n<li>Django必须能够不带任何参数来实例化</li>\n<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>\n<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>\n</ol>\n<h2 id=\"基于类的视图\"><a href=\"#基于类的视图\" class=\"headerlink\" title=\"基于类的视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">基于类的视图</a></h2><h2 id=\"基于类的内建通用视图\"><a href=\"#基于类的内建通用视图\" class=\"headerlink\" title=\"基于类的内建通用视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html\" target=\"_blank\" rel=\"noopener\">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>\n<h2 id=\"使用基于类的视图处理表单\"><a href=\"#使用基于类的视图处理表单\" class=\"headerlink\" title=\"使用基于类的视图处理表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html\" target=\"_blank\" rel=\"noopener\">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>\n<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>\n<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>\n<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">Mixin</a></h2><h2 id=\"基于类的视图的Mixin\"><a href=\"#基于类的视图的Mixin\" class=\"headerlink\" title=\"基于类的视图的Mixin\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>\n<blockquote>\n<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sensitive_function</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.database_record.delete()</span><br><span class=\"line\">    sensitive_function.alters_data = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表</p>\n</blockquote>\n<h2 id=\"内建基于类的视图的API\"><a href=\"#内建基于类的视图的API\" class=\"headerlink\" title=\"内建基于类的视图的API\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">内建基于类的视图的API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^view/$'</span>, MyView.as_view(size=<span class=\"number\">42</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>\n</blockquote>\n<h2 id=\"基于类的通用视图-——-索引\"><a href=\"#基于类的通用视图-——-索引\" class=\"headerlink\" title=\"基于类的通用视图 —— 索引\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html\" target=\"_blank\" rel=\"noopener\">基于类的通用视图 —— 索引</a></h2><h2 id=\"使用Django输出CSV\"><a href=\"#使用Django输出CSV\" class=\"headerlink\" title=\"使用Django输出CSV\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-csv.html\" target=\"_blank\" rel=\"noopener\">使用Django输出CSV</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate CSV header.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'text/csv'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.csv\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    writer = csv.writer(response)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'First row'</span>, <span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>])</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'Second row'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'\"Testing\"'</span>, <span class=\"string\">\"Here's a quote\"</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Django输出PDF\"><a href=\"#使用Django输出PDF\" class=\"headerlink\" title=\"使用Django输出PDF\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-pdf.html\" target=\"_blank\" rel=\"noopener\">使用Django输出PDF</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate PDF headers.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'application/pdf'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.pdf\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Create the PDF object, using the response object as its \"file.\"</span></span><br><span class=\"line\">    p = canvas.Canvas(response)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Draw things on the PDF. Here's where the PDF generation happens.</span></span><br><span class=\"line\">    <span class=\"comment\"># See the ReportLab documentation for the full list of functionality.</span></span><br><span class=\"line\">    p.drawString(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">\"Hello world.\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Close the PDF object cleanly, and we're done.</span></span><br><span class=\"line\">    p.showPage()</span><br><span class=\"line\">    p.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html\" target=\"_blank\" rel=\"noopener\">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<blockquote>\n<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>\n</blockquote>\n<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>\n<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses\" target=\"_blank\" rel=\"noopener\">处理流式响应</a></em></strong></p>\n<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>\n<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>\n<ul>\n<li>中间件类不能是任何类的子类</li>\n<li>中间件可以放在python路径中的任务位置<br>正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"> </span><br><span class=\"line\">D.process_template_response</span><br><span class=\"line\">C.process_template_response</span><br><span class=\"line\">B.process_template_response</span><br><span class=\"line\">A.process_template_response</span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>视图异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"></span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"django中可用的中间件\"><a href=\"#django中可用的中间件\" class=\"headerlink\" title=\"django中可用的中间件\"></a><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">django中可用的中间件</a></h2><h3 id=\"class-CommonMiddleware\"><a href=\"#class-CommonMiddleware\" class=\"headerlink\" title=\"class CommonMiddleware\"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>\n<h3 id=\"class-BrokenLinkEmailsMiddleware\"><a href=\"#class-BrokenLinkEmailsMiddleware\" class=\"headerlink\" title=\"class BrokenLinkEmailsMiddleware\"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>\n<h3 id=\"class-GZipMiddleware\"><a href=\"#class-GZipMiddleware\" class=\"headerlink\" title=\"class GZipMiddleware\"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>\n<h3 id=\"class-ConditionalGetMiddleware\"><a href=\"#class-ConditionalGetMiddleware\" class=\"headerlink\" title=\"class ConditionalGetMiddleware\"></a><code>class ConditionalGetMiddleware</code></h3><h3 id=\"class-LocaleMiddeware\"><a href=\"#class-LocaleMiddeware\" class=\"headerlink\" title=\"class LocaleMiddeware\"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>\n<h3 id=\"class-MessageMiddleware\"><a href=\"#class-MessageMiddleware\" class=\"headerlink\" title=\"class MessageMiddleware\"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>\n<h3 id=\"class-SecurityMiddleware\"><a href=\"#class-SecurityMiddleware\" class=\"headerlink\" title=\"class SecurityMiddleware\"></a><code>class SecurityMiddleware</code></h3><p><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">中间件的排序</a></p>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a><a href=\"http://python.usyiyi.cn/django/topics/templates.html\" target=\"_blank\" rel=\"noopener\">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>\n<h2 id=\"Django模版语言\"><a href=\"#Django模版语言\" class=\"headerlink\" title=\"Django模版语言\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/language.html\" target=\"_blank\" rel=\"noopener\">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>\n<ul>\n<li>字典查询（Dictionary lookup）</li>\n<li>属性或方法查询（Attribute or method lookup）</li>\n<li>数字索引查询（Numeric index lookup）</li>\n</ul>\n<p>模版变量最终解释成字面量，而不是变量值</p>\n<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>\n<h2 id=\"内置标签与过滤器\"><a href=\"#内置标签与过滤器\" class=\"headerlink\" title=\"内置标签与过滤器\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">内置标签与过滤器</a></h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% firstof var1 var2|safe var3 &quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;|safe %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else</p>\n<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with person=&quot;Jane&quot; greeting=&quot;Hello&quot; %&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with greeting=&quot;Hi&quot; only %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lorem %&#125;</span><br></pre></td></tr></table></figure>\n<p>设计人员工具，好像是生成随机单词和段落<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 3 p  %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 10 w random %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"人性化\"><a href=\"#人性化\" class=\"headerlink\" title=\"人性化\"></a><a href=\"http://python.usyiyi.cn/django/ref/contrib/humanize.html\" target=\"_blank\" rel=\"noopener\">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>\n<h2 id=\"Django-模板语言：面向Python程序员\"><a href=\"#Django-模板语言：面向Python程序员\" class=\"headerlink\" title=\"Django 模板语言：面向Python程序员\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html\" target=\"_blank\" rel=\"noopener\">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>\n<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>\n<h3 id=\"使用Context对象\"><a href=\"#使用Context对象\" class=\"headerlink\" title=\"[使用Context对象]\"></a>[使用<code>Context</code>对象]</h3><p><em><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects\" target=\"_blank\" rel=\"noopener\">这里比较难理解</a></em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context.get(key, otherwise=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">Context.pop()</span><br><span class=\"line\">Context.push()</span><br><span class=\"line\">Context.update(other_dict)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext</span><br><span class=\"line\">request_context = RequestContext(request)</span><br><span class=\"line\">request_context.push(&#123;<span class=\"string\">\"my_name\"</span>: <span class=\"string\">\"Adrian\"</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。<br>你还可以赋予<code>RequestContext</code>一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    c = RequestContext(request, &#123;</span><br><span class=\"line\">        <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    &#125;, [<span class=\"string\">'ip_address'</span>:<span class=\"string\">'127.0.0.1'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(t.render(c))</span><br></pre></td></tr></table></figure></p>\n<p>上面例子中<code>ip_address</code>也会加入到上下文中</p>\n<h3 id=\"内建的模板上下文处理器\"><a href=\"#内建的模板上下文处理器\" class=\"headerlink\" title=\"内建的模板上下文处理器\"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>\n<ul>\n<li><code>user</code></li>\n<li><code>perms</code></li>\n</ul>\n<p><code>django.template.context_processors.debug</code></p>\n<ul>\n<li>debug</li>\n<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>\n</ul>\n<p><code>django.template.context_processors.i18n</code></p>\n<ul>\n<li><code>MEDIA_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.static</code></p>\n<ul>\n<li><code>STATIC_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.csrf</code></p>\n<ul>\n<li><code>csrf_token</code></li>\n</ul>\n<p><code>django.template.context_processors.request</code></p>\n<ul>\n<li><code>request</code></li>\n</ul>\n<p><code>django.contrib.messages.context_processors.messages</code></p>\n<ul>\n<li><code>messages</code></li>\n<li><code>DEFAULT_MESSAGE_LEVELS</code></li>\n</ul>\n<h2 id=\"自定义模板标签和过滤器\"><a href=\"#自定义模板标签和过滤器\" class=\"headerlink\" title=\"自定义模板标签和过滤器\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-template-tags.html\" target=\"_blank\" rel=\"noopener\">自定义模板标签和过滤器</a></h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"><span class=\"meta\">@register.filter(name='cut')</span></span><br><span class=\"line\"> </span><br><span class=\"line\">register.filter(<span class=\"string\">'cut'</span>, cut)</span><br><span class=\"line\">register.filter(<span class=\"string\">'lower'</span>, lower)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cut</span><span class=\"params\">(value, arg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.replace(arg, <span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lower</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.lower()</span><br></pre></td></tr></table></figure>\n<p>可使用<code>SafeData</code>来验证是否是安全数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> isinstance(value, SafeData):</span><br><span class=\"line\">    <span class=\"comment\"># Do something with the \"safe\" string.</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter(is_safe=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfilter</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义标签\"><a href=\"#自定义标签\" class=\"headerlink\" title=\"自定义标签\"></a>自定义标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"> </span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current_time</span><span class=\"params\">(format_string)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now().strftime(format_string)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% show_results poll %&#125;</span><br></pre></td></tr></table></figure>\n<p>写一个标签，实现下面的效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>First choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1开始<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('results.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_results</span><span class=\"params\">(poll)</span>:</span></span><br><span class=\"line\">    choices = poll.choice_set.all()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">'choices'</span>: choices&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>results.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in choices %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> &#123;&#123; choice &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1结束</p>\n<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('link.html', takes_context=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jump_link</span><span class=\"params\">(context)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'link'</span>: context[<span class=\"string\">'home_link'</span>],</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: context[<span class=\"string\">'home_title'</span>],</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>link.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure></p>\n<p>页面直接写<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jump_link %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>位置参数和关键字参数和<code>python</code>语法一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('my_template.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_tag</span><span class=\"params\">(a, b, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    warning = kwargs[<span class=\"string\">'warning'</span>]</span><br><span class=\"line\">    profile = kwargs[<span class=\"string\">'profile'</span>]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">my_tag</span> 123 \"abcd\" book.title warning=message|<span class=\"name\">lower</span> profile=user.profile %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<p>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用</p>\n<h2 id=\"使用表单\"><a href=\"#使用表单\" class=\"headerlink\" title=\"使用表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/index.html\" target=\"_blank\" rel=\"noopener\">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>\n<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure></p>\n<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>\n<p>表单排列<br><code></code><br><code></code><br><code></code></p>\n<p>表单属性<br><code></code>字段html标签<br><code></code>字段的<code>lable</code>html标签<br><code></code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>\n<p><code></code>隐藏字段列表<br><code></code>显示的字段列表</p>\n<p>错误信息<br><code></code>不是特定字段的错误<br><code></code>全部错误，一个字典<br><code></code>字段错误</p>\n<p>可从<code>form</code>从遍历出<code>field</code><br><code></code>有以下属性<br><code>`</code>Model<code>或是</code>Form<code>上的</code>label<code>的值</code><code>整个</code>label<code>标签，包含冒号</code><code>字段的id</code><code>字段的值</code><code>字段的</code>name<code>，考虑表单的前缀</code><code>字段的帮助文档</code><code>字段的错误</code><code>判断字段是否隐藏</code><code>表单类中</code>Field<code>的实例，可以使用它来访问</code>Field`属性，如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name.field.max_length</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单-API\"><a href=\"#表单-API\" class=\"headerlink\" title=\"表单 API\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/api.html\" target=\"_blank\" rel=\"noopener\">表单 API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure>\n<p>表单实例一但创建，数据不可更改</p>\n<h3 id=\"Form-clean\"><a href=\"#Form-clean\" class=\"headerlink\" title=\"Form.clean()\"></a><code>Form.clean()</code></h3><h3 id=\"Form-is-valid\"><a href=\"#Form-is-valid\" class=\"headerlink\" title=\"Form.is_valid()\"></a><code>Form.is_valid()</code></h3><h3 id=\"Form-errors\"><a href=\"#Form-errors\" class=\"headerlink\" title=\"Form.errors\"></a><code>Form.errors</code></h3><blockquote>\n<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;<span class=\"string\">'sender'</span>: [<span class=\"string\">'Enter a valid email address.'</span>], <span class=\"string\">'subject'</span>: [<span class=\"string\">'This field is required.'</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。</p>\n<h3 id=\"Form-errors-as-data\"><a href=\"#Form-errors-as-data\" class=\"headerlink\" title=\"Form.errors.as_data()\"></a><code>Form.errors.as_data()</code></h3><blockquote>\n<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>\n</blockquote>\n<h3 id=\"Form-errors-as-json-escape-html-False\"><a href=\"#Form-errors-as-json-escape-html-False\" class=\"headerlink\" title=\"Form.errors.as_json(escape_html=False)\"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>\n<p>返回JSON 序列化后的错误。</p>\n</blockquote>\n<h3 id=\"Form-add-error-field-error\"><a href=\"#Form-add-error-field-error\" class=\"headerlink\" title=\"Form.add_error(field, error)\"></a><code>Form.add_error(field, error)</code></h3><blockquote>\n<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>\n</blockquote>\n<h3 id=\"Form-has-error-field-code-None\"><a href=\"#Form-has-error-field-code-None\" class=\"headerlink\" title=\"Form.has_error(field, code=None)\"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>\n<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>\n</blockquote>\n<h3 id=\"Form-non-field-errors\"><a href=\"#Form-non-field-errors\" class=\"headerlink\" title=\"Form.non_field_errors()\"></a><code>Form.non_field_errors()</code></h3><blockquote>\n<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>\n</blockquote>\n<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Form-initial\"><a href=\"#Form-initial\" class=\"headerlink\" title=\"Form.initial\"></a><code>Form.initial</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(initial=&#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField(initial=<span class=\"string\">'class'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    url = forms.URLField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    comment = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = CommentForm(initial=&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'instance'</span>&#125;, auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(f)</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"name\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;input type=\"url\" name=\"url\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"comment\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-has-changed\"><a href=\"#Form-has-changed\" class=\"headerlink\" title=\"Form.has_changed()\"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.has_changed()</span><br></pre></td></tr></table></figure></p>\n<p>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。</p>\n<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<p>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.base_fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"class\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>\n</blockquote>\n<h3 id=\"Form-cleaned-data\"><a href=\"#Form-cleaned-data\" class=\"headerlink\" title=\"Form.cleaned_data\"></a><code>Form.cleaned_data</code></h3><h3 id=\"Form-as-p\"><a href=\"#Form-as-p\" class=\"headerlink\" title=\"Form.as_p\"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>\n<h3 id=\"Form-error-css-class-Form-required-css-class\"><a href=\"#Form-error-css-class-Form-required-css-class\" class=\"headerlink\" title=\"Form.error_css_class Form.required_css_class\"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>\n<h2 id=\"Form-auto-id\"><a href=\"#Form-auto-id\" class=\"headerlink\" title=\"Form.auto_id\"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>\n<blockquote>\n<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto_id 设置为’id_%s’。</p>\n</blockquote>\n<h3 id=\"Form-label-suffix\"><a href=\"#Form-label-suffix\" class=\"headerlink\" title=\"Form.label_suffix\"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>\n<h3 id=\"BoundField\"><a href=\"#BoundField\" class=\"headerlink\" title=\"BoundField\"></a><code>BoundField</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = ContactForm()</span><br><span class=\"line\"><span class=\"keyword\">for</span> boundfield <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">    print(boundfield)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">from</span>[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></table></figure>\n<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>\n<h3 id=\"Form-is-multipart\"><a href=\"#Form-is-multipart\" class=\"headerlink\" title=\"Form.is_multipart()\"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> form.is_multipart %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">else</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123; form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    age = forms.IntegerField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildForm</span><span class=\"params\">(ParentForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"keyword\">None</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ChildForm().fields.keys()</span><br><span class=\"line\"><span class=\"meta\">... </span>[<span class=\"string\">'age'</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-prefix\"><a href=\"#Form-prefix\" class=\"headerlink\" title=\"Form.prefix\"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>father = PersonForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(father.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"first_name\" id=\"id_first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"last_name\" id=\"id_last_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mother = PersonForm(prefix=<span class=\"string\">\"mother\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mother.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-first_name\" id=\"id_mother-first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-last_name\" id=\"id_mother-last_name\" /&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/fields.html\" target=\"_blank\" rel=\"noopener\">表单字段</a></h2><h3 id=\"Field-has-change\"><a href=\"#Field-has-change\" class=\"headerlink\" title=\"Field.has_change()\"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>\n<h3 id=\"内建字段\"><a href=\"#内建字段\" class=\"headerlink\" title=\"内建字段\"></a>内建字段</h3><h4 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>\n<h4 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>max_length<code>min_length`\n接收两个可选参数\n`max_length</code>min_length`</p>\n<h4 id=\"ChoiceField\"><a href=\"#ChoiceField\" class=\"headerlink\" title=\"ChoiceField\"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_choice<code>错误消息可能包含</code>%(value)s<code>，它将被选择的选项替换掉。\n接收一个额外的必选参数</code>choices`<br>是一个二元组组成的可迭代对象</p>\n<h4 id=\"TypeChoiceField\"><a href=\"#TypeChoiceField\" class=\"headerlink\" title=\"TypeChoiceField\"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>接收额外的参数</code>choices<code>是一个二元组组成的可迭代对象</code>coerce<code>接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值</code>empty_value`<br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>\n<h4 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datateim.date`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d&apos;,      # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,       # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]       # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<p>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%b %d %Y&apos;,      # &apos;Oct 25 2006&apos;</span><br><span class=\"line\">&apos;%b %d, %Y&apos;,      # &apos;Oct 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %b %Y&apos;,       # &apos;25 Oct 2006&apos;</span><br><span class=\"line\">&apos;%d %b, %Y&apos;,      # &apos;25 Oct, 2006&apos;</span><br><span class=\"line\">&apos;%B %d %Y&apos;,       # &apos;October 25 2006&apos;</span><br><span class=\"line\">&apos;%B %d, %Y&apos;,      # &apos;October 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %B %Y&apos;,       # &apos;25 October 2006&apos;</span><br><span class=\"line\">&apos;%d %B, %Y&apos;]      # &apos;25 October, 2006&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datetime.datetime`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d %H:%M:%S&apos;,    # &apos;2006-10-25 14:30:59&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d %H:%M&apos;,        # &apos;2006-10-25 14:30&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d&apos;,              # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M:%S&apos;,     # &apos;10/25/2006 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M&apos;,        # &apos;10/25/2006 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,              # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M:%S&apos;,     # &apos;10/25/06 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M&apos;,        # &apos;10/25/06 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]              # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_digits<code>max_decimal_places</code>max_whole_digits<code></code>max_value<code>和</code>min_value<code>错误信息可能包含</code>%(limit_value)s<code>，它们将被真正的限制值替换。类似地，</code>max_digits<code>、</code>max_decimal_places<code>和</code>max_whole_digits<code>错误消息可能包含</code>%(max)s<code>接收四个可选参数</code>max_value<code></code>min_value<code></code>max_digits<code>最大位数</code>decimal_places`最大小数位</p>\n<h4 id=\"DurationField\"><a href=\"#DurationField\" class=\"headerlink\" title=\"DurationField\"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid`</p>\n<h4 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>max_length<code></code>min_length`</p>\n<h4 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code>max_length`\n接收两个可选参数\n`max_length</code>allow_empty_file<code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功</code>max_length<code>错误信息表示文件名的长度。在错误信息中，</code>%(max)d<code>将替换为文件的最大长度，%</code>(length)d` 将替换为当前文件名的长度</p>\n<h4 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>这个字段允许从一个特定的目录选择文件\n接收五个参数</code>path<code>必须\n想要列出的目录的绝对路径</code>recursive<code>可选\n布尔值，默认为</code>False<code>，是否需要递归这个目录</code>match<code>可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项</code>allow_files<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的文件，它和</code>allow_folders<code>必须有一个为</code>True<code></code>allow_folders<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的目录，和</code>allow_files<code>必须有一个为</code>True`</p>\n<h4 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code></code>invalid_image`</p>\n<h4 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"IPAddressField\"><a href=\"#IPAddressField\" class=\"headerlink\" title=\"IPAddressField\"></a><code>IPAddressField</code></h4><p>1.7弃用</p>\n<h4 id=\"GenericIPAddressField\"><a href=\"#GenericIPAddressField\" class=\"headerlink\" title=\"GenericIPAddressField\"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>protocol<code></code>unpack_ipv4`</p>\n<h4 id=\"MultipleChoiceField\"><a href=\"#MultipleChoiceField\" class=\"headerlink\" title=\"MultipleChoiceField\"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_list`</p>\n<h4 id=\"TypedMultipleChoiceField\"><a href=\"#TypedMultipleChoiceField\" class=\"headerlink\" title=\"TypedMultipleChoiceField\"></a><code>TypedMultipleChoiceField</code></h4><h4 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h4><h4 id=\"RegexField\"><a href=\"#RegexField\" class=\"headerlink\" title=\"RegexField\"></a><code>RegexField</code></h4><h4 id=\"SlugField\"><a href=\"#SlugField\" class=\"headerlink\" title=\"SlugField\"></a><code>SlugField</code></h4><h4 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h4><h4 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h4><h4 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>\n<h4 id=\"ComboField\"><a href=\"#ComboField\" class=\"headerlink\" title=\"ComboField\"></a><code>ComboField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ComboField</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class=\"number\">20</span>), EmailField()])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'test@example.com'</span>)</span><br><span class=\"line\"><span class=\"string\">'test@example.com'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'longemailaddress@example.com'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">ValidationError: [<span class=\"string\">'Ensure this value has at most 20 characters (it has 28).'</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"MultiValueField\"><a href=\"#MultiValueField\" class=\"headerlink\" title=\"MultiValueField\"></a><code>MultiValueField</code></h4><h4 id=\"SplitDateTimeField\"><a href=\"#SplitDateTimeField\" class=\"headerlink\" title=\"SplitDateTimeField\"></a><code>SplitDateTimeField</code></h4><h4 id=\"ModelChoiceField\"><a href=\"#ModelChoiceField\" class=\"headerlink\" title=\"ModelChoiceField\"></a><code>ModelChoiceField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A custom empty label</span></span><br><span class=\"line\">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"string\">\"(Nothing)\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># No empty label</span></span><br><span class=\"line\">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModelMultipleChoiceField\"><a href=\"#ModelMultipleChoiceField\" class=\"headerlink\" title=\"ModelMultipleChoiceField\"></a><code>ModelMultipleChoiceField</code></h4><h2 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/widgets.html\" target=\"_blank\" rel=\"noopener\">Widgets</a></h2><p>处理文本输入的Widget</p>\n<ul>\n<li><code>TextInput</code></li>\n<li><code>NumberInput</code></li>\n<li><code>EmailInput</code></li>\n<li><code>URLInput</code></li>\n<li><code>PasswordInput</code></li>\n<li><code>HiddenInput</code></li>\n<li><code>DateInput</code></li>\n<li><code>DateTimeInput</code></li>\n<li><code>TimeInput</code></li>\n<li><code>Textarea</code></li>\n</ul>\n<p>选择和复选框Widget</p>\n<ul>\n<li><code>CheckboxInput</code></li>\n<li><code>Select</code></li>\n<li><code>NullBooleanSelect</code></li>\n<li><code>SelectMultiple</code></li>\n<li><code>RadioSelect</code></li>\n<li><code>CheckboxSelectMultiple</code></li>\n</ul>\n<p>文件上传<code>Widget</code></p>\n<ul>\n<li><code>FileInput</code></li>\n<li><code>ClearableFileInput</code></li>\n</ul>\n<p>复合Widget</p>\n<ul>\n<li><code>MultipleHiddenInput</code></li>\n<li><code>SplitDateTimeWidget</code></li>\n<li><code>SplitHiddenDateTimeWidget</code></li>\n<li><code>SelectDateWidget</code></li>\n</ul>\n<h2 id=\"从模型创建表单\"><a href=\"#从模型创建表单\" class=\"headerlink\" title=\"从模型创建表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/modelforms.html\" target=\"_blank\" rel=\"noopener\">从模型创建表单</a></h2><p>下面两种方法效果相同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Author(title=<span class=\"string\">'Mr'</span>)</span><br><span class=\"line\">form = PartialAuthorForm(request.POST, instance=author)</span><br><span class=\"line\">form.save()</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">form = PartialAuthorForm(request.POST)</span><br><span class=\"line\">author = form.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">author.title = <span class=\"string\">'Mr'</span></span><br><span class=\"line\">author.save()</span><br></pre></td></tr></table></figure></p>\n<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>\n<p>例如，如果Article 模型像下面这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">200</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br></pre></td></tr></table></figure></p>\n<p>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\">    headline = MyFormField(max_length=<span class=\"number\">200</span>, required=<span class=\"keyword\">False</span>,</span><br><span class=\"line\">                           help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Article</span><br><span class=\"line\">        fields = [<span class=\"string\">'headline'</span>, <span class=\"string\">'content'</span>]</span><br></pre></td></tr></table></figure>\n<p>创建简单的表单或表单集可以使用<code>modelform_factory()`</code>modelformset_factory()`方法来新建。</p>\n<p>启用字段的本地化功能¶</p>\n<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        model = Author</span><br><span class=\"line\"><span class=\"meta\">... </span>        localized_fields = (<span class=\"string\">'birth_date'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>如果localized_fields 设置为<code>&#39;__all__&#39;</code>这个特殊的值，所有的字段都将本地化。</p>\n<p>提供的初始值会覆盖从实例取得的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article.headline</span><br><span class=\"line\"><span class=\"string\">'My headline'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form = ArticleForm(initial=&#123;<span class=\"string\">'headline'</span>: <span class=\"string\">'Initial headline'</span>&#125;, instance=article)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form[<span class=\"string\">'headline'</span>].value()</span><br><span class=\"line\"><span class=\"string\">'Initial headline'</span></span><br></pre></td></tr></table></figure></p>\n<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelform_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Book</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"title\"</span>))</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> Textarea</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</span><br><span class=\"line\"><span class=\"meta\">... </span>                         widgets=&#123;<span class=\"string\">\"title\"</span>: Textarea()&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class=\"string\">\"birth_date\"</span>,))</span><br></pre></td></tr></table></figure>\n<p>表单集<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'title'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset`</code>save()`之后，会有新的属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.BaseModelFormSet.changed_objects</span><br><span class=\"line\">models.BaseModelFormSet.deleted_objects</span><br><span class=\"line\">models.BaseModelFormSet.new_objects</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>为最大的表单数，如果初始<code>queryset</code>长度比<code>max_num</code>，则按照<code>queryset</code>来，<code>extra</code>是可以额外添加的空表单的个数，但<code>extra</code>和<code>queryset</code>长度相加如果大于<code>max_num</code>，则<code>extra</code>和实例设置可能表现不一样，如<code>queryset</code>长度为2，<code>max_num</code>为4，<code>extra</code>不管是2还是5，最终表现出来都是2。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>,), max_num=<span class=\"number\">4</span>, extra=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>默认只影响显示，不影响验证，如果需要影响验证添加<code>validate_max=True</code>即可</p>\n<h2 id=\"表单素材-Media-类\"><a href=\"#表单素材-Media-类\" class=\"headerlink\" title=\"表单素材 ( Media 类)\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/media.html\" target=\"_blank\" rel=\"noopener\">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\">        css = &#123;</span><br><span class=\"line\">            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用<code>CalendarWidget</code>会自动引入下列资源<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。</p>\n<p>动态定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_media</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> forms.Media(css=&#123;<span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)&#125;,</span><br><span class=\"line\">                           js=(<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>))</span><br><span class=\"line\">    media = property(_media)</span><br></pre></td></tr></table></figure></p>\n<p>两个<code>Media</code>实例可以相加<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'whizbang.js'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w1 = CalendarWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w2 = OtherWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(w1.media + w2.media)</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单<code>Media</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    date = DateField(widget=CalendarWidget)</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = CharField(max_length=<span class=\"number\">40</span>, widget=OtherWidget)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'layout.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.media</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/layout.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单集\"><a href=\"#表单集\" class=\"headerlink\" title=\"表单集\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/formsets.html\" target=\"_blank\" rel=\"noopener\">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>\n<p>其中<code>can_order`</code>can_delete`默认以以下形式展现</p>\n<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">... </span>    obj.delete()</span><br></pre></td></tr></table></figure></p>\n<p>如果要兼容1.6或更早版，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># For Django 1.7+</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>        obj.delete()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">except</span> AssertionError:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># Django 1.6 and earlier already deletes the objects, trying to</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># delete them a second time raises an AssertionError.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>在表单集里添加额外的字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> BaseFormSet</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseArticleFormSet</span><span class=\"params\">(BaseFormSet)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_fields</span><span class=\"params\">(self, form, index)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        super(BaseArticleFormSet, self).add_fields(form, index)</span><br><span class=\"line\"><span class=\"meta\">... </span>        form.fields[<span class=\"string\">\"my_field\"</span>] = forms.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>formset = ArticleFormSet()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> form <span class=\"keyword\">in</span> formset:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(form.as_table())</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-title\"&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-pub_date\"&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-my_field\"&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-my_field\" id=\"id_form-0-my_field\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单集对应的模版写法<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-variable\">&#123;&#123; formset &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也可以手动渲染，不能缺少<code></code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;&#123; form &#125;&#125;</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">    &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果是手动渲染，<code>can_order`</code>can_delete`需要手动添加<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.title &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.pub_date &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% if formset.can_delete</span></span><br><span class=\"line\"><span class=\"template-tag\">                &lt;li&gt;&#123;&#123; form.DELETE &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% endif</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">    &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm, BookForm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manage_articles</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    ArticleFormSet = formset_factory(ArticleForm)</span><br><span class=\"line\">    BookFormSet = formset_factory(BookForm)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> article_formset.is_valid() <span class=\"keyword\">and</span> book_formset.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># do something with the cleaned_data on the formsets.</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'manage_articles.html'</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'article_formset'</span>: article_formset,</span><br><span class=\"line\">        <span class=\"string\">'book_formset'</span>: book_formset,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单验证和字段验证\"><a href=\"#表单验证和字段验证\" class=\"headerlink\" title=\"表单验证和字段验证\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/validation.html\" target=\"_blank\" rel=\"noopener\">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError(</span><br><span class=\"line\">    _(<span class=\"string\">'Invalid value: %(value)s'</span>),</span><br><span class=\"line\">    code=<span class=\"string\">'invalid'</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">'value'</span>: <span class=\"string\">'42'</span>&#125;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>招聘多个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 1'</span>), code=<span class=\"string\">'error1'</span>),</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 2'</span>), code=<span class=\"string\">'error2'</span>),</span><br><span class=\"line\">])</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    _(<span class=\"string\">'Error 1'</span>),</span><br><span class=\"line\">    _(<span class=\"string\">'Error 2'</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></p>\n<p>创建一个新的表单字段添加默认验证<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiEmailField</span><span class=\"params\">(forms.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></span><br><span class=\"line\">        super(MultiEmailField, self).validate(value)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">            validate_email(email)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的设置\"><a href=\"#Django-的设置\" class=\"headerlink\" title=\"Django 的设置\"></a><a href=\"http://python.usyiyi.cn/django/topics/settings.html\" target=\"_blank\" rel=\"noopener\">Django 的设置</a></h2><p>django-admin 工具</p>\n<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>\n<p>例如（Unix Bash shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>例如（Windows shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>使用–settings 命令行参数可以手工指定设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin runserver --settings=mysite.settings</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以查询设置与默认设置的不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py diffsettings</span><br></pre></td></tr></table></figure></p>\n<p>在django app中使用设置应使用以下导入方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure></p>\n<p>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.settings <span class=\"keyword\">import</span> DEBUG  <span class=\"comment\"># This won't work.</span></span><br></pre></td></tr></table></figure></p>\n<p>不要在应用运行时改变设置</p>\n<h2 id=\"完整列表设置-Settings\"><a href=\"#完整列表设置-Settings\" class=\"headerlink\" title=\"完整列表设置(Settings)\"></a><a href=\"http://python.usyiyi.cn/django/ref/settings.html\" target=\"_blank\" rel=\"noopener\">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>\n<p><code>DATABASES[&#39;CONN_MAX_AGE&#39;]</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/applications.html\" target=\"_blank\" rel=\"noopener\">应用</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/apps.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> AppConfig</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RockNRollConfig</span><span class=\"params\">(AppConfig)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'rock_n_roll'</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">\"Rock ’n’ roll\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/__init__.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\">default_app_config = <span class=\"string\">'rock_n_roll.apps.RockNRollConfig'</span></span><br></pre></td></tr></table></figure>\n<p><code>AppConfig</code>可配置的属性</p>\n<ul>\n<li><code>AppConfig.name</code></li>\n<li><code>AppConfig.label</code></li>\n<li><code>AppConfig.verbose_name</code></li>\n<li><code>Appconfig.path</code></li>\n</ul>\n<p><code>AppConfig</code>只读属性</p>\n<ul>\n<li><code>AppConfig.module</code></li>\n<li><code>Appconfig.models_module</code></li>\n</ul>\n<p><code>AppConfig</code>方法</p>\n<ul>\n<li><code>AppConfig.get_models()</code></li>\n<li><code>AppConfig..get_model(model_name)</code></li>\n<li><code>AppConfigevaluate.ready()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> apps</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>apps.get_app_config(<span class=\"string\">'admin'</span>).verbose_name</span><br><span class=\"line\"><span class=\"string\">'Admin'</span></span><br></pre></td></tr></table></figure>\n<p><code>APP</code></p>\n<ul>\n<li><code>apps.ready</code></li>\n<li><code>apps.get_app_configs()</code></li>\n<li><code>apps.get_app_config(app_label)</code></li>\n<li><code>apps.is_installed(app_name)</code></li>\n<li><code>apps.get_model(app_label, model_name)</code></li>\n</ul>\n<h2 id=\"Django异常\"><a href=\"#Django异常\" class=\"headerlink\" title=\"Django异常\"></a><a href=\"python.usyiyi.cn/django_182/ref/exceptions.html\">Django异常</a></h2><h3 id=\"核心异常\"><a href=\"#核心异常\" class=\"headerlink\" title=\"核心异常\"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>\n<ul>\n<li><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ObjectDoesNotExist</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    e = Entry.objects.get(id=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ObjectDoesNotExist:</span><br><span class=\"line\">    print(<span class=\"string\">\"Either the entry or blog doesn't exist.\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>\n</li>\n<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>\n</li>\n<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>\n<ul>\n<li><code>DisallowedHost</code></li>\n<li><code>DisallowedModelAdminLookup</code></li>\n<li><code>DisallowedModelAdminToField</code></li>\n<li><code>DisallowedRedirect</code></li>\n<li><code>InvalidSessionKey</code></li>\n<li><code>SuspiciousFileOperation</code></li>\n<li><code>SuspiciousMultipartForm</code></li>\n<li><code>SuspiciousSession</code></li>\n</ul>\n</li>\n<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>\n</li>\n<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>\n</li>\n<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>\n</li>\n<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>\n</li>\n<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>\n<ul>\n<li>模型中的字段与抽象基类中的字段重名</li>\n<li>排序造成了一个死循环</li>\n<li>关键词不能由过滤器参数解析</li>\n<li>字段不能由查询参数中的关键词决定</li>\n<li>连接（join）不能在指定对象上使用</li>\n<li>字段名称不可用</li>\n<li><p>查询包含了无效的<code>order_by</code>参数</p>\n</li>\n<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>\n</li>\n</ul>\n</li>\n<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>\n</li>\n</ul>\n<h3 id=\"URL解析器异常\"><a href=\"#URL解析器异常\" class=\"headerlink\" title=\"URL解析器异常\"></a>URL解析器异常</h3><ul>\n<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>\n</li>\n<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>\n</li>\n</ul>\n<h3 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h3><p>数据库异常由django.db导入</p>\n<ul>\n<li><code>Error</code></li>\n<li><code>InterfaceError</code></li>\n<li><code>DatabaseError</code></li>\n<li><code>DataError</code></li>\n<li><code>OperationalError</code></li>\n<li><code>IntegrityError</code></li>\n<li><code>InternalError</code></li>\n<li><code>ProgrammingError</code></li>\n<li><code>NotSupportedError</code></li>\n</ul>\n<h3 id=\"HTTP异常\"><a href=\"#HTTP异常\" class=\"headerlink\" title=\"HTTP异常\"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>\n<ul>\n<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>\n</ul>\n<h3 id=\"事务异常\"><a href=\"#事务异常\" class=\"headerlink\" title=\"事务异常\"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>\n<h3 id=\"测试框架异常\"><a href=\"#测试框架异常\" class=\"headerlink\" title=\"测试框架异常\"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>\n<ul>\n<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>\n</ul>\n<h3 id=\"Python异常\"><a href=\"#Python异常\" class=\"headerlink\" title=\"Python异常\"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>\n<h2 id=\"django-admin-and-manage-py\"><a href=\"#django-admin-and-manage-py\" class=\"headerlink\" title=\"django-admin and manage.py\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/django-admin.html\" target=\"_blank\" rel=\"noopener\">django-admin and manage.py</a></h2><ul>\n<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>\n</li>\n<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>\n</li>\n<li><code>--noinput</code></li>\n<li><code>--database</code></li>\n<li><code>--no-initial-data</code></li>\n</ul>\n<ul>\n<li><code>inspectdb</code><br>根据数据库结构生成model<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>loaddata</code><br>导入fixture数据</p>\n</li>\n<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runserver <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自定义的命令\"><a href=\"#添加自定义的命令\" class=\"headerlink\" title=\" 添加自定义的命令\"></a><a href=\"http://python.usyiyi.cn/django_182/howto/custom-management-commands.html\" target=\"_blank\" rel=\"noopener\"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.management.base <span class=\"keyword\">import</span> BaseCommand, CommandError</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Poll</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span><span class=\"params\">(BaseCommand)</span>:</span></span><br><span class=\"line\">    help = <span class=\"string\">'Closes the specified poll for voting'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_arguments</span><span class=\"params\">(self, parser)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 命令行接收一个或多个poll_id值</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        parser.add_argument(<span class=\"string\">'poll_id'</span>, nargs=<span class=\"string\">'+'</span>, type=int)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self, *args, **options)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> poll_id <span class=\"keyword\">in</span> options[<span class=\"string\">'poll_id'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                poll = Poll.objects.get(pk=poll_id)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Poll.DoesNotExist:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> CommandError(<span class=\"string\">'Poll \"%s\" does not exist'</span> % poll_id)</span><br><span class=\"line\"> </span><br><span class=\"line\">            poll.opened = <span class=\"keyword\">False</span></span><br><span class=\"line\">            poll.save()</span><br><span class=\"line\"> </span><br><span class=\"line\">            self.stdout.write(<span class=\"string\">'Successfully closed poll \"%s\"'</span> % poll_id)</span><br></pre></td></tr></table></figure>\n<p><img alt=\"django-commands\" data-src=\"/media/django-commands.png\"></p>\n","site":{"data":{}},"excerpt":"<p><br><br>","more":"</p>\n<!--more-->\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/models.html\" target=\"_blank\" rel=\"noopener\">模型</a></h2><p><a href=\"http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api\" target=\"_blank\" rel=\"noopener\">Model _meta API</a></p>\n<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>\n<p>模型继承</p>\n<ol>\n<li>抽象基类<ul>\n<li>默认继承元类</li>\n</ul>\n</li>\n<li>多表继承<ul>\n<li>一般情况不继承元类</li>\n</ul>\n</li>\n<li>代理模型</li>\n</ol>\n<p>多重继承主要用于<code>mix-in</code>类</p>\n<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>\n<h2 id=\"模型字段参考\"><a href=\"#模型字段参考\" class=\"headerlink\" title=\"模型字段参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships\" target=\"_blank\" rel=\"noopener\">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>\n<p>关联自己使用<code>self</code></p>\n<p><code>related_name</code> <code>relate_query_name</code></p>\n<p>外键关联到特定字段<br><code>to_field</code></p>\n<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>\n<p>外键关联对象删除行为<br><code>on_delete</code></p>\n<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>\n<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>\n<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>\n<p>##<a href=\"http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships\" target=\"_blank\" rel=\"noopener\">执行查询</a></p>\n<p><a href=\"http://python.usyiyi.cn/django/howto/custom-lookups.html\" target=\"_blank\" rel=\"noopener\">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>\n<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>\n<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.headline <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Evaluate the query set.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.pub_date <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Re-use the cache from the evaluation.</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database again</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; queryset = Entry.objects.all()</span><br><span class=\"line\">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br></pre></td></tr></table></figure>\n<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>\n<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>\n<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>\n<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>\n<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>\n<p>一对多关联对象访问会缓存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Hits the database to retrieve the associated Blog.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Doesn't hit the database; uses cached version.</span></span><br></pre></td></tr></table></figure></p>\n<p>自定义反向管理器1.7+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#...</span></span><br><span class=\"line\">    objects = models.Manager()  <span class=\"comment\"># Default Manager</span></span><br><span class=\"line\">    entries = EntryManager()    <span class=\"comment\"># Custom Manager</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set(manager=<span class=\"string\">'entries'</span>).all()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"查询集API-参考\"><a href=\"#查询集API-参考\" class=\"headerlink\" title=\"查询集API 参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/querysets.html\" target=\"_blank\" rel=\"noopener\">查询集API 参考</a></h2><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/aggregation.html\" target=\"_blank\" rel=\"noopener\">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>\n<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>\n<p>在查作者列表时要查每个作者有几篇博文<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"comment\"># authors[0]作者的博文数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].blog__count</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(number_of_blog=Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].number_of_blog</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>算出所有作者的年龄总合（不需要其它数据）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ageAuthor.objects.all().aggregate(Sum(<span class=\"string\">'age'</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">'age__sum'</span>: <span class=\"number\">26</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象</p>\n<p>对注解进行过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出作者数大于1的书本</span></span><br><span class=\"line\"><span class=\"comment\"># 只有一条sql</span></span><br><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).filter(num_authors__gt=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但顺序不一样，结果也不同，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publisher.objects.annotate(num_books=Count(<span class=\"string\">'book'</span>)).filter(book__rating__gt=<span class=\"number\">3.0</span>)</span><br><span class=\"line\">Publisher.objects.filter(book__rating__gt=<span class=\"number\">3.0</span>).annotate(num_books=Count(<span class=\"string\">'book'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>对注解项进行排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).order_by(<span class=\"string\">'num_authors'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上</p>\n<blockquote>\n<p>与默认排序交换或order_by()¶</p>\n</blockquote>\n<blockquote>\n<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>\n</blockquote>\n<blockquote>\n<p>通过例子中的方法，假设有一个这样的模型：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    data = models.IntegerField() </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">\"name\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Warning: not quite correct!</span></span><br><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>)).order_by()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>\n</blockquote>\n<blockquote>\n<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>\n</blockquote>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><p><a href=\"http://python.usyiyi.cn/django/intro/tutorial06.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static user_stylesheet %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static 'polls/style.css' %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% get_static_prefix %&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; STATIC_PREFIX &#125;&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% static \"images/hi.jpg\" as myphoto %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; myphoto &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>还有<code>get_media_prefix</code></p>\n<h2 id=\"模型实例参考\"><a href=\"#模型实例参考\" class=\"headerlink\" title=\"模型实例参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model\" target=\"_blank\" rel=\"noopener\">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>\n<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>\n<p>验证对象</p>\n<blockquote>\n<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</fieldname></p>\n</blockquote>\n<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>\n<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>\n<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>\n<blockquote>\n<p>指定要保存的字段</p>\n</blockquote>\n<blockquote>\n<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product.name = <span class=\"string\">'Name changed again'</span></span><br><span class=\"line\">product.save(update_fields=[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>\n</blockquote>\n<blockquote>\n<p>指定<code>update_fields</code>将强制使用更新操作。</p>\n</blockquote>\n<blockquote>\n<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>\n</blockquote>\n<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code></code>keep_parents=True<code>可以保留上级数据，默认为</code>False`<br>返回值为删除数据的条数</p>\n<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.get_next_by_FOO(**kwargs)¶ </span><br><span class=\"line\">Model.get_previous_by_FOO(**kwargs)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"管理器\"><a href=\"#管理器\" class=\"headerlink\" title=\"管理器\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html\" target=\"_blank\" rel=\"noopener\">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>\n<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultManager</span><span class=\"params\">(models.Manager)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">post = Post.objects.get(pk=<span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 调用DefaultManager管理器</span></span><br><span class=\"line\">author.post_set.all()</span><br><span class=\"line\"><span class=\"comment\"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></span><br><span class=\"line\">post.author</span><br></pre></td></tr></table></figure></p>\n<p><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager\" target=\"_blank\" rel=\"noopener\">从Manager中调用自定义的QuerySet</a></p>\n<h2 id=\"进行原始的SQL查询\"><a href=\"#进行原始的SQL查询\" class=\"headerlink\" title=\"进行原始的SQL查询\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/sql.html\" target=\"_blank\" rel=\"noopener\">进行原始的SQL查询</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manager.raw(raw_query, params=<span class=\"keyword\">None</span>, translations=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>\n</blockquote>\n<h2 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/transactions.html\" target=\"_blank\" rel=\"noopener\">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>\n<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>\n<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@transaction.atomic</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">    do_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes in autocommit mode (Django's default).</span></span><br><span class=\"line\">    do_stuff()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</span><br><span class=\"line\">        <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">        do_more_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>避免在 atomic里捕获异常!</p>\n<h2 id=\"查询表达式\"><a href=\"#查询表达式\" class=\"headerlink\" title=\"查询表达式\"></a>查询表达式</h2><p>使用数据库的方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Func, F </span><br><span class=\"line\">queryset.annotate(field_lower=Func(F(<span class=\"string\">'field'</span>), function=<span class=\"string\">'LOWER'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lower</span><span class=\"params\">(Func)</span>:</span></span><br><span class=\"line\">    function = <span class=\"string\">'LOWER'</span> </span><br><span class=\"line\">queryset.annotate(field_lower=Lower(F(<span class=\"string\">'field'</span>)))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/conditional-expressions.html\" target=\"_blank\" rel=\"noopener\">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>\n<h2 id=\"数据库函数\"><a href=\"#数据库函数\" class=\"headerlink\" title=\"数据库函数\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/database-functions.html\" target=\"_blank\" rel=\"noopener\">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>\n<h2 id=\"将遗留数据库整合到Django\"><a href=\"#将遗留数据库整合到Django\" class=\"headerlink\" title=\"将遗留数据库整合到Django\"></a><a href=\"http://python.usyiyi.cn/django/howto/legacy-databases.html\" target=\"_blank\" rel=\"noopener\">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为模型提供初始数据\"><a href=\"#为模型提供初始数据\" class=\"headerlink\" title=\"为模型提供初始数据\"></a><a href=\"http://python.usyiyi.cn/django/howto/initial-data.html\" target=\"_blank\" rel=\"noopener\">为模型提供初始数据</a></h2><p>使用fixtures<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 1,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;Lennon&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 2,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;Paul&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;McCartney&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>导入数据命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py loaddata &lt;fixturename&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据库访问优化\"><a href=\"#数据库访问优化\" class=\"headerlink\" title=\"数据库访问优化\"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>\n<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>\n<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>\n<p>用唯一的或被索引的列来检索独立对象</p>\n<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>\n<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>\n<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>\n<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>\n<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>\n<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>\n<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>\n<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>\n<p>直接使用外键的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry.blog_id</span><br><span class=\"line\"><span class=\"comment\"># 而不是</span></span><br><span class=\"line\">entry.blog.id</span><br></pre></td></tr></table></figure></p>\n<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>\n<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_band.members.add(me, my_friend) </span><br><span class=\"line\"><span class=\"comment\">#更优于 </span></span><br><span class=\"line\">my_band.members.add(me)</span><br><span class=\"line\">my_band.members.add(my_friend)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"URL调度器\"><a href=\"#URL调度器\" class=\"headerlink\" title=\"URL调度器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html\" target=\"_blank\" rel=\"noopener\">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>\n<p>在根url上获取的参数不影响参数传递<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># In settings/urls/main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;username&gt;\\w+)/blog/'</span>, include(<span class=\"string\">'foo.urls.blog'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># In foo/urls/blog.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.blog.index),</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.blog.archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。</p>\n<p>可嵌套<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'blog/(page-(\\d+)/)?$'</span>, blog_articles),                  <span class=\"comment\"># bad</span></span><br><span class=\"line\">    url(<span class=\"string\">r'comments/(?:page-(?P&lt;page_number&gt;\\d+)/)?$'</span>, comments),  <span class=\"comment\"># good</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>传递额外的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive, &#123;<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值</p>\n<p>传递额外的参数给<code>include()</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>), &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>效果等同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls\" target=\"_blank\" rel=\"noopener\">反查带命名空间的URL</a></p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/views.html\" target=\"_blank\" rel=\"noopener\">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>\n<ul>\n<li><code>HttpResponseRedirect</code> 临时重定向，302</li>\n<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>\n<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>\n<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>\n<li><code>HttpResponseNotFound</code> 页面没找到，404</li>\n<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>\n<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>\n<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>\n<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>\n<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>\n</ul>\n<p>重写错误视图（在url中）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler404 = &apos;mysite.views.my_custom_page_not_found_view&apos;</span><br><span class=\"line\">handler500 = &apos;mysite.views.my_custom_error_view&apos; </span><br><span class=\"line\">handler403 = &apos;mysite.views.my_custom_permission_denied_view&apos;</span><br><span class=\"line\">handler400 = &apos;mysite.views.my_custom_bad_request_view&apos;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的快捷函数\"><a href=\"#Django-的快捷函数\" class=\"headerlink\" title=\"Django 的快捷函数\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/shortcuts.html\" target=\"_blank\" rel=\"noopener\">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>\n<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>\n<blockquote>\n<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>\n<pre><code>一个模型：将调用模型的get_absolute_url() 函数\n一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n一个绝对的或相对的URL，将原样作为重定向的位置。\n</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>\n</blockquote>\n<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/decorators.html\" target=\"_blank\" rel=\"noopener\">视图装饰器</a></h2><p><a href=\"http://python.usyiyi.cn/django/topics/conditional-view-processing.html\" target=\"_blank\" rel=\"noopener\">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@condition(etag_func=None, last_modified_func=None)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@last_modified(last_modified_func)</span></span><br></pre></td></tr></table></figure>\n<p>根据最后修改时间来决定是否运行视图，可减少流量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@etag(etag_func)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用</p>\n<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>\n<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>\n<p><code>never_cache</code></p>\n<h2 id=\"Request-对象和Response-对象\"><a href=\"#Request-对象和Response-对象\" class=\"headerlink\" title=\"Request 对象和Response 对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\" target=\"_blank\" rel=\"noopener\">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，<form>带有<code>enctype=&quot;multipart/form-data&quot;</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&#39;&#39;, max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpRequest.read(size=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">HttpRequest.readline()</span><br><span class=\"line\">HttpRequest.readlines()</span><br><span class=\"line\">HttpRequest.xreadlines()</span><br><span class=\"line\">HttpRequest.__iter__()</span><br></pre></td></tr></table></figure></form></p>\n<p>这几个方法实现类文件的接口用于读取HttpRequest· 实例</p>\n<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>\n<h2 id=\"TemplateResponse-和SimpleTemplateResponse\"><a href=\"#TemplateResponse-和SimpleTemplateResponse\" class=\"headerlink\" title=\"TemplateResponse 和SimpleTemplateResponse\"></a><a href=\"http://python.usyiyi.cn/django/ref/template-response.html\" target=\"_blank\" rel=\"noopener\">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>\n<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template.response <span class=\"keyword\">import</span> TemplateResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blog_index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TemplateResponse(request, <span class=\"string\">'entry_list.html'</span>, &#123;<span class=\"string\">'entries'</span>: Entry.objects.all()&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/file-uploads.html\" target=\"_blank\" rel=\"noopener\">文件上传</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_uploaded_file</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'some/file/name.txt'</span>, <span class=\"string\">'wb+'</span>) <span class=\"keyword\">as</span> destination:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> f.chunks():</span><br><span class=\"line\">            destination.write(chunk)</span><br></pre></td></tr></table></figure>\n<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>\n<p>上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;django.core.files.uploadhandler.MemoryFileUploadHandler&quot;,</span><br><span class=\"line\">&quot;django.core.files.uploadhandler.TemporaryFileUploadHandler&quot;,)</span><br></pre></td></tr></table></figure></p>\n<p>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。</p>\n<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>\n<p>更改上传处理器的行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFAULT_FILE_STORAGE</span><br><span class=\"line\">FILE_CHARSET</span><br><span class=\"line\">FILE_UPLOAD_HANDLERS</span><br><span class=\"line\">FILE_UPLOAD_MAX_MEMORY_SIZE</span><br><span class=\"line\">FILE_UPLOAD_PERMISSIONS</span><br><span class=\"line\">FILE_UPLOAD_TEMP_DIR</span><br><span class=\"line\">MEDIA_ROOT</span><br><span class=\"line\">MEDIA_URL</span><br></pre></td></tr></table></figure></p>\n<p>在运行中更改上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 注意</p>\n</blockquote>\n<blockquote>\n<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>\n</blockquote>\n<blockquote>\n<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>\n</blockquote>\n<blockquote>\n<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def upload_file_view(request):</span><br><span class=\"line\">    request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br><span class=\"line\">    return _upload_file_view(request) </span><br><span class=\"line\">@csrf_protect</span><br><span class=\"line\">def _upload_file_view(request):</span><br><span class=\"line\">    ... # Process request</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"File对象\"><a href=\"#File对象\" class=\"headerlink\" title=\"File对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/file.html\" target=\"_blank\" rel=\"noopener\">File对象</a></h2><p><code>File</code>类<br><code>ContentFile</code>类<br><code>ImageFile</code>类 比<code>File</code>多了<code>width</code>和<code>height</code>属性<br>附加到对象的文件有额外的方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.save(name, content[, save=True])</span><br></pre></td></tr></table></figure></p>\n<p>提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。<br>测试出来直接<code>car.save()</code>也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串<br>如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\">``` </span><br><span class=\"line\">等价于：</span><br><span class=\"line\">```python</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>从模型实例中移除文件，并且删除内部文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.delete([save=True])</span><br></pre></td></tr></table></figure></p>\n<p>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件</p>\n<h2 id=\"文件储存API\"><a href=\"#文件储存API\" class=\"headerlink\" title=\"文件储存API\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/storage.html\" target=\"_blank\" rel=\"noopener\">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>\n<h2 id=\"管理文件\"><a href=\"#管理文件\" class=\"headerlink\" title=\"管理文件\"></a><a href=\"http://python.usyiyi.cn/django/topics/files.html\" target=\"_blank\" rel=\"noopener\">管理文件</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">    price = models.DecimalField(max_digits=<span class=\"number\">5</span>, decimal_places=<span class=\"number\">2</span>)</span><br><span class=\"line\">    photo = models.ImageField(upload_to=<span class=\"string\">'cars'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>\n<p><em>实际测试有出入</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方示例</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'http://media.example.com/cars/chevy.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际测试结果</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'/upload/20151230171832_0.jpg'</span></span><br></pre></td></tr></table></figure></p>\n<p>更改一个文件的存储位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>initial_path = car.photo.path</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.name = <span class=\"string\">'cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Move the file on the filesystem</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path == new_path</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写自定义存储系统\"><a href=\"#编写自定义存储系统\" class=\"headerlink\" title=\"编写自定义存储系统\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-file-storage.html\" target=\"_blank\" rel=\"noopener\">编写自定义存储系统</a></h2><ol>\n<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>\n<li>Django必须能够不带任何参数来实例化</li>\n<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>\n<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>\n</ol>\n<h2 id=\"基于类的视图\"><a href=\"#基于类的视图\" class=\"headerlink\" title=\"基于类的视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">基于类的视图</a></h2><h2 id=\"基于类的内建通用视图\"><a href=\"#基于类的内建通用视图\" class=\"headerlink\" title=\"基于类的内建通用视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html\" target=\"_blank\" rel=\"noopener\">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>\n<h2 id=\"使用基于类的视图处理表单\"><a href=\"#使用基于类的视图处理表单\" class=\"headerlink\" title=\"使用基于类的视图处理表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html\" target=\"_blank\" rel=\"noopener\">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>\n<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>\n<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>\n<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">Mixin</a></h2><h2 id=\"基于类的视图的Mixin\"><a href=\"#基于类的视图的Mixin\" class=\"headerlink\" title=\"基于类的视图的Mixin\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>\n<blockquote>\n<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sensitive_function</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.database_record.delete()</span><br><span class=\"line\">    sensitive_function.alters_data = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表</p>\n</blockquote>\n<h2 id=\"内建基于类的视图的API\"><a href=\"#内建基于类的视图的API\" class=\"headerlink\" title=\"内建基于类的视图的API\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">内建基于类的视图的API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^view/$'</span>, MyView.as_view(size=<span class=\"number\">42</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>\n</blockquote>\n<h2 id=\"基于类的通用视图-——-索引\"><a href=\"#基于类的通用视图-——-索引\" class=\"headerlink\" title=\"基于类的通用视图 —— 索引\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html\" target=\"_blank\" rel=\"noopener\">基于类的通用视图 —— 索引</a></h2><h2 id=\"使用Django输出CSV\"><a href=\"#使用Django输出CSV\" class=\"headerlink\" title=\"使用Django输出CSV\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-csv.html\" target=\"_blank\" rel=\"noopener\">使用Django输出CSV</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate CSV header.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'text/csv'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.csv\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    writer = csv.writer(response)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'First row'</span>, <span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>])</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'Second row'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'\"Testing\"'</span>, <span class=\"string\">\"Here's a quote\"</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Django输出PDF\"><a href=\"#使用Django输出PDF\" class=\"headerlink\" title=\"使用Django输出PDF\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-pdf.html\" target=\"_blank\" rel=\"noopener\">使用Django输出PDF</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate PDF headers.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'application/pdf'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.pdf\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Create the PDF object, using the response object as its \"file.\"</span></span><br><span class=\"line\">    p = canvas.Canvas(response)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Draw things on the PDF. Here's where the PDF generation happens.</span></span><br><span class=\"line\">    <span class=\"comment\"># See the ReportLab documentation for the full list of functionality.</span></span><br><span class=\"line\">    p.drawString(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">\"Hello world.\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Close the PDF object cleanly, and we're done.</span></span><br><span class=\"line\">    p.showPage()</span><br><span class=\"line\">    p.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html\" target=\"_blank\" rel=\"noopener\">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<blockquote>\n<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>\n</blockquote>\n<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>\n<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses\" target=\"_blank\" rel=\"noopener\">处理流式响应</a></em></strong></p>\n<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>\n<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>\n<ul>\n<li>中间件类不能是任何类的子类</li>\n<li>中间件可以放在python路径中的任务位置<br>正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"> </span><br><span class=\"line\">D.process_template_response</span><br><span class=\"line\">C.process_template_response</span><br><span class=\"line\">B.process_template_response</span><br><span class=\"line\">A.process_template_response</span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>视图异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"></span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"django中可用的中间件\"><a href=\"#django中可用的中间件\" class=\"headerlink\" title=\"django中可用的中间件\"></a><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">django中可用的中间件</a></h2><h3 id=\"class-CommonMiddleware\"><a href=\"#class-CommonMiddleware\" class=\"headerlink\" title=\"class CommonMiddleware\"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>\n<h3 id=\"class-BrokenLinkEmailsMiddleware\"><a href=\"#class-BrokenLinkEmailsMiddleware\" class=\"headerlink\" title=\"class BrokenLinkEmailsMiddleware\"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>\n<h3 id=\"class-GZipMiddleware\"><a href=\"#class-GZipMiddleware\" class=\"headerlink\" title=\"class GZipMiddleware\"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>\n<h3 id=\"class-ConditionalGetMiddleware\"><a href=\"#class-ConditionalGetMiddleware\" class=\"headerlink\" title=\"class ConditionalGetMiddleware\"></a><code>class ConditionalGetMiddleware</code></h3><h3 id=\"class-LocaleMiddeware\"><a href=\"#class-LocaleMiddeware\" class=\"headerlink\" title=\"class LocaleMiddeware\"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>\n<h3 id=\"class-MessageMiddleware\"><a href=\"#class-MessageMiddleware\" class=\"headerlink\" title=\"class MessageMiddleware\"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>\n<h3 id=\"class-SecurityMiddleware\"><a href=\"#class-SecurityMiddleware\" class=\"headerlink\" title=\"class SecurityMiddleware\"></a><code>class SecurityMiddleware</code></h3><p><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">中间件的排序</a></p>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a><a href=\"http://python.usyiyi.cn/django/topics/templates.html\" target=\"_blank\" rel=\"noopener\">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>\n<h2 id=\"Django模版语言\"><a href=\"#Django模版语言\" class=\"headerlink\" title=\"Django模版语言\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/language.html\" target=\"_blank\" rel=\"noopener\">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>\n<ul>\n<li>字典查询（Dictionary lookup）</li>\n<li>属性或方法查询（Attribute or method lookup）</li>\n<li>数字索引查询（Numeric index lookup）</li>\n</ul>\n<p>模版变量最终解释成字面量，而不是变量值</p>\n<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>\n<h2 id=\"内置标签与过滤器\"><a href=\"#内置标签与过滤器\" class=\"headerlink\" title=\"内置标签与过滤器\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">内置标签与过滤器</a></h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% firstof var1 var2|safe var3 &quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;|safe %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else</p>\n<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with person=&quot;Jane&quot; greeting=&quot;Hello&quot; %&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with greeting=&quot;Hi&quot; only %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lorem %&#125;</span><br></pre></td></tr></table></figure>\n<p>设计人员工具，好像是生成随机单词和段落<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 3 p  %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 10 w random %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"人性化\"><a href=\"#人性化\" class=\"headerlink\" title=\"人性化\"></a><a href=\"http://python.usyiyi.cn/django/ref/contrib/humanize.html\" target=\"_blank\" rel=\"noopener\">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>\n<h2 id=\"Django-模板语言：面向Python程序员\"><a href=\"#Django-模板语言：面向Python程序员\" class=\"headerlink\" title=\"Django 模板语言：面向Python程序员\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html\" target=\"_blank\" rel=\"noopener\">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>\n<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>\n<h3 id=\"使用Context对象\"><a href=\"#使用Context对象\" class=\"headerlink\" title=\"[使用Context对象]\"></a>[使用<code>Context</code>对象]</h3><p><em><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects\" target=\"_blank\" rel=\"noopener\">这里比较难理解</a></em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context.get(key, otherwise=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">Context.pop()</span><br><span class=\"line\">Context.push()</span><br><span class=\"line\">Context.update(other_dict)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext</span><br><span class=\"line\">request_context = RequestContext(request)</span><br><span class=\"line\">request_context.push(&#123;<span class=\"string\">\"my_name\"</span>: <span class=\"string\">\"Adrian\"</span>&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。<br>你还可以赋予<code>RequestContext</code>一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    c = RequestContext(request, &#123;</span><br><span class=\"line\">        <span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>,</span><br><span class=\"line\">    &#125;, [<span class=\"string\">'ip_address'</span>:<span class=\"string\">'127.0.0.1'</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> HttpResponse(t.render(c))</span><br></pre></td></tr></table></figure></p>\n<p>上面例子中<code>ip_address</code>也会加入到上下文中</p>\n<h3 id=\"内建的模板上下文处理器\"><a href=\"#内建的模板上下文处理器\" class=\"headerlink\" title=\"内建的模板上下文处理器\"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>\n<ul>\n<li><code>user</code></li>\n<li><code>perms</code></li>\n</ul>\n<p><code>django.template.context_processors.debug</code></p>\n<ul>\n<li>debug</li>\n<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>\n</ul>\n<p><code>django.template.context_processors.i18n</code></p>\n<ul>\n<li><code>MEDIA_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.static</code></p>\n<ul>\n<li><code>STATIC_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.csrf</code></p>\n<ul>\n<li><code>csrf_token</code></li>\n</ul>\n<p><code>django.template.context_processors.request</code></p>\n<ul>\n<li><code>request</code></li>\n</ul>\n<p><code>django.contrib.messages.context_processors.messages</code></p>\n<ul>\n<li><code>messages</code></li>\n<li><code>DEFAULT_MESSAGE_LEVELS</code></li>\n</ul>\n<h2 id=\"自定义模板标签和过滤器\"><a href=\"#自定义模板标签和过滤器\" class=\"headerlink\" title=\"自定义模板标签和过滤器\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-template-tags.html\" target=\"_blank\" rel=\"noopener\">自定义模板标签和过滤器</a></h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"><span class=\"meta\">@register.filter(name='cut')</span></span><br><span class=\"line\"> </span><br><span class=\"line\">register.filter(<span class=\"string\">'cut'</span>, cut)</span><br><span class=\"line\">register.filter(<span class=\"string\">'lower'</span>, lower)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cut</span><span class=\"params\">(value, arg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.replace(arg, <span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lower</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.lower()</span><br></pre></td></tr></table></figure>\n<p>可使用<code>SafeData</code>来验证是否是安全数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> isinstance(value, SafeData):</span><br><span class=\"line\">    <span class=\"comment\"># Do something with the \"safe\" string.</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter(is_safe=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfilter</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义标签\"><a href=\"#自定义标签\" class=\"headerlink\" title=\"自定义标签\"></a>自定义标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"> </span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current_time</span><span class=\"params\">(format_string)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now().strftime(format_string)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% show_results poll %&#125;</span><br></pre></td></tr></table></figure>\n<p>写一个标签，实现下面的效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>First choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1开始<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('results.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_results</span><span class=\"params\">(poll)</span>:</span></span><br><span class=\"line\">    choices = poll.choice_set.all()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">'choices'</span>: choices&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>results.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in choices %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> &#123;&#123; choice &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1结束</p>\n<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('link.html', takes_context=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jump_link</span><span class=\"params\">(context)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'link'</span>: context[<span class=\"string\">'home_link'</span>],</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: context[<span class=\"string\">'home_title'</span>],</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>link.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure></p>\n<p>页面直接写<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jump_link %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>位置参数和关键字参数和<code>python</code>语法一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('my_template.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_tag</span><span class=\"params\">(a, b, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    warning = kwargs[<span class=\"string\">'warning'</span>]</span><br><span class=\"line\">    profile = kwargs[<span class=\"string\">'profile'</span>]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">my_tag</span> 123 \"abcd\" book.title warning=message|<span class=\"name\">lower</span> profile=user.profile %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<p>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用</p>\n<h2 id=\"使用表单\"><a href=\"#使用表单\" class=\"headerlink\" title=\"使用表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/index.html\" target=\"_blank\" rel=\"noopener\">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>\n<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure></p>\n<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>\n<p>表单排列<br><code></code><br><code></code><br><code></code></p>\n<p>表单属性<br><code></code>字段html标签<br><code></code>字段的<code>lable</code>html标签<br><code></code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>\n<p><code></code>隐藏字段列表<br><code></code>显示的字段列表</p>\n<p>错误信息<br><code></code>不是特定字段的错误<br><code></code>全部错误，一个字典<br><code></code>字段错误</p>\n<p>可从<code>form</code>从遍历出<code>field</code><br><code></code>有以下属性<br><code>`</code>Model<code>或是</code>Form<code>上的</code>label<code>的值</code><code>整个</code>label<code>标签，包含冒号</code><code>字段的id</code><code>字段的值</code><code>字段的</code>name<code>，考虑表单的前缀</code><code>字段的帮助文档</code><code>字段的错误</code><code>判断字段是否隐藏</code><code>表单类中</code>Field<code>的实例，可以使用它来访问</code>Field`属性，如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name.field.max_length</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单-API\"><a href=\"#表单-API\" class=\"headerlink\" title=\"表单 API\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/api.html\" target=\"_blank\" rel=\"noopener\">表单 API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure>\n<p>表单实例一但创建，数据不可更改</p>\n<h3 id=\"Form-clean\"><a href=\"#Form-clean\" class=\"headerlink\" title=\"Form.clean()\"></a><code>Form.clean()</code></h3><h3 id=\"Form-is-valid\"><a href=\"#Form-is-valid\" class=\"headerlink\" title=\"Form.is_valid()\"></a><code>Form.is_valid()</code></h3><h3 id=\"Form-errors\"><a href=\"#Form-errors\" class=\"headerlink\" title=\"Form.errors\"></a><code>Form.errors</code></h3><blockquote>\n<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;<span class=\"string\">'sender'</span>: [<span class=\"string\">'Enter a valid email address.'</span>], <span class=\"string\">'subject'</span>: [<span class=\"string\">'This field is required.'</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。</p>\n<h3 id=\"Form-errors-as-data\"><a href=\"#Form-errors-as-data\" class=\"headerlink\" title=\"Form.errors.as_data()\"></a><code>Form.errors.as_data()</code></h3><blockquote>\n<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>\n</blockquote>\n<h3 id=\"Form-errors-as-json-escape-html-False\"><a href=\"#Form-errors-as-json-escape-html-False\" class=\"headerlink\" title=\"Form.errors.as_json(escape_html=False)\"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>\n<p>返回JSON 序列化后的错误。</p>\n</blockquote>\n<h3 id=\"Form-add-error-field-error\"><a href=\"#Form-add-error-field-error\" class=\"headerlink\" title=\"Form.add_error(field, error)\"></a><code>Form.add_error(field, error)</code></h3><blockquote>\n<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>\n</blockquote>\n<h3 id=\"Form-has-error-field-code-None\"><a href=\"#Form-has-error-field-code-None\" class=\"headerlink\" title=\"Form.has_error(field, code=None)\"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>\n<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>\n</blockquote>\n<h3 id=\"Form-non-field-errors\"><a href=\"#Form-non-field-errors\" class=\"headerlink\" title=\"Form.non_field_errors()\"></a><code>Form.non_field_errors()</code></h3><blockquote>\n<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>\n</blockquote>\n<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Form-initial\"><a href=\"#Form-initial\" class=\"headerlink\" title=\"Form.initial\"></a><code>Form.initial</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(initial=&#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField(initial=<span class=\"string\">'class'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    url = forms.URLField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    comment = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = CommentForm(initial=&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'instance'</span>&#125;, auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(f)</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"name\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;input type=\"url\" name=\"url\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"comment\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-has-changed\"><a href=\"#Form-has-changed\" class=\"headerlink\" title=\"Form.has_changed()\"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.has_changed()</span><br></pre></td></tr></table></figure></p>\n<p>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。</p>\n<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<p>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.base_fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"class\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>\n</blockquote>\n<h3 id=\"Form-cleaned-data\"><a href=\"#Form-cleaned-data\" class=\"headerlink\" title=\"Form.cleaned_data\"></a><code>Form.cleaned_data</code></h3><h3 id=\"Form-as-p\"><a href=\"#Form-as-p\" class=\"headerlink\" title=\"Form.as_p\"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>\n<h3 id=\"Form-error-css-class-Form-required-css-class\"><a href=\"#Form-error-css-class-Form-required-css-class\" class=\"headerlink\" title=\"Form.error_css_class Form.required_css_class\"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>\n<h2 id=\"Form-auto-id\"><a href=\"#Form-auto-id\" class=\"headerlink\" title=\"Form.auto_id\"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>\n<blockquote>\n<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto_id 设置为’id_%s’。</p>\n</blockquote>\n<h3 id=\"Form-label-suffix\"><a href=\"#Form-label-suffix\" class=\"headerlink\" title=\"Form.label_suffix\"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>\n<h3 id=\"BoundField\"><a href=\"#BoundField\" class=\"headerlink\" title=\"BoundField\"></a><code>BoundField</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = ContactForm()</span><br><span class=\"line\"><span class=\"keyword\">for</span> boundfield <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">    print(boundfield)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">from</span>[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></table></figure>\n<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>\n<h3 id=\"Form-is-multipart\"><a href=\"#Form-is-multipart\" class=\"headerlink\" title=\"Form.is_multipart()\"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> form.is_multipart %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">else</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123; form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    age = forms.IntegerField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildForm</span><span class=\"params\">(ParentForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"keyword\">None</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ChildForm().fields.keys()</span><br><span class=\"line\"><span class=\"meta\">... </span>[<span class=\"string\">'age'</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-prefix\"><a href=\"#Form-prefix\" class=\"headerlink\" title=\"Form.prefix\"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>father = PersonForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(father.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"first_name\" id=\"id_first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"last_name\" id=\"id_last_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mother = PersonForm(prefix=<span class=\"string\">\"mother\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mother.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-first_name\" id=\"id_mother-first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-last_name\" id=\"id_mother-last_name\" /&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/fields.html\" target=\"_blank\" rel=\"noopener\">表单字段</a></h2><h3 id=\"Field-has-change\"><a href=\"#Field-has-change\" class=\"headerlink\" title=\"Field.has_change()\"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>\n<h3 id=\"内建字段\"><a href=\"#内建字段\" class=\"headerlink\" title=\"内建字段\"></a>内建字段</h3><h4 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>\n<h4 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>max_length<code>min_length`\n接收两个可选参数\n`max_length</code>min_length`</p>\n<h4 id=\"ChoiceField\"><a href=\"#ChoiceField\" class=\"headerlink\" title=\"ChoiceField\"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_choice<code>错误消息可能包含</code>%(value)s<code>，它将被选择的选项替换掉。\n接收一个额外的必选参数</code>choices`<br>是一个二元组组成的可迭代对象</p>\n<h4 id=\"TypeChoiceField\"><a href=\"#TypeChoiceField\" class=\"headerlink\" title=\"TypeChoiceField\"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>接收额外的参数</code>choices<code>是一个二元组组成的可迭代对象</code>coerce<code>接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值</code>empty_value`<br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>\n<h4 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datateim.date`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d&apos;,      # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,       # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]       # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<p>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%b %d %Y&apos;,      # &apos;Oct 25 2006&apos;</span><br><span class=\"line\">&apos;%b %d, %Y&apos;,      # &apos;Oct 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %b %Y&apos;,       # &apos;25 Oct 2006&apos;</span><br><span class=\"line\">&apos;%d %b, %Y&apos;,      # &apos;25 Oct, 2006&apos;</span><br><span class=\"line\">&apos;%B %d %Y&apos;,       # &apos;October 25 2006&apos;</span><br><span class=\"line\">&apos;%B %d, %Y&apos;,      # &apos;October 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %B %Y&apos;,       # &apos;25 October 2006&apos;</span><br><span class=\"line\">&apos;%d %B, %Y&apos;]      # &apos;25 October, 2006&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datetime.datetime`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d %H:%M:%S&apos;,    # &apos;2006-10-25 14:30:59&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d %H:%M&apos;,        # &apos;2006-10-25 14:30&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d&apos;,              # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M:%S&apos;,     # &apos;10/25/2006 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M&apos;,        # &apos;10/25/2006 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,              # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M:%S&apos;,     # &apos;10/25/06 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M&apos;,        # &apos;10/25/06 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]              # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_digits<code>max_decimal_places</code>max_whole_digits<code></code>max_value<code>和</code>min_value<code>错误信息可能包含</code>%(limit_value)s<code>，它们将被真正的限制值替换。类似地，</code>max_digits<code>、</code>max_decimal_places<code>和</code>max_whole_digits<code>错误消息可能包含</code>%(max)s<code>接收四个可选参数</code>max_value<code></code>min_value<code></code>max_digits<code>最大位数</code>decimal_places`最大小数位</p>\n<h4 id=\"DurationField\"><a href=\"#DurationField\" class=\"headerlink\" title=\"DurationField\"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid`</p>\n<h4 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>max_length<code></code>min_length`</p>\n<h4 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code>max_length`\n接收两个可选参数\n`max_length</code>allow_empty_file<code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功</code>max_length<code>错误信息表示文件名的长度。在错误信息中，</code>%(max)d<code>将替换为文件的最大长度，%</code>(length)d` 将替换为当前文件名的长度</p>\n<h4 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>这个字段允许从一个特定的目录选择文件\n接收五个参数</code>path<code>必须\n想要列出的目录的绝对路径</code>recursive<code>可选\n布尔值，默认为</code>False<code>，是否需要递归这个目录</code>match<code>可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项</code>allow_files<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的文件，它和</code>allow_folders<code>必须有一个为</code>True<code></code>allow_folders<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的目录，和</code>allow_files<code>必须有一个为</code>True`</p>\n<h4 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code></code>invalid_image`</p>\n<h4 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"IPAddressField\"><a href=\"#IPAddressField\" class=\"headerlink\" title=\"IPAddressField\"></a><code>IPAddressField</code></h4><p>1.7弃用</p>\n<h4 id=\"GenericIPAddressField\"><a href=\"#GenericIPAddressField\" class=\"headerlink\" title=\"GenericIPAddressField\"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>protocol<code></code>unpack_ipv4`</p>\n<h4 id=\"MultipleChoiceField\"><a href=\"#MultipleChoiceField\" class=\"headerlink\" title=\"MultipleChoiceField\"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_list`</p>\n<h4 id=\"TypedMultipleChoiceField\"><a href=\"#TypedMultipleChoiceField\" class=\"headerlink\" title=\"TypedMultipleChoiceField\"></a><code>TypedMultipleChoiceField</code></h4><h4 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h4><h4 id=\"RegexField\"><a href=\"#RegexField\" class=\"headerlink\" title=\"RegexField\"></a><code>RegexField</code></h4><h4 id=\"SlugField\"><a href=\"#SlugField\" class=\"headerlink\" title=\"SlugField\"></a><code>SlugField</code></h4><h4 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h4><h4 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h4><h4 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>\n<h4 id=\"ComboField\"><a href=\"#ComboField\" class=\"headerlink\" title=\"ComboField\"></a><code>ComboField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ComboField</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class=\"number\">20</span>), EmailField()])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'test@example.com'</span>)</span><br><span class=\"line\"><span class=\"string\">'test@example.com'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'longemailaddress@example.com'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">ValidationError: [<span class=\"string\">'Ensure this value has at most 20 characters (it has 28).'</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"MultiValueField\"><a href=\"#MultiValueField\" class=\"headerlink\" title=\"MultiValueField\"></a><code>MultiValueField</code></h4><h4 id=\"SplitDateTimeField\"><a href=\"#SplitDateTimeField\" class=\"headerlink\" title=\"SplitDateTimeField\"></a><code>SplitDateTimeField</code></h4><h4 id=\"ModelChoiceField\"><a href=\"#ModelChoiceField\" class=\"headerlink\" title=\"ModelChoiceField\"></a><code>ModelChoiceField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A custom empty label</span></span><br><span class=\"line\">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"string\">\"(Nothing)\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># No empty label</span></span><br><span class=\"line\">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModelMultipleChoiceField\"><a href=\"#ModelMultipleChoiceField\" class=\"headerlink\" title=\"ModelMultipleChoiceField\"></a><code>ModelMultipleChoiceField</code></h4><h2 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/widgets.html\" target=\"_blank\" rel=\"noopener\">Widgets</a></h2><p>处理文本输入的Widget</p>\n<ul>\n<li><code>TextInput</code></li>\n<li><code>NumberInput</code></li>\n<li><code>EmailInput</code></li>\n<li><code>URLInput</code></li>\n<li><code>PasswordInput</code></li>\n<li><code>HiddenInput</code></li>\n<li><code>DateInput</code></li>\n<li><code>DateTimeInput</code></li>\n<li><code>TimeInput</code></li>\n<li><code>Textarea</code></li>\n</ul>\n<p>选择和复选框Widget</p>\n<ul>\n<li><code>CheckboxInput</code></li>\n<li><code>Select</code></li>\n<li><code>NullBooleanSelect</code></li>\n<li><code>SelectMultiple</code></li>\n<li><code>RadioSelect</code></li>\n<li><code>CheckboxSelectMultiple</code></li>\n</ul>\n<p>文件上传<code>Widget</code></p>\n<ul>\n<li><code>FileInput</code></li>\n<li><code>ClearableFileInput</code></li>\n</ul>\n<p>复合Widget</p>\n<ul>\n<li><code>MultipleHiddenInput</code></li>\n<li><code>SplitDateTimeWidget</code></li>\n<li><code>SplitHiddenDateTimeWidget</code></li>\n<li><code>SelectDateWidget</code></li>\n</ul>\n<h2 id=\"从模型创建表单\"><a href=\"#从模型创建表单\" class=\"headerlink\" title=\"从模型创建表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/modelforms.html\" target=\"_blank\" rel=\"noopener\">从模型创建表单</a></h2><p>下面两种方法效果相同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Author(title=<span class=\"string\">'Mr'</span>)</span><br><span class=\"line\">form = PartialAuthorForm(request.POST, instance=author)</span><br><span class=\"line\">form.save()</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">form = PartialAuthorForm(request.POST)</span><br><span class=\"line\">author = form.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">author.title = <span class=\"string\">'Mr'</span></span><br><span class=\"line\">author.save()</span><br></pre></td></tr></table></figure></p>\n<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>\n<p>例如，如果Article 模型像下面这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">200</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br></pre></td></tr></table></figure></p>\n<p>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\">    headline = MyFormField(max_length=<span class=\"number\">200</span>, required=<span class=\"keyword\">False</span>,</span><br><span class=\"line\">                           help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Article</span><br><span class=\"line\">        fields = [<span class=\"string\">'headline'</span>, <span class=\"string\">'content'</span>]</span><br></pre></td></tr></table></figure>\n<p>创建简单的表单或表单集可以使用<code>modelform_factory()`</code>modelformset_factory()`方法来新建。</p>\n<p>启用字段的本地化功能¶</p>\n<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        model = Author</span><br><span class=\"line\"><span class=\"meta\">... </span>        localized_fields = (<span class=\"string\">'birth_date'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>如果localized_fields 设置为<code>&#39;__all__&#39;</code>这个特殊的值，所有的字段都将本地化。</p>\n<p>提供的初始值会覆盖从实例取得的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article.headline</span><br><span class=\"line\"><span class=\"string\">'My headline'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form = ArticleForm(initial=&#123;<span class=\"string\">'headline'</span>: <span class=\"string\">'Initial headline'</span>&#125;, instance=article)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form[<span class=\"string\">'headline'</span>].value()</span><br><span class=\"line\"><span class=\"string\">'Initial headline'</span></span><br></pre></td></tr></table></figure></p>\n<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelform_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Book</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"title\"</span>))</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> Textarea</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</span><br><span class=\"line\"><span class=\"meta\">... </span>                         widgets=&#123;<span class=\"string\">\"title\"</span>: Textarea()&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class=\"string\">\"birth_date\"</span>,))</span><br></pre></td></tr></table></figure>\n<p>表单集<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'title'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset`</code>save()`之后，会有新的属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.BaseModelFormSet.changed_objects</span><br><span class=\"line\">models.BaseModelFormSet.deleted_objects</span><br><span class=\"line\">models.BaseModelFormSet.new_objects</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>为最大的表单数，如果初始<code>queryset</code>长度比<code>max_num</code>，则按照<code>queryset</code>来，<code>extra</code>是可以额外添加的空表单的个数，但<code>extra</code>和<code>queryset</code>长度相加如果大于<code>max_num</code>，则<code>extra</code>和实例设置可能表现不一样，如<code>queryset</code>长度为2，<code>max_num</code>为4，<code>extra</code>不管是2还是5，最终表现出来都是2。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>,), max_num=<span class=\"number\">4</span>, extra=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>默认只影响显示，不影响验证，如果需要影响验证添加<code>validate_max=True</code>即可</p>\n<h2 id=\"表单素材-Media-类\"><a href=\"#表单素材-Media-类\" class=\"headerlink\" title=\"表单素材 ( Media 类)\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/media.html\" target=\"_blank\" rel=\"noopener\">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\">        css = &#123;</span><br><span class=\"line\">            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用<code>CalendarWidget</code>会自动引入下列资源<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。</p>\n<p>动态定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_media</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> forms.Media(css=&#123;<span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)&#125;,</span><br><span class=\"line\">                           js=(<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>))</span><br><span class=\"line\">    media = property(_media)</span><br></pre></td></tr></table></figure></p>\n<p>两个<code>Media</code>实例可以相加<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'whizbang.js'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w1 = CalendarWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w2 = OtherWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(w1.media + w2.media)</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单<code>Media</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    date = DateField(widget=CalendarWidget)</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = CharField(max_length=<span class=\"number\">40</span>, widget=OtherWidget)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'layout.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.media</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/layout.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单集\"><a href=\"#表单集\" class=\"headerlink\" title=\"表单集\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/formsets.html\" target=\"_blank\" rel=\"noopener\">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>\n<p>其中<code>can_order`</code>can_delete`默认以以下形式展现</p>\n<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">... </span>    obj.delete()</span><br></pre></td></tr></table></figure></p>\n<p>如果要兼容1.6或更早版，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># For Django 1.7+</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>        obj.delete()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">except</span> AssertionError:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># Django 1.6 and earlier already deletes the objects, trying to</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># delete them a second time raises an AssertionError.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>在表单集里添加额外的字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> BaseFormSet</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseArticleFormSet</span><span class=\"params\">(BaseFormSet)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_fields</span><span class=\"params\">(self, form, index)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        super(BaseArticleFormSet, self).add_fields(form, index)</span><br><span class=\"line\"><span class=\"meta\">... </span>        form.fields[<span class=\"string\">\"my_field\"</span>] = forms.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>formset = ArticleFormSet()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> form <span class=\"keyword\">in</span> formset:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(form.as_table())</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-title\"&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-pub_date\"&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-my_field\"&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-my_field\" id=\"id_form-0-my_field\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单集对应的模版写法<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-variable\">&#123;&#123; formset &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也可以手动渲染，不能缺少<code></code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;&#123; form &#125;&#125;</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">    &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果是手动渲染，<code>can_order`</code>can_delete`需要手动添加<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.title &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.pub_date &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% if formset.can_delete</span></span><br><span class=\"line\"><span class=\"template-tag\">                &lt;li&gt;&#123;&#123; form.DELETE &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% endif</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">    &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm, BookForm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manage_articles</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    ArticleFormSet = formset_factory(ArticleForm)</span><br><span class=\"line\">    BookFormSet = formset_factory(BookForm)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> article_formset.is_valid() <span class=\"keyword\">and</span> book_formset.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># do something with the cleaned_data on the formsets.</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'manage_articles.html'</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'article_formset'</span>: article_formset,</span><br><span class=\"line\">        <span class=\"string\">'book_formset'</span>: book_formset,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单验证和字段验证\"><a href=\"#表单验证和字段验证\" class=\"headerlink\" title=\"表单验证和字段验证\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/validation.html\" target=\"_blank\" rel=\"noopener\">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError(</span><br><span class=\"line\">    _(<span class=\"string\">'Invalid value: %(value)s'</span>),</span><br><span class=\"line\">    code=<span class=\"string\">'invalid'</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">'value'</span>: <span class=\"string\">'42'</span>&#125;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>招聘多个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 1'</span>), code=<span class=\"string\">'error1'</span>),</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 2'</span>), code=<span class=\"string\">'error2'</span>),</span><br><span class=\"line\">])</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    _(<span class=\"string\">'Error 1'</span>),</span><br><span class=\"line\">    _(<span class=\"string\">'Error 2'</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></p>\n<p>创建一个新的表单字段添加默认验证<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiEmailField</span><span class=\"params\">(forms.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></span><br><span class=\"line\">        super(MultiEmailField, self).validate(value)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">            validate_email(email)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的设置\"><a href=\"#Django-的设置\" class=\"headerlink\" title=\"Django 的设置\"></a><a href=\"http://python.usyiyi.cn/django/topics/settings.html\" target=\"_blank\" rel=\"noopener\">Django 的设置</a></h2><p>django-admin 工具</p>\n<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>\n<p>例如（Unix Bash shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>例如（Windows shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>使用–settings 命令行参数可以手工指定设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin runserver --settings=mysite.settings</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以查询设置与默认设置的不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py diffsettings</span><br></pre></td></tr></table></figure></p>\n<p>在django app中使用设置应使用以下导入方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure></p>\n<p>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.settings <span class=\"keyword\">import</span> DEBUG  <span class=\"comment\"># This won't work.</span></span><br></pre></td></tr></table></figure></p>\n<p>不要在应用运行时改变设置</p>\n<h2 id=\"完整列表设置-Settings\"><a href=\"#完整列表设置-Settings\" class=\"headerlink\" title=\"完整列表设置(Settings)\"></a><a href=\"http://python.usyiyi.cn/django/ref/settings.html\" target=\"_blank\" rel=\"noopener\">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>\n<p><code>DATABASES[&#39;CONN_MAX_AGE&#39;]</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/applications.html\" target=\"_blank\" rel=\"noopener\">应用</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/apps.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> AppConfig</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RockNRollConfig</span><span class=\"params\">(AppConfig)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'rock_n_roll'</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">\"Rock ’n’ roll\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/__init__.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\">default_app_config = <span class=\"string\">'rock_n_roll.apps.RockNRollConfig'</span></span><br></pre></td></tr></table></figure>\n<p><code>AppConfig</code>可配置的属性</p>\n<ul>\n<li><code>AppConfig.name</code></li>\n<li><code>AppConfig.label</code></li>\n<li><code>AppConfig.verbose_name</code></li>\n<li><code>Appconfig.path</code></li>\n</ul>\n<p><code>AppConfig</code>只读属性</p>\n<ul>\n<li><code>AppConfig.module</code></li>\n<li><code>Appconfig.models_module</code></li>\n</ul>\n<p><code>AppConfig</code>方法</p>\n<ul>\n<li><code>AppConfig.get_models()</code></li>\n<li><code>AppConfig..get_model(model_name)</code></li>\n<li><code>AppConfigevaluate.ready()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> apps</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>apps.get_app_config(<span class=\"string\">'admin'</span>).verbose_name</span><br><span class=\"line\"><span class=\"string\">'Admin'</span></span><br></pre></td></tr></table></figure>\n<p><code>APP</code></p>\n<ul>\n<li><code>apps.ready</code></li>\n<li><code>apps.get_app_configs()</code></li>\n<li><code>apps.get_app_config(app_label)</code></li>\n<li><code>apps.is_installed(app_name)</code></li>\n<li><code>apps.get_model(app_label, model_name)</code></li>\n</ul>\n<h2 id=\"Django异常\"><a href=\"#Django异常\" class=\"headerlink\" title=\"Django异常\"></a><a href=\"python.usyiyi.cn/django_182/ref/exceptions.html\">Django异常</a></h2><h3 id=\"核心异常\"><a href=\"#核心异常\" class=\"headerlink\" title=\"核心异常\"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>\n<ul>\n<li><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ObjectDoesNotExist</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    e = Entry.objects.get(id=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ObjectDoesNotExist:</span><br><span class=\"line\">    print(<span class=\"string\">\"Either the entry or blog doesn't exist.\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>\n</li>\n<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>\n</li>\n<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>\n<ul>\n<li><code>DisallowedHost</code></li>\n<li><code>DisallowedModelAdminLookup</code></li>\n<li><code>DisallowedModelAdminToField</code></li>\n<li><code>DisallowedRedirect</code></li>\n<li><code>InvalidSessionKey</code></li>\n<li><code>SuspiciousFileOperation</code></li>\n<li><code>SuspiciousMultipartForm</code></li>\n<li><code>SuspiciousSession</code></li>\n</ul>\n</li>\n<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>\n</li>\n<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>\n</li>\n<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>\n</li>\n<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>\n</li>\n<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>\n<ul>\n<li>模型中的字段与抽象基类中的字段重名</li>\n<li>排序造成了一个死循环</li>\n<li>关键词不能由过滤器参数解析</li>\n<li>字段不能由查询参数中的关键词决定</li>\n<li>连接（join）不能在指定对象上使用</li>\n<li>字段名称不可用</li>\n<li><p>查询包含了无效的<code>order_by</code>参数</p>\n</li>\n<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>\n</li>\n</ul>\n</li>\n<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>\n</li>\n</ul>\n<h3 id=\"URL解析器异常\"><a href=\"#URL解析器异常\" class=\"headerlink\" title=\"URL解析器异常\"></a>URL解析器异常</h3><ul>\n<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>\n</li>\n<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>\n</li>\n</ul>\n<h3 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h3><p>数据库异常由django.db导入</p>\n<ul>\n<li><code>Error</code></li>\n<li><code>InterfaceError</code></li>\n<li><code>DatabaseError</code></li>\n<li><code>DataError</code></li>\n<li><code>OperationalError</code></li>\n<li><code>IntegrityError</code></li>\n<li><code>InternalError</code></li>\n<li><code>ProgrammingError</code></li>\n<li><code>NotSupportedError</code></li>\n</ul>\n<h3 id=\"HTTP异常\"><a href=\"#HTTP异常\" class=\"headerlink\" title=\"HTTP异常\"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>\n<ul>\n<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>\n</ul>\n<h3 id=\"事务异常\"><a href=\"#事务异常\" class=\"headerlink\" title=\"事务异常\"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>\n<h3 id=\"测试框架异常\"><a href=\"#测试框架异常\" class=\"headerlink\" title=\"测试框架异常\"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>\n<ul>\n<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>\n</ul>\n<h3 id=\"Python异常\"><a href=\"#Python异常\" class=\"headerlink\" title=\"Python异常\"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>\n<h2 id=\"django-admin-and-manage-py\"><a href=\"#django-admin-and-manage-py\" class=\"headerlink\" title=\"django-admin and manage.py\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/django-admin.html\" target=\"_blank\" rel=\"noopener\">django-admin and manage.py</a></h2><ul>\n<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>\n</li>\n<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>\n</li>\n<li><code>--noinput</code></li>\n<li><code>--database</code></li>\n<li><code>--no-initial-data</code></li>\n</ul>\n<ul>\n<li><code>inspectdb</code><br>根据数据库结构生成model<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li><p><code>loaddata</code><br>导入fixture数据</p>\n</li>\n<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runserver <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自定义的命令\"><a href=\"#添加自定义的命令\" class=\"headerlink\" title=\" 添加自定义的命令\"></a><a href=\"http://python.usyiyi.cn/django_182/howto/custom-management-commands.html\" target=\"_blank\" rel=\"noopener\"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.management.base <span class=\"keyword\">import</span> BaseCommand, CommandError</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Poll</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span><span class=\"params\">(BaseCommand)</span>:</span></span><br><span class=\"line\">    help = <span class=\"string\">'Closes the specified poll for voting'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_arguments</span><span class=\"params\">(self, parser)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 命令行接收一个或多个poll_id值</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        parser.add_argument(<span class=\"string\">'poll_id'</span>, nargs=<span class=\"string\">'+'</span>, type=int)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self, *args, **options)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> poll_id <span class=\"keyword\">in</span> options[<span class=\"string\">'poll_id'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                poll = Poll.objects.get(pk=poll_id)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Poll.DoesNotExist:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> CommandError(<span class=\"string\">'Poll \"%s\" does not exist'</span> % poll_id)</span><br><span class=\"line\"> </span><br><span class=\"line\">            poll.opened = <span class=\"keyword\">False</span></span><br><span class=\"line\">            poll.save()</span><br><span class=\"line\"> </span><br><span class=\"line\">            self.stdout.write(<span class=\"string\">'Successfully closed poll \"%s\"'</span> % poll_id)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/media/django-commands.png\" alt=\"django-commands\"></p>","popularPost_tmp_postPath":true,"popularPost_tmp_gaData":{"updated":"Fri Jan 17 2020 15:56:55 GMT+0800 (China Standard Time)","title":"Django 1.9文档阅读笔记","path":"2016/04/04/django1-9文档阅读笔记/","eyeCatchImage":null,"excerpt":"<p><br><br>","date":"2016-04-04T07:27:20.000Z","pv":0,"totalPV":0,"categories":"程序猿","tags":["Django","文档","笔记"],"internalLinks":[],"keywords":[],"keywordsLength":0},"length":51779}],"PostAsset":[],"PostCategory":[{"post_id":"ck8kk0ygp0004ssyh8hayrpls","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102d0063ssyh7sv2wkx0"},{"post_id":"ck8kk0yh90006ssyhkgeptv1l","category_id":"ck8kk0zco001nssyhmoz3pan9","_id":"ck8kk102d0065ssyhzq2869d0"},{"post_id":"ck8kk0yhk0008ssyh7k50l9yb","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102e0067ssyh4isxlp86"},{"post_id":"ck8kk0yhq000assyh9z1tz80b","category_id":"ck8kk0zco001nssyhmoz3pan9","_id":"ck8kk102f006assyheg2j0l1n"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102g006cssyhvws7daxb"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102h006fssyhvypesvpv"},{"post_id":"ck8kk0yi6000gssyhg8yju980","category_id":"ck8kk0zdl001zssyhv5feyubj","_id":"ck8kk102i006hssyhek8yvvmk"},{"post_id":"ck8kk0yij000issyhf43erdf3","category_id":"ck8kk0zdu0021ssyhp6m2poi5","_id":"ck8kk102j006kssyh3io8afql"},{"post_id":"ck8kk0yik000jssyh666830c0","category_id":"ck8kk0zco001nssyhmoz3pan9","_id":"ck8kk102j006mssyh1g7o6xl1"},{"post_id":"ck8kk0yil000kssyhl2o1fqle","category_id":"ck8kk0ze00025ssyhyivow3th","_id":"ck8kk102k006pssyhk5k18cdt"},{"post_id":"ck8kk0yin000lssyhp9xiigiy","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102k006rssyhttbyskyh"},{"post_id":"ck8kk0yix000mssyhmon5uklo","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102k006tssyhcigg0wyd"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102l006wssyhd3am7hxc"},{"post_id":"ck8kk0yjd000qssyhg35783r2","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102l006yssyhdfv9juz5"},{"post_id":"ck8kk0yjg000rssyhbkeg69lc","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102l0071ssyh5enl7dqi"},{"post_id":"ck8kk0yjl000tssyh3djx2imi","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102m0073ssyhahu98c3z"},{"post_id":"ck8kk0yjt000ussyha0dxluye","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102m0076ssyhom95csnh"},{"post_id":"ck8kk0yju000vssyhws6mqzxr","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102m0078ssyhmwhl9f3l"},{"post_id":"ck8kk0yjw000wssyh2dyl4kib","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102n007bssyhkioq3esu"},{"post_id":"ck8kk0yjy000xssyh84cjbza6","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102n007dssyhwne7kf9w"},{"post_id":"ck8kk0yk2000zssyh3ss8c8q7","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102o007fssyh845c3cqv"},{"post_id":"ck8kk0ykb0010ssyhvqdg2kt2","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102p007issyhd4leh0p0"},{"post_id":"ck8kk0ykg0011ssyh5co5ohgi","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102p007kssyh6hggo1dn"},{"post_id":"ck8kk0ykh0012ssyhimhdgkow","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102w007nssyhun94gc15"},{"post_id":"ck8kk0yko0013ssyhg0lb0gsv","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102x007pssyhfwoxg0kz"},{"post_id":"ck8kk0yks0014ssyh6tgf0tp7","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk102y007sssyhfnmt120o"},{"post_id":"ck8kk0ykt0015ssyhxakn3591","category_id":"ck8kk0zgu0032ssyh05dwem52","_id":"ck8kk102z007ussyhertnsuv8"},{"post_id":"ck8kk0yku0016ssyh02j9kvob","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1030007xssyhgoandllw"},{"post_id":"ck8kk0ykw0017ssyhy9c2luqx","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1030007zssyhydne4kkj"},{"post_id":"ck8kk0ykx0018ssyhpm4fmjkb","category_id":"ck8kk0zgu0032ssyh05dwem52","_id":"ck8kk10310081ssyhf3ggobtv"},{"post_id":"ck8kk0yky0019ssyh2tbh3p3u","category_id":"ck8kk0ze00025ssyhyivow3th","_id":"ck8kk10310083ssyhst8lhuhc"},{"post_id":"ck8kk0yl0001assyh05he0zil","category_id":"ck8kk0zhb003cssyh0vq601hl","_id":"ck8kk10310085ssyhp55fxrig"},{"post_id":"ck8kk0yl6001bssyh9jc16gzz","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk10310087ssyh1tfdez6e"},{"post_id":"ck8kk0yl8001cssyhogkwxerp","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk10310089ssyhc2gfhs2n"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1031008bssyhamjb7xa9"},{"post_id":"ck8kk0yla001essyhy5ew753d","category_id":"ck8kk0ze00025ssyhyivow3th","_id":"ck8kk1032008dssyhd7g7x3j7"},{"post_id":"ck8kk0ylc001fssyho8hrenqt","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1032008fssyhupe4vugs"},{"post_id":"ck8kk0yld001gssyhmizb1ewp","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1033008hssyhdlnzazuk"},{"post_id":"ck8kk0yle001hssyhxmu307m6","category_id":"ck8kk0zil003pssyhe1akwdlf","_id":"ck8kk1035008jssyhcsv4nt77"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1035008lssyh1gfxx2jn"},{"post_id":"ck8kk0zch001lssyhp131loe0","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk1035008nssyh4zdtq5sg"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk103c008pssyhkpqxbgoy"},{"post_id":"ck8kk0zcj001mssyhhmutv2pp","category_id":"ck8kk102d0062ssyh1pewtirj","_id":"ck8kk10em00b1ssyhnxeb0fuh"},{"post_id":"ck8kk11f600bhssyhmpvv3hsx","category_id":"ck8kk0z9b001issyh6war0kbl","_id":"ck8kk11fp00bjssyhwe2aim1i"}],"PostTag":[{"post_id":"ck8kk0ygp0004ssyh8hayrpls","tag_id":"ck8kk0zc8001jssyhfgzua69u","_id":"ck8kk102c0060ssyhorcdpu6v"},{"post_id":"ck8kk0ygp0004ssyh8hayrpls","tag_id":"ck8kk0zcp001ossyh2tq68hmz","_id":"ck8kk102d0064ssyhmpq5olu7"},{"post_id":"ck8kk0yh90006ssyhkgeptv1l","tag_id":"ck8kk0zd1001sssyhj4rao71k","_id":"ck8kk102e0066ssyhawqy1kxn"},{"post_id":"ck8kk0yh90006ssyhkgeptv1l","tag_id":"ck8kk0zdd001ussyhiqcf3dn6","_id":"ck8kk102f0069ssyhdo7vcgvg"},{"post_id":"ck8kk0yh90006ssyhkgeptv1l","tag_id":"ck8kk0zdg001wssyh4wdqaqp0","_id":"ck8kk102f006bssyh6u9wu3l7"},{"post_id":"ck8kk0yhk0008ssyh7k50l9yb","tag_id":"ck8kk0zdj001yssyhj04m0ou4","_id":"ck8kk102h006essyhc27a0ptz"},{"post_id":"ck8kk0yhk0008ssyh7k50l9yb","tag_id":"ck8kk0zdr0020ssyhsd61aevn","_id":"ck8kk102i006gssyhpi9e06mk"},{"post_id":"ck8kk0yhq000assyh9z1tz80b","tag_id":"ck8kk0zdw0022ssyhxb7hhyih","_id":"ck8kk102j006jssyhfutktzsn"},{"post_id":"ck8kk0yhq000assyh9z1tz80b","tag_id":"ck8kk0zdy0024ssyh9gnrvbj2","_id":"ck8kk102j006lssyheuhdisrh"},{"post_id":"ck8kk0yhq000assyh9z1tz80b","tag_id":"ck8kk0ze20026ssyhkbmdugil","_id":"ck8kk102j006nssyhq65jdwmp"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zdj001yssyhj04m0ou4","_id":"ck8kk102k006qssyh42mj6uwi"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zdr0020ssyhsd61aevn","_id":"ck8kk102k006sssyhwlqz2qty"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zer002cssyhoc1wa70o","_id":"ck8kk102l006vssyhyfgoqx1f"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zet002essyh4xlgqkjz","_id":"ck8kk102l006xssyh8yyghk8e"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zev002gssyhsdlp3ov6","_id":"ck8kk102l0070ssyhq65rg6os"},{"post_id":"ck8kk0yi0000cssyh1tq7dzdu","tag_id":"ck8kk0zex002jssyhdl8qb6sc","_id":"ck8kk102m0072ssyhnhn7gpdi"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zdj001yssyhj04m0ou4","_id":"ck8kk102m0075ssyh31badp4x"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zdr0020ssyhsd61aevn","_id":"ck8kk102m0077ssyhdk7m67vw"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zer002cssyhoc1wa70o","_id":"ck8kk102n0079ssyh6ctinyni"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zet002essyh4xlgqkjz","_id":"ck8kk102n007cssyh02hc7w47"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zev002gssyhsdlp3ov6","_id":"ck8kk102o007essyhitmlfinj"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zfx002vssyhs3afpw6s","_id":"ck8kk102p007hssyhw097j68w"},{"post_id":"ck8kk0yi4000essyha9rqtk4t","tag_id":"ck8kk0zet002essyh4xlgqkjz","_id":"ck8kk102p007jssyh9chk5ua4"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zgf002zssyh6gdzgzsj","_id":"ck8kk102w007mssyhbjve23i5"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zgr0031ssyh6xops8au","_id":"ck8kk102x007ossyhinh9v1hb"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zgv0033ssyh8j9cf4j5","_id":"ck8kk102y007rssyh7sqjfa0h"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zh40035ssyhmfsparj5","_id":"ck8kk102z007tssyh3w72pjra"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zh50037ssyhqlmpxkne","_id":"ck8kk102z007vssyh9q0kmj7g"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zh80039ssyh6hgj1ews","_id":"ck8kk1030007yssyh2vtk25yw"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zha003bssyhlypmn9ba","_id":"ck8kk10300080ssyhblvd9q2h"},{"post_id":"ck8kk0yi6000gssyhg8yju980","tag_id":"ck8kk0zhb003dssyhkk09usni","_id":"ck8kk10310082ssyhzp98engw"},{"post_id":"ck8kk0yij000issyhf43erdf3","tag_id":"ck8kk0zhd003gssyhgs57249f","_id":"ck8kk10310084ssyh4dvws5xc"},{"post_id":"ck8kk0yij000issyhf43erdf3","tag_id":"ck8kk0zi1003issyhodv4s05f","_id":"ck8kk10310086ssyhg1jp2dpf"},{"post_id":"ck8kk0yij000issyhf43erdf3","tag_id":"ck8kk0zh40035ssyhmfsparj5","_id":"ck8kk10310088ssyhr0iyfbi0"},{"post_id":"ck8kk0yik000jssyh666830c0","tag_id":"ck8kk0zgf002zssyh6gdzgzsj","_id":"ck8kk1031008assyhmlj02x2i"},{"post_id":"ck8kk0yik000jssyh666830c0","tag_id":"ck8kk0zik003ossyh9cy3hy4v","_id":"ck8kk1032008cssyhkyh32uts"},{"post_id":"ck8kk0yil000kssyhl2o1fqle","tag_id":"ck8kk0zin003qssyhazx4ztom","_id":"ck8kk1032008essyhskbb52kq"},{"post_id":"ck8kk0yil000kssyhl2o1fqle","tag_id":"ck8kk0zik003ossyh9cy3hy4v","_id":"ck8kk1032008gssyhxfasne4h"},{"post_id":"ck8kk0yil000kssyhl2o1fqle","tag_id":"ck8kk0zip003sssyhjmh3cs31","_id":"ck8kk1035008issyh6viyxg77"},{"post_id":"ck8kk0yil000kssyhl2o1fqle","tag_id":"ck8kk0ziq003tssyhfyw75ttr","_id":"ck8kk1035008kssyhixng8s73"},{"post_id":"ck8kk0yin000lssyhp9xiigiy","tag_id":"ck8kk0ziq003ussyhc8ny3n0u","_id":"ck8kk1035008mssyhl6nn3l1u"},{"post_id":"ck8kk0yin000lssyhp9xiigiy","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk1035008ossyhmuqu4lqq"},{"post_id":"ck8kk0yix000mssyhmon5uklo","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103d008qssyhvck5hc6z"},{"post_id":"ck8kk0yix000mssyhmon5uklo","tag_id":"ck8kk0ziz003xssyh9v13j63s","_id":"ck8kk103d008rssyhld9c5j8z"},{"post_id":"ck8kk0yix000mssyhmon5uklo","tag_id":"ck8kk0zj0003yssyhkxwgi4ht","_id":"ck8kk103e008sssyhnmquj0d4"},{"post_id":"ck8kk0yix000mssyhmon5uklo","tag_id":"ck8kk0zj1003zssyhqru31vi0","_id":"ck8kk103e008tssyhxqljmvl4"},{"post_id":"ck8kk0yiz000nssyhqf0kefdw","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103e008ussyhuse30mgt"},{"post_id":"ck8kk0yiz000nssyhqf0kefdw","tag_id":"ck8kk0ziz003xssyh9v13j63s","_id":"ck8kk103e008vssyhibg5c3vz"},{"post_id":"ck8kk0yiz000nssyhqf0kefdw","tag_id":"ck8kk0zj0003yssyhkxwgi4ht","_id":"ck8kk103f008wssyh7eixkpz2"},{"post_id":"ck8kk0yiz000nssyhqf0kefdw","tag_id":"ck8kk0zjm0043ssyhys3na53k","_id":"ck8kk103f008xssyhl409ti5i"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","tag_id":"ck8kk0zjn0044ssyhta59d4d8","_id":"ck8kk103f008yssyht3ctng7y"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","tag_id":"ck8kk0zjo0045ssyhh0l40nww","_id":"ck8kk103f008zssyhnmztxjs4"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","tag_id":"ck8kk0zjo0046ssyhr50b6jxq","_id":"ck8kk103g0090ssyhanleg18a"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","tag_id":"ck8kk0zju0047ssyhiklqvhu9","_id":"ck8kk103g0091ssyhx3bnvdo6"},{"post_id":"ck8kk0yj1000ossyhe8gqhqes","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103g0092ssyhzjhfwzug"},{"post_id":"ck8kk0yj2000pssyhadl6d6lz","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103g0093ssyhc8usgklj"},{"post_id":"ck8kk0yj2000pssyhadl6d6lz","tag_id":"ck8kk0ziz003xssyh9v13j63s","_id":"ck8kk103j0094ssyhbloqrsm3"},{"post_id":"ck8kk0yj2000pssyhadl6d6lz","tag_id":"ck8kk0zk2004bssyhy2vfq7es","_id":"ck8kk103k0095ssyhjio86p67"},{"post_id":"ck8kk0yjd000qssyhg35783r2","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103k0096ssyhjtdr6806"},{"post_id":"ck8kk0yjd000qssyhg35783r2","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103k0097ssyhk982v06j"},{"post_id":"ck8kk0yjg000rssyhbkeg69lc","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103k0098ssyh3xevegga"},{"post_id":"ck8kk0yjg000rssyhbkeg69lc","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk103k0099ssyhkaoozseq"},{"post_id":"ck8kk0yjl000tssyh3djx2imi","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk103k009assyhrhsht0qk"},{"post_id":"ck8kk0yjl000tssyh3djx2imi","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk103k009bssyhhw6unwkg"},{"post_id":"ck8kk0yjt000ussyha0dxluye","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk103k009cssyh24u0yegi"},{"post_id":"ck8kk0yju000vssyhws6mqzxr","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk103k009dssyhbrks8ckh"},{"post_id":"ck8kk0yju000vssyhws6mqzxr","tag_id":"ck8kk0zkn004kssyhvw3dfbmw","_id":"ck8kk103k009essyhv11q8cr8"},{"post_id":"ck8kk0yju000vssyhws6mqzxr","tag_id":"ck8kk0zkr004lssyh8wyideva","_id":"ck8kk103k009fssyhpkwqm6ug"},{"post_id":"ck8kk0yju000vssyhws6mqzxr","tag_id":"ck8kk0zkr004mssyhqlgvsks7","_id":"ck8kk103k009gssyh8r5iega6"},{"post_id":"ck8kk0yjw000wssyh2dyl4kib","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk103k009hssyhxi0rbfxz"},{"post_id":"ck8kk0yjy000xssyh84cjbza6","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk103k009issyh59kn38tc"},{"post_id":"ck8kk0yk2000zssyh3ss8c8q7","tag_id":"ck8kk0zl1004pssyhcvm42t4w","_id":"ck8kk103k009jssyhjcao8bzd"},{"post_id":"ck8kk0ykb0010ssyhvqdg2kt2","tag_id":"ck8kk0zl2004qssyhj5jzv9ex","_id":"ck8kk103l009kssyhw9u2ep2s"},{"post_id":"ck8kk0ykg0011ssyh5co5ohgi","tag_id":"ck8kk0zgf002zssyh6gdzgzsj","_id":"ck8kk103l009lssyhxoqfkp9x"},{"post_id":"ck8kk0ykg0011ssyh5co5ohgi","tag_id":"ck8kk0zl3004sssyhbn4zbdlh","_id":"ck8kk103l009mssyhrewt6x08"},{"post_id":"ck8kk0ykg0011ssyh5co5ohgi","tag_id":"ck8kk0zl4004tssyhn7hwbflj","_id":"ck8kk103l009nssyh2vov9snx"},{"post_id":"ck8kk0ykh0012ssyhimhdgkow","tag_id":"ck8kk0zl5004ussyhvcw2sdv1","_id":"ck8kk103l009ossyh0njjozb5"},{"post_id":"ck8kk0ykh0012ssyhimhdgkow","tag_id":"ck8kk0zl8004vssyhbj52sk65","_id":"ck8kk103l009pssyhmq16qrt1"},{"post_id":"ck8kk0yko0013ssyhg0lb0gsv","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103l009qssyhy303jw0d"},{"post_id":"ck8kk0yko0013ssyhg0lb0gsv","tag_id":"ck8kk0zl9004xssyh1oauhwul","_id":"ck8kk103l009rssyhd8zcsgsv"},{"post_id":"ck8kk0yko0013ssyhg0lb0gsv","tag_id":"ck8kk0zgv0033ssyh8j9cf4j5","_id":"ck8kk103l009sssyhnra6r187"},{"post_id":"ck8kk0yko0013ssyhg0lb0gsv","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk103l009tssyh0b8jvnt8"},{"post_id":"ck8kk0yks0014ssyh6tgf0tp7","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103l009ussyh5i2htymg"},{"post_id":"ck8kk0yks0014ssyh6tgf0tp7","tag_id":"ck8kk0zls0051ssyh2ezha5mm","_id":"ck8kk103l009vssyho5d9rna4"},{"post_id":"ck8kk0ykt0015ssyhxakn3591","tag_id":"ck8kk0zlt0052ssyhbdot9col","_id":"ck8kk103l009wssyhzrkuz9es"},{"post_id":"ck8kk0yku0016ssyh02j9kvob","tag_id":"ck8kk0zlt0052ssyhbdot9col","_id":"ck8kk103l009xssyhpd3i1ngu"},{"post_id":"ck8kk0yku0016ssyh02j9kvob","tag_id":"ck8kk0zlu0054ssyhaemaq11f","_id":"ck8kk103l009yssyhri1ac9c9"},{"post_id":"ck8kk0ykw0017ssyhy9c2luqx","tag_id":"ck8kk0zlt0052ssyhbdot9col","_id":"ck8kk103l009zssyhhh02tppq"},{"post_id":"ck8kk0ykw0017ssyhy9c2luqx","tag_id":"ck8kk0zgf002zssyh6gdzgzsj","_id":"ck8kk103l00a0ssyhg35z7qoi"},{"post_id":"ck8kk0ykx0018ssyhpm4fmjkb","tag_id":"ck8kk0zlt0052ssyhbdot9col","_id":"ck8kk103m00a1ssyh2at0kgmg"},{"post_id":"ck8kk0ykx0018ssyhpm4fmjkb","tag_id":"ck8kk0zm60058ssyhy4hgr646","_id":"ck8kk103m00a2ssyhkugnlw6e"},{"post_id":"ck8kk0yky0019ssyh2tbh3p3u","tag_id":"ck8kk0zlt0052ssyhbdot9col","_id":"ck8kk103m00a3ssyh8vjf3yec"},{"post_id":"ck8kk0yky0019ssyh2tbh3p3u","tag_id":"ck8kk0zmb005assyhl3npowjo","_id":"ck8kk103m00a4ssyhyncioebk"},{"post_id":"ck8kk0yl0001assyh05he0zil","tag_id":"ck8kk0zmf005bssyhe315o4zy","_id":"ck8kk103m00a5ssyhu25hkzig"},{"post_id":"ck8kk0yl6001bssyh9jc16gzz","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103m00a6ssyhlncr97gg"},{"post_id":"ck8kk0yl6001bssyh9jc16gzz","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk103m00a7ssyhoh15lf5r"},{"post_id":"ck8kk0yl8001cssyhogkwxerp","tag_id":"ck8kk0zmr005essyhm5xe1g3w","_id":"ck8kk103r00a8ssyhrcmz5il6"},{"post_id":"ck8kk0yl8001cssyhogkwxerp","tag_id":"ck8kk0zms005fssyhoj0f6da9","_id":"ck8kk103y00a9ssyhe57r3kaw"},{"post_id":"ck8kk0yl8001cssyhogkwxerp","tag_id":"ck8kk0zms005gssyhsmnefqzq","_id":"ck8kk103y00aassyhcw72j1l2"},{"post_id":"ck8kk0yl8001cssyhogkwxerp","tag_id":"ck8kk0zms005hssyht1l22vjl","_id":"ck8kk103z00abssyh7k47yly4"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zn6005issyhpos3k93s","_id":"ck8kk103z00acssyhgru5xw9m"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zpf005jssyh5nuvvqa8","_id":"ck8kk103z00adssyhjw0ylixk"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zpg005kssyh45zmo5ba","_id":"ck8kk103z00aessyh9xb464x5"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zpg005lssyhco4peiwb","_id":"ck8kk103z00afssyh95cugp3w"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk103z00agssyhzi2fx6y9"},{"post_id":"ck8kk0yl9001dssyh3mshcle3","tag_id":"ck8kk0zpj005nssyhj08k32mz","_id":"ck8kk103z00ahssyhmh7tp6kc"},{"post_id":"ck8kk0yla001essyhy5ew753d","tag_id":"ck8kk0zpk005ossyhuxbj8k7d","_id":"ck8kk103z00aissyhy0p3udru"},{"post_id":"ck8kk0yla001essyhy5ew753d","tag_id":"ck8kk0zpl005pssyh051acyb8","_id":"ck8kk103z00ajssyhbamm89gd"},{"post_id":"ck8kk0yla001essyhy5ew753d","tag_id":"ck8kk0zpm005qssyhos0f6p08","_id":"ck8kk103z00akssyhd8iv8ej6"},{"post_id":"ck8kk0ylc001fssyho8hrenqt","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk103z00alssyh90bs2zkg"},{"post_id":"ck8kk0ylc001fssyho8hrenqt","tag_id":"ck8kk0zms005hssyht1l22vjl","_id":"ck8kk103z00amssyhesxmftsj"},{"post_id":"ck8kk0yld001gssyhmizb1ewp","tag_id":"ck8kk0zpo005tssyheyb9lfnz","_id":"ck8kk103z00anssyhhgxdbj45"},{"post_id":"ck8kk0yld001gssyhmizb1ewp","tag_id":"ck8kk0zgr0031ssyh6xops8au","_id":"ck8kk103z00aossyhrulh8ohf"},{"post_id":"ck8kk0yld001gssyhmizb1ewp","tag_id":"ck8kk0zpw005vssyhubf9q4xv","_id":"ck8kk103z00apssyh7x5h3y0q"},{"post_id":"ck8kk0yld001gssyhmizb1ewp","tag_id":"ck8kk0zq1005wssyhju5sw5mv","_id":"ck8kk103z00aqssyhx8medzhm"},{"post_id":"ck8kk0yle001hssyhxmu307m6","tag_id":"ck8kk0zq1005xssyhx88n90jo","_id":"ck8kk103z00arssyhj9jd7un6"},{"post_id":"ck8kk0yle001hssyhxmu307m6","tag_id":"ck8kk0zq2005yssyh8p64twyu","_id":"ck8kk103z00asssyhrk3xli4p"},{"post_id":"ck8kk0yle001hssyhxmu307m6","tag_id":"ck8kk0zq2005zssyh6pm637wk","_id":"ck8kk104000atssyhfvf9kqbl"},{"post_id":"ck8kk0zch001lssyhp131loe0","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk104000aussyh0ya0t63e"},{"post_id":"ck8kk0zch001lssyhp131loe0","tag_id":"ck8kk0zir003vssyhrx60lg0u","_id":"ck8kk104000avssyh8rzmxpld"},{"post_id":"ck8kk0zcq001pssyh7k79tzuz","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk104000awssyhyegr601e"},{"post_id":"ck8kk0zcq001pssyh7k79tzuz","tag_id":"ck8kk0ziz003xssyh9v13j63s","_id":"ck8kk104000axssyhr4bwql5h"},{"post_id":"ck8kk0zcq001pssyh7k79tzuz","tag_id":"ck8kk0zj0003yssyhkxwgi4ht","_id":"ck8kk104000ayssyhvce39vw0"},{"post_id":"ck8kk0zcq001pssyh7k79tzuz","tag_id":"ck8kk0zjm0043ssyhys3na53k","_id":"ck8kk104000azssyhe1nqgtng"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk0zkc004gssyhiumay74c","_id":"ck8kk10em00b0ssyh8osmtt7o"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102c0061ssyhyd9bq9yz","_id":"ck8kk10em00b2ssyhre0llw4m"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102e0068ssyh72tdl2cj","_id":"ck8kk10em00b3ssyh73iqv56c"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102g006dssyhc5u7yyf8","_id":"ck8kk10em00b4ssyhxt099kdc"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102i006issyh6d4epz5m","_id":"ck8kk10en00b5ssyh75ztdfje"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102j006ossyhpg707tcb","_id":"ck8kk10en00b6ssyhm0vofzgf"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk102k006ussyhboa9tolb","_id":"ck8kk10en00b7ssyh9lp4u54y"},{"post_id":"ck8kk0zce001kssyhnz1rc1mk","tag_id":"ck8kk0zk3004cssyhr80wetyb","_id":"ck8kk10en00b8ssyh1fqjhg35"},{"post_id":"ck8kk0zcj001mssyhhmutv2pp","tag_id":"ck8kk102l006zssyhoyaytv39","_id":"ck8kk10en00b9ssyhtuu6bvfw"},{"post_id":"ck8kk0zcj001mssyhhmutv2pp","tag_id":"ck8kk102m0074ssyhyqube5tb","_id":"ck8kk10en00bassyh1ki7t48i"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk102n007assyhduga8gf1","_id":"ck8kk10en00bbssyh1azbp1bj"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk10en00bcssyhk9hkqgi5"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk102o007gssyhehgqf3ty","_id":"ck8kk10en00bdssyhfe9e7swo"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk102v007lssyhr5t4d7bg","_id":"ck8kk10en00bessyh5yeyqcsv"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk102y007qssyhezb1ozrs","_id":"ck8kk10en00bfssyhrpsevabd"},{"post_id":"ck8kk0zcx001qssyhy6rfdccq","tag_id":"ck8kk102z007wssyhq1mg91lg","_id":"ck8kk10en00bgssyhnnuocu59"},{"post_id":"ck8kk11f600bhssyhmpvv3hsx","tag_id":"ck8kk0ziz003wssyhzy0k3wdj","_id":"ck8kk11g200blssyhpl9is7x8"},{"post_id":"ck8kk11f600bhssyhmpvv3hsx","tag_id":"ck8kk11fm00bissyhlnvb6m44","_id":"ck8kk11g200bmssyhefbtnl0f"},{"post_id":"ck8kk11f600bhssyhmpvv3hsx","tag_id":"ck8kk11fp00bkssyh9jr203gi","_id":"ck8kk11g300bnssyho5mvxnsg"}],"Tag":[{"name":"Apache","_id":"ck8kk0zc8001jssyhfgzua69u"},{"name":"重定向","_id":"ck8kk0zcp001ossyh2tq68hmz"},{"name":"域名","_id":"ck8kk0zd1001sssyhj4rao71k"},{"name":"GitHub","_id":"ck8kk0zdd001ussyhiqcf3dn6"},{"name":"GitCafe","_id":"ck8kk0zdg001wssyh4wdqaqp0"},{"name":"Java","_id":"ck8kk0zdj001yssyhj04m0ou4"},{"name":"Reactive","_id":"ck8kk0zdr0020ssyhsd61aevn"},{"name":"meta","_id":"ck8kk0zdw0022ssyhxb7hhyih"},{"name":"浏览器","_id":"ck8kk0zdy0024ssyh9gnrvbj2"},{"name":"前端","_id":"ck8kk0ze20026ssyhkbmdugil"},{"name":"事务","_id":"ck8kk0zer002cssyhoc1wa70o"},{"name":"mongo","_id":"ck8kk0zet002essyh4xlgqkjz"},{"name":"数据库","_id":"ck8kk0zev002gssyhsdlp3ov6"},{"name":"Aggregation","_id":"ck8kk0zex002jssyhdl8qb6sc"},{"name":"Flux","_id":"ck8kk0zfx002vssyhs3afpw6s"},{"name":"Android","_id":"ck8kk0zgf002zssyh6gdzgzsj"},{"name":"macOS","_id":"ck8kk0zgr0031ssyh6xops8au"},{"name":"命令","_id":"ck8kk0zgv0033ssyh8j9cf4j5"},{"name":"效率","_id":"ck8kk0zh40035ssyhmfsparj5"},{"name":"无线","_id":"ck8kk0zh50037ssyhqlmpxkne"},{"name":"调试","_id":"ck8kk0zh80039ssyh6hgj1ews"},{"name":"adb","_id":"ck8kk0zha003bssyhlypmn9ba"},{"name":"USB","_id":"ck8kk0zhb003dssyhkk09usni"},{"name":"软件","_id":"ck8kk0zhd003gssyhgs57249f"},{"name":"推荐","_id":"ck8kk0zi1003issyhodv4s05f"},{"name":"Chrome","_id":"ck8kk0zik003ossyh9cy3hy4v"},{"name":"工具","_id":"ck8kk0zin003qssyhazx4ztom"},{"name":"扩展","_id":"ck8kk0zip003sssyhjmh3cs31"},{"name":"插件","_id":"ck8kk0ziq003tssyhfyw75ttr"},{"name":"curl","_id":"ck8kk0ziq003ussyhc8ny3n0u"},{"name":"教程","_id":"ck8kk0zir003vssyhrx60lg0u"},{"name":"Django","_id":"ck8kk0ziz003wssyhzy0k3wdj"},{"name":"restful","_id":"ck8kk0ziz003xssyh9v13j63s"},{"name":"api","_id":"ck8kk0zj0003yssyhkxwgi4ht"},{"name":"version","_id":"ck8kk0zj1003zssyhqru31vi0"},{"name":"问题","_id":"ck8kk0zjm0043ssyhys3na53k"},{"name":"restful api","_id":"ck8kk0zjn0044ssyhta59d4d8"},{"name":"接口","_id":"ck8kk0zjo0045ssyhh0l40nww"},{"name":"单元测试","_id":"ck8kk0zjo0046ssyhr50b6jxq"},{"name":"测试","_id":"ck8kk0zju0047ssyhiklqvhu9"},{"name":"api， version","_id":"ck8kk0zk2004bssyhy2vfq7es"},{"name":"Python","_id":"ck8kk0zk3004cssyhr80wetyb"},{"name":"Git","_id":"ck8kk0zkc004gssyhiumay74c"},{"name":"reset","_id":"ck8kk0zkn004kssyhvw3dfbmw"},{"name":"恢复","_id":"ck8kk0zkr004lssyh8wyideva"},{"name":"后悔","_id":"ck8kk0zkr004mssyhqlgvsks7"},{"name":"js","_id":"ck8kk0zl1004pssyhcvm42t4w"},{"name":"远程","_id":"ck8kk0zl2004qssyhj5jzv9ex"},{"name":"Material Design","_id":"ck8kk0zl3004sssyhbn4zbdlh"},{"name":"网页框架","_id":"ck8kk0zl4004tssyhn7hwbflj"},{"name":"npm","_id":"ck8kk0zl5004ussyhvcw2sdv1"},{"name":"Nodejs","_id":"ck8kk0zl8004vssyhbj52sk65"},{"name":"pip","_id":"ck8kk0zl9004xssyh1oauhwul"},{"name":"UUID","_id":"ck8kk0zls0051ssyh2ezha5mm"},{"name":"Ubuntu","_id":"ck8kk0zlt0052ssyhbdot9col"},{"name":"JDK","_id":"ck8kk0zlu0054ssyhaemaq11f"},{"name":"驱动","_id":"ck8kk0zm60058ssyhy4hgr646"},{"name":"Shadowsocks","_id":"ck8kk0zmb005assyhl3npowjo"},{"name":"杂谈","_id":"ck8kk0zmf005bssyhe315o4zy"},{"name":"微信公众号","_id":"ck8kk0zmr005essyhm5xe1g3w"},{"name":"端口","_id":"ck8kk0zms005fssyhoj0f6da9"},{"name":"ngrok","_id":"ck8kk0zms005gssyhsmnefqzq"},{"name":"内网穿透","_id":"ck8kk0zms005hssyht1l22vjl"},{"name":"Virtualenv","_id":"ck8kk0zn6005issyhpos3k93s"},{"name":"virtualenvwrapper","_id":"ck8kk0zpf005jssyh5nuvvqa8"},{"name":"独立","_id":"ck8kk0zpg005kssyh45zmo5ba"},{"name":"虚拟环境","_id":"ck8kk0zpg005lssyhco4peiwb"},{"name":"requirements","_id":"ck8kk0zpj005nssyhj08k32mz"},{"name":"Synergy","_id":"ck8kk0zpk005ossyhuxbj8k7d"},{"name":"共享","_id":"ck8kk0zpl005pssyh051acyb8"},{"name":"键盘","_id":"ck8kk0zpm005qssyhos0f6p08"},{"name":"Jenkins","_id":"ck8kk0zpo005tssyheyb9lfnz"},{"name":"权限","_id":"ck8kk0zpw005vssyhubf9q4xv"},{"name":"用户","_id":"ck8kk0zq1005wssyhju5sw5mv"},{"name":"电影","_id":"ck8kk0zq1005xssyhx88n90jo"},{"name":"小黄人","_id":"ck8kk0zq2005yssyh8p64twyu"},{"name":"预告片","_id":"ck8kk0zq2005zssyh6pm637wk"},{"name":"Gitee","_id":"ck8kk102c0061ssyhyd9bq9yz"},{"name":"GitLab","_id":"ck8kk102e0068ssyh72tdl2cj"},{"name":"Gite","_id":"ck8kk102g006dssyhc5u7yyf8"},{"name":"Gogs","_id":"ck8kk102i006issyh6d4epz5m"},{"name":"迁移","_id":"ck8kk102j006ossyhpg707tcb"},{"name":"代码","_id":"ck8kk102k006ussyhboa9tolb"},{"name":"猫","_id":"ck8kk102l006zssyhoyaytv39"},{"name":"Cat","_id":"ck8kk102m0074ssyhyqube5tb"},{"name":"centOS","_id":"ck8kk102n007assyhduga8gf1"},{"name":"Nginx","_id":"ck8kk102o007gssyhehgqf3ty"},{"name":"Gunicorn","_id":"ck8kk102v007lssyhr5t4d7bg"},{"name":"MySQL","_id":"ck8kk102y007qssyhezb1ozrs"},{"name":"Supervisor","_id":"ck8kk102z007wssyhq1mg91lg"},{"name":"文档","_id":"ck8kk11fm00bissyhlnvb6m44"},{"name":"笔记","_id":"ck8kk11fp00bkssyh9jr203gi"}]}}