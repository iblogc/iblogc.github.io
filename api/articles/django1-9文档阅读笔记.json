{"title":"Django 1.9文档阅读笔记","slug":"django1-9文档阅读笔记","date":"2016-04-04T07:27:20.000Z","updated":"2020-08-15T03:05:48.000Z","comments":true,"path":"api/articles/django1-9文档阅读笔记.json","excerpt":"<br/><br>","covers":["/media/django-commands.png"],"content":"<html><head></head><body><p><br><br><span id=\"more\"></span></p>\n<!--more-->\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/models.html\">模型</a></h2><p><a href=\"http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api\">Model _meta API</a></p>\n<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>\n<p>模型继承</p>\n<ol>\n<li>抽象基类<ul>\n<li>默认继承元类</li>\n</ul>\n</li>\n<li>多表继承<ul>\n<li>一般情况不继承元类</li>\n</ul>\n</li>\n<li>代理模型</li>\n</ol>\n<p>多重继承主要用于<code>mix-in</code>类</p>\n<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>\n<h2 id=\"模型字段参考\"><a href=\"#模型字段参考\" class=\"headerlink\" title=\"模型字段参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships\">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>\n<p>关联自己使用<code>self</code></p>\n<p><code>related_name</code> <code>relate_query_name</code></p>\n<p>外键关联到特定字段<br><code>to_field</code></p>\n<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>\n<p>外键关联对象删除行为<br><code>on_delete</code></p>\n<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>\n<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>\n<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>\n<p>##<a href=\"http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships\">执行查询</a></p>\n<p><a href=\"http://python.usyiyi.cn/django/howto/custom-lookups.html\">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>\n<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>\n<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>([p.headline <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Evaluate the query set.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>([p.pub_date <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Re-use the cache from the evaluation.</span></span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database again</span></span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; queryset = Entry.objects.all()</span><br><span class=\"line\">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>\n<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>\n<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>\n<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>\n<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>\n<p>一对多关联对象访问会缓存<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(e.blog)  <span class=\"comment\"># Hits the database to retrieve the associated Blog.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(e.blog)  <span class=\"comment\"># Doesn't hit the database; uses cached version.</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>自定义反向管理器1.7+<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span>(models.Model):</span><br><span class=\"line\">    <span class=\"comment\">#...</span></span><br><span class=\"line\">    objects = models.Manager()  <span class=\"comment\"># Default Manager</span></span><br><span class=\"line\">    entries = EntryManager()    <span class=\"comment\"># Custom Manager</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = Blog.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set(manager=<span class=\"string\">'entries'</span>).<span class=\"built_in\">all</span>()</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"查询集API-参考\"><a href=\"#查询集API-参考\" class=\"headerlink\" title=\"查询集API 参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/querysets.html\">查询集API 参考</a></h2><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/aggregation.html\">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>\n<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>\n<p>在查作者列表时要查每个作者有几篇博文<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.<span class=\"built_in\">object</span>.<span class=\"built_in\">all</span>().annotate(Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"comment\"># authors[0]作者的博文数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].blog__count</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.<span class=\"built_in\">object</span>.<span class=\"built_in\">all</span>().annotate(number_of_blog=Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].number_of_blog</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></tbody></table></figure><br>算出所有作者的年龄总合（不需要其它数据）<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ageAuthor.objects.<span class=\"built_in\">all</span>().aggregate(Sum(<span class=\"string\">'age'</span>))</span><br><span class=\"line\">{<span class=\"string\">'age__sum'</span>: <span class=\"number\">26</span>}</span><br></pre></td></tr></tbody></table></figure><br><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象<p></p>\n<p>对注解进行过滤<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出作者数大于1的书本</span></span><br><span class=\"line\"><span class=\"comment\"># 只有一条sql</span></span><br><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).<span class=\"built_in\">filter</span>(num_authors__gt=<span class=\"number\">1</span>)</span><br></pre></td></tr></tbody></table></figure><br>但顺序不一样，结果也不同，如：<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publisher.objects.annotate(num_books=Count(<span class=\"string\">'book'</span>)).<span class=\"built_in\">filter</span>(book__rating__gt=<span class=\"number\">3.0</span>)</span><br><span class=\"line\">Publisher.objects.<span class=\"built_in\">filter</span>(book__rating__gt=<span class=\"number\">3.0</span>).annotate(num_books=Count(<span class=\"string\">'book'</span>)) </span><br></pre></td></tr></tbody></table></figure><br>对注解项进行排序<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).order_by(<span class=\"string\">'num_authors'</span>)</span><br></pre></td></tr></tbody></table></figure><br><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上<p></p>\n<blockquote>\n<p>与默认排序交换或order_by()¶</p>\n</blockquote>\n<blockquote>\n<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>\n</blockquote>\n<blockquote>\n<p>通过例子中的方法，假设有一个这样的模型：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Item</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    data = models.IntegerField() </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        ordering = [<span class=\"string\">\"name\"</span>]</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Warning: not quite correct!</span></span><br><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>)).order_by()</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>\n</blockquote>\n<blockquote>\n<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>\n</blockquote>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><p><a href=\"http://python.usyiyi.cn/django/intro/tutorial06.html\">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>\n<figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% load static %}</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"{% static user_stylesheet %}\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"{% static 'polls/style.css' %}\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"{% get_static_prefix %}pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">{% get_static_prefix as STATIC_PREFIX %}</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"{{ STATIC_PREFIX }}pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">{% static \"images/hi.jpg\" as myphoto %}</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"{{ myphoto }}\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure>\n<p>还有<code>get_media_prefix</code></p>\n<h2 id=\"模型实例参考\"><a href=\"#模型实例参考\" class=\"headerlink\" title=\"模型实例参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model\">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>\n<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>\n<p>验证对象</p>\n<blockquote>\n<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</fieldname></p>\n</blockquote>\n<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>\n<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>\n<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>\n<blockquote>\n<p>指定要保存的字段</p>\n</blockquote>\n<blockquote>\n<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product.name = <span class=\"string\">'Name changed again'</span></span><br><span class=\"line\">product.save(update_fields=[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>\n</blockquote>\n<blockquote>\n<p>指定<code>update_fields</code>将强制使用更新操作。</p>\n</blockquote>\n<blockquote>\n<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>\n</blockquote>\n<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code></code>keep_parents=True<code>可以保留上级数据，默认为</code>False`<br>返回值为删除数据的条数</p>\n<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.get_next_by_FOO(**kwargs)¶ </span><br><span class=\"line\">Model.get_previous_by_FOO(**kwargs)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"管理器\"><a href=\"#管理器\" class=\"headerlink\" title=\"管理器\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html\">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>\n<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DefaultManager</span>(models.Manager):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_queryset</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        queryset = <span class=\"built_in\">super</span>(DefaultManager, self).get_quertset().<span class=\"built_in\">filter</span>(is_delete=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Author</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Post</span>(models.Model):</span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">post = Post.objects.get(pk=<span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 调用DefaultManager管理器</span></span><br><span class=\"line\">author.post_set.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></span><br><span class=\"line\">post.author</span><br></pre></td></tr></tbody></table></figure><br><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em><p></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager\">从Manager中调用自定义的QuerySet</a></p>\n<h2 id=\"进行原始的SQL查询\"><a href=\"#进行原始的SQL查询\" class=\"headerlink\" title=\"进行原始的SQL查询\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/sql.html\">进行原始的SQL查询</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manager.raw(raw_query, params=<span class=\"literal\">None</span>, translations=<span class=\"literal\">None</span>)</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>\n</blockquote>\n<h2 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/transactions.html\">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>\n<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>\n<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@transaction.atomic</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">viewfunc</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">    do_stuff()</span><br></pre></td></tr></tbody></table></figure><br>或<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">viewfunc</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># This code executes in autocommit mode (Django's default).</span></span><br><span class=\"line\">    do_stuff()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</span><br><span class=\"line\">        <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">        do_more_stuff()</span><br></pre></td></tr></tbody></table></figure><br>避免在 atomic里捕获异常!<p></p>\n<h2 id=\"查询表达式\"><a href=\"#查询表达式\" class=\"headerlink\" title=\"查询表达式\"></a>查询表达式</h2><p>使用数据库的方法<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Func, F </span><br><span class=\"line\">queryset.annotate(field_lower=Func(F(<span class=\"string\">'field'</span>), function=<span class=\"string\">'LOWER'</span>))</span><br></pre></td></tr></tbody></table></figure><br>或<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lower</span>(<span class=\"title class_ inherited__\">Func</span>):</span><br><span class=\"line\">    function = <span class=\"string\">'LOWER'</span> </span><br><span class=\"line\">queryset.annotate(field_lower=Lower(F(<span class=\"string\">'field'</span>)))</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/conditional-expressions.html\">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>\n<h2 id=\"数据库函数\"><a href=\"#数据库函数\" class=\"headerlink\" title=\"数据库函数\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/database-functions.html\">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>\n<h2 id=\"将遗留数据库整合到Django\"><a href=\"#将遗留数据库整合到Django\" class=\"headerlink\" title=\"将遗留数据库整合到Django\"></a><a href=\"http://python.usyiyi.cn/django/howto/legacy-databases.html\">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"为模型提供初始数据\"><a href=\"#为模型提供初始数据\" class=\"headerlink\" title=\"为模型提供初始数据\"></a><a href=\"http://python.usyiyi.cn/django/howto/initial-data.html\">为模型提供初始数据</a></h2><p>使用fixtures<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  {</span><br><span class=\"line\">    \"model\": \"myapp.person\",</span><br><span class=\"line\">    \"pk\": 1,</span><br><span class=\"line\">    \"fields\": {</span><br><span class=\"line\">      \"first_name\": \"John\",</span><br><span class=\"line\">      \"last_name\": \"Lennon\"</span><br><span class=\"line\">    }</span><br><span class=\"line\">  },</span><br><span class=\"line\">  {</span><br><span class=\"line\">    \"model\": \"myapp.person\",</span><br><span class=\"line\">    \"pk\": 2,</span><br><span class=\"line\">    \"fields\": {</span><br><span class=\"line\">      \"first_name\": \"Paul\",</span><br><span class=\"line\">      \"last_name\": \"McCartney\"</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><br>导入数据命令<br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py loaddata &lt;fixturename&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"数据库访问优化\"><a href=\"#数据库访问优化\" class=\"headerlink\" title=\"数据库访问优化\"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>\n<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>\n<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>\n<p>用唯一的或被索引的列来检索独立对象</p>\n<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>\n<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>\n<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>\n<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>\n<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>\n<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>\n<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>\n<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>\n<p>直接使用外键的值<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry.blog_id</span><br><span class=\"line\"><span class=\"comment\"># 而不是</span></span><br><span class=\"line\">entry.blog.<span class=\"built_in\">id</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>\n<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_band.members.add(me, my_friend) </span><br><span class=\"line\"><span class=\"comment\">#更优于 </span></span><br><span class=\"line\">my_band.members.add(me)</span><br><span class=\"line\">my_band.members.add(my_friend)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"URL调度器\"><a href=\"#URL调度器\" class=\"headerlink\" title=\"URL调度器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html\">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>\n<p>在根url上获取的参数不影响参数传递<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># In settings/urls/main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;username&gt;\\w+)/blog/'</span>, include(<span class=\"string\">'foo.urls.blog'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># In foo/urls/blog.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.blog.index),</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.blog.archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><br>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。<p></p>\n<p>可嵌套<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'blog/(page-(\\d+)/)?$'</span>, blog_articles),                  <span class=\"comment\"># bad</span></span><br><span class=\"line\">    url(<span class=\"string\">r'comments/(?:page-(?P&lt;page_number&gt;\\d+)/)?$'</span>, comments),  <span class=\"comment\"># good</span></span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>传递额外的参数<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/(?P&lt;year&gt;[0-9]{4})/$'</span>, views.year_archive, {<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>}),</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><br>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值<p></p>\n<p>传递额外的参数给<code>include()</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>), {<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>}),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about),</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><br>效果等同<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive, {<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>}),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about, {<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>}),</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls\">反查带命名空间的URL</a></p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/views.html\">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>\n<ul>\n<li><code>HttpResponseRedirect</code> 临时重定向，302</li>\n<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>\n<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>\n<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>\n<li><code>HttpResponseNotFound</code> 页面没找到，404</li>\n<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>\n<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>\n<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>\n<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>\n<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>\n</ul>\n<p>重写错误视图（在url中）<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler404 = 'mysite.views.my_custom_page_not_found_view'</span><br><span class=\"line\">handler500 = 'mysite.views.my_custom_error_view' </span><br><span class=\"line\">handler403 = 'mysite.views.my_custom_permission_denied_view'</span><br><span class=\"line\">handler400 = 'mysite.views.my_custom_bad_request_view' </span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"Django-的快捷函数\"><a href=\"#Django-的快捷函数\" class=\"headerlink\" title=\"Django 的快捷函数\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/shortcuts.html\">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>\n<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>\n<blockquote>\n<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>\n<pre><code>一个模型：将调用模型的get_absolute_url() 函数\n一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n一个绝对的或相对的URL，将原样作为重定向的位置。\n</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>\n</blockquote>\n<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/decorators.html\">视图装饰器</a></h2><p><a href=\"http://python.usyiyi.cn/django/topics/conditional-view-processing.html\">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@condition(<span class=\"params\">etag_func=<span class=\"literal\">None</span>, last_modified_func=<span class=\"literal\">None</span></span>)</span></span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@last_modified(<span class=\"params\">last_modified_func</span>)</span></span><br></pre></td></tr></tbody></table></figure>\n<p>根据最后修改时间来决定是否运行视图，可减少流量<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@etag(<span class=\"params\">etag_func</span>)</span></span><br></pre></td></tr></tbody></table></figure><br><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用<p></p>\n<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>\n<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>\n<p><code>never_cache</code></p>\n<h2 id=\"Request-对象和Response-对象\"><a href=\"#Request-对象和Response-对象\" class=\"headerlink\" title=\"Request 对象和Response 对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，</p><form>带有<code>enctype=\"multipart/form-data\"</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt='', max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpRequest.read(size=<span class=\"literal\">None</span>)</span><br><span class=\"line\">HttpRequest.readline()</span><br><span class=\"line\">HttpRequest.readlines()</span><br><span class=\"line\">HttpRequest.xreadlines()</span><br><span class=\"line\">HttpRequest.__iter__()</span><br></pre></td></tr></tbody></table></figure><br>这几个方法实现类文件的接口用于读取HttpRequest· 实例<p></p>\n<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>\n<h2 id=\"TemplateResponse-和SimpleTemplateResponse\"><a href=\"#TemplateResponse-和SimpleTemplateResponse\" class=\"headerlink\" title=\"TemplateResponse 和SimpleTemplateResponse\"></a><a href=\"http://python.usyiyi.cn/django/ref/template-response.html\">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>\n<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template.response <span class=\"keyword\">import</span> TemplateResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">blog_index</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TemplateResponse(request, <span class=\"string\">'entry_list.html'</span>, {<span class=\"string\">'entries'</span>: Entry.objects.<span class=\"built_in\">all</span>()})</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/file-uploads.html\">文件上传</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_uploaded_file</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">'some/file/name.txt'</span>, <span class=\"string\">'wb+'</span>) <span class=\"keyword\">as</span> destination:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> f.chunks():</span><br><span class=\"line\">            destination.write(chunk)</span><br></pre></td></tr></tbody></table></figure>\n<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>\n<p>上传处理器<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(\"django.core.files.uploadhandler.MemoryFileUploadHandler\",</span><br><span class=\"line\">\"django.core.files.uploadhandler.TemporaryFileUploadHandler\",)</span><br></pre></td></tr></tbody></table></figure><br>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。<p></p>\n<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>\n<p>更改上传处理器的行为<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFAULT_FILE_STORAGE</span><br><span class=\"line\">FILE_CHARSET</span><br><span class=\"line\">FILE_UPLOAD_HANDLERS</span><br><span class=\"line\">FILE_UPLOAD_MAX_MEMORY_SIZE</span><br><span class=\"line\">FILE_UPLOAD_PERMISSIONS</span><br><span class=\"line\">FILE_UPLOAD_TEMP_DIR</span><br><span class=\"line\">MEDIA_ROOT</span><br><span class=\"line\">MEDIA_URL</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>在运行中更改上传处理器<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br></pre></td></tr></tbody></table></figure><p></p>\n<blockquote>\n<p> 注意</p>\n</blockquote>\n<blockquote>\n<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>\n</blockquote>\n<blockquote>\n<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>\n</blockquote>\n<blockquote>\n<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect</span></figcaption><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def upload_file_view(request):</span><br><span class=\"line\">   request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br><span class=\"line\">   return _upload_file_view(request) </span><br><span class=\"line\">@csrf_protect</span><br><span class=\"line\">def _upload_file_view(request):</span><br><span class=\"line\">   ... # Process request</span><br></pre></td></tr></tbody></table></figure>\n <figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## [File对象](http://python.usyiyi.cn/django/ref/files/file.html)</span><br><span class=\"line\">`File`类</span><br><span class=\"line\">`ContentFile`类</span><br><span class=\"line\">`ImageFile`类 比`File`多了`width`和`height`属性</span><br><span class=\"line\">附加到对象的文件有额外的方法</span><br></pre></td></tr></tbody></table></figure>\n<p>File.save(name, content[, save=True])<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。</span><br><span class=\"line\">测试出来直接`car.save()`也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串</span><br><span class=\"line\">如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：</span><br><span class=\"line\">​```python</span><br><span class=\"line\">&gt;&gt;&gt; car.photo.save('myphoto.jpg', content, save=False)</span><br><span class=\"line\">&gt;&gt;&gt; car.save()</span><br></pre></td></tr></tbody></table></figure><br>等价于：<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"literal\">True</span>)</span><br></pre></td></tr></tbody></table></figure><p></p>\n</blockquote>\n<p>从模型实例中移除文件，并且删除内部文件<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.delete([save=True])</span><br></pre></td></tr></tbody></table></figure><br>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件<p></p>\n<h2 id=\"文件储存API\"><a href=\"#文件储存API\" class=\"headerlink\" title=\"文件储存API\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/storage.html\">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>\n<h2 id=\"管理文件\"><a href=\"#管理文件\" class=\"headerlink\" title=\"管理文件\"></a><a href=\"http://python.usyiyi.cn/django/topics/files.html\">管理文件</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">    price = models.DecimalField(max_digits=<span class=\"number\">5</span>, decimal_places=<span class=\"number\">2</span>)</span><br><span class=\"line\">    photo = models.ImageField(upload_to=<span class=\"string\">'cars'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>\n<p><em>实际测试有出入</em><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方示例</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'http://media.example.com/cars/chevy.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际测试结果</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'/upload/20151230171832_0.jpg'</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>更改一个文件的存储位置<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>initial_path = car.photo.path</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.name = <span class=\"string\">'cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Move the file on the filesystem</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path == new_path</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"编写自定义存储系统\"><a href=\"#编写自定义存储系统\" class=\"headerlink\" title=\"编写自定义存储系统\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-file-storage.html\">编写自定义存储系统</a></h2><ol>\n<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>\n<li>Django必须能够不带任何参数来实例化</li>\n<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>\n<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>\n</ol>\n<h2 id=\"基于类的视图\"><a href=\"#基于类的视图\" class=\"headerlink\" title=\"基于类的视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/index.html\">基于类的视图</a></h2><h2 id=\"基于类的内建通用视图\"><a href=\"#基于类的内建通用视图\" class=\"headerlink\" title=\"基于类的内建通用视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html\">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>\n<h2 id=\"使用基于类的视图处理表单\"><a href=\"#使用基于类的视图处理表单\" class=\"headerlink\" title=\"使用基于类的视图处理表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html\">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>\n<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>\n<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>\n<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/mixins.html\">Mixin</a></h2><h2 id=\"基于类的视图的Mixin\"><a href=\"#基于类的视图的Mixin\" class=\"headerlink\" title=\"基于类的视图的Mixin\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/mixins.html\">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>\n<blockquote>\n<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sensitive_function</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.database_record.delete()</span><br><span class=\"line\">    sensitive_function.alters_data = <span class=\"literal\">True</span></span><br></pre></td></tr></tbody></table></figure><br>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表<p></p>\n</blockquote>\n<h2 id=\"内建基于类的视图的API\"><a href=\"#内建基于类的视图的API\" class=\"headerlink\" title=\"内建基于类的视图的API\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/index.html\">内建基于类的视图的API</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^view/$'</span>, MyView.as_view(size=<span class=\"number\">42</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></tbody></table></figure>\n<blockquote>\n<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>\n</blockquote>\n<h2 id=\"基于类的通用视图-——-索引\"><a href=\"#基于类的通用视图-——-索引\" class=\"headerlink\" title=\"基于类的通用视图 —— 索引\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html\">基于类的通用视图 —— 索引</a></h2><h2 id=\"使用Django输出CSV\"><a href=\"#使用Django输出CSV\" class=\"headerlink\" title=\"使用Django输出CSV\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-csv.html\">使用Django输出CSV</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">some_view</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate CSV header.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'text/csv'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.csv\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    writer = csv.writer(response)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'First row'</span>, <span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>])</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'Second row'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'\"Testing\"'</span>, <span class=\"string\">\"Here's a quote\"</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"使用Django输出PDF\"><a href=\"#使用Django输出PDF\" class=\"headerlink\" title=\"使用Django输出PDF\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-pdf.html\">使用Django输出PDF</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">some_view</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate PDF headers.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'application/pdf'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.pdf\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Create the PDF object, using the response object as its \"file.\"</span></span><br><span class=\"line\">    p = canvas.Canvas(response)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Draw things on the PDF. Here's where the PDF generation happens.</span></span><br><span class=\"line\">    <span class=\"comment\"># See the ReportLab documentation for the full list of functionality.</span></span><br><span class=\"line\">    p.drawString(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">\"Hello world.\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Close the PDF object cleanly, and we're done.</span></span><br><span class=\"line\">    p.showPage()</span><br><span class=\"line\">    p.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html\">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<blockquote>\n<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>\n</blockquote>\n<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>\n<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses\">处理流式响应</a></em></strong></p>\n<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>\n<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>\n<ul>\n<li>中间件类不能是任何类的子类</li>\n<li>中间件可以放在python路径中的任务位置<br>正常<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"> </span><br><span class=\"line\">D.process_template_response</span><br><span class=\"line\">C.process_template_response</span><br><span class=\"line\">B.process_template_response</span><br><span class=\"line\">A.process_template_response</span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></tbody></table></figure>\n视图异常<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"></span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></tbody></table></figure>\n</li>\n</ul>\n<h2 id=\"django中可用的中间件\"><a href=\"#django中可用的中间件\" class=\"headerlink\" title=\"django中可用的中间件\"></a><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\">django中可用的中间件</a></h2><h3 id=\"class-CommonMiddleware\"><a href=\"#class-CommonMiddleware\" class=\"headerlink\" title=\"class CommonMiddleware\"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>\n<h3 id=\"class-BrokenLinkEmailsMiddleware\"><a href=\"#class-BrokenLinkEmailsMiddleware\" class=\"headerlink\" title=\"class BrokenLinkEmailsMiddleware\"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>\n<h3 id=\"class-GZipMiddleware\"><a href=\"#class-GZipMiddleware\" class=\"headerlink\" title=\"class GZipMiddleware\"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>\n<h3 id=\"class-ConditionalGetMiddleware\"><a href=\"#class-ConditionalGetMiddleware\" class=\"headerlink\" title=\"class ConditionalGetMiddleware\"></a><code>class ConditionalGetMiddleware</code></h3><h3 id=\"class-LocaleMiddeware\"><a href=\"#class-LocaleMiddeware\" class=\"headerlink\" title=\"class LocaleMiddeware\"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>\n<h3 id=\"class-MessageMiddleware\"><a href=\"#class-MessageMiddleware\" class=\"headerlink\" title=\"class MessageMiddleware\"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>\n<h3 id=\"class-SecurityMiddleware\"><a href=\"#class-SecurityMiddleware\" class=\"headerlink\" title=\"class SecurityMiddleware\"></a><code>class SecurityMiddleware</code></h3><p><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\">中间件的排序</a></p>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a><a href=\"http://python.usyiyi.cn/django/topics/templates.html\">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>\n<h2 id=\"Django模版语言\"><a href=\"#Django模版语言\" class=\"headerlink\" title=\"Django模版语言\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/language.html\">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>\n<ul>\n<li>字典查询（Dictionary lookup）</li>\n<li>属性或方法查询（Attribute or method lookup）</li>\n<li>数字索引查询（Numeric index lookup）</li>\n</ul>\n<p>模版变量最终解释成字面量，而不是变量值</p>\n<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>\n<h2 id=\"内置标签与过滤器\"><a href=\"#内置标签与过滤器\" class=\"headerlink\" title=\"内置标签与过滤器\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\">内置标签与过滤器</a></h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% firstof var1 var2|safe var3 \"&lt;strong&gt;fallback value&lt;/strong&gt;\"|safe %}</span><br></pre></td></tr></tbody></table></figure><br><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else<p></p>\n<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% include \"name_snippet.html\" with person=\"Jane\" greeting=\"Hello\" %}</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% include \"name_snippet.html\" with greeting=\"Hi\" only %}</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% lorem %}</span><br></pre></td></tr></tbody></table></figure><br>设计人员工具，好像是生成随机单词和段落<br><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">{% <span class=\"name\">lorem</span> %}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">{% <span class=\"name\">lorem</span> 3 p  %}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">{% <span class=\"name\">lorem</span> 10 w random %}</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"人性化\"><a href=\"#人性化\" class=\"headerlink\" title=\"人性化\"></a><a href=\"http://python.usyiyi.cn/django/ref/contrib/humanize.html\">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>\n<h2 id=\"Django-模板语言：面向Python程序员\"><a href=\"#Django-模板语言：面向Python程序员\" class=\"headerlink\" title=\"Django 模板语言：面向Python程序员\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html\">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>\n<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>\n<h3 id=\"使用Context对象\"><a href=\"#使用Context对象\" class=\"headerlink\" title=\"[使用Context对象]\"></a>[使用<code>Context</code>对象]</h3><p><em><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects\">这里比较难理解</a></em><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context.get(key, otherwise=<span class=\"literal\">None</span>)</span><br><span class=\"line\">Context.pop()</span><br><span class=\"line\">Context.push()</span><br><span class=\"line\">Context.update(other_dict)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<blockquote>\n<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext</span><br><span class=\"line\">request_context = RequestContext(request)</span><br><span class=\"line\">request_context.push({<span class=\"string\">\"my_name\"</span>: <span class=\"string\">\"Adrian\"</span>})</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。</span><br><span class=\"line\">你还可以赋予`RequestContext `一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量</span><br><span class=\"line\">​```python</span><br><span class=\"line\">def some_view(request):</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    c = RequestContext(request, {</span><br><span class=\"line\">        'foo': 'bar',</span><br><span class=\"line\">    }, ['ip_address':'127.0.0.1'])</span><br><span class=\"line\">    return HttpResponse(t.render(c))</span><br></pre></td></tr></tbody></table></figure><br>上面例子中<code>ip_address</code>也会加入到上下文中<p></p>\n</blockquote>\n<h3 id=\"内建的模板上下文处理器\"><a href=\"#内建的模板上下文处理器\" class=\"headerlink\" title=\"内建的模板上下文处理器\"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>\n<ul>\n<li><code>user</code></li>\n<li><code>perms</code></li>\n</ul>\n<p><code>django.template.context_processors.debug</code></p>\n<ul>\n<li>debug</li>\n<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>\n</ul>\n<p><code>django.template.context_processors.i18n</code></p>\n<ul>\n<li><code>MEDIA_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.static</code></p>\n<ul>\n<li><code>STATIC_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.csrf</code></p>\n<ul>\n<li><code>csrf_token</code></li>\n</ul>\n<p><code>django.template.context_processors.request</code></p>\n<ul>\n<li><code>request</code></li>\n</ul>\n<p><code>django.contrib.messages.context_processors.messages</code></p>\n<ul>\n<li><code>messages</code></li>\n<li><code>DEFAULT_MESSAGE_LEVELS</code></li>\n</ul>\n<h2 id=\"自定义模板标签和过滤器\"><a href=\"#自定义模板标签和过滤器\" class=\"headerlink\" title=\"自定义模板标签和过滤器\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-template-tags.html\">自定义模板标签和过滤器</a></h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"><span class=\"meta\">@register.filter(<span class=\"params\">name=<span class=\"string\">'cut'</span></span>)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">register.<span class=\"built_in\">filter</span>(<span class=\"string\">'cut'</span>, cut)</span><br><span class=\"line\">register.<span class=\"built_in\">filter</span>(<span class=\"string\">'lower'</span>, lower)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut</span>(<span class=\"params\">value, arg</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.replace(arg, <span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lower</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.lower()</span><br></pre></td></tr></tbody></table></figure>\n<p>可使用<code>SafeData</code>来验证是否是安全数据<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, SafeData):</span><br><span class=\"line\">    <span class=\"comment\"># Do something with the \"safe\" string.</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></tbody></table></figure><br>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter(<span class=\"params\">is_safe=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myfilter</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"自定义标签\"><a href=\"#自定义标签\" class=\"headerlink\" title=\"自定义标签\"></a>自定义标签</h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"> </span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">current_time</span>(<span class=\"params\">format_string</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now().strftime(format_string)</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% show_results poll %}</span><br></pre></td></tr></tbody></table></figure>\n<p>写一个标签，实现下面的效果<br></p><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>First choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>例子1开始<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">'results.html'</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_results</span>(<span class=\"params\">poll</span>):</span><br><span class=\"line\">    choices = poll.choice_set.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> {<span class=\"string\">'choices'</span>: choices}</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p><code>results.html</code><br></p><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">{% for choice in choices %}</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> {{ choice }} <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">{% endfor %}</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>例子1结束<p></p>\n<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">'link.html'</span>, takes_context=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">jump_link</span>(<span class=\"params\">context</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> {</span><br><span class=\"line\">        <span class=\"string\">'link'</span>: context[<span class=\"string\">'home_link'</span>],</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: context[<span class=\"string\">'home_title'</span>],</span><br><span class=\"line\">    }</span><br></pre></td></tr></tbody></table></figure><br><code>link.html</code><br><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"{{ link }}\"</span>&gt;</span>{{ title }}<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></tbody></table></figure><br>页面直接写<br><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">{% jump_link %}</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>位置参数和关键字参数和<code>python</code>语法一样<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">'my_template.html'</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_tag</span>(<span class=\"params\">a, b, *args, **kwargs</span>):</span><br><span class=\"line\">    warning = kwargs[<span class=\"string\">'warning'</span>]</span><br><span class=\"line\">    profile = kwargs[<span class=\"string\">'profile'</span>]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">{% <span class=\"name\">my_tag</span> 123 \"abcd\" book.title warning=message|<span class=\"name\">lower</span> profile=user.profile %}</span></span><br></pre></td></tr></tbody></table></figure><br>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用<p></p>\n<h2 id=\"使用表单\"><a href=\"#使用表单\" class=\"headerlink\" title=\"使用表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/index.html\">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>\n<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = {<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"literal\">True</span>}</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>\n<p>表单排列<br><code>{{ form.as_table }}</code><br><code>{{ form.as_p }}</code><br><code>{{ form.as_ul }}</code></p>\n<p>表单属性<br><code>{{ form.name }}</code>字段html标签<br><code>{{ form.name.label_tag }}</code>字段的<code>lable</code>html标签<br><code>{{ form.name.id_for_label }}</code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>\n<p><code>{{ form.hidden_fields }}</code>隐藏字段列表<br><code>{{ form.visible_fields }}</code>显示的字段列表</p>\n<p>错误信息<br><code>{{ form.non_field_errors }}</code>不是特定字段的错误<br><code>{{ form.errors }}</code>全部错误，一个字典<br><code>{{ form.name.errors }}</code>字段错误</p>\n<p>可从<code>form</code>从遍历出<code>field</code><br><code>{{ field }}</code>有以下属性<br><code>{{ field.label }}`</code>Model<code>或是</code>Form<code>上的</code>label<code>的值</code><code>整个</code>label<code>标签，包含冒号</code><code>字段的id</code><code>字段的值</code><code>字段的</code>name<code>，考虑表单的前缀</code><code>字段的帮助文档</code><code>字段的错误</code><code>判断字段是否隐藏</code><code>表单类中</code>Field<code>的实例，可以使用它来访问</code>Field`属性，如<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name.field.max_length</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"表单-API\"><a href=\"#表单-API\" class=\"headerlink\" title=\"表单 API\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/api.html\">表单 API</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = {<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"literal\">True</span>}</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></tbody></table></figure>\n<p>表单实例一但创建，数据不可更改</p>\n<h3 id=\"Form-clean\"><a href=\"#Form-clean\" class=\"headerlink\" title=\"Form.clean()\"></a><code>Form.clean()</code></h3><h3 id=\"Form-is-valid\"><a href=\"#Form-is-valid\" class=\"headerlink\" title=\"Form.is_valid()\"></a><code>Form.is_valid()</code></h3><h3 id=\"Form-errors\"><a href=\"#Form-errors\" class=\"headerlink\" title=\"Form.errors\"></a><code>Form.errors</code></h3><blockquote>\n<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">{<span class=\"string\">'sender'</span>: [<span class=\"string\">'Enter a valid email address.'</span>], <span class=\"string\">'subject'</span>: [<span class=\"string\">'This field is required.'</span>]}</span><br></pre></td></tr></tbody></table></figure><br>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。<p></p>\n</blockquote>\n<h3 id=\"Form-errors-as-data\"><a href=\"#Form-errors-as-data\" class=\"headerlink\" title=\"Form.errors.as_data()\"></a><code>Form.errors.as_data()</code></h3><blockquote>\n<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>\n</blockquote>\n<h3 id=\"Form-errors-as-json-escape-html-False\"><a href=\"#Form-errors-as-json-escape-html-False\" class=\"headerlink\" title=\"Form.errors.as_json(escape_html=False)\"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>\n<p>返回JSON 序列化后的错误。</p>\n</blockquote>\n<h3 id=\"Form-add-error-field-error\"><a href=\"#Form-add-error-field-error\" class=\"headerlink\" title=\"Form.add_error(field, error)\"></a><code>Form.add_error(field, error)</code></h3><blockquote>\n<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>\n</blockquote>\n<h3 id=\"Form-has-error-field-code-None\"><a href=\"#Form-has-error-field-code-None\" class=\"headerlink\" title=\"Form.has_error(field, code=None)\"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>\n<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>\n</blockquote>\n<h3 id=\"Form-non-field-errors\"><a href=\"#Form-non-field-errors\" class=\"headerlink\" title=\"Form.non_field_errors()\"></a><code>Form.non_field_errors()</code></h3><blockquote>\n<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>\n</blockquote>\n<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">{}</span><br></pre></td></tr></tbody></table></figure>\n<h3 id=\"Form-initial\"><a href=\"#Form-initial\" class=\"headerlink\" title=\"Form.initial\"></a><code>Form.initial</code></h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(initial={<span class=\"string\">'subject'</span>: <span class=\"string\">'Hi there!'</span>})</span><br></pre></td></tr></tbody></table></figure>\n<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">CommentForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField(initial=<span class=\"string\">'class'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    url = forms.URLField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    comment = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = CommentForm(initial={<span class=\"string\">'name'</span>: <span class=\"string\">'instance'</span>}, auto_id=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(f)</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"name\"</span> value=<span class=\"string\">\"instance\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"url\"</span> name=<span class=\"string\">\"url\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"comment\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"Form-has-changed\"><a href=\"#Form-has-changed\" class=\"headerlink\" title=\"Form.has_changed()\"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.has_changed()</span><br></pre></td></tr></tbody></table></figure><br>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。<p></p>\n<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></tbody></table></figure><br>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.base_fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"class\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<blockquote>\n<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>\n</blockquote>\n<h3 id=\"Form-cleaned-data\"><a href=\"#Form-cleaned-data\" class=\"headerlink\" title=\"Form.cleaned_data\"></a><code>Form.cleaned_data</code></h3><h3 id=\"Form-as-p\"><a href=\"#Form-as-p\" class=\"headerlink\" title=\"Form.as_p\"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>\n<h3 id=\"Form-error-css-class-Form-required-css-class\"><a href=\"#Form-error-css-class-Form-required-css-class\" class=\"headerlink\" title=\"Form.error_css_class Form.required_css_class\"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>\n<h2 id=\"Form-auto-id\"><a href=\"#Form-auto-id\" class=\"headerlink\" title=\"Form.auto_id\"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>\n<blockquote>\n<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto_id 设置为’id_%s’。</p>\n</blockquote>\n<h3 id=\"Form-label-suffix\"><a href=\"#Form-label-suffix\" class=\"headerlink\" title=\"Form.label_suffix\"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>\n<h3 id=\"BoundField\"><a href=\"#BoundField\" class=\"headerlink\" title=\"BoundField\"></a><code>BoundField</code></h3><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = ContactForm()</span><br><span class=\"line\"><span class=\"keyword\">for</span> boundfield <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(boundfield)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">from</span>[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></tbody></table></figure>\n<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>\n<h3 id=\"Form-is-multipart\"><a href=\"#Form-is-multipart\" class=\"headerlink\" title=\"Form.is_multipart()\"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br></p><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">{% <span class=\"name\"><span class=\"name\">if</span></span> form.is_multipart %}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">{% <span class=\"name\"><span class=\"name\">else</span></span> %}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">{% <span class=\"name\"><span class=\"name\">endif</span></span> %}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-variable\">{{ form }}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ParentForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    age = forms.IntegerField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ChildForm</span>(<span class=\"title class_ inherited__\">ParentForm</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"literal\">None</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ChildForm().fields.keys()</span><br><span class=\"line\"><span class=\"meta\">... </span>[<span class=\"string\">'age'</span>]</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h3 id=\"Form-prefix\"><a href=\"#Form-prefix\" class=\"headerlink\" title=\"Form.prefix\"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>father = PersonForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(father.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_first_name\"</span>&gt;First name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"first_name\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_first_name\"</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_last_name\"</span>&gt;Last name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"last_name\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_last_name\"</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mother = PersonForm(prefix=<span class=\"string\">\"mother\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(mother.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_mother-first_name\"</span>&gt;First name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"mother-first_name\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_mother-first_name\"</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_mother-last_name\"</span>&gt;Last name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"mother-last_name\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_mother-last_name\"</span> /&gt;&lt;/li&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/fields.html\">表单字段</a></h2><h3 id=\"Field-has-change\"><a href=\"#Field-has-change\" class=\"headerlink\" title=\"Field.has_change()\"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>\n<h3 id=\"内建字段\"><a href=\"#内建字段\" class=\"headerlink\" title=\"内建字段\"></a>内建字段</h3><h4 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>\n<h4 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>max_length<code>min_length`\n接收两个可选参数\n`max_length</code>min_length`</p>\n<h4 id=\"ChoiceField\"><a href=\"#ChoiceField\" class=\"headerlink\" title=\"ChoiceField\"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_choice<code>错误消息可能包含</code>%(value)s<code>，它将被选择的选项替换掉。\n接收一个额外的必选参数</code>choices`<br>是一个二元组组成的可迭代对象</p>\n<h4 id=\"TypeChoiceField\"><a href=\"#TypeChoiceField\" class=\"headerlink\" title=\"TypeChoiceField\"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>接收额外的参数</code>choices<code>是一个二元组组成的可迭代对象</code>coerce<code>接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值</code>empty_value`<br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>\n<h4 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datateim.date`对象<br>默认为<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['%Y-%m-%d',      # '2006-10-25'</span><br><span class=\"line\">'%m/%d/%Y',       # '10/25/2006'</span><br><span class=\"line\">'%m/%d/%y']       # '10/25/06'</span><br></pre></td></tr></tbody></table></figure><br>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['%b %d %Y',      # 'Oct 25 2006'</span><br><span class=\"line\">'%b %d, %Y',      # 'Oct 25, 2006'</span><br><span class=\"line\">'%d %b %Y',       # '25 Oct 2006'</span><br><span class=\"line\">'%d %b, %Y',      # '25 Oct, 2006'</span><br><span class=\"line\">'%B %d %Y',       # 'October 25 2006'</span><br><span class=\"line\">'%B %d, %Y',      # 'October 25, 2006'</span><br><span class=\"line\">'%d %B %Y',       # '25 October 2006'</span><br><span class=\"line\">'%d %B, %Y']      # '25 October, 2006'</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h4 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datetime.datetime`对象<br>默认为<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">['%Y-%m-%d %H:%M:%S',    # '2006-10-25 14:30:59'</span><br><span class=\"line\">'%Y-%m-%d %H:%M',        # '2006-10-25 14:30'</span><br><span class=\"line\">'%Y-%m-%d',              # '2006-10-25'</span><br><span class=\"line\">'%m/%d/%Y %H:%M:%S',     # '10/25/2006 14:30:59'</span><br><span class=\"line\">'%m/%d/%Y %H:%M',        # '10/25/2006 14:30'</span><br><span class=\"line\">'%m/%d/%Y',              # '10/25/2006'</span><br><span class=\"line\">'%m/%d/%y %H:%M:%S',     # '10/25/06 14:30:59'</span><br><span class=\"line\">'%m/%d/%y %H:%M',        # '10/25/06 14:30'</span><br><span class=\"line\">'%m/%d/%y']              # '10/25/06'</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h4 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_digits<code>max_decimal_places</code>max_whole_digits<code></code>max_value<code>和</code>min_value<code>错误信息可能包含</code>%(limit_value)s<code>，它们将被真正的限制值替换。类似地，</code>max_digits<code>、</code>max_decimal_places<code>和</code>max_whole_digits<code>错误消息可能包含</code>%(max)s<code>接收四个可选参数</code>max_value<code></code>min_value<code></code>max_digits<code>最大位数</code>decimal_places`最大小数位</p>\n<h4 id=\"DurationField\"><a href=\"#DurationField\" class=\"headerlink\" title=\"DurationField\"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid`</p>\n<h4 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>max_length<code></code>min_length`</p>\n<h4 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code>max_length`\n接收两个可选参数\n`max_length</code>allow_empty_file<code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功</code>max_length<code>错误信息表示文件名的长度。在错误信息中，</code>%(max)d<code>将替换为文件的最大长度，%</code>(length)d` 将替换为当前文件名的长度</p>\n<h4 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>这个字段允许从一个特定的目录选择文件\n接收五个参数</code>path<code>必须\n想要列出的目录的绝对路径</code>recursive<code>可选\n布尔值，默认为</code>False<code>，是否需要递归这个目录</code>match<code>可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项</code>allow_files<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的文件，它和</code>allow_folders<code>必须有一个为</code>True<code></code>allow_folders<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的目录，和</code>allow_files<code>必须有一个为</code>True`</p>\n<h4 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code></code>invalid_image`</p>\n<h4 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"IPAddressField\"><a href=\"#IPAddressField\" class=\"headerlink\" title=\"IPAddressField\"></a><code>IPAddressField</code></h4><p>1.7弃用</p>\n<h4 id=\"GenericIPAddressField\"><a href=\"#GenericIPAddressField\" class=\"headerlink\" title=\"GenericIPAddressField\"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>protocol<code></code>unpack_ipv4`</p>\n<h4 id=\"MultipleChoiceField\"><a href=\"#MultipleChoiceField\" class=\"headerlink\" title=\"MultipleChoiceField\"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_list`</p>\n<h4 id=\"TypedMultipleChoiceField\"><a href=\"#TypedMultipleChoiceField\" class=\"headerlink\" title=\"TypedMultipleChoiceField\"></a><code>TypedMultipleChoiceField</code></h4><h4 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h4><h4 id=\"RegexField\"><a href=\"#RegexField\" class=\"headerlink\" title=\"RegexField\"></a><code>RegexField</code></h4><h4 id=\"SlugField\"><a href=\"#SlugField\" class=\"headerlink\" title=\"SlugField\"></a><code>SlugField</code></h4><h4 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h4><h4 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h4><h4 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>\n<h4 id=\"ComboField\"><a href=\"#ComboField\" class=\"headerlink\" title=\"ComboField\"></a><code>ComboField</code></h4><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ComboField</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class=\"number\">20</span>), EmailField()])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'test@example.com'</span>)</span><br><span class=\"line\"><span class=\"string\">'test@example.com'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'longemailaddress@example.com'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">ValidationError: [<span class=\"string\">'Ensure this value has at most 20 characters (it has 28).'</span>]</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"MultiValueField\"><a href=\"#MultiValueField\" class=\"headerlink\" title=\"MultiValueField\"></a><code>MultiValueField</code></h4><h4 id=\"SplitDateTimeField\"><a href=\"#SplitDateTimeField\" class=\"headerlink\" title=\"SplitDateTimeField\"></a><code>SplitDateTimeField</code></h4><h4 id=\"ModelChoiceField\"><a href=\"#ModelChoiceField\" class=\"headerlink\" title=\"ModelChoiceField\"></a><code>ModelChoiceField</code></h4><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A custom empty label</span></span><br><span class=\"line\">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"string\">\"(Nothing)\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># No empty label</span></span><br><span class=\"line\">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"literal\">None</span>)</span><br></pre></td></tr></tbody></table></figure>\n<h4 id=\"ModelMultipleChoiceField\"><a href=\"#ModelMultipleChoiceField\" class=\"headerlink\" title=\"ModelMultipleChoiceField\"></a><code>ModelMultipleChoiceField</code></h4><h2 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/widgets.html\">Widgets</a></h2><p>处理文本输入的Widget</p>\n<ul>\n<li><code>TextInput</code></li>\n<li><code>NumberInput</code></li>\n<li><code>EmailInput</code></li>\n<li><code>URLInput</code></li>\n<li><code>PasswordInput</code></li>\n<li><code>HiddenInput</code></li>\n<li><code>DateInput</code></li>\n<li><code>DateTimeInput</code></li>\n<li><code>TimeInput</code></li>\n<li><code>Textarea</code></li>\n</ul>\n<p>选择和复选框Widget</p>\n<ul>\n<li><code>CheckboxInput</code></li>\n<li><code>Select</code></li>\n<li><code>NullBooleanSelect</code></li>\n<li><code>SelectMultiple</code></li>\n<li><code>RadioSelect</code></li>\n<li><code>CheckboxSelectMultiple</code></li>\n</ul>\n<p>文件上传<code>Widget</code></p>\n<ul>\n<li><code>FileInput</code></li>\n<li><code>ClearableFileInput</code></li>\n</ul>\n<p>复合Widget</p>\n<ul>\n<li><code>MultipleHiddenInput</code></li>\n<li><code>SplitDateTimeWidget</code></li>\n<li><code>SplitHiddenDateTimeWidget</code></li>\n<li><code>SelectDateWidget</code></li>\n</ul>\n<h2 id=\"从模型创建表单\"><a href=\"#从模型创建表单\" class=\"headerlink\" title=\"从模型创建表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/modelforms.html\">从模型创建表单</a></h2><p>下面两种方法效果相同<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Author(title=<span class=\"string\">'Mr'</span>)</span><br><span class=\"line\">form = PartialAuthorForm(request.POST, instance=author)</span><br><span class=\"line\">form.save()</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">form = PartialAuthorForm(request.POST)</span><br><span class=\"line\">author = form.save(commit=<span class=\"literal\">False</span>)</span><br><span class=\"line\">author.title = <span class=\"string\">'Mr'</span></span><br><span class=\"line\">author.save()</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>\n<p>例如，如果Article 模型像下面这样：<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(models.Model):</span><br><span class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">200</span>, null=<span class=\"literal\">True</span>, blank=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br></pre></td></tr></tbody></table></figure><br>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：<p></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleForm</span>(<span class=\"title class_ inherited__\">ModelForm</span>):</span><br><span class=\"line\">    headline = MyFormField(max_length=<span class=\"number\">200</span>, required=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                           help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        model = Article</span><br><span class=\"line\">        fields = [<span class=\"string\">'headline'</span>, <span class=\"string\">'content'</span>]</span><br></pre></td></tr></tbody></table></figure>\n<p>创建简单的表单或表单集可以使用<code>modelform_factory()`</code>modelformset_factory()`方法来新建。</p>\n<p>启用字段的本地化功能¶</p>\n<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">AuthorForm</span>(<span class=\"title class_ inherited__\">ModelForm</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        model = Author</span><br><span class=\"line\"><span class=\"meta\">... </span>        localized_fields = (<span class=\"string\">'birth_date'</span>,)</span><br></pre></td></tr></tbody></table></figure><br>如果localized_fields 设置为<code>'__all__'</code>这个特殊的值，所有的字段都将本地化。<p></p>\n<p>提供的初始值会覆盖从实例取得的值<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article.headline</span><br><span class=\"line\"><span class=\"string\">'My headline'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form = ArticleForm(initial={<span class=\"string\">'headline'</span>: <span class=\"string\">'Initial headline'</span>}, instance=article)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form[<span class=\"string\">'headline'</span>].value()</span><br><span class=\"line\"><span class=\"string\">'Initial headline'</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelform_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Book</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"title\"</span>))</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> Textarea</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</span><br><span class=\"line\"><span class=\"meta\">... </span>                         widgets={<span class=\"string\">\"title\"</span>: Textarea()})</span><br></pre></td></tr></tbody></table></figure><br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class=\"string\">\"birth_date\"</span>,))</span><br></pre></td></tr></tbody></table></figure><br>表单集<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'title'</span>))</span><br></pre></td></tr></tbody></table></figure><br>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset`</code>save()<code>之后，会有新的属性\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.BaseModelFormSet.changed_objects</span><br><span class=\"line\">models.BaseModelFormSet.deleted_objects</span><br><span class=\"line\">models.BaseModelFormSet.new_objects</span><br></pre></td></tr></tbody></table></figure></code>max_num<code>为最大的表单数，如果初始</code>queryset<code>长度比</code>max_num<code>，则按照</code>queryset<code>来，</code>extra<code>是可以额外添加的空表单的个数，但</code>extra<code>和</code>queryset<code>长度相加如果大于</code>max_num<code>，则</code>extra<code>和实例设置可能表现不一样，如</code>queryset<code>长度为2，</code>max_num<code>为4，</code>extra<code>不管是2还是5，最终表现出来都是2。\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>,), max_num=<span class=\"number\">4</span>, extra=<span class=\"number\">2</span>)</span><br></pre></td></tr></tbody></table></figure></code>max_num<code>默认只影响显示，不影响验证，如果需要影响验证添加</code>validate_max=True`即可<p></p>\n<h2 id=\"表单素材-Media-类\"><a href=\"#表单素材-Media-类\" class=\"headerlink\" title=\"表单素材 ( Media 类)\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/media.html\">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\">        css = {</span><br><span class=\"line\">            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\">        }</span><br><span class=\"line\">        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br></pre></td></tr></tbody></table></figure>\n<p>使用<code>CalendarWidget</code>会自动引入下列资源<br></p><figure class=\"highlight html\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><br><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。<p></p>\n<p>动态定义<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_media</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> forms.Media(css={<span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)},</span><br><span class=\"line\">                           js=(<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>))</span><br><span class=\"line\">    media = <span class=\"built_in\">property</span>(_media)</span><br></pre></td></tr></tbody></table></figure><br>两个<code>Media</code>实例可以相加<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        css = {</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        }</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">OtherWidget</span>(forms.TextInput):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'whizbang.js'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w1 = CalendarWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w2 = OtherWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(w1.media + w2.media)</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/whizbang.js\"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>表单<code>Media</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ContactForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    date = DateField(widget=CalendarWidget)</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = CharField(max_length=<span class=\"number\">40</span>, widget=OtherWidget)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        css = {</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'layout.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        }</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.media</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/layout.css\"</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">\"text/javascript\"</span> src=<span class=\"string\">\"http://static.example.com/whizbang.js\"</span>&gt;&lt;/script</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"表单集\"><a href=\"#表单集\" class=\"headerlink\" title=\"表单集\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/formsets.html\">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>\n<p>其中<code>can_order`</code>can_delete`默认以以下形式展现</p>\n<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">... </span>    obj.delete()</span><br></pre></td></tr></tbody></table></figure><br>如果要兼容1.6或更早版，可以这么写<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># For Django 1.7+</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>        obj.delete()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">except</span> AssertionError:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># Django 1.6 and earlier already deletes the objects, trying to</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># delete them a second time raises an AssertionError.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">pass</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>在表单集里添加额外的字段<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> BaseFormSet</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">BaseArticleFormSet</span>(<span class=\"title class_ inherited__\">BaseFormSet</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">def</span> <span class=\"title function_\">add_fields</span>(<span class=\"params\">self, form, index</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"built_in\">super</span>(BaseArticleFormSet, self).add_fields(form, index)</span><br><span class=\"line\"><span class=\"meta\">... </span>        form.fields[<span class=\"string\">\"my_field\"</span>] = forms.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>formset = ArticleFormSet()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> form <span class=\"keyword\">in</span> formset:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(form.as_table())</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_form-0-title\"</span>&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"form-0-title\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_form-0-title\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_form-0-pub_date\"</span>&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"form-0-pub_date\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_form-0-pub_date\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">\"id_form-0-my_field\"</span>&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">\"text\"</span> name=<span class=\"string\">\"form-0-my_field\"</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"id_form-0-my_field\"</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>表单集对应的模版写法<br></p><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        </span><span class=\"template-variable\">{{ formset }}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure><br>也可以手动渲染，不能缺少<code>{{ formset.management_form }}</code><br><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-variable\">{{ formset.management_form }}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        </span><span class=\"template-tag\">{% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        {{ form }}</span></span><br><span class=\"line\"><span class=\"template-tag\">        {% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">    &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></tbody></table></figure><br>如果是手动渲染，<code>can_order`</code>can_delete`需要手动添加<br><figure class=\"highlight django\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-variable\">{{ formset.management_form }}</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-tag\">{% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;{{ form.title }}&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;{{ form.pub_date }}&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            {% if formset.can_delete</span></span><br><span class=\"line\"><span class=\"template-tag\">                &lt;li&gt;{{ form.DELETE }}&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            {% endif</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">    {% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm, BookForm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manage_articles</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    ArticleFormSet = formset_factory(ArticleForm)</span><br><span class=\"line\">    BookFormSet = formset_factory(BookForm)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> article_formset.is_valid() <span class=\"keyword\">and</span> book_formset.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># do something with the cleaned_data on the formsets.</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'manage_articles.html'</span>, {</span><br><span class=\"line\">        <span class=\"string\">'article_formset'</span>: article_formset,</span><br><span class=\"line\">        <span class=\"string\">'book_formset'</span>: book_formset,</span><br><span class=\"line\">    })</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"表单验证和字段验证\"><a href=\"#表单验证和字段验证\" class=\"headerlink\" title=\"表单验证和字段验证\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/validation.html\">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError(</span><br><span class=\"line\">    _(<span class=\"string\">'Invalid value: %(value)s'</span>),</span><br><span class=\"line\">    code=<span class=\"string\">'invalid'</span>,</span><br><span class=\"line\">    params={<span class=\"string\">'value'</span>: <span class=\"string\">'42'</span>},</span><br><span class=\"line\">)</span><br></pre></td></tr></tbody></table></figure><br>招聘多个错误<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 1'</span>), code=<span class=\"string\">'error1'</span>),</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 2'</span>), code=<span class=\"string\">'error2'</span>),</span><br><span class=\"line\">])</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    _(<span class=\"string\">'Error 1'</span>),</span><br><span class=\"line\">    _(<span class=\"string\">'Error 2'</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></tbody></table></figure><br>创建一个新的表单字段添加默认验证<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MultiEmailField</span>(forms.Field):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">to_python</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">validate</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(MultiEmailField, self).validate(value)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">            validate_email(email)</span><br></pre></td></tr></tbody></table></figure><p></p>\n<h2 id=\"Django-的设置\"><a href=\"#Django-的设置\" class=\"headerlink\" title=\"Django 的设置\"></a><a href=\"http://python.usyiyi.cn/django/topics/settings.html\">Django 的设置</a></h2><p>django-admin 工具</p>\n<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>\n<p>例如（Unix Bash shell）：<br></p><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></tbody></table></figure><br>例如（Windows shell）：<br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></tbody></table></figure><br>使用–settings 命令行参数可以手工指定设置：<br><figure class=\"highlight plaintext\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin runserver --settings=mysite.settings</span><br></pre></td></tr></tbody></table></figure><p></p>\n<p>使用下面的命令可以查询设置与默认设置的不同<br></p><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py diffsettings</span><br></pre></td></tr></tbody></table></figure><br>在django app中使用设置应使用以下导入方式<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></tbody></table></figure><br>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.settings <span class=\"keyword\">import</span> DEBUG  <span class=\"comment\"># This won't work.</span></span><br></pre></td></tr></tbody></table></figure><br>不要在应用运行时改变设置<p></p>\n<h2 id=\"完整列表设置-Settings\"><a href=\"#完整列表设置-Settings\" class=\"headerlink\" title=\"完整列表设置(Settings)\"></a><a href=\"http://python.usyiyi.cn/django/ref/settings.html\">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>\n<p><code>DATABASES['CONN_MAX_AGE']</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/applications.html\">应用</a></h2><figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/apps.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> AppConfig</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RockNRollConfig</span>(<span class=\"title class_ inherited__\">AppConfig</span>):</span><br><span class=\"line\">    name = <span class=\"string\">'rock_n_roll'</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">\"Rock ’n’ roll\"</span></span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/__init__.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\">default_app_config = <span class=\"string\">'rock_n_roll.apps.RockNRollConfig'</span></span><br></pre></td></tr></tbody></table></figure>\n<p><code>AppConfig</code>可配置的属性</p>\n<ul>\n<li><code>AppConfig.name</code></li>\n<li><code>AppConfig.label</code></li>\n<li><code>AppConfig.verbose_name</code></li>\n<li><code>Appconfig.path</code></li>\n</ul>\n<p><code>AppConfig</code>只读属性</p>\n<ul>\n<li><code>AppConfig.module</code></li>\n<li><code>Appconfig.models_module</code></li>\n</ul>\n<p><code>AppConfig</code>方法</p>\n<ul>\n<li><code>AppConfig.get_models()</code></li>\n<li><code>AppConfig..get_model(model_name)</code></li>\n<li><code>AppConfigevaluate.ready()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> apps</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>apps.get_app_config(<span class=\"string\">'admin'</span>).verbose_name</span><br><span class=\"line\"><span class=\"string\">'Admin'</span></span><br></pre></td></tr></tbody></table></figure>\n<p><code>APP</code></p>\n<ul>\n<li><code>apps.ready</code></li>\n<li><code>apps.get_app_configs()</code></li>\n<li><code>apps.get_app_config(app_label)</code></li>\n<li><code>apps.is_installed(app_name)</code></li>\n<li><code>apps.get_model(app_label, model_name)</code></li>\n</ul>\n<h2 id=\"Django异常\"><a href=\"#Django异常\" class=\"headerlink\" title=\"Django异常\"></a><a href=\"python.usyiyi.cn/django_182/ref/exceptions.html\">Django异常</a></h2><h3 id=\"核心异常\"><a href=\"#核心异常\" class=\"headerlink\" title=\"核心异常\"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>\n<ul>\n<li><p><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ObjectDoesNotExist</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    e = Entry.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = Blog.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ObjectDoesNotExist:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">\"Either the entry or blog doesn't exist.\"</span>)</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>\n</li>\n<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>\n</li>\n<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>\n<ul>\n<li><code>DisallowedHost</code></li>\n<li><code>DisallowedModelAdminLookup</code></li>\n<li><code>DisallowedModelAdminToField</code></li>\n<li><code>DisallowedRedirect</code></li>\n<li><code>InvalidSessionKey</code></li>\n<li><code>SuspiciousFileOperation</code></li>\n<li><code>SuspiciousMultipartForm</code></li>\n<li><code>SuspiciousSession</code></li>\n</ul>\n</li>\n<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>\n</li>\n<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>\n</li>\n<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>\n</li>\n<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>\n</li>\n<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>\n<ul>\n<li>模型中的字段与抽象基类中的字段重名</li>\n<li>排序造成了一个死循环</li>\n<li>关键词不能由过滤器参数解析</li>\n<li>字段不能由查询参数中的关键词决定</li>\n<li>连接（join）不能在指定对象上使用</li>\n<li>字段名称不可用</li>\n<li><p>查询包含了无效的<code>order_by</code>参数</p>\n</li>\n<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>\n</li>\n</ul>\n</li>\n<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>\n</li>\n</ul>\n<h3 id=\"URL解析器异常\"><a href=\"#URL解析器异常\" class=\"headerlink\" title=\"URL解析器异常\"></a>URL解析器异常</h3><ul>\n<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>\n</li>\n<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>\n</li>\n</ul>\n<h3 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h3><p>数据库异常由django.db导入</p>\n<ul>\n<li><code>Error</code></li>\n<li><code>InterfaceError</code></li>\n<li><code>DatabaseError</code></li>\n<li><code>DataError</code></li>\n<li><code>OperationalError</code></li>\n<li><code>IntegrityError</code></li>\n<li><code>InternalError</code></li>\n<li><code>ProgrammingError</code></li>\n<li><code>NotSupportedError</code></li>\n</ul>\n<h3 id=\"HTTP异常\"><a href=\"#HTTP异常\" class=\"headerlink\" title=\"HTTP异常\"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>\n<ul>\n<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>\n</ul>\n<h3 id=\"事务异常\"><a href=\"#事务异常\" class=\"headerlink\" title=\"事务异常\"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>\n<h3 id=\"测试框架异常\"><a href=\"#测试框架异常\" class=\"headerlink\" title=\"测试框架异常\"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>\n<ul>\n<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>\n</ul>\n<h3 id=\"Python异常\"><a href=\"#Python异常\" class=\"headerlink\" title=\"Python异常\"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>\n<h2 id=\"django-admin-and-manage-py\"><a href=\"#django-admin-and-manage-py\" class=\"headerlink\" title=\"django-admin and manage.py\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/django-admin.html\">django-admin and manage.py</a></h2><ul>\n<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>\n</li>\n<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>\n</li>\n<li><code>--noinput</code></li>\n<li><code>--database</code></li>\n<li><code>--no-initial-data</code></li>\n</ul>\n<ul>\n<li><p><code>inspectdb</code><br>根据数据库结构生成model</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></tbody></table></figure>\n</li>\n<li><p><code>loaddata</code><br>导入fixture数据</p>\n</li>\n<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runserver <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">80</span></span><br></pre></td></tr></tbody></table></figure>\n<h2 id=\"添加自定义的命令\"><a href=\"#添加自定义的命令\" class=\"headerlink\" title=\" 添加自定义的命令\"></a><a href=\"http://python.usyiyi.cn/django_182/howto/custom-management-commands.html\"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>\n<figure class=\"highlight python\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.management.base <span class=\"keyword\">import</span> BaseCommand, CommandError</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Poll</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Command</span>(<span class=\"title class_ inherited__\">BaseCommand</span>):</span><br><span class=\"line\">    <span class=\"built_in\">help</span> = <span class=\"string\">'Closes the specified poll for voting'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_arguments</span>(<span class=\"params\">self, parser</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 命令行接收一个或多个poll_id值</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        parser.add_argument(<span class=\"string\">'poll_id'</span>, nargs=<span class=\"string\">'+'</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle</span>(<span class=\"params\">self, *args, **options</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> poll_id <span class=\"keyword\">in</span> options[<span class=\"string\">'poll_id'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                poll = Poll.objects.get(pk=poll_id)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Poll.DoesNotExist:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> CommandError(<span class=\"string\">'Poll \"%s\" does not exist'</span> % poll_id)</span><br><span class=\"line\"> </span><br><span class=\"line\">            poll.opened = <span class=\"literal\">False</span></span><br><span class=\"line\">            poll.save()</span><br><span class=\"line\"> </span><br><span class=\"line\">            self.stdout.write(<span class=\"string\">'Successfully closed poll \"%s\"'</span> % poll_id)</span><br></pre></td></tr></tbody></table></figure>\n<p><img alt=\"django-commands\" data-src=\"/media/django-commands.png\"></p>\n</form></body></html>","more":"</p>\n<!--more-->\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/models.html\">模型</a></h2><p><a href=\"http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api\">Model _meta API</a></p>\n<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>\n<p>模型继承</p>\n<ol>\n<li>抽象基类<ul>\n<li>默认继承元类</li>\n</ul>\n</li>\n<li>多表继承<ul>\n<li>一般情况不继承元类</li>\n</ul>\n</li>\n<li>代理模型</li>\n</ol>\n<p>多重继承主要用于<code>mix-in</code>类</p>\n<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>\n<h2 id=\"模型字段参考\"><a href=\"#模型字段参考\" class=\"headerlink\" title=\"模型字段参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships\">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>\n<p>关联自己使用<code>self</code></p>\n<p><code>related_name</code> <code>relate_query_name</code></p>\n<p>外键关联到特定字段<br><code>to_field</code></p>\n<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>\n<p>外键关联对象删除行为<br><code>on_delete</code></p>\n<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>\n<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>\n<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>\n<p>##<a href=\"http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships\">执行查询</a></p>\n<p><a href=\"http://python.usyiyi.cn/django/howto/custom-lookups.html\">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>\n<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>\n<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>([p.headline <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Evaluate the query set.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>([p.pub_date <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Re-use the cache from the evaluation.</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database again</span></span><br></pre></td></tr></table></figure><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; queryset = Entry.objects.all()</span><br><span class=\"line\">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br></pre></td></tr></table></figure></p>\n<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>\n<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>\n<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>\n<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>\n<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>\n<p>一对多关联对象访问会缓存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(e.blog)  <span class=\"comment\"># Hits the database to retrieve the associated Blog.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(e.blog)  <span class=\"comment\"># Doesn&#x27;t hit the database; uses cached version.</span></span><br></pre></td></tr></table></figure></p>\n<p>自定义反向管理器1.7+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span>(models.Model):</span><br><span class=\"line\">    <span class=\"comment\">#...</span></span><br><span class=\"line\">    objects = models.Manager()  <span class=\"comment\"># Default Manager</span></span><br><span class=\"line\">    entries = EntryManager()    <span class=\"comment\"># Custom Manager</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = Blog.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set(manager=<span class=\"string\">&#x27;entries&#x27;</span>).<span class=\"built_in\">all</span>()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"查询集API-参考\"><a href=\"#查询集API-参考\" class=\"headerlink\" title=\"查询集API 参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/querysets.html\">查询集API 参考</a></h2><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/aggregation.html\">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>\n<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>\n<p>在查作者列表时要查每个作者有几篇博文<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.<span class=\"built_in\">object</span>.<span class=\"built_in\">all</span>().annotate(Count(<span class=\"string\">&#x27;blog&#x27;</span>))</span><br><span class=\"line\"><span class=\"comment\"># authors[0]作者的博文数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].blog__count</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.<span class=\"built_in\">object</span>.<span class=\"built_in\">all</span>().annotate(number_of_blog=Count(<span class=\"string\">&#x27;blog&#x27;</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].number_of_blog</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure><br>算出所有作者的年龄总合（不需要其它数据）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ageAuthor.objects.<span class=\"built_in\">all</span>().aggregate(Sum(<span class=\"string\">&#x27;age&#x27;</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;age__sum&#x27;</span>: <span class=\"number\">26</span>&#125;</span><br></pre></td></tr></table></figure><br><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象</p>\n<p>对注解进行过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出作者数大于1的书本</span></span><br><span class=\"line\"><span class=\"comment\"># 只有一条sql</span></span><br><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">&#x27;authors&#x27;</span>)).<span class=\"built_in\">filter</span>(num_authors__gt=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure><br>但顺序不一样，结果也不同，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publisher.objects.annotate(num_books=Count(<span class=\"string\">&#x27;book&#x27;</span>)).<span class=\"built_in\">filter</span>(book__rating__gt=<span class=\"number\">3.0</span>)</span><br><span class=\"line\">Publisher.objects.<span class=\"built_in\">filter</span>(book__rating__gt=<span class=\"number\">3.0</span>).annotate(num_books=Count(<span class=\"string\">&#x27;book&#x27;</span>)) </span><br></pre></td></tr></table></figure><br>对注解项进行排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">&#x27;authors&#x27;</span>)).order_by(<span class=\"string\">&#x27;num_authors&#x27;</span>)</span><br></pre></td></tr></table></figure><br><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上</p>\n<blockquote>\n<p>与默认排序交换或order_by()¶</p>\n</blockquote>\n<blockquote>\n<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>\n</blockquote>\n<blockquote>\n<p>通过例子中的方法，假设有一个这样的模型：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Item</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    data = models.IntegerField() </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        ordering = [<span class=\"string\">&quot;name&quot;</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Warning: not quite correct!</span></span><br><span class=\"line\">Item.objects.values(<span class=\"string\">&quot;data&quot;</span>).annotate(Count(<span class=\"string\">&quot;id&quot;</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item.objects.values(<span class=\"string\">&quot;data&quot;</span>).annotate(Count(<span class=\"string\">&quot;id&quot;</span>)).order_by()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>\n</blockquote>\n<blockquote>\n<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>\n</blockquote>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><p><a href=\"http://python.usyiyi.cn/django/intro/tutorial06.html\">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;% static user_stylesheet %&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;% static &#x27;polls/style.css&#x27; %&#125;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;% get_static_prefix %&#125;pools/style.css&quot;</span> /&gt;</span></span><br><span class=\"line\">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; STATIC_PREFIX &#125;&#125;pools/style.css&quot;</span> /&gt;</span></span><br><span class=\"line\">&#123;% static &quot;images/hi.jpg&quot; as myphoto %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123; myphoto &#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>还有<code>get_media_prefix</code></p>\n<h2 id=\"模型实例参考\"><a href=\"#模型实例参考\" class=\"headerlink\" title=\"模型实例参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model\">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>\n<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>\n<p>验证对象</p>\n<blockquote>\n<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</p>\n</blockquote>\n<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>\n<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>\n<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>\n<blockquote>\n<p>指定要保存的字段</p>\n</blockquote>\n<blockquote>\n<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product.name = <span class=\"string\">&#x27;Name changed again&#x27;</span></span><br><span class=\"line\">product.save(update_fields=[<span class=\"string\">&#x27;name&#x27;</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>\n</blockquote>\n<blockquote>\n<p>指定<code>update_fields</code>将强制使用更新操作。</p>\n</blockquote>\n<blockquote>\n<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>\n</blockquote>\n<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code></code>keep_parents=True<code>可以保留上级数据，默认为</code>False`<br>返回值为删除数据的条数</p>\n<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.get_next_by_FOO(**kwargs)¶ </span><br><span class=\"line\">Model.get_previous_by_FOO(**kwargs)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"管理器\"><a href=\"#管理器\" class=\"headerlink\" title=\"管理器\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html\">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>\n<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">DefaultManager</span>(models.Manager):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">get_queryset</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        queryset = <span class=\"built_in\">super</span>(DefaultManager, self).get_quertset().<span class=\"built_in\">filter</span>(is_delete=<span class=\"literal\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Author</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Post</span>(models.Model):</span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">post = Post.objects.get(pk=<span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 调用DefaultManager管理器</span></span><br><span class=\"line\">author.post_set.<span class=\"built_in\">all</span>()</span><br><span class=\"line\"><span class=\"comment\"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></span><br><span class=\"line\">post.author</span><br></pre></td></tr></table></figure><br><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager\">从Manager中调用自定义的QuerySet</a></p>\n<h2 id=\"进行原始的SQL查询\"><a href=\"#进行原始的SQL查询\" class=\"headerlink\" title=\"进行原始的SQL查询\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/sql.html\">进行原始的SQL查询</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manager.raw(raw_query, params=<span class=\"literal\">None</span>, translations=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>\n</blockquote>\n<h2 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/transactions.html\">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>\n<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>\n<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@transaction.atomic</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">viewfunc</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">    do_stuff()</span><br></pre></td></tr></table></figure><br>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">viewfunc</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># This code executes in autocommit mode (Django&#x27;s default).</span></span><br><span class=\"line\">    do_stuff()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</span><br><span class=\"line\">        <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">        do_more_stuff()</span><br></pre></td></tr></table></figure><br>避免在 atomic里捕获异常!</p>\n<h2 id=\"查询表达式\"><a href=\"#查询表达式\" class=\"headerlink\" title=\"查询表达式\"></a>查询表达式</h2><p>使用数据库的方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Func, F </span><br><span class=\"line\">queryset.annotate(field_lower=Func(F(<span class=\"string\">&#x27;field&#x27;</span>), function=<span class=\"string\">&#x27;LOWER&#x27;</span>))</span><br></pre></td></tr></table></figure><br>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Lower</span>(<span class=\"title class_ inherited__\">Func</span>):</span><br><span class=\"line\">    function = <span class=\"string\">&#x27;LOWER&#x27;</span> </span><br><span class=\"line\">queryset.annotate(field_lower=Lower(F(<span class=\"string\">&#x27;field&#x27;</span>)))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/conditional-expressions.html\">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>\n<h2 id=\"数据库函数\"><a href=\"#数据库函数\" class=\"headerlink\" title=\"数据库函数\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/database-functions.html\">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>\n<h2 id=\"将遗留数据库整合到Django\"><a href=\"#将遗留数据库整合到Django\" class=\"headerlink\" title=\"将遗留数据库整合到Django\"></a><a href=\"http://python.usyiyi.cn/django/howto/legacy-databases.html\">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为模型提供初始数据\"><a href=\"#为模型提供初始数据\" class=\"headerlink\" title=\"为模型提供初始数据\"></a><a href=\"http://python.usyiyi.cn/django/howto/initial-data.html\">为模型提供初始数据</a></h2><p>使用fixtures<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 1,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;Lennon&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 2,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;Paul&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;McCartney&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>导入数据命令<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py loaddata &lt;fixturename&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据库访问优化\"><a href=\"#数据库访问优化\" class=\"headerlink\" title=\"数据库访问优化\"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>\n<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>\n<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>\n<p>用唯一的或被索引的列来检索独立对象</p>\n<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>\n<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>\n<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>\n<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>\n<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>\n<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>\n<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>\n<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>\n<p>直接使用外键的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry.blog_id</span><br><span class=\"line\"><span class=\"comment\"># 而不是</span></span><br><span class=\"line\">entry.blog.<span class=\"built_in\">id</span></span><br></pre></td></tr></table></figure></p>\n<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>\n<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_band.members.add(me, my_friend) </span><br><span class=\"line\"><span class=\"comment\">#更优于 </span></span><br><span class=\"line\">my_band.members.add(me)</span><br><span class=\"line\">my_band.members.add(my_friend)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"URL调度器\"><a href=\"#URL调度器\" class=\"headerlink\" title=\"URL调度器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html\">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>\n<p>在根url上获取的参数不影响参数传递<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># In settings/urls/main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^(?P&lt;username&gt;\\w+)/blog/&#x27;</span>, include(<span class=\"string\">&#x27;foo.urls.blog&#x27;</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># In foo/urls/blog.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^$&#x27;</span>, views.blog.index),</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^archive/$&#x27;</span>, views.blog.archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。</p>\n<p>可嵌套<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;blog/(page-(\\d+)/)?$&#x27;</span>, blog_articles),                  <span class=\"comment\"># bad</span></span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;comments/(?:page-(?P&lt;page_number&gt;\\d+)/)?$&#x27;</span>, comments),  <span class=\"comment\"># good</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>传递额外的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive, &#123;<span class=\"string\">&#x27;foo&#x27;</span>: <span class=\"string\">&#x27;bar&#x27;</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值</p>\n<p>传递额外的参数给<code>include()</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^blog/&#x27;</span>, include(<span class=\"string\">&#x27;inner&#x27;</span>), &#123;<span class=\"string\">&#x27;blogid&#x27;</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^archive/$&#x27;</span>, views.archive),</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^about/$&#x27;</span>, views.about),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure><br>效果等同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^blog/&#x27;</span>, include(<span class=\"string\">&#x27;inner&#x27;</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^archive/$&#x27;</span>, views.archive, &#123;<span class=\"string\">&#x27;blogid&#x27;</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^about/$&#x27;</span>, views.about, &#123;<span class=\"string\">&#x27;blogid&#x27;</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls\">反查带命名空间的URL</a></p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/views.html\">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>\n<ul>\n<li><code>HttpResponseRedirect</code> 临时重定向，302</li>\n<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>\n<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>\n<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>\n<li><code>HttpResponseNotFound</code> 页面没找到，404</li>\n<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>\n<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>\n<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>\n<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>\n<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>\n</ul>\n<p>重写错误视图（在url中）<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler404 = &#x27;mysite.views.my_custom_page_not_found_view&#x27;</span><br><span class=\"line\">handler500 = &#x27;mysite.views.my_custom_error_view&#x27; </span><br><span class=\"line\">handler403 = &#x27;mysite.views.my_custom_permission_denied_view&#x27;</span><br><span class=\"line\">handler400 = &#x27;mysite.views.my_custom_bad_request_view&#x27; </span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的快捷函数\"><a href=\"#Django-的快捷函数\" class=\"headerlink\" title=\"Django 的快捷函数\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/shortcuts.html\">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>\n<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>\n<blockquote>\n<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>\n<pre><code>一个模型：将调用模型的get_absolute_url() 函数\n一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n一个绝对的或相对的URL，将原样作为重定向的位置。\n</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>\n</blockquote>\n<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/decorators.html\">视图装饰器</a></h2><p><a href=\"http://python.usyiyi.cn/django/topics/conditional-view-processing.html\">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@condition(<span class=\"params\">etag_func=<span class=\"literal\">None</span>, last_modified_func=<span class=\"literal\">None</span></span>)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@last_modified(<span class=\"params\">last_modified_func</span>)</span></span><br></pre></td></tr></table></figure>\n<p>根据最后修改时间来决定是否运行视图，可减少流量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@etag(<span class=\"params\">etag_func</span>)</span></span><br></pre></td></tr></table></figure><br><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用</p>\n<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>\n<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>\n<p><code>never_cache</code></p>\n<h2 id=\"Request-对象和Response-对象\"><a href=\"#Request-对象和Response-对象\" class=\"headerlink\" title=\"Request 对象和Response 对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，<form>带有<code>enctype=&quot;multipart/form-data&quot;</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&#39;&#39;, max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpRequest.read(size=<span class=\"literal\">None</span>)</span><br><span class=\"line\">HttpRequest.readline()</span><br><span class=\"line\">HttpRequest.readlines()</span><br><span class=\"line\">HttpRequest.xreadlines()</span><br><span class=\"line\">HttpRequest.__iter__()</span><br></pre></td></tr></table></figure><br>这几个方法实现类文件的接口用于读取HttpRequest· 实例</p>\n<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>\n<h2 id=\"TemplateResponse-和SimpleTemplateResponse\"><a href=\"#TemplateResponse-和SimpleTemplateResponse\" class=\"headerlink\" title=\"TemplateResponse 和SimpleTemplateResponse\"></a><a href=\"http://python.usyiyi.cn/django/ref/template-response.html\">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>\n<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template.response <span class=\"keyword\">import</span> TemplateResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">blog_index</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TemplateResponse(request, <span class=\"string\">&#x27;entry_list.html&#x27;</span>, &#123;<span class=\"string\">&#x27;entries&#x27;</span>: Entry.objects.<span class=\"built_in\">all</span>()&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/file-uploads.html\">文件上传</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">handle_uploaded_file</span>(<span class=\"params\">f</span>):</span><br><span class=\"line\">    <span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;some/file/name.txt&#x27;</span>, <span class=\"string\">&#x27;wb+&#x27;</span>) <span class=\"keyword\">as</span> destination:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> f.chunks():</span><br><span class=\"line\">            destination.write(chunk)</span><br></pre></td></tr></table></figure>\n<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>\n<p>上传处理器<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;django.core.files.uploadhandler.MemoryFileUploadHandler&quot;,</span><br><span class=\"line\">&quot;django.core.files.uploadhandler.TemporaryFileUploadHandler&quot;,)</span><br></pre></td></tr></table></figure><br>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。</p>\n<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>\n<p>更改上传处理器的行为<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFAULT_FILE_STORAGE</span><br><span class=\"line\">FILE_CHARSET</span><br><span class=\"line\">FILE_UPLOAD_HANDLERS</span><br><span class=\"line\">FILE_UPLOAD_MAX_MEMORY_SIZE</span><br><span class=\"line\">FILE_UPLOAD_PERMISSIONS</span><br><span class=\"line\">FILE_UPLOAD_TEMP_DIR</span><br><span class=\"line\">MEDIA_ROOT</span><br><span class=\"line\">MEDIA_URL</span><br></pre></td></tr></table></figure></p>\n<p>在运行中更改上传处理器<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 注意</p>\n</blockquote>\n<blockquote>\n<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>\n</blockquote>\n<blockquote>\n<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>\n</blockquote>\n<blockquote>\n<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plaintext\"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def upload_file_view(request):</span><br><span class=\"line\">   request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br><span class=\"line\">   return _upload_file_view(request) </span><br><span class=\"line\">@csrf_protect</span><br><span class=\"line\">def _upload_file_view(request):</span><br><span class=\"line\">   ... # Process request</span><br></pre></td></tr></table></figure>\n <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## [File对象](http://python.usyiyi.cn/django/ref/files/file.html)</span><br><span class=\"line\">`File`类</span><br><span class=\"line\">`ContentFile`类</span><br><span class=\"line\">`ImageFile`类 比`File`多了`width`和`height`属性</span><br><span class=\"line\">附加到对象的文件有额外的方法</span><br></pre></td></tr></table></figure>\n<p>File.save(name, content[, save=True])<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。</span><br><span class=\"line\">测试出来直接`car.save()`也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串</span><br><span class=\"line\">如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：</span><br><span class=\"line\">​```python</span><br><span class=\"line\">&gt;&gt;&gt; car.photo.save(&#x27;myphoto.jpg&#x27;, content, save=False)</span><br><span class=\"line\">&gt;&gt;&gt; car.save()</span><br></pre></td></tr></table></figure><br>等价于：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">&#x27;myphoto.jpg&#x27;</span>, content, save=<span class=\"literal\">True</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>从模型实例中移除文件，并且删除内部文件<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.delete([save=True])</span><br></pre></td></tr></table></figure><br>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件</p>\n<h2 id=\"文件储存API\"><a href=\"#文件储存API\" class=\"headerlink\" title=\"文件储存API\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/storage.html\">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>\n<h2 id=\"管理文件\"><a href=\"#管理文件\" class=\"headerlink\" title=\"管理文件\"></a><a href=\"http://python.usyiyi.cn/django/topics/files.html\">管理文件</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Car</span>(models.Model):</span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">    price = models.DecimalField(max_digits=<span class=\"number\">5</span>, decimal_places=<span class=\"number\">2</span>)</span><br><span class=\"line\">    photo = models.ImageField(upload_to=<span class=\"string\">&#x27;cars&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>\n<p><em>实际测试有出入</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方示例</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">&#x27;/media/cars/chevy.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">&#x27;http://media.example.com/cars/chevy.jpg&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际测试结果</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">&#x27;E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">&#x27;/upload/20151230171832_0.jpg&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>更改一个文件的存储位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>initial_path = car.photo.path</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.name = <span class=\"string\">&#x27;cars/chevy_ii.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Move the file on the filesystem</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">&#x27;/media/cars/chevy_ii.jpg&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path == new_path</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写自定义存储系统\"><a href=\"#编写自定义存储系统\" class=\"headerlink\" title=\"编写自定义存储系统\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-file-storage.html\">编写自定义存储系统</a></h2><ol>\n<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>\n<li>Django必须能够不带任何参数来实例化</li>\n<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>\n<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>\n</ol>\n<h2 id=\"基于类的视图\"><a href=\"#基于类的视图\" class=\"headerlink\" title=\"基于类的视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/index.html\">基于类的视图</a></h2><h2 id=\"基于类的内建通用视图\"><a href=\"#基于类的内建通用视图\" class=\"headerlink\" title=\"基于类的内建通用视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html\">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>\n<h2 id=\"使用基于类的视图处理表单\"><a href=\"#使用基于类的视图处理表单\" class=\"headerlink\" title=\"使用基于类的视图处理表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html\">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>\n<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>\n<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>\n<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/mixins.html\">Mixin</a></h2><h2 id=\"基于类的视图的Mixin\"><a href=\"#基于类的视图的Mixin\" class=\"headerlink\" title=\"基于类的视图的Mixin\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/mixins.html\">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>\n<blockquote>\n<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sensitive_function</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        self.database_record.delete()</span><br><span class=\"line\">    sensitive_function.alters_data = <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure><br>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表</p>\n</blockquote>\n<h2 id=\"内建基于类的视图的API\"><a href=\"#内建基于类的视图的API\" class=\"headerlink\" title=\"内建基于类的视图的API\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/index.html\">内建基于类的视图的API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r&#x27;^view/$&#x27;</span>, MyView.as_view(size=<span class=\"number\">42</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>\n</blockquote>\n<h2 id=\"基于类的通用视图-——-索引\"><a href=\"#基于类的通用视图-——-索引\" class=\"headerlink\" title=\"基于类的通用视图 —— 索引\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html\">基于类的通用视图 —— 索引</a></h2><h2 id=\"使用Django输出CSV\"><a href=\"#使用Django输出CSV\" class=\"headerlink\" title=\"使用Django输出CSV\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-csv.html\">使用Django输出CSV</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">some_view</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate CSV header.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">&#x27;text/csv&#x27;</span>)</span><br><span class=\"line\">    response[<span class=\"string\">&#x27;Content-Disposition&#x27;</span>] = <span class=\"string\">&#x27;attachment; filename=&quot;somefilename.csv&quot;&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    writer = csv.writer(response)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">&#x27;First row&#x27;</span>, <span class=\"string\">&#x27;Foo&#x27;</span>, <span class=\"string\">&#x27;Bar&#x27;</span>, <span class=\"string\">&#x27;Baz&#x27;</span>])</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">&#x27;Second row&#x27;</span>, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"string\">&#x27;C&#x27;</span>, <span class=\"string\">&#x27;&quot;Testing&quot;&#x27;</span>, <span class=\"string\">&quot;Here&#x27;s a quote&quot;</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Django输出PDF\"><a href=\"#使用Django输出PDF\" class=\"headerlink\" title=\"使用Django输出PDF\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-pdf.html\">使用Django输出PDF</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">some_view</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate PDF headers.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">&#x27;application/pdf&#x27;</span>)</span><br><span class=\"line\">    response[<span class=\"string\">&#x27;Content-Disposition&#x27;</span>] = <span class=\"string\">&#x27;attachment; filename=&quot;somefilename.pdf&quot;&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Create the PDF object, using the response object as its &quot;file.&quot;</span></span><br><span class=\"line\">    p = canvas.Canvas(response)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Draw things on the PDF. Here&#x27;s where the PDF generation happens.</span></span><br><span class=\"line\">    <span class=\"comment\"># See the ReportLab documentation for the full list of functionality.</span></span><br><span class=\"line\">    p.drawString(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">&quot;Hello world.&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Close the PDF object cleanly, and we&#x27;re done.</span></span><br><span class=\"line\">    p.showPage()</span><br><span class=\"line\">    p.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html\">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<blockquote>\n<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>\n</blockquote>\n<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>\n<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses\">处理流式响应</a></em></strong></p>\n<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>\n<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>\n<ul>\n<li>中间件类不能是任何类的子类</li>\n<li>中间件可以放在python路径中的任务位置<br>正常<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"> </span><br><span class=\"line\">D.process_template_response</span><br><span class=\"line\">C.process_template_response</span><br><span class=\"line\">B.process_template_response</span><br><span class=\"line\">A.process_template_response</span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure>\n视图异常<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"></span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"django中可用的中间件\"><a href=\"#django中可用的中间件\" class=\"headerlink\" title=\"django中可用的中间件\"></a><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\">django中可用的中间件</a></h2><h3 id=\"class-CommonMiddleware\"><a href=\"#class-CommonMiddleware\" class=\"headerlink\" title=\"class CommonMiddleware\"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>\n<h3 id=\"class-BrokenLinkEmailsMiddleware\"><a href=\"#class-BrokenLinkEmailsMiddleware\" class=\"headerlink\" title=\"class BrokenLinkEmailsMiddleware\"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>\n<h3 id=\"class-GZipMiddleware\"><a href=\"#class-GZipMiddleware\" class=\"headerlink\" title=\"class GZipMiddleware\"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>\n<h3 id=\"class-ConditionalGetMiddleware\"><a href=\"#class-ConditionalGetMiddleware\" class=\"headerlink\" title=\"class ConditionalGetMiddleware\"></a><code>class ConditionalGetMiddleware</code></h3><h3 id=\"class-LocaleMiddeware\"><a href=\"#class-LocaleMiddeware\" class=\"headerlink\" title=\"class LocaleMiddeware\"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>\n<h3 id=\"class-MessageMiddleware\"><a href=\"#class-MessageMiddleware\" class=\"headerlink\" title=\"class MessageMiddleware\"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>\n<h3 id=\"class-SecurityMiddleware\"><a href=\"#class-SecurityMiddleware\" class=\"headerlink\" title=\"class SecurityMiddleware\"></a><code>class SecurityMiddleware</code></h3><p><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\">中间件的排序</a></p>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a><a href=\"http://python.usyiyi.cn/django/topics/templates.html\">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>\n<h2 id=\"Django模版语言\"><a href=\"#Django模版语言\" class=\"headerlink\" title=\"Django模版语言\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/language.html\">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>\n<ul>\n<li>字典查询（Dictionary lookup）</li>\n<li>属性或方法查询（Attribute or method lookup）</li>\n<li>数字索引查询（Numeric index lookup）</li>\n</ul>\n<p>模版变量最终解释成字面量，而不是变量值</p>\n<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>\n<h2 id=\"内置标签与过滤器\"><a href=\"#内置标签与过滤器\" class=\"headerlink\" title=\"内置标签与过滤器\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\">内置标签与过滤器</a></h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% firstof var1 var2|safe var3 &quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;|safe %&#125;</span><br></pre></td></tr></table></figure><br><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else</p>\n<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with person=&quot;Jane&quot; greeting=&quot;Hello&quot; %&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with greeting=&quot;Hi&quot; only %&#125;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lorem %&#125;</span><br></pre></td></tr></table></figure><br>设计人员工具，好像是生成随机单词和段落<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> %&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 3 p  %&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 10 w random %&#125;</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"人性化\"><a href=\"#人性化\" class=\"headerlink\" title=\"人性化\"></a><a href=\"http://python.usyiyi.cn/django/ref/contrib/humanize.html\">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>\n<h2 id=\"Django-模板语言：面向Python程序员\"><a href=\"#Django-模板语言：面向Python程序员\" class=\"headerlink\" title=\"Django 模板语言：面向Python程序员\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html\">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>\n<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>\n<h3 id=\"使用Context对象\"><a href=\"#使用Context对象\" class=\"headerlink\" title=\"[使用Context对象]\"></a>[使用<code>Context</code>对象]</h3><p><em><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects\">这里比较难理解</a></em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context.get(key, otherwise=<span class=\"literal\">None</span>)</span><br><span class=\"line\">Context.pop()</span><br><span class=\"line\">Context.push()</span><br><span class=\"line\">Context.update(other_dict)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext</span><br><span class=\"line\">request_context = RequestContext(request)</span><br><span class=\"line\">request_context.push(&#123;<span class=\"string\">&quot;my_name&quot;</span>: <span class=\"string\">&quot;Adrian&quot;</span>&#125;)</span><br></pre></td></tr></table></figure><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。</span><br><span class=\"line\">你还可以赋予`RequestContext `一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量</span><br><span class=\"line\">​```python</span><br><span class=\"line\">def some_view(request):</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    c = RequestContext(request, &#123;</span><br><span class=\"line\">        &#x27;foo&#x27;: &#x27;bar&#x27;,</span><br><span class=\"line\">    &#125;, [&#x27;ip_address&#x27;:&#x27;127.0.0.1&#x27;])</span><br><span class=\"line\">    return HttpResponse(t.render(c))</span><br></pre></td></tr></table></figure><br>上面例子中<code>ip_address</code>也会加入到上下文中</p>\n</blockquote>\n<h3 id=\"内建的模板上下文处理器\"><a href=\"#内建的模板上下文处理器\" class=\"headerlink\" title=\"内建的模板上下文处理器\"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>\n<ul>\n<li><code>user</code></li>\n<li><code>perms</code></li>\n</ul>\n<p><code>django.template.context_processors.debug</code></p>\n<ul>\n<li>debug</li>\n<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>\n</ul>\n<p><code>django.template.context_processors.i18n</code></p>\n<ul>\n<li><code>MEDIA_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.static</code></p>\n<ul>\n<li><code>STATIC_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.csrf</code></p>\n<ul>\n<li><code>csrf_token</code></li>\n</ul>\n<p><code>django.template.context_processors.request</code></p>\n<ul>\n<li><code>request</code></li>\n</ul>\n<p><code>django.contrib.messages.context_processors.messages</code></p>\n<ul>\n<li><code>messages</code></li>\n<li><code>DEFAULT_MESSAGE_LEVELS</code></li>\n</ul>\n<h2 id=\"自定义模板标签和过滤器\"><a href=\"#自定义模板标签和过滤器\" class=\"headerlink\" title=\"自定义模板标签和过滤器\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-template-tags.html\">自定义模板标签和过滤器</a></h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"><span class=\"meta\">@register.filter(<span class=\"params\">name=<span class=\"string\">&#x27;cut&#x27;</span></span>)</span></span><br><span class=\"line\"> </span><br><span class=\"line\">register.<span class=\"built_in\">filter</span>(<span class=\"string\">&#x27;cut&#x27;</span>, cut)</span><br><span class=\"line\">register.<span class=\"built_in\">filter</span>(<span class=\"string\">&#x27;lower&#x27;</span>, lower)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">cut</span>(<span class=\"params\">value, arg</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.replace(arg, <span class=\"string\">&#x27;&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">lower</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.lower()</span><br></pre></td></tr></table></figure>\n<p>可使用<code>SafeData</code>来验证是否是安全数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">isinstance</span>(value, SafeData):</span><br><span class=\"line\">    <span class=\"comment\"># Do something with the &quot;safe&quot; string.</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure><br>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter(<span class=\"params\">is_safe=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">myfilter</span>(<span class=\"params\">value</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义标签\"><a href=\"#自定义标签\" class=\"headerlink\" title=\"自定义标签\"></a>自定义标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"> </span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">current_time</span>(<span class=\"params\">format_string</span>):</span><br><span class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now().strftime(format_string)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% show_results poll %&#125;</span><br></pre></td></tr></table></figure>\n<p>写一个标签，实现下面的效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>First choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>例子1开始<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">&#x27;results.html&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">show_results</span>(<span class=\"params\">poll</span>):</span><br><span class=\"line\">    choices = poll.choice_set.<span class=\"built_in\">all</span>()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">&#x27;choices&#x27;</span>: choices&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>results.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in choices %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> &#123;&#123; choice &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><br>例子1结束</p>\n<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">&#x27;link.html&#x27;</span>, takes_context=<span class=\"literal\">True</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">jump_link</span>(<span class=\"params\">context</span>):</span><br><span class=\"line\">    <span class=\"comment\"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;link&#x27;</span>: context[<span class=\"string\">&#x27;home_link&#x27;</span>],</span><br><span class=\"line\">        <span class=\"string\">&#x27;title&#x27;</span>: context[<span class=\"string\">&#x27;home_title&#x27;</span>],</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure><br><code>link.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&#123;&#123; link &#125;&#125;&quot;</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure><br>页面直接写<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jump_link %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>位置参数和关键字参数和<code>python</code>语法一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag(<span class=\"params\"><span class=\"string\">&#x27;my_template.html&#x27;</span></span>)</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">my_tag</span>(<span class=\"params\">a, b, *args, **kwargs</span>):</span><br><span class=\"line\">    warning = kwargs[<span class=\"string\">&#x27;warning&#x27;</span>]</span><br><span class=\"line\">    profile = kwargs[<span class=\"string\">&#x27;profile&#x27;</span>]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br></pre></td></tr></table></figure><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\">my_tag</span> 123 &quot;abcd&quot; book.title warning=message|<span class=\"name\">lower</span> profile=user.profile %&#125;</span></span><br></pre></td></tr></table></figure><br>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用</p>\n<h2 id=\"使用表单\"><a href=\"#使用表单\" class=\"headerlink\" title=\"使用表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/index.html\">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>\n<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">&#x27;subject&#x27;</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;Hi there&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sender&#x27;</span>: <span class=\"string\">&#x27;foo@example.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc_myself&#x27;</span>: <span class=\"literal\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure></p>\n<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>\n<p>表单排列<br><code>&#123;&#123; form.as_table &#125;&#125;</code><br><code>&#123;&#123; form.as_p &#125;&#125;</code><br><code>&#123;&#123; form.as_ul &#125;&#125;</code></p>\n<p>表单属性<br><code>&#123;&#123; form.name &#125;&#125;</code>字段html标签<br><code>&#123;&#123; form.name.label_tag &#125;&#125;</code>字段的<code>lable</code>html标签<br><code>&#123;&#123; form.name.id_for_label &#125;&#125;</code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>\n<p><code>&#123;&#123; form.hidden_fields &#125;&#125;</code>隐藏字段列表<br><code>&#123;&#123; form.visible_fields &#125;&#125;</code>显示的字段列表</p>\n<p>错误信息<br><code>&#123;&#123; form.non_field_errors &#125;&#125;</code>不是特定字段的错误<br><code>&#123;&#123; form.errors &#125;&#125;</code>全部错误，一个字典<br><code>&#123;&#123; form.name.errors &#125;&#125;</code>字段错误</p>\n<p>可从<code>form</code>从遍历出<code>field</code><br><code>&#123;&#123; field &#125;&#125;</code>有以下属性<br><code>&#123;&#123; field.label &#125;&#125;`</code>Model<code>或是</code>Form<code>上的</code>label<code>的值</code><code>整个</code>label<code>标签，包含冒号</code><code>字段的id</code><code>字段的值</code><code>字段的</code>name<code>，考虑表单的前缀</code><code>字段的帮助文档</code><code>字段的错误</code><code>判断字段是否隐藏</code><code>表单类中</code>Field<code>的实例，可以使用它来访问</code>Field`属性，如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name.field.max_length</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单-API\"><a href=\"#表单-API\" class=\"headerlink\" title=\"表单 API\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/api.html\">表单 API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">&#x27;subject&#x27;</span>: <span class=\"string\">&#x27;hello&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;message&#x27;</span>: <span class=\"string\">&#x27;Hi there&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;sender&#x27;</span>: <span class=\"string\">&#x27;foo@example.com&#x27;</span>,</span><br><span class=\"line\">        <span class=\"string\">&#x27;cc_myself&#x27;</span>: <span class=\"literal\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure>\n<p>表单实例一但创建，数据不可更改</p>\n<h3 id=\"Form-clean\"><a href=\"#Form-clean\" class=\"headerlink\" title=\"Form.clean()\"></a><code>Form.clean()</code></h3><h3 id=\"Form-is-valid\"><a href=\"#Form-is-valid\" class=\"headerlink\" title=\"Form.is_valid()\"></a><code>Form.is_valid()</code></h3><h3 id=\"Form-errors\"><a href=\"#Form-errors\" class=\"headerlink\" title=\"Form.errors\"></a><code>Form.errors</code></h3><blockquote>\n<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;sender&#x27;</span>: [<span class=\"string\">&#x27;Enter a valid email address.&#x27;</span>], <span class=\"string\">&#x27;subject&#x27;</span>: [<span class=\"string\">&#x27;This field is required.&#x27;</span>]&#125;</span><br></pre></td></tr></table></figure><br>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。</p>\n</blockquote>\n<h3 id=\"Form-errors-as-data\"><a href=\"#Form-errors-as-data\" class=\"headerlink\" title=\"Form.errors.as_data()\"></a><code>Form.errors.as_data()</code></h3><blockquote>\n<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>\n</blockquote>\n<h3 id=\"Form-errors-as-json-escape-html-False\"><a href=\"#Form-errors-as-json-escape-html-False\" class=\"headerlink\" title=\"Form.errors.as_json(escape_html=False)\"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>\n<p>返回JSON 序列化后的错误。</p>\n</blockquote>\n<h3 id=\"Form-add-error-field-error\"><a href=\"#Form-add-error-field-error\" class=\"headerlink\" title=\"Form.add_error(field, error)\"></a><code>Form.add_error(field, error)</code></h3><blockquote>\n<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>\n</blockquote>\n<h3 id=\"Form-has-error-field-code-None\"><a href=\"#Form-has-error-field-code-None\" class=\"headerlink\" title=\"Form.has_error(field, code=None)\"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>\n<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>\n</blockquote>\n<h3 id=\"Form-non-field-errors\"><a href=\"#Form-non-field-errors\" class=\"headerlink\" title=\"Form.non_field_errors()\"></a><code>Form.non_field_errors()</code></h3><blockquote>\n<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>\n</blockquote>\n<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Form-initial\"><a href=\"#Form-initial\" class=\"headerlink\" title=\"Form.initial\"></a><code>Form.initial</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(initial=&#123;<span class=\"string\">&#x27;subject&#x27;</span>: <span class=\"string\">&#x27;Hi there!&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">CommentForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField(initial=<span class=\"string\">&#x27;class&#x27;</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    url = forms.URLField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    comment = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = CommentForm(initial=&#123;<span class=\"string\">&#x27;name&#x27;</span>: <span class=\"string\">&#x27;instance&#x27;</span>&#125;, auto_id=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(f)</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;name&quot;</span> value=<span class=\"string\">&quot;instance&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;url&quot;</span> name=<span class=\"string\">&quot;url&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;comment&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-has-changed\"><a href=\"#Form-has-changed\" class=\"headerlink\" title=\"Form.has_changed()\"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.has_changed()</span><br></pre></td></tr></table></figure><br>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。</p>\n<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">&#x27;\\n&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name=&quot;name&quot; type=&quot;text&quot; value=&quot;instance&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.fields[<span class=\"string\">&#x27;name&#x27;</span>].label = <span class=\"string\">&quot;Username&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">&#x27;\\n&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=&quot;name&quot; type=&quot;text&quot; value=&quot;instance&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span><br></pre></td></tr></table></figure><br>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.base_fields[<span class=\"string\">&#x27;name&#x27;</span>].label = <span class=\"string\">&quot;Username&quot;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f.as_table().split(<span class=\"string\">&#x27;\\n&#x27;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">&#x27;&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=&quot;name&quot; type=&quot;text&quot; value=&quot;class&quot; /&gt;&lt;/td&gt;&lt;/tr&gt;&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>\n</blockquote>\n<h3 id=\"Form-cleaned-data\"><a href=\"#Form-cleaned-data\" class=\"headerlink\" title=\"Form.cleaned_data\"></a><code>Form.cleaned_data</code></h3><h3 id=\"Form-as-p\"><a href=\"#Form-as-p\" class=\"headerlink\" title=\"Form.as_p\"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>\n<h3 id=\"Form-error-css-class-Form-required-css-class\"><a href=\"#Form-error-css-class-Form-required-css-class\" class=\"headerlink\" title=\"Form.error_css_class Form.required_css_class\"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>\n<h2 id=\"Form-auto-id\"><a href=\"#Form-auto-id\" class=\"headerlink\" title=\"Form.auto_id\"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>\n<blockquote>\n<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto_id 设置为’id_%s’。</p>\n</blockquote>\n<h3 id=\"Form-label-suffix\"><a href=\"#Form-label-suffix\" class=\"headerlink\" title=\"Form.label_suffix\"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>\n<h3 id=\"BoundField\"><a href=\"#BoundField\" class=\"headerlink\" title=\"BoundField\"></a><code>BoundField</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = ContactForm()</span><br><span class=\"line\"><span class=\"keyword\">for</span> boundfield <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(boundfield)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">from</span>[<span class=\"string\">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>\n<h3 id=\"Form-is-multipart\"><a href=\"#Form-is-multipart\" class=\"headerlink\" title=\"Form.is_multipart()\"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> form.is_multipart %&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">&quot;multipart/form-data&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/foo/&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">else</span></span> %&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;/foo/&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"></span><span class=\"template-variable\">&#123;&#123; form &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ParentForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    age = forms.IntegerField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ChildForm</span>(<span class=\"title class_ inherited__\">ParentForm</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"literal\">None</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ChildForm().fields.keys()</span><br><span class=\"line\"><span class=\"meta\">... </span>[<span class=\"string\">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-prefix\"><a href=\"#Form-prefix\" class=\"headerlink\" title=\"Form.prefix\"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>father = PersonForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(father.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_first_name&quot;</span>&gt;First name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;first_name&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_first_name&quot;</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_last_name&quot;</span>&gt;Last name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;last_name&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_last_name&quot;</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mother = PersonForm(prefix=<span class=\"string\">&quot;mother&quot;</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(mother.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_mother-first_name&quot;</span>&gt;First name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;mother-first_name&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_mother-first_name&quot;</span> /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_mother-last_name&quot;</span>&gt;Last name:&lt;/label&gt; &lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;mother-last_name&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_mother-last_name&quot;</span> /&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/fields.html\">表单字段</a></h2><h3 id=\"Field-has-change\"><a href=\"#Field-has-change\" class=\"headerlink\" title=\"Field.has_change()\"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>\n<h3 id=\"内建字段\"><a href=\"#内建字段\" class=\"headerlink\" title=\"内建字段\"></a>内建字段</h3><h4 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>\n<h4 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>max_length<code>min_length`\n接收两个可选参数\n`max_length</code>min_length`</p>\n<h4 id=\"ChoiceField\"><a href=\"#ChoiceField\" class=\"headerlink\" title=\"ChoiceField\"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_choice<code>错误消息可能包含</code>%(value)s<code>，它将被选择的选项替换掉。\n接收一个额外的必选参数</code>choices`<br>是一个二元组组成的可迭代对象</p>\n<h4 id=\"TypeChoiceField\"><a href=\"#TypeChoiceField\" class=\"headerlink\" title=\"TypeChoiceField\"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>接收额外的参数</code>choices<code>是一个二元组组成的可迭代对象</code>coerce<code>接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值</code>empty_value`<br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>\n<h4 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datateim.date`对象<br>默认为<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;%Y-%m-%d&#x27;,      # &#x27;2006-10-25&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%Y&#x27;,       # &#x27;10/25/2006&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%y&#x27;]       # &#x27;10/25/06&#x27;</span><br></pre></td></tr></table></figure><br>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;%b %d %Y&#x27;,      # &#x27;Oct 25 2006&#x27;</span><br><span class=\"line\">&#x27;%b %d, %Y&#x27;,      # &#x27;Oct 25, 2006&#x27;</span><br><span class=\"line\">&#x27;%d %b %Y&#x27;,       # &#x27;25 Oct 2006&#x27;</span><br><span class=\"line\">&#x27;%d %b, %Y&#x27;,      # &#x27;25 Oct, 2006&#x27;</span><br><span class=\"line\">&#x27;%B %d %Y&#x27;,       # &#x27;October 25 2006&#x27;</span><br><span class=\"line\">&#x27;%B %d, %Y&#x27;,      # &#x27;October 25, 2006&#x27;</span><br><span class=\"line\">&#x27;%d %B %Y&#x27;,       # &#x27;25 October 2006&#x27;</span><br><span class=\"line\">&#x27;%d %B, %Y&#x27;]      # &#x27;25 October, 2006&#x27;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datetime.datetime`对象<br>默认为<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&#x27;%Y-%m-%d %H:%M:%S&#x27;,    # &#x27;2006-10-25 14:30:59&#x27;</span><br><span class=\"line\">&#x27;%Y-%m-%d %H:%M&#x27;,        # &#x27;2006-10-25 14:30&#x27;</span><br><span class=\"line\">&#x27;%Y-%m-%d&#x27;,              # &#x27;2006-10-25&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%Y %H:%M:%S&#x27;,     # &#x27;10/25/2006 14:30:59&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%Y %H:%M&#x27;,        # &#x27;10/25/2006 14:30&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%Y&#x27;,              # &#x27;10/25/2006&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%y %H:%M:%S&#x27;,     # &#x27;10/25/06 14:30:59&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%y %H:%M&#x27;,        # &#x27;10/25/06 14:30&#x27;</span><br><span class=\"line\">&#x27;%m/%d/%y&#x27;]              # &#x27;10/25/06&#x27;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_digits<code>max_decimal_places</code>max_whole_digits<code></code>max_value<code>和</code>min_value<code>错误信息可能包含</code>%(limit_value)s<code>，它们将被真正的限制值替换。类似地，</code>max_digits<code>、</code>max_decimal_places<code>和</code>max_whole_digits<code>错误消息可能包含</code>%(max)s<code>接收四个可选参数</code>max_value<code></code>min_value<code></code>max_digits<code>最大位数</code>decimal_places`最大小数位</p>\n<h4 id=\"DurationField\"><a href=\"#DurationField\" class=\"headerlink\" title=\"DurationField\"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid`</p>\n<h4 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>max_length<code></code>min_length`</p>\n<h4 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code>max_length`\n接收两个可选参数\n`max_length</code>allow_empty_file<code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功</code>max_length<code>错误信息表示文件名的长度。在错误信息中，</code>%(max)d<code>将替换为文件的最大长度，%</code>(length)d` 将替换为当前文件名的长度</p>\n<h4 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>这个字段允许从一个特定的目录选择文件\n接收五个参数</code>path<code>必须\n想要列出的目录的绝对路径</code>recursive<code>可选\n布尔值，默认为</code>False<code>，是否需要递归这个目录</code>match<code>可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项</code>allow_files<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的文件，它和</code>allow_folders<code>必须有一个为</code>True<code></code>allow_folders<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的目录，和</code>allow_files<code>必须有一个为</code>True`</p>\n<h4 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code></code>invalid_image`</p>\n<h4 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"IPAddressField\"><a href=\"#IPAddressField\" class=\"headerlink\" title=\"IPAddressField\"></a><code>IPAddressField</code></h4><p>1.7弃用</p>\n<h4 id=\"GenericIPAddressField\"><a href=\"#GenericIPAddressField\" class=\"headerlink\" title=\"GenericIPAddressField\"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>protocol<code></code>unpack_ipv4`</p>\n<h4 id=\"MultipleChoiceField\"><a href=\"#MultipleChoiceField\" class=\"headerlink\" title=\"MultipleChoiceField\"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_list`</p>\n<h4 id=\"TypedMultipleChoiceField\"><a href=\"#TypedMultipleChoiceField\" class=\"headerlink\" title=\"TypedMultipleChoiceField\"></a><code>TypedMultipleChoiceField</code></h4><h4 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h4><h4 id=\"RegexField\"><a href=\"#RegexField\" class=\"headerlink\" title=\"RegexField\"></a><code>RegexField</code></h4><h4 id=\"SlugField\"><a href=\"#SlugField\" class=\"headerlink\" title=\"SlugField\"></a><code>SlugField</code></h4><h4 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h4><h4 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h4><h4 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>\n<h4 id=\"ComboField\"><a href=\"#ComboField\" class=\"headerlink\" title=\"ComboField\"></a><code>ComboField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ComboField</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class=\"number\">20</span>), EmailField()])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">&#x27;test@example.com&#x27;</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;test@example.com&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">&#x27;longemailaddress@example.com&#x27;</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">ValidationError: [<span class=\"string\">&#x27;Ensure this value has at most 20 characters (it has 28).&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"MultiValueField\"><a href=\"#MultiValueField\" class=\"headerlink\" title=\"MultiValueField\"></a><code>MultiValueField</code></h4><h4 id=\"SplitDateTimeField\"><a href=\"#SplitDateTimeField\" class=\"headerlink\" title=\"SplitDateTimeField\"></a><code>SplitDateTimeField</code></h4><h4 id=\"ModelChoiceField\"><a href=\"#ModelChoiceField\" class=\"headerlink\" title=\"ModelChoiceField\"></a><code>ModelChoiceField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A custom empty label</span></span><br><span class=\"line\">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"string\">&quot;(Nothing)&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># No empty label</span></span><br><span class=\"line\">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModelMultipleChoiceField\"><a href=\"#ModelMultipleChoiceField\" class=\"headerlink\" title=\"ModelMultipleChoiceField\"></a><code>ModelMultipleChoiceField</code></h4><h2 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/widgets.html\">Widgets</a></h2><p>处理文本输入的Widget</p>\n<ul>\n<li><code>TextInput</code></li>\n<li><code>NumberInput</code></li>\n<li><code>EmailInput</code></li>\n<li><code>URLInput</code></li>\n<li><code>PasswordInput</code></li>\n<li><code>HiddenInput</code></li>\n<li><code>DateInput</code></li>\n<li><code>DateTimeInput</code></li>\n<li><code>TimeInput</code></li>\n<li><code>Textarea</code></li>\n</ul>\n<p>选择和复选框Widget</p>\n<ul>\n<li><code>CheckboxInput</code></li>\n<li><code>Select</code></li>\n<li><code>NullBooleanSelect</code></li>\n<li><code>SelectMultiple</code></li>\n<li><code>RadioSelect</code></li>\n<li><code>CheckboxSelectMultiple</code></li>\n</ul>\n<p>文件上传<code>Widget</code></p>\n<ul>\n<li><code>FileInput</code></li>\n<li><code>ClearableFileInput</code></li>\n</ul>\n<p>复合Widget</p>\n<ul>\n<li><code>MultipleHiddenInput</code></li>\n<li><code>SplitDateTimeWidget</code></li>\n<li><code>SplitHiddenDateTimeWidget</code></li>\n<li><code>SelectDateWidget</code></li>\n</ul>\n<h2 id=\"从模型创建表单\"><a href=\"#从模型创建表单\" class=\"headerlink\" title=\"从模型创建表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/modelforms.html\">从模型创建表单</a></h2><p>下面两种方法效果相同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Author(title=<span class=\"string\">&#x27;Mr&#x27;</span>)</span><br><span class=\"line\">form = PartialAuthorForm(request.POST, instance=author)</span><br><span class=\"line\">form.save()</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">form = PartialAuthorForm(request.POST)</span><br><span class=\"line\">author = form.save(commit=<span class=\"literal\">False</span>)</span><br><span class=\"line\">author.title = <span class=\"string\">&#x27;Mr&#x27;</span></span><br><span class=\"line\">author.save()</span><br></pre></td></tr></table></figure></p>\n<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>\n<p>例如，如果Article 模型像下面这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Article</span>(models.Model):</span><br><span class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">200</span>, null=<span class=\"literal\">True</span>, blank=<span class=\"literal\">True</span>,</span><br><span class=\"line\">                                help_text=<span class=\"string\">&quot;Use puns liberally&quot;</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br></pre></td></tr></table></figure><br>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ArticleForm</span>(<span class=\"title class_ inherited__\">ModelForm</span>):</span><br><span class=\"line\">    headline = MyFormField(max_length=<span class=\"number\">200</span>, required=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                           help_text=<span class=\"string\">&quot;Use puns liberally&quot;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\">        model = Article</span><br><span class=\"line\">        fields = [<span class=\"string\">&#x27;headline&#x27;</span>, <span class=\"string\">&#x27;content&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>创建简单的表单或表单集可以使用<code>modelform_factory()`</code>modelformset_factory()`方法来新建。</p>\n<p>启用字段的本地化功能¶</p>\n<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">AuthorForm</span>(<span class=\"title class_ inherited__\">ModelForm</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Meta</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        model = Author</span><br><span class=\"line\"><span class=\"meta\">... </span>        localized_fields = (<span class=\"string\">&#x27;birth_date&#x27;</span>,)</span><br></pre></td></tr></table></figure><br>如果localized_fields 设置为<code>&#39;__all__&#39;</code>这个特殊的值，所有的字段都将本地化。</p>\n<p>提供的初始值会覆盖从实例取得的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article.headline</span><br><span class=\"line\"><span class=\"string\">&#x27;My headline&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form = ArticleForm(initial=&#123;<span class=\"string\">&#x27;headline&#x27;</span>: <span class=\"string\">&#x27;Initial headline&#x27;</span>&#125;, instance=article)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form[<span class=\"string\">&#x27;headline&#x27;</span>].value()</span><br><span class=\"line\"><span class=\"string\">&#x27;Initial headline&#x27;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelform_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Book</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class=\"string\">&quot;author&quot;</span>, <span class=\"string\">&quot;title&quot;</span>))</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> Textarea</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</span><br><span class=\"line\"><span class=\"meta\">... </span>                         widgets=&#123;<span class=\"string\">&quot;title&quot;</span>: Textarea()&#125;)</span><br></pre></td></tr></table></figure><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class=\"string\">&quot;birth_date&quot;</span>,))</span><br></pre></td></tr></table></figure><br>表单集<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;title&#x27;</span>))</span><br></pre></td></tr></table></figure><br>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset`</code>save()<code>之后，会有新的属性\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.BaseModelFormSet.changed_objects</span><br><span class=\"line\">models.BaseModelFormSet.deleted_objects</span><br><span class=\"line\">models.BaseModelFormSet.new_objects</span><br></pre></td></tr></table></figure></code>max_num<code>为最大的表单数，如果初始</code>queryset<code>长度比</code>max_num<code>，则按照</code>queryset<code>来，</code>extra<code>是可以额外添加的空表单的个数，但</code>extra<code>和</code>queryset<code>长度相加如果大于</code>max_num<code>，则</code>extra<code>和实例设置可能表现不一样，如</code>queryset<code>长度为2，</code>max_num<code>为4，</code>extra<code>不管是2还是5，最终表现出来都是2。\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">&#x27;name&#x27;</span>,), max_num=<span class=\"number\">4</span>, extra=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></code>max_num<code>默认只影响显示，不影响验证，如果需要影响验证添加</code>validate_max=True`即可</p>\n<h2 id=\"表单素材-Media-类\"><a href=\"#表单素材-Media-类\" class=\"headerlink\" title=\"表单素材 ( Media 类)\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/media.html\">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\">        css = &#123;</span><br><span class=\"line\">            <span class=\"string\">&#x27;all&#x27;</span>: (<span class=\"string\">&#x27;pretty.css&#x27;</span>,)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        js = (<span class=\"string\">&#x27;animations.js&#x27;</span>, <span class=\"string\">&#x27;actions.js&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>使用<code>CalendarWidget</code>会自动引入下列资源<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;http://static.example.com/pretty.css&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> <span class=\"attr\">media</span>=<span class=\"string\">&quot;all&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://static.example.com/animations.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;http://static.example.com/actions.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure><br><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。</p>\n<p>动态定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">_media</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">return</span> forms.Media(css=&#123;<span class=\"string\">&#x27;all&#x27;</span>: (<span class=\"string\">&#x27;pretty.css&#x27;</span>,)&#125;,</span><br><span class=\"line\">                           js=(<span class=\"string\">&#x27;animations.js&#x27;</span>, <span class=\"string\">&#x27;actions.js&#x27;</span>))</span><br><span class=\"line\">    media = <span class=\"built_in\">property</span>(_media)</span><br></pre></td></tr></table></figure><br>两个<code>Media</code>实例可以相加<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">CalendarWidget</span>(forms.TextInput):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">&#x27;all&#x27;</span>: (<span class=\"string\">&#x27;pretty.css&#x27;</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">&#x27;animations.js&#x27;</span>, <span class=\"string\">&#x27;actions.js&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">OtherWidget</span>(forms.TextInput):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">&#x27;whizbang.js&#x27;</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w1 = CalendarWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w2 = OtherWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(w1.media + w2.media)</span><br><span class=\"line\">&lt;link href=<span class=\"string\">&quot;http://static.example.com/pretty.css&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> media=<span class=\"string\">&quot;all&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/animations.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/actions.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/whizbang.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单<code>Media</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">ContactForm</span>(forms.Form):</span><br><span class=\"line\"><span class=\"meta\">... </span>    date = DateField(widget=CalendarWidget)</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = CharField(max_length=<span class=\"number\">40</span>, widget=OtherWidget)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">class</span> <span class=\"title class_\">Media</span>:</span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">&#x27;all&#x27;</span>: (<span class=\"string\">&#x27;layout.css&#x27;</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.media</span><br><span class=\"line\">&lt;link href=<span class=\"string\">&quot;http://static.example.com/pretty.css&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> media=<span class=\"string\">&quot;all&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span><br><span class=\"line\">&lt;link href=<span class=\"string\">&quot;http://static.example.com/layout.css&quot;</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/css&quot;</span> media=<span class=\"string\">&quot;all&quot;</span> rel=<span class=\"string\">&quot;stylesheet&quot;</span> /&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/animations.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/actions.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span> src=<span class=\"string\">&quot;http://static.example.com/whizbang.js&quot;</span>&gt;&lt;/script</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单集\"><a href=\"#表单集\" class=\"headerlink\" title=\"表单集\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/formsets.html\">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>\n<p>其中<code>can_order`</code>can_delete`默认以以下形式展现</p>\n<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">... </span>    obj.delete()</span><br></pre></td></tr></table></figure><br>如果要兼容1.6或更早版，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># For Django 1.7+</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>        obj.delete()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">except</span> AssertionError:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># Django 1.6 and earlier already deletes the objects, trying to</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># delete them a second time raises an AssertionError.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>在表单集里添加额外的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> BaseFormSet</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">class</span> <span class=\"title class_\">BaseArticleFormSet</span>(<span class=\"title class_ inherited__\">BaseFormSet</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">def</span> <span class=\"title function_\">add_fields</span>(<span class=\"params\">self, form, index</span>):</span><br><span class=\"line\"><span class=\"meta\">... </span>        <span class=\"built_in\">super</span>(BaseArticleFormSet, self).add_fields(form, index)</span><br><span class=\"line\"><span class=\"meta\">... </span>        form.fields[<span class=\"string\">&quot;my_field&quot;</span>] = forms.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>formset = ArticleFormSet()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> form <span class=\"keyword\">in</span> formset:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span>(form.as_table())</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_form-0-title&quot;</span>&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;form-0-title&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_form-0-title&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_form-0-pub_date&quot;</span>&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;form-0-pub_date&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_form-0-pub_date&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label <span class=\"keyword\">for</span>=<span class=\"string\">&quot;id_form-0-my_field&quot;</span>&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;<span class=\"built_in\">input</span> <span class=\"built_in\">type</span>=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;form-0-my_field&quot;</span> <span class=\"built_in\">id</span>=<span class=\"string\">&quot;id_form-0-my_field&quot;</span> /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单集对应的模版写法<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        </span><span class=\"template-variable\">&#123;&#123; formset &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>也可以手动渲染，不能缺少<code>&#123;&#123; formset.management_form &#125;&#125;</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;&#123; form &#125;&#125;</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">    &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure><br>如果是手动渲染，<code>can_order`</code>can_delete`需要手动添加<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;post&quot;</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"language-xml\"></span></span><br><span class=\"line\"><span class=\"language-xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.title &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.pub_date &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% if formset.can_delete</span></span><br><span class=\"line\"><span class=\"template-tag\">                &lt;li&gt;&#123;&#123; form.DELETE &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% endif</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">    &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm, BookForm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">manage_articles</span>(<span class=\"params\">request</span>):</span><br><span class=\"line\">    ArticleFormSet = formset_factory(ArticleForm)</span><br><span class=\"line\">    BookFormSet = formset_factory(BookForm)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">&#x27;POST&#x27;</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class=\"string\">&#x27;articles&#x27;</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class=\"string\">&#x27;books&#x27;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> article_formset.is_valid() <span class=\"keyword\">and</span> book_formset.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># do something with the cleaned_data on the formsets.</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(prefix=<span class=\"string\">&#x27;articles&#x27;</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(prefix=<span class=\"string\">&#x27;books&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">&#x27;manage_articles.html&#x27;</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;article_formset&#x27;</span>: article_formset,</span><br><span class=\"line\">        <span class=\"string\">&#x27;book_formset&#x27;</span>: book_formset,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单验证和字段验证\"><a href=\"#表单验证和字段验证\" class=\"headerlink\" title=\"表单验证和字段验证\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/validation.html\">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError(</span><br><span class=\"line\">    _(<span class=\"string\">&#x27;Invalid value: %(value)s&#x27;</span>),</span><br><span class=\"line\">    code=<span class=\"string\">&#x27;invalid&#x27;</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">&#x27;value&#x27;</span>: <span class=\"string\">&#x27;42&#x27;</span>&#125;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure><br>招聘多个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">&#x27;Error 1&#x27;</span>), code=<span class=\"string\">&#x27;error1&#x27;</span>),</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">&#x27;Error 2&#x27;</span>), code=<span class=\"string\">&#x27;error2&#x27;</span>),</span><br><span class=\"line\">])</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    _(<span class=\"string\">&#x27;Error 1&#x27;</span>),</span><br><span class=\"line\">    _(<span class=\"string\">&#x27;Error 2&#x27;</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure><br>创建一个新的表单字段添加默认验证<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MultiEmailField</span>(forms.Field):</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">to_python</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;Normalize data to a list of strings.&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">validate</span>(<span class=\"params\">self, value</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;Check if value consists only of valid emails.&quot;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Use the parent&#x27;s handling of required fields, etc.</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(MultiEmailField, self).validate(value)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">            validate_email(email)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的设置\"><a href=\"#Django-的设置\" class=\"headerlink\" title=\"Django 的设置\"></a><a href=\"http://python.usyiyi.cn/django/topics/settings.html\">Django 的设置</a></h2><p>django-admin 工具</p>\n<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>\n<p>例如（Unix Bash shell）：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure><br>例如（Windows shell）：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure><br>使用–settings 命令行参数可以手工指定设置：<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin runserver --settings=mysite.settings</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以查询设置与默认设置的不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py diffsettings</span><br></pre></td></tr></table></figure><br>在django app中使用设置应使用以下导入方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure><br>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.settings <span class=\"keyword\">import</span> DEBUG  <span class=\"comment\"># This won&#x27;t work.</span></span><br></pre></td></tr></table></figure><br>不要在应用运行时改变设置</p>\n<h2 id=\"完整列表设置-Settings\"><a href=\"#完整列表设置-Settings\" class=\"headerlink\" title=\"完整列表设置(Settings)\"></a><a href=\"http://python.usyiyi.cn/django/ref/settings.html\">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>\n<p><code>DATABASES[&#39;CONN_MAX_AGE&#39;]</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/applications.html\">应用</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/apps.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> AppConfig</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">RockNRollConfig</span>(<span class=\"title class_ inherited__\">AppConfig</span>):</span><br><span class=\"line\">    name = <span class=\"string\">&#x27;rock_n_roll&#x27;</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">&quot;Rock ’n’ roll&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/__init__.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\">default_app_config = <span class=\"string\">&#x27;rock_n_roll.apps.RockNRollConfig&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>AppConfig</code>可配置的属性</p>\n<ul>\n<li><code>AppConfig.name</code></li>\n<li><code>AppConfig.label</code></li>\n<li><code>AppConfig.verbose_name</code></li>\n<li><code>Appconfig.path</code></li>\n</ul>\n<p><code>AppConfig</code>只读属性</p>\n<ul>\n<li><code>AppConfig.module</code></li>\n<li><code>Appconfig.models_module</code></li>\n</ul>\n<p><code>AppConfig</code>方法</p>\n<ul>\n<li><code>AppConfig.get_models()</code></li>\n<li><code>AppConfig..get_model(model_name)</code></li>\n<li><code>AppConfigevaluate.ready()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> apps</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>apps.get_app_config(<span class=\"string\">&#x27;admin&#x27;</span>).verbose_name</span><br><span class=\"line\"><span class=\"string\">&#x27;Admin&#x27;</span></span><br></pre></td></tr></table></figure>\n<p><code>APP</code></p>\n<ul>\n<li><code>apps.ready</code></li>\n<li><code>apps.get_app_configs()</code></li>\n<li><code>apps.get_app_config(app_label)</code></li>\n<li><code>apps.is_installed(app_name)</code></li>\n<li><code>apps.get_model(app_label, model_name)</code></li>\n</ul>\n<h2 id=\"Django异常\"><a href=\"#Django异常\" class=\"headerlink\" title=\"Django异常\"></a><a href=\"python.usyiyi.cn/django_182/ref/exceptions.html\">Django异常</a></h2><h3 id=\"核心异常\"><a href=\"#核心异常\" class=\"headerlink\" title=\"核心异常\"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>\n<ul>\n<li><p><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ObjectDoesNotExist</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    e = Entry.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = Blog.objects.get(<span class=\"built_in\">id</span>=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ObjectDoesNotExist:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Either the entry or blog doesn&#x27;t exist.&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>\n</li>\n<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>\n</li>\n<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>\n<ul>\n<li><code>DisallowedHost</code></li>\n<li><code>DisallowedModelAdminLookup</code></li>\n<li><code>DisallowedModelAdminToField</code></li>\n<li><code>DisallowedRedirect</code></li>\n<li><code>InvalidSessionKey</code></li>\n<li><code>SuspiciousFileOperation</code></li>\n<li><code>SuspiciousMultipartForm</code></li>\n<li><code>SuspiciousSession</code></li>\n</ul>\n</li>\n<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>\n</li>\n<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>\n</li>\n<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>\n</li>\n<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>\n</li>\n<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>\n<ul>\n<li>模型中的字段与抽象基类中的字段重名</li>\n<li>排序造成了一个死循环</li>\n<li>关键词不能由过滤器参数解析</li>\n<li>字段不能由查询参数中的关键词决定</li>\n<li>连接（join）不能在指定对象上使用</li>\n<li>字段名称不可用</li>\n<li><p>查询包含了无效的<code>order_by</code>参数</p>\n</li>\n<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>\n</li>\n</ul>\n</li>\n<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>\n</li>\n</ul>\n<h3 id=\"URL解析器异常\"><a href=\"#URL解析器异常\" class=\"headerlink\" title=\"URL解析器异常\"></a>URL解析器异常</h3><ul>\n<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>\n</li>\n<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>\n</li>\n</ul>\n<h3 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h3><p>数据库异常由django.db导入</p>\n<ul>\n<li><code>Error</code></li>\n<li><code>InterfaceError</code></li>\n<li><code>DatabaseError</code></li>\n<li><code>DataError</code></li>\n<li><code>OperationalError</code></li>\n<li><code>IntegrityError</code></li>\n<li><code>InternalError</code></li>\n<li><code>ProgrammingError</code></li>\n<li><code>NotSupportedError</code></li>\n</ul>\n<h3 id=\"HTTP异常\"><a href=\"#HTTP异常\" class=\"headerlink\" title=\"HTTP异常\"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>\n<ul>\n<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>\n</ul>\n<h3 id=\"事务异常\"><a href=\"#事务异常\" class=\"headerlink\" title=\"事务异常\"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>\n<h3 id=\"测试框架异常\"><a href=\"#测试框架异常\" class=\"headerlink\" title=\"测试框架异常\"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>\n<ul>\n<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>\n</ul>\n<h3 id=\"Python异常\"><a href=\"#Python异常\" class=\"headerlink\" title=\"Python异常\"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>\n<h2 id=\"django-admin-and-manage-py\"><a href=\"#django-admin-and-manage-py\" class=\"headerlink\" title=\"django-admin and manage.py\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/django-admin.html\">django-admin and manage.py</a></h2><ul>\n<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>\n</li>\n<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>\n</li>\n<li><code>--noinput</code></li>\n<li><code>--database</code></li>\n<li><code>--no-initial-data</code></li>\n</ul>\n<ul>\n<li><p><code>inspectdb</code><br>根据数据库结构生成model</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>loaddata</code><br>导入fixture数据</p>\n</li>\n<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runserver <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自定义的命令\"><a href=\"#添加自定义的命令\" class=\"headerlink\" title=\" 添加自定义的命令\"></a><a href=\"http://python.usyiyi.cn/django_182/howto/custom-management-commands.html\"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.management.base <span class=\"keyword\">import</span> BaseCommand, CommandError</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Poll</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Command</span>(<span class=\"title class_ inherited__\">BaseCommand</span>):</span><br><span class=\"line\">    <span class=\"built_in\">help</span> = <span class=\"string\">&#x27;Closes the specified poll for voting&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">add_arguments</span>(<span class=\"params\">self, parser</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 命令行接收一个或多个poll_id值</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        parser.add_argument(<span class=\"string\">&#x27;poll_id&#x27;</span>, nargs=<span class=\"string\">&#x27;+&#x27;</span>, <span class=\"built_in\">type</span>=<span class=\"built_in\">int</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">handle</span>(<span class=\"params\">self, *args, **options</span>):</span><br><span class=\"line\">        <span class=\"keyword\">for</span> poll_id <span class=\"keyword\">in</span> options[<span class=\"string\">&#x27;poll_id&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                poll = Poll.objects.get(pk=poll_id)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Poll.DoesNotExist:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> CommandError(<span class=\"string\">&#x27;Poll &quot;%s&quot; does not exist&#x27;</span> % poll_id)</span><br><span class=\"line\"> </span><br><span class=\"line\">            poll.opened = <span class=\"literal\">False</span></span><br><span class=\"line\">            poll.save()</span><br><span class=\"line\"> </span><br><span class=\"line\">            self.stdout.write(<span class=\"string\">&#x27;Successfully closed poll &quot;%s&quot;&#x27;</span> % poll_id)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/media/django-commands.png\" alt=\"django-commands\"></p>","categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"文档","path":"api/tags/文档.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}