{"title":"使用alembic进行数据库版本管理","slug":"使用alembic进行数据库版本管理","date":"2018-09-13T10:53:14.000Z","updated":"2020-03-04T05:22:29.004Z","comments":true,"path":"api/articles/使用alembic进行数据库版本管理.json","excerpt":"转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改前言随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","covers":null,"content":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>\n","categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"}]}