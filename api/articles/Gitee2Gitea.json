{"title":"代码托管平台码云(Gitee)到Gitea迁移记","slug":"Gitee2Gitea","date":"2020-03-01T11:42:34.000Z","updated":"2020-03-24T06:15:27.000Z","comments":true,"path":"api/articles/Gitee2Gitea.json","excerpt":"团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。","covers":null,"content":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>\n<span id=\"more\"></span>\n<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080<span class=\"comment\">;</span></span><br><span class=\"line\">    keepalive 2000<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">    server_name  git.i.example.com<span class=\"comment\">;</span></span><br><span class=\"line\">    client_max_body_size 1024M<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/<span class=\"comment\">;</span></span><br><span class=\"line\">        proxy_set_header Host $host:$server_port<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">tureture# </span><span class=\"language-bash\">Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot; -H &quot;Content-Type: application/json&quot; -d &quot;&#123; \\&quot;auth_password\\&quot;: \\&quot;NDY2&amp;F*K!hL75y*z\\&quot;, \\&quot;auth_username\\&quot;: \\&quot;korvin101@gmail.com\\&quot;, \\&quot;clone_addr\\&quot;: \\&quot;$line\\&quot;, \\&quot;issues\\&quot;: true, \\&quot;labels\\&quot;: true, \\&quot;milestones\\&quot;: true, \\&quot;mirror\\&quot;: true, \\&quot;private\\&quot;: true, \\&quot;pull_requests\\&quot;: true, \\&quot;releases\\&quot;: true, \\&quot;repo_name\\&quot;: \\&quot;$project_name\\&quot;, \\&quot;uid\\&quot;: 2, \\&quot;wiki\\&quot;: true&#125;&quot;;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g&#x27; */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g&#x27; */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">&quot;&lt;your access token&gt;&quot;</span></span><br><span class=\"line\">repos_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;&#x27;</span></span><br><span class=\"line\">branches_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">repos</span>():</span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.<span class=\"built_in\">format</span>(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">&#x27;data&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = <span class=\"built_in\">len</span>(r.json()[<span class=\"string\">&#x27;data&#x27;</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;拉取项目所有分支代码到本地&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sync_repo</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;克隆第 &#123;&#125; 个仓库 &#123;&#125; &#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&quot;git clone &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;ssh_url&#x27;</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;同步 &#123;&#125; 仓库所有分支&#x27;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;git fetch --all&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == &#x27;Windows&#x27;:</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;full_name&#x27;</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git branch --track &#123;&#125; origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;设置项目部署公钥&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_pub_key</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;ssh-rsa aabbcc&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;read_only&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;SandBox&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;===&#123;&#125;. &#123;&#125;===&#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;owner&#x27;</span>][<span class=\"string\">&#x27;username&#x27;</span>], repo[<span class=\"string\">&#x27;name&#x27;</span>], access_token), data=body)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>\n","more":"<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080<span class=\"comment\">;</span></span><br><span class=\"line\">    keepalive 2000<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">    server_name  git.i.example.com<span class=\"comment\">;</span></span><br><span class=\"line\">    client_max_body_size 1024M<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/<span class=\"comment\">;</span></span><br><span class=\"line\">        proxy_set_header Host $host:$server_port<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">tureture# </span><span class=\"language-bash\">Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot; -H &quot;Content-Type: application/json&quot; -d &quot;&#123; \\&quot;auth_password\\&quot;: \\&quot;NDY2&amp;F*K!hL75y*z\\&quot;, \\&quot;auth_username\\&quot;: \\&quot;korvin101@gmail.com\\&quot;, \\&quot;clone_addr\\&quot;: \\&quot;$line\\&quot;, \\&quot;issues\\&quot;: true, \\&quot;labels\\&quot;: true, \\&quot;milestones\\&quot;: true, \\&quot;mirror\\&quot;: true, \\&quot;private\\&quot;: true, \\&quot;pull_requests\\&quot;: true, \\&quot;releases\\&quot;: true, \\&quot;repo_name\\&quot;: \\&quot;$project_name\\&quot;, \\&quot;uid\\&quot;: 2, \\&quot;wiki\\&quot;: true&#125;&quot;;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g&#x27; */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g&#x27; */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">&quot;&lt;your access token&gt;&quot;</span></span><br><span class=\"line\">repos_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;&#x27;</span></span><br><span class=\"line\">branches_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">repos</span>():</span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.<span class=\"built_in\">format</span>(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">&#x27;data&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = <span class=\"built_in\">len</span>(r.json()[<span class=\"string\">&#x27;data&#x27;</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;拉取项目所有分支代码到本地&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sync_repo</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;克隆第 &#123;&#125; 个仓库 &#123;&#125; &#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&quot;git clone &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;ssh_url&#x27;</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;同步 &#123;&#125; 仓库所有分支&#x27;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;git fetch --all&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == &#x27;Windows&#x27;:</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;full_name&#x27;</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git branch --track &#123;&#125; origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;设置项目部署公钥&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_pub_key</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;ssh-rsa aabbcc&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;read_only&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;SandBox&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;===&#123;&#125;. &#123;&#125;===&#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;owner&#x27;</span>][<span class=\"string\">&#x27;username&#x27;</span>], repo[<span class=\"string\">&#x27;name&#x27;</span>], access_token), data=body)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>","categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"Gitee","path":"api/tags/Gitee.json"},{"name":"GitLab","path":"api/tags/GitLab.json"},{"name":"Gite","path":"api/tags/Gite.json"},{"name":"Gogs","path":"api/tags/Gogs.json"},{"name":"迁移","path":"api/tags/迁移.json"},{"name":"代码","path":"api/tags/代码.json"},{"name":"Python","path":"api/tags/Python.json"}]}