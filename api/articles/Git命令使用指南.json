{"title":"Git命令使用指南","slug":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","updated":"2020-01-17T07:55:59.340Z","comments":true,"path":"api/articles/Git命令使用指南.json","excerpt":" [Figure] ","covers":["/media/Git工作流图示.jpg","/media/git-reset_drbfhd.png","http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png"],"content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img alt=\"工作流图示\" data-src=\"/media/git-reset_drbfhd.png\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name &#39;Your Name&#39;</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage &quot;reset HEAD&quot;</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img alt=\"status示例图\" data-src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\" target=\"_blank\" rel=\"noopener\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git - 简易指南</a></p>\n</blockquote>\n","categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Git","path":"api/tags/Git.json"}]}