{"name":"restful","postlist":[{"title":"Django REST framework之版本号version","slug":"django-rest-framework之版本号version","date":"2016-01-28T15:29:58.000Z","updated":"2020-08-15T03:05:41.339Z","comments":true,"path":"api/articles/django-rest-framework之版本号version.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>drf支持以下形式传输版本号</p>\n<ul>\n<li><p>header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json; version=1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>URL Path </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(</span><br><span class=\"line\">        r&apos;^(?P&lt;version&gt;(v1|v2))/bookings/$&apos;,</span><br><span class=\"line\">        bookings_list,</span><br><span class=\"line\">        name=&apos;bookings-list&apos;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Namespace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/something/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^v1/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v1&apos;)),</span><br><span class=\"line\">    url(r&apos;^v2/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v2&apos;))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Host Name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: v1.example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query Parameter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /something/?version=0.1 HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>drf默认是关闭版本控制功能，如需要开启，可在<code>settings.py</code>里添加对应的设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.AcceptHeaderVersioning'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，你也可以为每个视图单独添加，不过不建议这么做<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileList</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    versioning_class = versioning.QueryParameterVersioning</span><br></pre></td></tr></table></figure></p>\n<p>开启版本控制之后，就可以从<code>request</code>取得版本号<code>request.version</code>（当然你<code>settings.py</code>里配置的是什么方式，就用什么方式传版本号，这样就才可以从<code>request</code>里获取到版本号）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_serializer_class</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.request.version == <span class=\"string\">'v1'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AccountSerializerVersion1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AccountSerializer</span><br></pre></td></tr></table></figure></p>\n<p>启动版本控制后，url逆向解析方法需要传入<code>request</code>参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.reverse <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"> </span><br><span class=\"line\">reverse(<span class=\"string\">'bookings-list'</span>, request=request)</span><br></pre></td></tr></table></figure></p>\n<p>如果是使用Namespace时的版本控制，因为配置了<code>DEFAULT_VERSIONING_CLASS</code>，所以设置view_name时不需要添加<code>v1:</code>前缀，见django rest framework入门笔记.md</p>\n<p>最后在设置里添加以下全局设置来控制能访问的版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'DEFAULT_VERSION'</span>: <span class=\"keyword\">None</span>, <span class=\"comment\">#默认版本，request里没有版本信息时，使用的版本，默认为None</span></span><br><span class=\"line\"><span class=\"string\">'ALLOWED_VERSIONS'</span>: [<span class=\"keyword\">None</span>, <span class=\"string\">'v1'</span>, <span class=\"string\">'v2'</span>], <span class=\"comment\">#允许访问的版本，如果访问的版本不在列表中，则会抛出异常</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以为每个视图单独设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.versioning <span class=\"keyword\">import</span> URLPathVersioning</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleVersioning</span><span class=\"params\">(URLPathVersioning)</span>:</span></span><br><span class=\"line\">    default_version = ...</span><br><span class=\"line\">    allowed_versions = ...</span><br><span class=\"line\">    version_param = ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIVIew)</span>:</span></span><br><span class=\"line\">    versioning_class = ExampleVersioning</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"version","path":"api/tags/version.json"}]},{"title":"Django Rest framework使用问题及解决方法","slug":"django-rest-framework使用问题及解决方法","date":"2016-12-17T06:58:04.000Z","updated":"2020-08-15T03:05:35.805Z","comments":true,"path":"api/articles/django-rest-framework使用问题及解决方法.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-29 初稿</p>\n<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）<br>urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>访问部分接口出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Contact</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:contact-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:&#123;<span class=\"string\">'view_name'</span>:<span class=\"string\">'api:user-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"问题","path":"api/tags/问题.json"}]},{"title":"Django Rest framework里的API请求频率控制","slug":"django-rest-framework里的api请求频率控制","date":"2016-12-17T06:48:19.000Z","updated":"2020-08-15T03:05:17.846Z","comments":true,"path":"api/articles/django-rest-framework里的api请求频率控制.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-08-25 初稿</p>\n<p><code>Django Rest framework</code>有自带的频率控制配置</p>\n<h2 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 开启授权用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 频率限制有second, minute, hour, day</span></span><br><span class=\"line\">        <span class=\"comment\"># 匿名用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'anon'</span>: <span class=\"string\">'100/day'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 授权用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类视图单独配置\"><a href=\"#类视图单独配置\" class=\"headerlink\" title=\"类视图单独配置\"></a>类视图单独配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_classes = (UserRateThrottle,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></span><br><span class=\"line\">        content = &#123;</span><br><span class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法视图配置\"><a href=\"#方法视图配置\" class=\"headerlink\" title=\"方法视图配置\"></a>方法视图配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@api_view(['GET'])</span></span><br><span class=\"line\"><span class=\"meta\">@throttle_classes([UserRateThrottle])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_view</span><span class=\"params\">(request, format=None)</span>:</span></span><br><span class=\"line\">    content = &#123;</span><br><span class=\"line\">        <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h2><p>方法一：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BurstRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'burst'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SustainedRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'sustained'</span></span><br><span class=\"line\">...<span class=\"keyword\">and</span> the following settings.</span><br></pre></td></tr></table></figure></p>\n<p><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.BurstRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.SustainedRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'burst'</span>: <span class=\"string\">'60/min'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sustained'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在视图里设置<code>throttle_classes</code>即可。</p>\n<p>方法二：<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'contacts'</span>: <span class=\"string\">'1000/day'</span>,</span><br><span class=\"line\">        <span class=\"string\">'uploads'</span>: <span class=\"string\">'20/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在类视图中设置<code>throttle_scope</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactListView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactDetailView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'uploads'</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p><strong>1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。</strong><br><strong>2. 频率限制是针对单个接口的频率，而不是所有接口的频率。</strong></p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api， version","path":"api/tags/api， version.json"}]},{"title":"Django Rest framework入门笔记及跳坑记录","slug":"django-rest-framework入门笔记及跳坑记录","date":"2016-12-17T07:03:10.000Z","updated":"2020-08-15T03:05:28.930Z","comments":true,"path":"api/articles/django-rest-framework入门笔记及跳坑记录.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-26 初稿</p>\n<h2 id=\"序列化时嵌套显示外键关联字段\"><a href=\"#序列化时嵌套显示外键关联字段\" class=\"headerlink\" title=\"序列化时嵌套显示外键关联字段\"></a>序列化时嵌套显示外键关联字段</h2><ul>\n<li><p>自动<br>使用<code>depth</code>参数指定外键深度</p>\n</li>\n<li><p>手动指定<br>使用外键对应<code>model</code>的小写为属性，外键对应的<code>model</code>序列化程序为值<br>以下例子在<code>HospitalPic</code>序列化结果里嵌套显示<code>Hospital</code><br>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hospital</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    hospital = models.ForeignKey(Hospital)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital </span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<p>  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):<br>      hospital = HospitalSerializer()</p>\n<pre><code>class Meta:\n    model = HospitalPic\n    fields = &apos;__all__&apos;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***反向关系嵌套***</span><br><span class=\"line\">在`Hospital`序列化结果里嵌套显示`HospitalPic`</span><br><span class=\"line\">serializers.py</span><br><span class=\"line\">  ```python</span><br><span class=\"line\">  from rest_framework import serializers</span><br><span class=\"line\">  </span><br><span class=\"line\">  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): </span><br><span class=\"line\">      class Meta:</span><br><span class=\"line\">          model = HospitalPic</span><br><span class=\"line\">          fields = &apos;__all__&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class HospitalSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class=\"line\">      hospitalpic_set = HospitalPicSerializer(many=Ture)</span><br><span class=\"line\">      class Meta:</span><br><span class=\"line\">          model = Hospital</span><br><span class=\"line\">          fields = &apos;__all__&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在序列化对象里添加关联表的字段内容\"><a href=\"#在序列化对象里添加关联表的字段内容\" class=\"headerlink\" title=\"在序列化对象里添加关联表的字段内容\"></a>在序列化对象里添加关联表的字段内容</h2><p>定义一个<code>serializer Field</code>，并添加参数<code>source</code>指向外键对对应的字段（<code>source</code>值其实是从当前序列化的实例的属性）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_address= serializers.ReadOnlyField(source=<span class=\"string\">'address.full_address'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加自定义内容\"><a href=\"#在序列化对象里添加自定义内容\" class=\"headerlink\" title=\"在序列化对象里添加自定义内容\"></a>在序列化对象里添加自定义内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.timezone <span class=\"keyword\">import</span> now</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    days_since_joined = serializers.SerializerMethodField()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_days_since_joined</span><span class=\"params\">(self, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (now() - obj.date_joined).days</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\"><a href=\"#使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\" class=\"headerlink\" title=\"使用ViewSet，并不有设置queryset，而是重写了get_queryset时，需要在router里增加base_name参数（base_name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）\"></a>使用<code>ViewSet</code>，并不有设置<code>queryset</code>，而是重写了<code>get_queryset</code>时，需要在<code>router</code>里增加<code>base_name</code>参数（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）</h2><p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></span><br><span class=\"line\">    serializer_class = ContactSerializer</span><br><span class=\"line\">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request.user.contact_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(<span class=\"string\">r'contact'</span>, ContactViewSet, base_name=<span class=\"string\">'contact'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>未设置<code>base_name</code>会报下面错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"给api接口的url添加了命名空间namespace\"><a href=\"#给api接口的url添加了命名空间namespace\" class=\"headerlink\" title=\"给api接口的url添加了命名空间namespace\"></a>给api接口的url添加了命名空间<code>namespace</code></h2><p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>需要对<code>HyperlinkedRelatedField</code>字段的参数进行修改<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospitalpic-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'hospital'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospital-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>不然会出现以下错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could <span class=\"keyword\">not</span> resolve URL <span class=\"keyword\">for</span> hyperlinked relationship using view name <span class=\"string\">\"user-detail\"</span>. You may have failed to include the related model <span class=\"keyword\">in</span> your API, <span class=\"keyword\">or</span> incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>不过话说我们全api的url加<code>namespace</code>一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于<code>namespace</code>的版本控制，这样就不需要修改<code>HyperlinkedRelatedField</code>字段的<code>view_name</code>了<br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/v1/'</span>, include(router.urls, namespace=<span class=\"string\">'v1'</span>)),</span><br><span class=\"line\">url(<span class=\"string\">r'^api/v2/'</span>, include(router.urls, namespace=<span class=\"string\">'v2'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"要drf的错误提示为中文，需要设置\"><a href=\"#要drf的错误提示为中文，需要设置\" class=\"headerlink\" title=\"要drf的错误提示为中文，需要设置\"></a>要drf的错误提示为中文，需要设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-CN'</span></span><br></pre></td></tr></table></figure>\n<p>如果设置为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-Hans'</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然django默认表单错误会输出中文，但drf还是输出英文</p>\n<h2 id=\"django的validators可以直接在drf中使用，不需要做任何修改\"><a href=\"#django的validators可以直接在drf中使用，不需要做任何修改\" class=\"headerlink\" title=\"django的validators可以直接在drf中使用，不需要做任何修改\"></a>django的<code>validators</code>可以直接在drf中使用，不需要做任何修改</h2><h2 id=\"当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"><a href=\"#当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\" class=\"headerlink\" title=\"当字段里的属性editable=False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"></a>当字段里的属性<code>editable=False</code>时，<code>ModelSerializer</code>里该字段会抛弃<code>model</code>里显式和隐式（unique）的所有<code>validators</code></h2><h2 id=\"Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\"><a href=\"#Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\" class=\"headerlink\" title=\"Serializer里write_only写在field里和写在extra_kwargs里是有区别的，\"></a><code>Serializer</code>里<code>write_only</code>写在<code>field</code>里和写在<code>extra_kwargs</code>里是有区别的，</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRegisterSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户注册Serializer\"\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    code = serializers.CharField(min_length=<span class=\"number\">4</span>, max_length=<span class=\"number\">6</span>, label=_(<span class=\"string\">'验证码'</span>),</span><br><span class=\"line\">                                 help_text=_(<span class=\"string\">'验证码'</span>), write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    re_password = serializers.CharField(label=_(<span class=\"string\">'重复密码'</span>), help_text=_(<span class=\"string\">'重复密码'</span>),</span><br><span class=\"line\">                                        validators=validators.password_validators(),</span><br><span class=\"line\">                                        write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'mobile_phone'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'re_password'</span>)</span><br><span class=\"line\">        extra_kwargs = &#123;<span class=\"string\">'password'</span>:</span><br><span class=\"line\">                            &#123;<span class=\"string\">'write_only'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Check that the start is before the stop.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> attrs[<span class=\"string\">'password'</span>] != attrs[<span class=\"string\">'re_password'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> serializers.ValidationError(_(<span class=\"string\">'密码不一致'</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 校验验证码</span></span><br><span class=\"line\">        verify_result = Sms(attrs[<span class=\"string\">'mobile_phone'</span>]).verify_sms_code(</span><br><span class=\"line\">            attrs.pop(<span class=\"string\">'code'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> verify_result:</span><br><span class=\"line\">            error = verify_result.get(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ParseError(error)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attrs</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        user = User(</span><br><span class=\"line\">            username=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">            mobile_phone=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">        )</span><br><span class=\"line\">        user.set_password(validated_data[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n<p>因为<code>create()</code>这个方法return了一个<code>user</code>实例，<code>User</code>里没有的字段<code>code</code>和<code>re_password</code>需要将<code>write_only</code>写在<code>field</code>参数里，不然会报以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.</span><br><span class=\"line\">The serializer field might be named incorrectly and not match any attribute or key on the `User` instance.</span><br><span class=\"line\">Original exception text was: &apos;User&apos; object has no attribute &apos;code&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如果使用django-rest-swagger报以下错误\"><a href=\"#如果使用django-rest-swagger报以下错误\" class=\"headerlink\" title=\"如果使用django-rest-swagger报以下错误\"></a>如果使用<code>django-rest-swagger</code>报以下错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t read from server. It may not have the appropriate access-control-origin settings.</span><br></pre></td></tr></table></figure>\n<p>注释掉设置里的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 'base_path': '127.0.0.1:8000/docs',</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"serializer-data和serializer-validated-data\"><a href=\"#serializer-data和serializer-validated-data\" class=\"headerlink\" title=\"serializer.data和serializer.validated_data\"></a><code>serializer.data</code>和<code>serializer.validated_data</code></h2><p>在<code>serializer</code>只使用<code>data</code>参数实例化的时：</p>\n<ul>\n<li><code>serializer.data</code>是原始数据（字符串），<code>serializer.validated_data</code>是进行数据验证并转换成对应数据类型的数据。</li>\n<li>两者者必须在<code>serializer</code>调用<code>is_valid</code>方法后才能调用<br>在<code>serializer</code>只使用<code>instance</code>参数实例化时：</li>\n<li>只有<code>serializer.data</code>没有<code>serializer.validated_data</code>，并且<code>serializer.data</code>里的数据也是字符串；</li>\n<li>没有方法<code>is_valid</code>；</li>\n<li>即<code>is_valid</code>和<code>validated_data</code>只在有data参数实例化时才可调用；</li>\n</ul>\n<h2 id=\"在serializer里获取原始请求信息\"><a href=\"#在serializer里获取原始请求信息\" class=\"headerlink\" title=\"在serializer里获取原始请求信息\"></a>在<code>serializer</code>里获取原始请求信息</h2><p>默认的，上下文信息会被传递到<code>serializer</code>里，所以在<code>serializer</code>可以直接使用<code>self.context[&#39;request&#39;]</code>来获取请求信息。（在要继承自<code>viewsets.GenericViewSet</code>的类里使用的<code>serializer</code>才能取到，如果是继承<code>APIView</code>的，自己传入即可<code>serializer = self.serializer_class(data=request.data, context={&#39;request&#39;: request})</code>）</p>\n<h2 id=\"自定义serializer字段\"><a href=\"#自定义serializer字段\" class=\"headerlink\" title=\"自定义serializer字段\"></a>自定义<code>serializer</code>字段</h2><p>自定义字段继承<code>serializers.Field</code>，<code>to_representation</code>方法处理出来的数据用来序列化显示，<code>to_internal_value</code>处理接收到的数据，<code>get_attribute</code>方法指定这个字段访问的实例属性，<code>get_value</code>方法指定<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuField</span><span class=\"params\">(serializers.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_attribute</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance.key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self, dictionary)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）从传入数据中提取一个值给这个字段处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(QiNiuField, self).get_value(dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）处理出来的数据用来序列化显示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_internal_value</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）处理接收到的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"string\">'key'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"嵌套序列化，传参问题\"><a href=\"#嵌套序列化，传参问题\" class=\"headerlink\" title=\"嵌套序列化，传参问题\"></a>嵌套序列化，传参问题</h2><p>官方文档中有这么一个例子<a href=\"http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects\" target=\"_blank\" rel=\"noopener\">Dealing with nested objects</a><br>如果是以<code>Content-Type:application/json</code>形式传数据格式传数据，直接嵌套传就可以了<code>{&#39;user&#39;: {&#39;email&#39;: &#39;foobar&#39;, &#39;username&#39;: &#39;doe&#39;}, &#39;content&#39;: &#39;baz&#39;}</code>，但如果是以,<br>但是如果以<code>Content-Type:form-data</code>或<code>Content-Type:x-www-form-urlencoded</code>上传，则上传<code>user</code>信息进不是嵌套，而是就<code>.</code>连接了，<code>&quot;user.email&quot;:&quot;foobar&quot;</code>.</p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"问题","path":"api/tags/问题.json"}]}]}