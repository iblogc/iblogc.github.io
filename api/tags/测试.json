{"name":"测试","postlist":[{"title":"Django REST framework单元测试「Unit Testing」","slug":"django-rest-framework接口单元测试","date":"2017-09-05T15:23:41.000Z","updated":"2020-01-17T07:57:22.000Z","comments":true,"path":"api/articles/django-rest-framework接口单元测试.json","excerpt":"<br /><br>","cover":null,"content":"<p><br /><br><span id=\"more\"></span></p>\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a><code>settings</code></h2><p><code>Django</code>运行单元测试时，会以<code>settings</code>里的数据库配置里的<code>NAME</code>新建一个以<code>test_</code>开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的<code>migrations</code>文件来创建数据表并进行迁移，但如果<code>migrations</code>文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前<code>Model</code>结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用<code>SQLite</code>数据库引擎，当使用<code>SQLite</code>数据库引擎时，测试将默认使用内存数据库。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TESTING = <span class=\"built_in\">len</span>(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">&#x27;test&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> TESTING:</span><br><span class=\"line\">    <span class=\"comment\"># 当使用SQLite数据库引擎时，测试将默认使用内存数据库</span></span><br><span class=\"line\">    DATABASES[<span class=\"string\">&#x27;default&#x27;</span>] = &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;ENGINE&#x27;</span>: <span class=\"string\">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 单元测试时, 跳过migrate, 极 的提升测试运 效率</span></span><br><span class=\"line\">    <span class=\"comment\"># 具体可以查看</span></span><br><span class=\"line\">    <span class=\"comment\"># https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html</span></span><br><span class=\"line\">    <span class=\"comment\"># https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">class</span> <span class=\"title class_\">DisableMigrations</span>(<span class=\"title class_ inherited__\">object</span>):</span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__contains__</span>(<span class=\"params\">self, item</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">def</span> <span class=\"title function_\">__getitem__</span>(<span class=\"params\">self, item</span>):</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;notmigrations&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    MIGRATION_MODULES = DisableMigrations()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.test <span class=\"keyword\">import</span> APITestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.tests.test_utils <span class=\"keyword\">import</span> TestCaseUtils</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">&#x27;jeff&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">UserAPITests</span>(APITestCase, TestCaseUtils):</span><br><span class=\"line\">    <span class=\"comment\"># 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成</span></span><br><span class=\"line\">    <span class=\"comment\"># xml/yaml/json格式的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找</span></span><br><span class=\"line\">    <span class=\"comment\"># 此测试类运行结束后，会自动从数据库里销毁这份数据</span></span><br><span class=\"line\">    <span class=\"comment\"># fixtures = [&#x27;user.json&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setUp</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个测试方法执行前会运行</span></span><br><span class=\"line\">        <span class=\"comment\"># 在此方法执行前，django会运行以下操作</span></span><br><span class=\"line\">        <span class=\"comment\"># 1. 重置数据库，数据库恢复到执行migrate后的状态</span></span><br><span class=\"line\">        <span class=\"comment\"># 2. 加载fixtures数据</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以每个测试方法里对数据库的操作都是独立的，不会相互影响</span></span><br><span class=\"line\">        kwargs = <span class=\"built_in\">dict</span>(mobile_phone=<span class=\"string\">&#x27;15999999999&#x27;</span>, password=<span class=\"string\">&#x27;111111&#x27;</span>)</span><br><span class=\"line\">        self.user = User.app_user_objects.create(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tearDown</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个方法结束执行后会运行</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">setUpClass</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在类初始化时执行，必须调用super</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(UserAPITests, cls).setUpClass()</span><br><span class=\"line\">        cls.token = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">tearDownClass</span>(<span class=\"params\">cls</span>):</span><br><span class=\"line\">        <span class=\"comment\"># 在整个测试类运行结束时执行，必须调用super</span></span><br><span class=\"line\">        <span class=\"built_in\">super</span>(UserAPITests, cls).tearDownClass()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_app_user_login_success</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;APP用户登录接口成功情况&quot;&quot;&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员</span></span><br><span class=\"line\">        path = <span class=\"string\">&#x27;/api/api-token-auth/&#x27;</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">&#x27;mobile_phone&#x27;</span>: <span class=\"string\">&#x27;15999999999&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;111111&#x27;</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        <span class=\"comment\"># response.data是字典对象</span></span><br><span class=\"line\">        <span class=\"comment\"># response.content是json字符串对象</span></span><br><span class=\"line\">        self.assertEquals(response.status_code,</span><br><span class=\"line\">                          status.HTTP_200_OK,</span><br><span class=\"line\">                          <span class=\"string\">&#x27;登录接口返回状态码错误: 错误信息: &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(response.content))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;token&#x27;</span>, response.data, <span class=\"string\">&#x27;登录成功后无token返回&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_app_user_login_with_error_pwd</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        path = <span class=\"string\">&#x27;/api/api-token-auth/&#x27;</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">&#x27;mobile_phone&#x27;</span>: <span class=\"string\">&#x27;15999999999&#x27;</span>, <span class=\"string\">&#x27;password&#x27;</span>: <span class=\"string\">&#x27;123456&#x27;</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">        self.assertJSONEqual(<span class=\"string\">&#x27;&#123;&quot;errors&quot;:[&quot;用户名或密码错误。&quot;]&#125;&#x27;</span>, response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_app_user_profile_success</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;成功获取app用户个人信息接口&quot;&quot;&quot;</span></span><br><span class=\"line\">        path = <span class=\"string\">&#x27;/api/account/user/profile/&#x27;</span></span><br><span class=\"line\">        headers = self.get_headers(user=self.user)</span><br><span class=\"line\">        response = self.client.get(path, **headers)</span><br><span class=\"line\">        <span class=\"comment\"># 校验一些关键数据即可</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果是创建新数据，不仅要校验返回的状态码和数据，</span></span><br><span class=\"line\">        <span class=\"comment\"># 还需要到使用Django ORM去数据库查询数据是否创建成功</span></span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_200_OK)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">6</span>, <span class=\"built_in\">len</span>(response.data))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;url&#x27;</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;mobile_phone&#x27;</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;avatar&#x27;</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;company_name&#x27;</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;username&#x27;</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">&#x27;is_inviter&#x27;</span>, response.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">test_get_app_user_profile_without_token</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"string\">&quot;&quot;&quot;不传token请求获取用户信息接口&quot;&quot;&quot;</span></span><br><span class=\"line\">        path = <span class=\"string\">&#x27;/api/account/user/profile/&#x27;</span></span><br><span class=\"line\">        response = self.client.get(path)</span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)</span><br></pre></td></tr></table></figure>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自unittest.case.TestCase</span></span><br><span class=\"line\">assertFalse(expr, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertTrue(expr, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertEqual(first, second, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertNotEqual(first, second, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertAlmostEqual(first, second, places=<span class=\"literal\">None</span>, msg=<span class=\"literal\">None</span>, delta=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertNotAlmostEqual(first, second, places=<span class=\"literal\">None</span>, msg=<span class=\"literal\">None</span>, delta=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertSequenceEqual(seq1, seq2, msg=<span class=\"literal\">None</span>, seq_type=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertListEqual(list1, list2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertTupleEqual(tuple1, tuple2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertSetEqual(set1, set2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertIn(member, container, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertNotIn(member, container, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertIs(expr1, expr2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertIsNot(expr1, expr2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertDictEqual(d1, d2, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertDictContainsSubset(expected, actual, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertItemsEqual(expected_seq, actual_seq, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertMultiLineEqual(first, second, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertLess(a, b, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertLessEqual(a, b, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertGreater(a, b, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertGreaterEqual(a, b, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertIsNone(obj, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertIsInstance(obj, cls, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertNotIsInstance(obj, cls, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertRaisesRegexp(expected_exception, expected_regexp,</span><br><span class=\"line\">                           callable_obj=<span class=\"literal\">None</span>, *args, **kwargs)</span><br><span class=\"line\">assertRegexpMatches(text, expected_regexp, msg=<span class=\"literal\">None</span>)</span><br><span class=\"line\">assertNotRegexpMatches(text, unexpected_regexp, msg=<span class=\"literal\">None</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试接口地址\"><a href=\"#测试接口地址\" class=\"headerlink\" title=\"测试接口地址\"></a>测试接口地址</h2><p>测试接口地址建议使用硬编码，不要使用<code>reverse</code>反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。</p>\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><p>有如下两种方法准备测试数据</p>\n<ol>\n<li>简单的数据可以在<code>setUp()</code>里来创建；</li>\n<li>复杂数据可以使用fixtures来写，并在赋值给测试类的<code>fixtures</code>属性；<br>fixtures数据示例<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">[</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;model&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myapp.person&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;pk&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">1</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;first_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;John&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;last_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Lennon&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;model&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;myapp.person&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;pk&quot;</span><span class=\"punctuation\">:</span> <span class=\"number\">2</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;fields&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;first_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;Paul&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;last_name&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;McCartney&quot;</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">]</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试覆盖率（coverage）\"><a href=\"#测试覆盖率（coverage）\" class=\"headerlink\" title=\"测试覆盖率（coverage）\"></a>测试覆盖率（coverage）</h2><p>在<code>Pycharm</code>里可以通用右键项目，选择<code>Run &#39;Test:&#39; with Coverage</code>来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。</p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"django","path":"api/tags/django.json"},{"name":"restful-api","path":"api/tags/restful-api.json"},{"name":"接口","path":"api/tags/接口.json"},{"name":"单元测试","path":"api/tags/单元测试.json"},{"name":"测试","path":"api/tags/测试.json"}]}]}