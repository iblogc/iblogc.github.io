{"name":"UUID","postlist":[{"title":"python中的UUID","slug":"python中的UUID","date":"2015-06-02T15:32:59.000Z","updated":"2020-01-17T07:54:27.888Z","comments":true,"path":"api/articles/python中的UUID.json","excerpt":"简介（维基百科）通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[3]","cover":null,"content":"<h2 id=\"简介（维基百科）\"><a href=\"#简介（维基百科）\" class=\"headerlink\" title=\"简介（维基百科）\"></a>简介（维基百科）</h2><blockquote>\n<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" title=\"通用唯一识别码\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义 :\"></a>定义 :</h2><p>UUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">随机UUID的重复机率</a>）。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>\n<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</li>\n<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。</li>\n<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>\n<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</li>\n</ol>\n<h2 id=\"在python中在生成UUID\"><a href=\"#在python中在生成UUID\" class=\"headerlink\" title=\"在python中在生成UUID\"></a>在<code>python</code>中在生成UUID</h2><p><code>import uuid</code>后即可使用<br>示例代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\">uuid.uuid1()</span><br><span class=\"line\">uuid.uuid3(namespace, name)</span><br><span class=\"line\">uuid.uuid4()</span><br><span class=\"line\">uuid.uuid5(namespace, name)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81</a><br><a href=\"https://docs.python.org/2/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/uuid.html</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"UUID","path":"api/tags/UUID.json"}]}]}