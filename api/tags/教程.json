{"name":"教程","postlist":[{"title":"curl常用命令","slug":"curl常用命令","date":"2015-12-17T13:29:29.000Z","updated":"2020-08-15T03:05:04.986Z","comments":true,"path":"api/articles/curl常用命令.json","excerpt":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br>","cover":null,"content":"<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br><a id=\"more\"></a></p>\n<h3 id=\"访问url并输出结果\"><a href=\"#访问url并输出结果\" class=\"headerlink\" title=\"访问url并输出结果\"></a>访问url并输出结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GET</span><br><span class=\"line\">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\"># POST</span><br><span class=\"line\">curl -u username -d &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span><br><span class=\"line\">curl -d @filename https://github.api.com/authorizations</span><br></pre></td></tr></table></figure></p>\n<p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -d &quot;value%201&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --data-urlencode &quot;value 1&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定请求方式\"><a href=\"#指定请求方式\" class=\"headerlink\" title=\"指定请求方式\"></a>指定请求方式</h3><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I -X DELETE https://api.github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头信息\"><a href=\"#设置请求头信息\" class=\"headerlink\" title=\"设置请求头信息\"></a>设置请求头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Accept-Language: zh&apos; http://cnn.com</span><br></pre></td></tr></table></figure>\n<p><code>-H</code>或被多次指定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Host: 157.166.226.25&apos;-H &apos;Accept-Language: zh&apos;-H &apos;Cookie: ID=1234&apos; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<p>对于”User-Agent”, “Cookie”, “Host”这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：<br>-A (or –user-agent): 设置 “User-Agent” 字段.<br>-b (or –cookie): 设置 “Cookie” 字段.<br>-e (or –referer): 设置 “Referer” 字段.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;User-Agent: my browser&quot; http://cnn.com</span><br><span class=\"line\">curl -A &quot;my browser&quot; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看响应头信息\"><a href=\"#查看响应头信息\" class=\"headerlink\" title=\"查看响应头信息\"></a>查看响应头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问url并奖结果保存到本地文件中\"><a href=\"#访问url并奖结果保存到本地文件中\" class=\"headerlink\" title=\"访问url并奖结果保存到本地文件中\"></a>访问url并奖结果保存到本地文件中</h3><p><code>-o</code>: 将文件保存为命令行中指定的文件名到本地<br><code>-O</code>: 使用url中默认的文件名保存文件到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o index.html http://www.example.com</span><br><span class=\"line\"># 或</span><br><span class=\"line\">curl  http://www.baidu.com &gt; index.html</span><br><span class=\"line\"># 在windows上没成功</span><br><span class=\"line\">curl -O http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"忽略证书错误\"><a href=\"#忽略证书错误\" class=\"headerlink\" title=\"忽略证书错误\"></a>忽略证书错误</h3><p>工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获取重定向后的页面\"><a href=\"#获取重定向后的页面\" class=\"headerlink\" title=\"获取重定向后的页面\"></a>获取重定向后的页面</h3><p>如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用<code>-L</code>可进行强制重定向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发送压缩的请求\"><a href=\"#发送压缩的请求\" class=\"headerlink\" title=\"发送压缩的请求\"></a>发送压缩的请求</h3><p>cURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。</p>\n<p>自己写一个 Accept-Encoding 字段在头信息中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/</span><br></pre></td></tr></table></figure></p>\n<p>如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gunzip解压</span><br><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/ | gunzip</span><br></pre></td></tr></table></figure></p>\n<p>使用gunzip解压之后，信息又被还原了。</p>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 未下载完成即中断该进程</span><br><span class=\"line\">curl -o a.zip http://www.example.com/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 后面可以通过-C来继续下载</span><br><span class=\"line\">curl -C -o a.html http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载限速\"><a href=\"#下载限速\" class=\"headerlink\" title=\"下载限速\"></a>下载限速</h3><p>使用-limit-rate进行限速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 限速为100k/s</span><br><span class=\"line\">curl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"根据文件修改时间来判断是否进行下载\"><a href=\"#根据文件修改时间来判断是否进行下载\" class=\"headerlink\" title=\"根据文件修改时间来判断是否进行下载\"></a>根据文件修改时间来判断是否进行下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 若文件的修改时间在2011/12/11之后，则下载</span><br><span class=\"line\">curl -z 21-Dec-11 http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>在访问需要授权的页面时，可通过<code>-u</code>来提供用户名和密码进行授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u username:password http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ftp操作\"><a href=\"#ftp操作\" class=\"headerlink\" title=\"ftp操作\"></a>ftp操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定目录下的所有文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O</span><br><span class=\"line\">ftp://ftp_server/public_hmtl/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传多个文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T &quot;&#123;myfile1.txt, myfile2.txt&#125;&quot; ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 从标准输入获取内容保存到服务器的指定文件中</span><br><span class=\"line\">curl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x proxyserver.com:1080 http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存与使用网站的cookie信息\"><a href=\"#保存与使用网站的cookie信息\" class=\"headerlink\" title=\"保存与使用网站的cookie信息\"></a>保存与使用网站的cookie信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将网站的cookies信息保存到example_cookies文件中</span><br><span class=\"line\">curl -D example_cookies http://www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用cookies信息访问url</span><br><span class=\"line\">curl -b example_cookies http://www.example.com/user/</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"curl","path":"api/tags/curl.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"Git常用命令别名设置","slug":"git-alias","date":"2019-06-28T09:17:06.000Z","updated":"2020-10-29T17:16:23.132Z","comments":true,"path":"api/articles/git-alias.json","excerpt":"如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置","cover":"/media/git-lg效果图.png","content":"<p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>\n<a id=\"more\"></a>\n<p>Git别名设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\"><span class=\"comment\"># 可用git pull -r代替</span></span><br><span class=\"line\">git config --global alias.fr <span class=\"string\">'!f() &#123; git fetch &amp;&amp; git rebase $@; &#125;; f'</span>; </span><br><span class=\"line\"><span class=\"comment\"># git提交日志</span></span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"</span></span><br></pre></td></tr></table></figure>\n<p>删除别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> alias.xxx</span><br></pre></td></tr></table></figure>\n<p>以下两个命令设置git alias和zsh alias都失败，暂没找到方法可以设置别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看仓库提交者排名前 5</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计每个人增删行数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --format=<span class=\"string\">'%aN'</span> | sort -u | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> name; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -en <span class=\"string\">\"<span class=\"variable\">$name</span>\\t\"</span>; git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"<span class=\"variable\">$name</span>\"</span> --pretty=tformat: --numstat | awk <span class=\"string\">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc &#125;'</span> -; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>git lg命令效果图<br><img alt=\"git lg命令效果图\" data-src=\"/media/git-lg效果图.png\"></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Git","path":"api/tags/Git.json"}]},{"title":"pip常用命令","slug":"pip常用命令","date":"2015-01-01T15:38:56.000Z","updated":"2020-12-16T13:14:20.701Z","comments":true,"path":"api/articles/pip常用命令.json","excerpt":"列出已安装的包pip freeze or pip list","cover":null,"content":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>\n<a id=\"more\"></a>\n<h3 id=\"导出requirements-txt\"><a href=\"#导出requirements-txt\" class=\"headerlink\" title=\"导出requirements.txt\"></a>导出requirements.txt</h3><p><code>pip freeze &gt; &lt;目录&gt;/requirements.txt</code></p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p><code>pip install &lt;包名&gt;</code> 或 <code>pip install -r requirements.txt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装1.9版本的django</span><br><span class=\"line\">pip install django==1.9</span><br><span class=\"line\"># 安装版本号大于1.9的django，注意有引号</span><br><span class=\"line\">pip install &quot;django&gt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;&lt;1.9&quot;</span><br></pre></td></tr></table></figure>\n<p>requirements.txt内容格式为：</p>\n<pre><code>APScheduler==2.1.2\nDjango==1.5.4\nMySQL-Connector-Python==2.0.1\nMySQL-python==1.2.3\nPIL==1.1.7\nSouth==1.0.2\ndjango-grappelli==2.6.3\ndjango-pagination==1.0.7\n</code></pre><h3 id=\"安装本地安装包\"><a href=\"#安装本地安装包\" class=\"headerlink\" title=\"安装本地安装包\"></a>安装本地安装包</h3><p><code>pip install &lt;目录&gt;/&lt;文件名&gt;</code> 或 <code>pip install --use-wheel --no-index --find-links=wheelhouse/ &lt;包名&gt;</code></p>\n<p><em>&lt;包名&gt;前有空格</em></p>\n<p>可简写为</p>\n<p><code>pip install --no-index -f=&lt;目录&gt;/ &lt;包名&gt;</code></p>\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><p><code>pip uninstall &lt;包名&gt;</code> 或 <code>pip uninstall -r requirements.txt</code></p>\n<h3 id=\"升级包\"><a href=\"#升级包\" class=\"headerlink\" title=\"升级包\"></a>升级包</h3><p><code>pip install -U &lt;包名&gt;</code></p>\n<h3 id=\"升级pip\"><a href=\"#升级pip\" class=\"headerlink\" title=\"升级pip\"></a>升级pip</h3><p><code>pip install -U pip</code></p>\n<h2 id=\"显示包所在的目录\"><a href=\"#显示包所在的目录\" class=\"headerlink\" title=\"显示包所在的目录\"></a>显示包所在的目录</h2><p><code>pip show -f &lt;包名&gt;</code></p>\n<h2 id=\"搜索包\"><a href=\"#搜索包\" class=\"headerlink\" title=\"搜索包\"></a>搜索包</h2><p><code>pip search &lt;搜索关键字&gt;</code></p>\n<h2 id=\"查询可升级的包\"><a href=\"#查询可升级的包\" class=\"headerlink\" title=\"查询可升级的包\"></a>查询可升级的包</h2><p><code>pip list -o</code></p>\n<h2 id=\"下载包而不安装\"><a href=\"#下载包而不安装\" class=\"headerlink\" title=\"下载包而不安装\"></a>下载包而不安装</h2><p> <code>pip install &lt;包名&gt; -d  &lt;目录&gt;</code> 或 <code>pip install -d &lt;目录&gt; -r requirements.txt</code></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><code>pip wheel &lt;包名&gt;</code></p>\n<h2 id=\"更换国内pypi镜像\"><a href=\"#更换国内pypi镜像\" class=\"headerlink\" title=\"更换国内pypi镜像\"></a>更换国内pypi镜像</h2><h3 id=\"国内pypi镜像\"><a href=\"#国内pypi镜像\" class=\"headerlink\" title=\"国内pypi镜像\"></a>国内pypi镜像</h3><ul>\n<li>阿里云 <a href=\"https://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>豆瓣：<a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a></li>\n<li>中国科学技术大学：<a href=\"https://mirrors.ustc.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.ustc.edu.cn/pypi/web/simple/</a></li>\n<li>清华大学TUNA：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</a></li>\n</ul>\n<h3 id=\"指定单次安装源\"><a href=\"#指定单次安装源\" class=\"headerlink\" title=\"指定单次安装源\"></a>指定单次安装源</h3><p><code>pip install &lt;包名&gt; -i http://pypi.v2ex.com/simple</code></p>\n<h3 id=\"指定全局安装源\"><a href=\"#指定全局安装源\" class=\"headerlink\" title=\"指定全局安装源\"></a>指定全局安装源</h3><p>在unix和macos，配置文件为：$HOME/.pip/pip.conf<br>在windows上，配置文件为：%HOME%\\pip\\pip.ini </p>\n<pre><code>[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple\n</code></pre><hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://pip.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">pip documentation</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"命令","path":"api/tags/命令.json"},{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"pip","path":"api/tags/pip.json"}]},{"title":"使用alembic进行数据库版本管理","slug":"使用alembic进行数据库版本管理","date":"2018-09-13T10:53:14.000Z","updated":"2020-03-04T05:22:29.004Z","comments":true,"path":"api/articles/使用alembic进行数据库版本管理.json","excerpt":"转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改前言随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","cover":null,"content":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"}]},{"title":"内网穿透工具frp客户端自定义子域名访问配置","slug":"内网穿透工具frp客户端自定义子域名访问配置","date":"2017-08-16T08:36:56.000Z","updated":"2019-04-09T03:26:20.218Z","comments":true,"path":"api/articles/内网穿透工具frp客户端自定义子域名访问配置.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>A: 公网电脑<br>B: 内网电脑</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>从<a href=\"[Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases\">releases</a>)下载系统对应的压缩包，Mac可使用<code>darwin amd64</code>的包，在公网电脑和本地电脑各放一份。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>公网电脑上<code>frps.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 用于接收 frpc 连接的端口</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"># 通过此端口访问http服务</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\"># 日志文件输出位置</span><br><span class=\"line\">log_file = ./frps.log</span><br><span class=\"line\"># 日志等级</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\"># 域名</span><br><span class=\"line\">subdomain_host = example.com</span><br><span class=\"line\"># frp管理后台端口</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># frp管理后台用户名</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\"># frp管理后台密码</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></p>\n<p>本地电脑上<code>frpc.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 公网电脑IP</span><br><span class=\"line\">server_addr = 111.111.111.111</span><br><span class=\"line\"># frp连接的端口</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地http服务端口</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 子域名前缀, 子域名前缀里不要使用下划线&quot;_&quot;，不然可能会出现莫名其妙的400错误可以用&quot;-&quot;代替。</span><br><span class=\"line\">subdomain = iblogc</span><br></pre></td></tr></table></figure></p>\n<p>配置域名<code>example.com</code>的A记录的泛解析<br><code>*.example.com</code>指向公网电脑IP<code>111.111.111.111</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>在内网电脑B上<code>8080</code>端口运行<code>http</code>服务</li>\n<li><p>在公网电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2><p>在任何一台能联网的机器上访问 <code>http://iblogc.example.com:8080</code> 即可访问内网电脑B上的http服务。<br>在任务一台能联网的机器上访问<code>111.111.111.111:7500</code>即可访问frp的管理后台。</p>\n<h2 id=\"frps服务端与nginx可共用80端口\"><a href=\"#frps服务端与nginx可共用80端口\" class=\"headerlink\" title=\"frps服务端与nginx可共用80端口\"></a>frps服务端与nginx可共用80端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen 80;</span><br><span class=\"line\">       server_name *.example.com;</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">           proxy_redirect http://$host/ http://$http_host/;</span><br><span class=\"line\">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">           proxy_set_header Host $host;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"内网穿透","path":"api/tags/内网穿透.json"}]},{"title":"Git命令使用指南","slug":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","updated":"2020-01-17T07:55:59.340Z","comments":true,"path":"api/articles/Git命令使用指南.json","excerpt":" [Figure] ","cover":"/media/Git工作流图示.jpg","content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img alt=\"工作流图示\" data-src=\"/media/git-reset_drbfhd.png\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name &#39;Your Name&#39;</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage &quot;reset HEAD&quot;</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img alt=\"status示例图\" data-src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\" target=\"_blank\" rel=\"noopener\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git - 简易指南</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Git","path":"api/tags/Git.json"}]}]}