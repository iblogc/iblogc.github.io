{"name":"程序猿","postlist":[{"title":"Apache Rewrite","slug":"Apache-Rewrite","date":"2015-05-18T13:46:34.000Z","updated":"2020-08-15T03:08:22.873Z","comments":true,"path":"api/articles/Apache-Rewrite.json","excerpt":"本文是对今天使用Apache的Rewrite技术做一个简单的记录。Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。<br>","cover":null,"content":"<p>本文是对今天使用Apache的Rewrite技术做一个简单的记录。</p>\n<blockquote>\n<p>Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。</p>\n</blockquote>\n<p>这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。<br><a id=\"more\"></a></p>\n<h2 id=\"更新历史\"><a href=\"#更新历史\" class=\"headerlink\" title=\"更新历史\"></a>更新历史</h2><p>2015年05月18日 - 初稿</p>\n<h2 id=\"开启模块\"><a href=\"#开启模块\" class=\"headerlink\" title=\"开启模块\"></a>开启模块</h2><p>在<code>http.conf</code>中找到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p>\n<p>取消注释</p>\n<h2 id=\"定义规则\"><a href=\"#定义规则\" class=\"headerlink\" title=\"定义规则\"></a>定义规则</h2><p>在<code>http.conf</code>中加入下列代码（如果启用了<code>httpd-vhosts.conf</code>，请在<code>httpd-vhosts.conf</code>里做配置）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;IfModule rewrite_module&gt;</span><br><span class=\"line\">    RewriteEngine on</span><br><span class=\"line\">    RewriteCond %&#123;HTTP_HOST&#125; ^www.a.com [NC]</span><br><span class=\"line\">    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]</span><br><span class=\"line\">&lt;IfModule&gt;</span><br></pre></td></tr></table></figure></p>\n<p><code>RewriteCond</code>义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的<br><code>NC</code>：不区分大小写<br><code>RewriteRule</code>满足<code>^/(.*)</code>此规则的所有URL都重定向到<code>http://www.b.com/$1</code>，<code>$1</code>使用前面<code>(.*)</code>匹配后的字符填充</p>\n<p>所以前面的规则就是的最终效果是访问<code>www.a.com</code>的所以页面都会被重定向到<code>www.b.com</code>相应路径下的页面</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://blog.chinaunix.net/uid-20639775-id-154471.html\" target=\"_blank\" rel=\"noopener\">http://blog.chinaunix.net/uid-20639775-id-154471.html</a><br><a href=\"http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html</a><br><a href=\"http://httpd.apache.org/docs/current/mod/mod_rewrite.html\" target=\"_blank\" rel=\"noopener\">http://httpd.apache.org/docs/current/mod/mod_rewrite.html</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Apache","path":"api/tags/Apache.json"},{"name":"重定向","path":"api/tags/重定向.json"}]},{"title":"SpringWebFlux使用笔记","slug":"SpringWebFlux","date":"2019-02-28T05:32:59.000Z","updated":"2020-08-15T03:07:21.989Z","comments":true,"path":"api/articles/SpringWebFlux.json","excerpt":"记录使用SpringWebFlux的一些笔记。","cover":null,"content":"<p>记录使用SpringWebFlux的一些笔记。</p>\n<a id=\"more\"></a>\n<h2 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"groupBy\"></a>groupBy</h2><p>对flux进行分组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channelOnlineCityBoFlux.sort((s1, s2) -&gt; Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))</span><br><span class=\"line\">  .groupBy(city -&gt; city.getInitial().substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">  .sort((s1, s2) -&gt; Objects.requireNonNull(s1.key()).compareTo(s2.key()))</span><br><span class=\"line\">  .flatMap(gf -&gt; gf.collectList()</span><br><span class=\"line\">          .map(cityList -&gt; &#123;</span><br><span class=\"line\">              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = <span class=\"keyword\">new</span> ChannelOnlineCityGroupByPinYinBo();</span><br><span class=\"line\">              cityGroupByPinYinBo.setLetter(gf.key());</span><br><span class=\"line\">              cityGroupByPinYinBo.setCities(cityList);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> cityGroupByPinYinBo;</span><br><span class=\"line\">          &#125;));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"handle\"><a href=\"#handle\" class=\"headerlink\" title=\"handle\"></a>handle</h2><p>handle作用相当于是filter和map的组合。</p>\n<iframe src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\" style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\" sandbox=\"allow-scripts allow-same-origin\"><br></iframe>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Reactive","path":"api/tags/Reactive.json"}]},{"title":"WebFlux中mongo操作-Aggregation","slug":"WebFlux中mongo操作-Aggregation","date":"2020-01-17T07:12:53.000Z","updated":"2020-01-17T08:01:32.735Z","comments":true,"path":"api/articles/WebFlux中mongo操作-Aggregation.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<p>switch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(</span><br><span class=\"line\">                BooleanOperators.And.and(</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus1\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>),</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">\"channelBillStatus2\"</span>).equalToValue(<span class=\"string\">\"已结算\"</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">        ).then(<span class=\"string\">\"已结清\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        Aggregation aggregation = Aggregation.newAggregation(</span><br><span class=\"line\">                Aggregation.project(<span class=\"string\">\"channelBillStatus1\"</span>, <span class=\"string\">\"channelBillStatus2\"</span>)</span><br><span class=\"line\">                        .and(ConditionalOperators.switchCases(cond).defaultTo(<span class=\"string\">\"未结清\"</span>)).as(<span class=\"string\">\"channelBillStatus\"</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>lookup及id类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把_id转成String并赋值给id</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>)</span><br><span class=\"line\">          \t\t\t<span class=\"comment\">//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()</span></span><br><span class=\"line\">                .and(ConvertOperators.ToString.toString(<span class=\"string\">\"$_id\"</span>)).as(<span class=\"string\">\"id\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组</span></span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">\"chn_section\"</span>, <span class=\"string\">\"id\"</span>, <span class=\"string\">\"sectionId\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true</span></span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">\"chnSection\"</span>, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只输出这些字段</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">\"internalId\"</span>, <span class=\"string\">\"name\"</span>, <span class=\"string\">\"isAvailable\"</span>, <span class=\"string\">\"isCanAdd\"</span>, <span class=\"string\">\"fitGender\"</span>, <span class=\"string\">\"fitAge\"</span>, <span class=\"string\">\"fitMaritalStatus\"</span>, <span class=\"string\">\"price\"</span>, <span class=\"string\">\"sortNo\"</span>, <span class=\"string\">\"createdAt\"</span>, <span class=\"string\">\"chnSections\"</span>);</span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>如果lookup时，如果要对匹配的数据进行筛选（参考链接：<a href=\"https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原始mongo</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   $lookup:</span></span><br><span class=\"line\"><span class=\"comment\">//     &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       from: &lt;collection to join&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//       let: &#123; &lt;var_1&gt;: &lt;expression&gt;, …, &lt;var_n&gt;: &lt;expression&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       pipeline: [ &lt;pipeline to execute on the collection to join&gt; ],</span></span><br><span class=\"line\"><span class=\"comment\">//       as: &lt;output array field&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//自定义一个AggregationOperation类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CustomProjectAggregationOperation</span> <span class=\"keyword\">implements</span> <span class=\"title\">AggregationOperation</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String jsonOperation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">CustomProjectAggregationOperation</span><span class=\"params\">(String jsonOperation)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.jsonOperation = jsonOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Document <span class=\"title\">toDocument</span><span class=\"params\">(AggregationOperationContext aggregationOperationContext)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title\">getJsonOperation</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"&#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    $lookup: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        from: 'chn_set_meal',\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        let: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            id: &#123; $toString: '$_id' &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        pipeline: [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $match: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    $expr: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        $and: \"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        [\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$setMealId', '$$id']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                                $eq: ['$cooperationState', '合作中']\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                        ]\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                $project: &#123;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelId: 1,\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    channelName: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                    cooperationState: 1\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"                &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"            &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        ],\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"        as: 'channels'\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"    &#125;\"</span> +</span><br><span class=\"line\">                <span class=\"string\">\"&#125;&#125;\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">AggregationOperation aggregationOperation = <span class=\"keyword\">new</span> CustomProjectAggregationOperation(getJsonOperation());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);</span><br></pre></td></tr></table></figure>\n<p>group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//背景：查询交易表，订单和交易一对多</span></span><br><span class=\"line\">Aggregation.group(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//单一组的金额汇总</span></span><br><span class=\"line\">  .sum(<span class=\"string\">\"amount\"</span>).as(<span class=\"string\">\"totalAmount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组的最后一个订单号</span></span><br><span class=\"line\">  .last(<span class=\"string\">\"orderNo\"</span>).as(<span class=\"string\">\"orderNo\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组里数据条数</span></span><br><span class=\"line\">  .count().as(<span class=\"string\">\"tradeCount\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里每条数据的状态放到一个statuses数组里</span></span><br><span class=\"line\">  .addToSet(<span class=\"string\">\"status\"</span>).as(<span class=\"string\">\"statuses\"</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里</span></span><br><span class=\"line\">  .push(<span class=\"keyword\">new</span> BasicDBObject(<span class=\"string\">\"tradeContent\"</span>, <span class=\"string\">\"$tradeContent\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"tradeNo\"</span>, <span class=\"string\">\"$tradeNo\"</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">\"amount\"</span>, <span class=\"string\">\"$amount\"</span>)</span><br><span class=\"line\">       ).as(<span class=\"string\">\"billItems\"</span>);</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Reactive","path":"api/tags/Reactive.json"},{"name":"事务","path":"api/tags/事务.json"},{"name":"mongo","path":"api/tags/mongo.json"},{"name":"数据库","path":"api/tags/数据库.json"},{"name":"Aggregation","path":"api/tags/Aggregation.json"}]},{"title":"WebFlux中mongo操作-Transaction","slug":"WebFlux中mongo操作-Transaction","date":"2020-01-17T07:16:46.000Z","updated":"2020-01-17T08:01:36.430Z","comments":true,"path":"api/articles/WebFlux中mongo操作-Transaction.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; action.insert(aDocument)</span><br><span class=\"line\">             .flatMap(a -&gt; &#123;</span><br><span class=\"line\">               cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                 .map(d -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                     <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                 &#125;);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面是个mono，则用next取出第一个元素就是里面的mono</span></span><br><span class=\"line\">    .next()</span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>flux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping</span>(<span class=\"string\">\"/test\"</span>)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono <span class=\"title\">testA</span><span class=\"params\">(@RequestParam <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> ADocument(<span class=\"string\">\"张三\"</span>), <span class=\"keyword\">new</span> CDocument(<span class=\"string\">\"李四\"</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"keyword\">boolean</span> exception)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; Flux.fromIterable(<span class=\"string\">\"1\"</span>, <span class=\"string\">\"2\"</span>, <span class=\"string\">\"3\"</span>)</span><br><span class=\"line\">             <span class=\"comment\">//如果是个flux此处要用concatMap保持有序不能用flatMap</span></span><br><span class=\"line\">             .concatMap(i -&gt; action.insert(aDocument)</span><br><span class=\"line\">                        .flatMap(a -&gt; &#123;</span><br><span class=\"line\">                          cDocument.setName(a.getName() + <span class=\"string\">\"copy\"</span>);</span><br><span class=\"line\">                          <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                            .map(d -&gt; &#123;</span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">\"模拟异常的出现\"</span>));</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                              <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;));</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面返回的就是一个flux则不需要使用next</span></span><br><span class=\"line\">    <span class=\"comment\">//.next()</span></span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Java","path":"api/tags/Java.json"},{"name":"Reactive","path":"api/tags/Reactive.json"},{"name":"事务","path":"api/tags/事务.json"},{"name":"mongo","path":"api/tags/mongo.json"},{"name":"数据库","path":"api/tags/数据库.json"},{"name":"Flux","path":"api/tags/Flux.json"}]},{"title":"curl常用命令","slug":"curl常用命令","date":"2015-12-17T13:29:29.000Z","updated":"2020-08-15T03:05:04.986Z","comments":true,"path":"api/articles/curl常用命令.json","excerpt":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br>","cover":null,"content":"<p>curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。<br><a id=\"more\"></a></p>\n<h3 id=\"访问url并输出结果\"><a href=\"#访问url并输出结果\" class=\"headerlink\" title=\"访问url并输出结果\"></a>访问url并输出结果</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h3><p>默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据<br>可以通过 –data/-d 方式指定使用POST方式传递数据<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GET</span><br><span class=\"line\">curl -u username https://api.github.com/user?access_token=XXXXXXXXXX</span><br><span class=\"line\"></span><br><span class=\"line\"># POST</span><br><span class=\"line\">curl -u username -d &quot;param1=value1&amp;param2=value&quot; https://api.github.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端</span><br><span class=\"line\">curl -d @filename https://github.api.com/authorizations</span><br></pre></td></tr></table></figure></p>\n<p>注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -d &quot;value%201&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<p>在新版本的CURL中，提供了新的选项 –data-urlencode，通过该选项提供的参数会自动转义特殊字符。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --data-urlencode &quot;value 1&quot; http://hostname.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"指定请求方式\"><a href=\"#指定请求方式\" class=\"headerlink\" title=\"指定请求方式\"></a>指定请求方式</h3><p>除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I -X DELETE https://api.github.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"设置请求头信息\"><a href=\"#设置请求头信息\" class=\"headerlink\" title=\"设置请求头信息\"></a>设置请求头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Accept-Language: zh&apos; http://cnn.com</span><br></pre></td></tr></table></figure>\n<p><code>-H</code>或被多次指定<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &apos;Host: 157.166.226.25&apos;-H &apos;Accept-Language: zh&apos;-H &apos;Cookie: ID=1234&apos; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<p>对于”User-Agent”, “Cookie”, “Host”这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：<br>-A (or –user-agent): 设置 “User-Agent” 字段.<br>-b (or –cookie): 设置 “Cookie” 字段.<br>-e (or –referer): 设置 “Referer” 字段.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;User-Agent: my browser&quot; http://cnn.com</span><br><span class=\"line\">curl -A &quot;my browser&quot; http://cnn.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看响应头信息\"><a href=\"#查看响应头信息\" class=\"headerlink\" title=\"查看响应头信息\"></a>查看响应头信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -I http://www.baidu.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"提交表单\"><a href=\"#提交表单\" class=\"headerlink\" title=\"提交表单\"></a>提交表单</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --form &quot;fileupload=@filename.txt&quot; http://hostname/resource</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问url并奖结果保存到本地文件中\"><a href=\"#访问url并奖结果保存到本地文件中\" class=\"headerlink\" title=\"访问url并奖结果保存到本地文件中\"></a>访问url并奖结果保存到本地文件中</h3><p><code>-o</code>: 将文件保存为命令行中指定的文件名到本地<br><code>-O</code>: 使用url中默认的文件名保存文件到本地<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -o index.html http://www.example.com</span><br><span class=\"line\"># 或</span><br><span class=\"line\">curl  http://www.baidu.com &gt; index.html</span><br><span class=\"line\"># 在windows上没成功</span><br><span class=\"line\">curl -O http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"忽略证书错误\"><a href=\"#忽略证书错误\" class=\"headerlink\" title=\"忽略证书错误\"></a>忽略证书错误</h3><p>工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -k https://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"获取重定向后的页面\"><a href=\"#获取重定向后的页面\" class=\"headerlink\" title=\"获取重定向后的页面\"></a>获取重定向后的页面</h3><p>如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用<code>-L</code>可进行强制重定向<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"发送压缩的请求\"><a href=\"#发送压缩的请求\" class=\"headerlink\" title=\"发送压缩的请求\"></a>发送压缩的请求</h3><p>cURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。</p>\n<p>自己写一个 Accept-Encoding 字段在头信息中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/</span><br></pre></td></tr></table></figure></p>\n<p>如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 使用gunzip解压</span><br><span class=\"line\">curl -H &quot;Accept-Encoding: gzip&quot; http://www.kuqin.com/ | gunzip</span><br></pre></td></tr></table></figure></p>\n<p>使用gunzip解压之后，信息又被还原了。</p>\n<h3 id=\"断点续传\"><a href=\"#断点续传\" class=\"headerlink\" title=\"断点续传\"></a>断点续传</h3><p>通过使用-C选项可对大文件使用断点续传功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 未下载完成即中断该进程</span><br><span class=\"line\">curl -o a.zip http://www.example.com/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 后面可以通过-C来继续下载</span><br><span class=\"line\">curl -C -o a.html http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"下载限速\"><a href=\"#下载限速\" class=\"headerlink\" title=\"下载限速\"></a>下载限速</h3><p>使用-limit-rate进行限速<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 限速为100k/s</span><br><span class=\"line\">curl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"根据文件修改时间来判断是否进行下载\"><a href=\"#根据文件修改时间来判断是否进行下载\" class=\"headerlink\" title=\"根据文件修改时间来判断是否进行下载\"></a>根据文件修改时间来判断是否进行下载</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 若文件的修改时间在2011/12/11之后，则下载</span><br><span class=\"line\">curl -z 21-Dec-11 http://www.example.com/bigfile.zip</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><p>在访问需要授权的页面时，可通过<code>-u</code>来提供用户名和密码进行授权<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -u username:password http://www.example.com</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"ftp操作\"><a href=\"#ftp操作\" class=\"headerlink\" title=\"ftp操作\"></a>ftp操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出指定目录下的所有文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -O</span><br><span class=\"line\">ftp://ftp_server/public_hmtl/bigfile.zip</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 上传多个文件</span><br><span class=\"line\">curl -u ftpuser:ftppw -T &quot;&#123;myfile1.txt, myfile2.txt&#125;&quot; ftp://ftp_server/public_html/</span><br><span class=\"line\"></span><br><span class=\"line\"># 从标准输入获取内容保存到服务器的指定文件中</span><br><span class=\"line\">curl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置代理\"><a href=\"#设置代理\" class=\"headerlink\" title=\"设置代理\"></a>设置代理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -x proxyserver.com:1080 http://www.example.com</span><br></pre></td></tr></table></figure>\n<h3 id=\"保存与使用网站的cookie信息\"><a href=\"#保存与使用网站的cookie信息\" class=\"headerlink\" title=\"保存与使用网站的cookie信息\"></a>保存与使用网站的cookie信息</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 将网站的cookies信息保存到example_cookies文件中</span><br><span class=\"line\">curl -D example_cookies http://www.example.com</span><br><span class=\"line\"></span><br><span class=\"line\"># 使用cookies信息访问url</span><br><span class=\"line\">curl -b example_cookies http://www.example.com/user/</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"curl","path":"api/tags/curl.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"Django REST framework之版本号version","slug":"django-rest-framework之版本号version","date":"2016-01-28T15:29:58.000Z","updated":"2020-08-15T03:05:41.339Z","comments":true,"path":"api/articles/django-rest-framework之版本号version.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>drf支持以下形式传输版本号</p>\n<ul>\n<li><p>header</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json; version=1.0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>URL Path </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/bookings/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(</span><br><span class=\"line\">        r&apos;^(?P&lt;version&gt;(v1|v2))/bookings/$&apos;,</span><br><span class=\"line\">        bookings_list,</span><br><span class=\"line\">        name=&apos;bookings-list&apos;</span><br><span class=\"line\">    ),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Namespace</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /v1/something/ HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^v1/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v1&apos;)),</span><br><span class=\"line\">    url(r&apos;^v2/bookings/&apos;, include(&apos;bookings.urls&apos;, namespace=&apos;v2&apos;))</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Host Name</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /bookings/ HTTP/1.1</span><br><span class=\"line\">Host: v1.example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Query Parameter</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET /something/?version=0.1 HTTP/1.1</span><br><span class=\"line\">Host: example.com</span><br><span class=\"line\">Accept: application/json</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>drf默认是关闭版本控制功能，如需要开启，可在<code>settings.py</code>里添加对应的设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.AcceptHeaderVersioning'</span>,</span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',</span></span><br><span class=\"line\">    <span class=\"comment\"># 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',</span></span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>当然，你也可以为每个视图单独添加，不过不建议这么做<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ProfileList</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    versioning_class = versioning.QueryParameterVersioning</span><br></pre></td></tr></table></figure></p>\n<p>开启版本控制之后，就可以从<code>request</code>取得版本号<code>request.version</code>（当然你<code>settings.py</code>里配置的是什么方式，就用什么方式传版本号，这样就才可以从<code>request</code>里获取到版本号）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_serializer_class</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> self.request.version == <span class=\"string\">'v1'</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> AccountSerializerVersion1</span><br><span class=\"line\">    <span class=\"keyword\">return</span> AccountSerializer</span><br></pre></td></tr></table></figure></p>\n<p>启动版本控制后，url逆向解析方法需要传入<code>request</code>参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.reverse <span class=\"keyword\">import</span> reverse</span><br><span class=\"line\"> </span><br><span class=\"line\">reverse(<span class=\"string\">'bookings-list'</span>, request=request)</span><br></pre></td></tr></table></figure></p>\n<p>如果是使用Namespace时的版本控制，因为配置了<code>DEFAULT_VERSIONING_CLASS</code>，所以设置view_name时不需要添加<code>v1:</code>前缀，见django rest framework入门笔记.md</p>\n<p>最后在设置里添加以下全局设置来控制能访问的版本<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">'DEFAULT_VERSION'</span>: <span class=\"keyword\">None</span>, <span class=\"comment\">#默认版本，request里没有版本信息时，使用的版本，默认为None</span></span><br><span class=\"line\"><span class=\"string\">'ALLOWED_VERSIONS'</span>: [<span class=\"keyword\">None</span>, <span class=\"string\">'v1'</span>, <span class=\"string\">'v2'</span>], <span class=\"comment\">#允许访问的版本，如果访问的版本不在列表中，则会抛出异常</span></span><br></pre></td></tr></table></figure></p>\n<p>也可以为每个视图单独设置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.versioning <span class=\"keyword\">import</span> URLPathVersioning</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleVersioning</span><span class=\"params\">(URLPathVersioning)</span>:</span></span><br><span class=\"line\">    default_version = ...</span><br><span class=\"line\">    allowed_versions = ...</span><br><span class=\"line\">    version_param = ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIVIew)</span>:</span></span><br><span class=\"line\">    versioning_class = ExampleVersioning</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"version","path":"api/tags/version.json"}]},{"title":"Django REST framework单元测试「Unit Testing」","slug":"django-rest-framework接口单元测试","date":"2017-09-05T15:23:41.000Z","updated":"2020-01-17T07:57:22.316Z","comments":true,"path":"api/articles/django-rest-framework接口单元测试.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a><code>settings</code></h2><p><code>Django</code>运行单元测试时，会以<code>settings</code>里的数据库配置里的<code>NAME</code>新建一个以<code>test_</code>开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的<code>migrations</code>文件来创建数据表并进行迁移，但如果<code>migrations</code>文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前<code>Model</code>结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用<code>SQLite</code>数据库引擎，当使用<code>SQLite</code>数据库引擎时，测试将默认使用内存数据库。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TESTING = len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> TESTING:</span><br><span class=\"line\">    <span class=\"comment\"># 当使用SQLite数据库引擎时，测试将默认使用内存数据库</span></span><br><span class=\"line\">    DATABASES[<span class=\"string\">'default'</span>] = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 单元测试时, 跳过migrate, 极 的提升测试运 效率</span></span><br><span class=\"line\">    <span class=\"comment\"># 具体可以查看</span></span><br><span class=\"line\">    <span class=\"comment\"># https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html</span></span><br><span class=\"line\">    <span class=\"comment\"># https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisableMigrations</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"notmigrations\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    MIGRATION_MODULES = DisableMigrations()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.test <span class=\"keyword\">import</span> APITestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.tests.test_utils <span class=\"keyword\">import</span> TestCaseUtils</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'jeff'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAPITests</span><span class=\"params\">(APITestCase, TestCaseUtils)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成</span></span><br><span class=\"line\">    <span class=\"comment\"># xml/yaml/json格式的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找</span></span><br><span class=\"line\">    <span class=\"comment\"># 此测试类运行结束后，会自动从数据库里销毁这份数据</span></span><br><span class=\"line\">    <span class=\"comment\"># fixtures = ['user.json']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个测试方法执行前会运行</span></span><br><span class=\"line\">        <span class=\"comment\"># 在此方法执行前，django会运行以下操作</span></span><br><span class=\"line\">        <span class=\"comment\"># 1. 重置数据库，数据库恢复到执行migrate后的状态</span></span><br><span class=\"line\">        <span class=\"comment\"># 2. 加载fixtures数据</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以每个测试方法里对数据库的操作都是独立的，不会相互影响</span></span><br><span class=\"line\">        kwargs = dict(mobile_phone=<span class=\"string\">'15999999999'</span>, password=<span class=\"string\">'111111'</span>)</span><br><span class=\"line\">        self.user = User.app_user_objects.create(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个方法结束执行后会运行</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUpClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类初始化时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).setUpClass()</span><br><span class=\"line\">        cls.token = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDownClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在整个测试类运行结束时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).tearDownClass()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"APP用户登录接口成功情况\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'111111'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        <span class=\"comment\"># response.data是字典对象</span></span><br><span class=\"line\">        <span class=\"comment\"># response.content是json字符串对象</span></span><br><span class=\"line\">        self.assertEquals(response.status_code,</span><br><span class=\"line\">                          status.HTTP_200_OK,</span><br><span class=\"line\">                          <span class=\"string\">'登录接口返回状态码错误: 错误信息: &#123;&#125;'</span>.format(response.content))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'token'</span>, response.data, <span class=\"string\">'登录成功后无token返回'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_with_error_pwd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">        self.assertJSONEqual(<span class=\"string\">'&#123;\"errors\":[\"用户名或密码错误。\"]&#125;'</span>, response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"成功获取app用户个人信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        headers = self.get_headers(user=self.user)</span><br><span class=\"line\">        response = self.client.get(path, **headers)</span><br><span class=\"line\">        <span class=\"comment\"># 校验一些关键数据即可</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果是创建新数据，不仅要校验返回的状态码和数据，</span></span><br><span class=\"line\">        <span class=\"comment\"># 还需要到使用Django ORM去数据库查询数据是否创建成功</span></span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_200_OK)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">6</span>, len(response.data))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'url'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'mobile_phone'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'avatar'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'company_name'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'username'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'is_inviter'</span>, response.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_without_token</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"不传token请求获取用户信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        response = self.client.get(path)</span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)</span><br></pre></td></tr></table></figure>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自unittest.case.TestCase</span></span><br><span class=\"line\">assertFalse(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTrue(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSequenceEqual(seq1, seq2, msg=<span class=\"keyword\">None</span>, seq_type=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertListEqual(list1, list2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTupleEqual(tuple1, tuple2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSetEqual(set1, set2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIs(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNot(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictEqual(d1, d2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictContainsSubset(expected, actual, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertItemsEqual(expected_seq, actual_seq, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertMultiLineEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLess(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLessEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreater(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreaterEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNone(obj, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertRaisesRegexp(expected_exception, expected_regexp,</span><br><span class=\"line\">                           callable_obj=<span class=\"keyword\">None</span>, *args, **kwargs)</span><br><span class=\"line\">assertRegexpMatches(text, expected_regexp, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotRegexpMatches(text, unexpected_regexp, msg=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试接口地址\"><a href=\"#测试接口地址\" class=\"headerlink\" title=\"测试接口地址\"></a>测试接口地址</h2><p>测试接口地址建议使用硬编码，不要使用<code>reverse</code>反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。</p>\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><p>有如下两种方法准备测试数据</p>\n<ol>\n<li>简单的数据可以在<code>setUp()</code>里来创建；</li>\n<li>复杂数据可以使用fixtures来写，并在赋值给测试类的<code>fixtures</code>属性；<br>fixtures数据示例<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Lennon\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Paul\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"McCartney\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试覆盖率（coverage）\"><a href=\"#测试覆盖率（coverage）\" class=\"headerlink\" title=\"测试覆盖率（coverage）\"></a>测试覆盖率（coverage）</h2><p>在<code>Pycharm</code>里可以通用右键项目，选择<code>Run &#39;Test:&#39; with Coverage</code>来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。</p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful api","path":"api/tags/restful api.json"},{"name":"接口","path":"api/tags/接口.json"},{"name":"单元测试","path":"api/tags/单元测试.json"},{"name":"测试","path":"api/tags/测试.json"}]},{"title":"Django内置的flatpages应用","slug":"django内置的flatpages应用","date":"2015-09-08T13:17:55.000Z","updated":"2015-09-08T13:17:55.000Z","comments":true,"path":"api/articles/django内置的flatpages应用.json","excerpt":"不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：页面数据简单（不会有很多动态数据展示）;有更新但频率不高;如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用flatpages来解决这类问题了。<br>","cover":null,"content":"<p>不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：</p>\n<ol>\n<li>页面数据简单（不会有很多动态数据展示）;</li>\n<li>有更新但频率不高;</li>\n</ol>\n<p>如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用<code>flatpages</code>来解决这类问题了。<br><a id=\"more\"></a></p>\n<p><code>django.contrib.flatpages</code>是<code>Django</code>的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。</p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先确保<code>INSTALLED_APPS</code>中已经存在<code>django.contrib.sites</code>，因为<code>django.contrib.flatpages</code>依赖于此包。<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INSTALLED_APPS = (</span><br><span class=\"line\">    <span class=\"comment\"># ...</span></span><br><span class=\"line\">    <span class=\"string\">'django.contrib.sites'</span>,</span><br><span class=\"line\">    <span class=\"string\">'django.contrib.flatpages'</span>,</span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\"># ...</span></span><br><span class=\"line\"><span class=\"comment\"># 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1</span></span><br><span class=\"line\">SITE_ID = <span class=\"number\">1</span></span><br></pre></td></tr></table></figure></p>\n<p>执行<code>python manage.py migrate</code>建表</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>路由配置可先以有多种形式<br><code>urls.py</code><br>第一种（需放在最后，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns += [</span><br><span class=\"line\">    url(r&apos;^(?P&lt;url&gt;.*/)$&apos;, views.flatpage),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>第二种（每个页面都需要写一个url，推荐）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.contrib.flatpages import views</span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(r&apos;^about-us/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/about-us/&apos;&#125;, name=&apos;about&apos;),</span><br><span class=\"line\">    url(r&apos;^license/$&apos;, views.flatpage, &#123;&apos;url&apos;: &apos;/license/&apos;&#125;, name=&apos;license&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>或者，如果你不想配置路由，还有一种更简单的方法，直接在<code>settings.py</code>的里添加中间件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MIDDLEWARE_CLASSES = (</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    &apos;django.contrib.flatpages.middleware.FlatpageFallbackMiddleware&apos;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p><em>为确保配置生效，保险的方法是把<code>django.contrib.flatpages.middleware.FlatpageFallbackMiddleware</code>放在最后一行</em></p>\n<h2 id=\"管理flatpages\"><a href=\"#管理flatpages\" class=\"headerlink\" title=\"管理flatpages\"></a>管理<code>flatpages</code></h2><p>默认的你可以登录超级管理员后台（如果开启），找到<code>Flat pages</code>，进去点击添加，可以看到可配置的选项有，<code>URL</code> <code>Title</code> <code>Content</code> <code>Site</code> <code>Enable comments</code> <code>Registration required</code> <code>Template name</code></p>\n<h3 id=\"数据项说明\"><a href=\"#数据项说明\" class=\"headerlink\" title=\"数据项说明\"></a>数据项说明</h3><ul>\n<li><code>URL</code>:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )</li>\n<li><code>Title</code>: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它</li>\n<li><code>Content</code>: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示</li>\n<li><code>Site</code>: 页面放置的站点，该项设置集成了 Django 多站点框架</li>\n<li><code>Enable comments</code>: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体</li>\n<li><code>Registration required</code>: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。</li>\n<li><code>Template name</code>: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 <code>flatpages/default.html</code>（我在<code>Django1.8.4</code>里死活没找到，只好自己写好一个扔进去）</li>\n</ul>\n<p>当添加相应的数据后，剩下工作就交给<code>flatpages</code>吧，如果你是使用中间件形式的，则<code>flatpages</code>会在配置完所有<code>urls.py</code>后，没有找到配置到对应的<code>URL</code>，才会到<code>flatpages</code>中查找，如果还是找不到，则会引发<code>Http404</code>异常，即<code>FlatpageFallbackMiddleware</code>只在<code>404</code>时会被激活，而不会在<code>500</code>或其它错误响应时被激活。</p>\n<p>如果你需要自己定制，则可以针对<code>django/contrib/flatpages/models.py</code>自己写增删改方法就可以。<br><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlatPage</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    url = models.CharField(_(<span class=\"string\">'URL'</span>), max_length=<span class=\"number\">100</span>, db_index=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    title = models.CharField(_(<span class=\"string\">'title'</span>), max_length=<span class=\"number\">200</span>)</span><br><span class=\"line\">    content = models.TextField(_(<span class=\"string\">'content'</span>), blank=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    enable_comments = models.BooleanField(_(<span class=\"string\">'enable comments'</span>), default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    template_name = models.CharField(_(<span class=\"string\">'template name'</span>), max_length=<span class=\"number\">70</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">        help_text=_(</span><br><span class=\"line\">            <span class=\"string\">\"Example: 'flatpages/contact_page.html'. If this isn't provided, \"</span></span><br><span class=\"line\">            <span class=\"string\">\"the system will use 'flatpages/default.html'.\"</span></span><br><span class=\"line\">        ),</span><br><span class=\"line\">    )</span><br><span class=\"line\">    registration_required = models.BooleanField(_(<span class=\"string\">'registration required'</span>),</span><br><span class=\"line\">        help_text=_(<span class=\"string\">\"If this is checked, only logged-in users will be able to view the page.\"</span>),</span><br><span class=\"line\">        default=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">    sites = models.ManyToManyField(Site)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        db_table = <span class=\"string\">'django_flatpage'</span></span><br><span class=\"line\">        verbose_name = _(<span class=\"string\">'flat page'</span>)</span><br><span class=\"line\">        verbose_name_plural = _(<span class=\"string\">'flat pages'</span>)</span><br><span class=\"line\">        ordering = (<span class=\"string\">'url'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"%s -- %s\"</span> % (self.url, self.title)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_absolute_url</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># Handle script prefix manually because we bypass reverse()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> iri_to_uri(get_script_prefix().rstrip(<span class=\"string\">'/'</span>) + self.url)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"模板\"><a href=\"#模板\" class=\"headerlink\" title=\"模板\"></a>模板</h2><p>默认模板路径为<code>flatpages/default.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>&#123;&#123; flatpage.title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">&#123;&#123; flatpage.content &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加<code>requeset.user</code>显示用户信息等。</p>\n</blockquote>\n<h2 id=\"高级应用\"><a href=\"#高级应用\" class=\"headerlink\" title=\"高级应用\"></a>高级应用</h2><p>获取<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages as flatpages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取当前用户能打开的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages for request.user as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>获取链接以<code>/about/</code>为开头的<code>flatpages</code>实例列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>上面两种也可以组合使用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load flatpages %&#125;</span><br><span class=\"line\">&#123;% get_flatpages &apos;/about/&apos; for someuser as about_pages %&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"生成sitemaps-xml\"><a href=\"#生成sitemaps-xml\" class=\"headerlink\" title=\"生成sitemaps.xml\"></a>生成<code>sitemaps.xml</code></h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from django.conf.urls import url</span><br><span class=\"line\">from django.contrib.flatpages.sitemaps import FlatPageSitemap</span><br><span class=\"line\">from django.contrib.sitemaps.views import sitemap</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    # ...</span><br><span class=\"line\"> </span><br><span class=\"line\">    # the sitemap</span><br><span class=\"line\">    url(r&apos;^sitemap\\.xml$&apos;, sitemap,</span><br><span class=\"line\">        &#123;&apos;sitemaps&apos;: &#123;&apos;flatpages&apos;: FlatPageSitemap&#125;&#125;,</span><br><span class=\"line\">        name=&apos;django.contrib.sitemaps.views.sitemap&apos;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h2 id=\"容易踩的坑\"><a href=\"#容易踩的坑\" class=\"headerlink\" title=\"容易踩的坑\"></a>容易踩的坑</h2><p>最好把<code>settings.py</code>里的<code>APPEND_SLASH</code>设置为<code>Ture</code>， 这样不管是<code>/about-us</code>还是<code>/about-us/</code>都可以访问到。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li><a href=\"https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\" target=\"_blank\" rel=\"noopener\">https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/</a></li>\n<li><a href=\"http://djangobook.py3k.cn/2.0/chapter16/\" target=\"_blank\" rel=\"noopener\">http://djangobook.py3k.cn/2.0/chapter16/</a></li>\n</ul>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"Python","path":"api/tags/Python.json"}]},{"title":"Django字段选项related_name和related_query_name","slug":"django字段选项related-name和related-query-name","date":"2015-10-20T14:22:06.000Z","updated":"2020-08-15T03:05:59.808Z","comments":true,"path":"api/articles/django字段选项related-name和related-query-name.json","excerpt":"data<br>1<br>2<br>3<br>4<br>5<br>6<br>7<br>8<br>9<br>sqlite&gt; select * from author;<br>id      name    age<br>1       jim     12<br>2       tom     11<br>sqlite&gt; select * from book;<br>id      name    author_id<br>1       learn java      1<br>2       learn python    1<br>3       learn c++       2<br>","cover":null,"content":"<p><code>data</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlite&gt; select * from author;</span><br><span class=\"line\">id      name    age</span><br><span class=\"line\">1       jim     12</span><br><span class=\"line\">2       tom     11</span><br><span class=\"line\">sqlite&gt; select * from book;</span><br><span class=\"line\">id      name    author_id</span><br><span class=\"line\">1       learn java      1</span><br><span class=\"line\">2       learn python    1</span><br><span class=\"line\">3       learn c++       2</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p><code>models.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: UTF-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Create your models here.</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'姓名'</span>, max_length=<span class=\"number\">50</span>)</span><br><span class=\"line\">    age = models.IntegerField(verbose_name=<span class=\"string\">'年龄'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Book</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(verbose_name=<span class=\"string\">'书名'</span>, max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=<span class=\"string\">'作者'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>执行语句<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(book__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.book_set.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<p>假如把类<code>Book</code>改成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Book(models.Model):</span><br><span class=\"line\">    name = models.CharField(verbose_name=&apos;书名&apos;, max_length=100)</span><br><span class=\"line\">    author = models.ForeignKey(Author, verbose_name=&apos;作者&apos;, related_name=&apos;bs&apos;, related_query_name=&apos;b&apos;)</span><br></pre></td></tr></table></figure></p>\n<p>那么上面查询代码就应该写成这样<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; Author.objects.filter(b__name=&apos;learn java&apos;)</span><br><span class=\"line\">[&lt;Author: jim&gt;]</span><br><span class=\"line\">&gt;&gt;&gt; author = Author.objects.get(pk=1)</span><br><span class=\"line\">&gt;&gt;&gt; author.bs.all()</span><br><span class=\"line\">[&lt;Book: learn java&gt;, &lt;Book: learn python&gt;]</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>如果<code>book</code>表里有两个字段都外键关联<code>author</code>表，这时<code>related_name</code>就非常有用了。</p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"Python","path":"api/tags/Python.json"}]},{"title":"Git patch的简单运用","slug":"git-patch的简单运用","date":"2015-10-15T12:49:40.000Z","updated":"2020-08-15T03:06:15.504Z","comments":true,"path":"api/articles/git-patch的简单运用.json","excerpt":"生成PATCH往前n个提前内容的patch<br>1<br>git format-patch -n<br>某个commit（含）的及之前的n-1次提交的patch<br>1<br>git format-patch -n SHA<br>","cover":null,"content":"<h2 id=\"生成PATCH\"><a href=\"#生成PATCH\" class=\"headerlink\" title=\"生成PATCH\"></a>生成PATCH</h2><p>往前n个提前内容的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n</span><br></pre></td></tr></table></figure></p>\n<p>某个commit（含）的及之前的n-1次提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -n SHA</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>某个commit的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -1 SHA</span><br></pre></td></tr></table></figure></p>\n<p>当前分支所有超前master提交的patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -M master</span><br></pre></td></tr></table></figure></p>\n<p>两个commit之间的所有patch（不包含较早SHA1提交的内容）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch SHA1...SHA1</span><br></pre></td></tr></table></figure></p>\n<p>某个commit之后的所有patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git format-patch -s SHA</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"应用PATCH\"><a href=\"#应用PATCH\" class=\"headerlink\" title=\"应用PATCH\"></a>应用PATCH</h2><p>检查patch<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --stat xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>检查能否应用成功<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git apply --check xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>打补丁<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git am -s xxx.patch</span><br></pre></td></tr></table></figure></p>\n<p>如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 把没有冲突的文件先合并了，剩下有冲突的作了标记</span><br><span class=\"line\">git apply PATCH --reject</span><br><span class=\"line\"># 这里手动解决冲突</span><br><span class=\"line\"># 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index</span><br><span class=\"line\">git add FIXED_FILES</span><br><span class=\"line\">git am --resolved</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://blog.csdn.net/daydring/article/details/42676987\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/daydring/article/details/42676987</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]},{"title":"Git常用命令别名设置","slug":"git-alias","date":"2019-06-28T09:17:06.000Z","updated":"2020-10-29T17:16:23.132Z","comments":true,"path":"api/articles/git-alias.json","excerpt":"如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置","cover":"/media/git-lg效果图.png","content":"<p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>\n<a id=\"more\"></a>\n<p>Git别名设置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\"><span class=\"comment\"># 可用git pull -r代替</span></span><br><span class=\"line\">git config --global alias.fr <span class=\"string\">'!f() &#123; git fetch &amp;&amp; git rebase $@; &#125;; f'</span>; </span><br><span class=\"line\"><span class=\"comment\"># git提交日志</span></span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"</span></span><br></pre></td></tr></table></figure>\n<p>删除别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> alias.xxx</span><br></pre></td></tr></table></figure>\n<p>以下两个命令设置git alias和zsh alias都失败，暂没找到方法可以设置别名</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看仓库提交者排名前 5</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">'%aN'</span> | sort | uniq -c | sort -k1 -n -r | head -n 5</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计每个人增删行数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --format=<span class=\"string\">'%aN'</span> | sort -u | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> name; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -en <span class=\"string\">\"<span class=\"variable\">$name</span>\\t\"</span>; git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"<span class=\"variable\">$name</span>\"</span> --pretty=tformat: --numstat | awk <span class=\"string\">'&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123; printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc &#125;'</span> -; <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>git lg命令效果图<br><img alt=\"git lg命令效果图\" data-src=\"/media/git-lg效果图.png\"></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Git","path":"api/tags/Git.json"}]},{"title":"Git stash的简单运用","slug":"git-stash的简单运用","date":"2015-10-20T14:16:18.000Z","updated":"2020-08-15T03:06:22.129Z","comments":true,"path":"api/articles/git-stash的简单运用.json","excerpt":"当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用git stash命令。<br>","cover":null,"content":"<p>当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用<code>git stash</code>命令。<br><a id=\"more\"></a><br><code>git stash</code>命令可将工作区的改动存储git栈，运行<code>git stash</code>之后，可以再运行<code>git status -s</code>验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用<code>git stash pop</code>可以从Git栈中读取最近一次保存的内容，恢复到工作区。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。</span><br><span class=\"line\">git stash save &quot;message&quot;: 备份当前的工作区的内容，并添加备注信息</span><br><span class=\"line\">git stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。</span><br><span class=\"line\">git stash pop stash@&#123;0&#125;: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@&#123;0&#125;为最新）</span><br><span class=\"line\">git stash apply stash@&#123;0&#125;: 同git stash pop，但不会删除对应的记录</span><br><span class=\"line\">git stash drop: 删除最新的一个备份</span><br><span class=\"line\">git stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"http://www.tuicool.com/articles/rUBNBvI\" target=\"_blank\" rel=\"noopener\">http://www.tuicool.com/articles/rUBNBvI</a><br>及<code>git stash --help</code></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]},{"title":"Git后悔药","slug":"git-reset","date":"2019-07-25T10:33:09.000Z","updated":"2020-01-19T07:41:07.687Z","comments":true,"path":"api/articles/git-reset.json","excerpt":"使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。","cover":null,"content":"<p>使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。</p>\n<a id=\"more\"></a>\n<div id=\"sequence-0\"></div>\n\n<h3 id=\"差异（diff）\"><a href=\"#差异（diff）\" class=\"headerlink\" title=\"差异（diff）\"></a>差异（diff）</h3><p>工作区vs暂存区: <code>git diff</code></p>\n<p>暂存区vs本地仓库: <code>git diff —cached</code></p>\n<p>本地仓库vs远程仓库: <code>git diff &lt;分支名&gt; origin/&lt;分支名&gt;</code></p>\n<h3 id=\"撤消（reset）\"><a href=\"#撤消（reset）\" class=\"headerlink\" title=\"撤消（reset）\"></a>撤消（reset）</h3><p>撤消工作区修改: <code>git reset —hard</code></p>\n<p>撤消(1)<code>git add</code>: <code>git reset &amp;&amp; git checkout .</code>或<code>git reset —hard</code>(会还原所有修改)</p>\n<p>撤消(2) <code>git commit</code>: <code>git reset --hard origin/master</code>(使用远端的master分支恢复到本地)</p>\n<p>撤消(3) <code>git push</code>: <code>git reset --hard HEAD^ &amp;&amp; git push -f</code>(先在本地回到上一个版本，然后强推到远端)<script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/raphael/2.2.7/raphael.min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">title: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"},{"name":"reset","path":"api/tags/reset.json"},{"name":"恢复","path":"api/tags/恢复.json"},{"name":"后悔","path":"api/tags/后悔.json"}]},{"title":"Git常用命令","slug":"git常用命令","date":"2015-09-11T12:05:13.000Z","updated":"2020-10-16T09:35:38.351Z","comments":true,"path":"api/articles/git常用命令.json","excerpt":" [Figure] ","cover":"/media/Git工作流图示.jpg","content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>之前写过一篇<a href=\"/2015/01/16/Git命令使用指南/\">Git命令使用指南</a>，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。<br><a id=\"more\"></a></p>\n<h2 id=\"查看修改\"><a href=\"#查看修改\" class=\"headerlink\" title=\"查看修改\"></a>查看修改</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 查看文件修改/变动情况</span></span><br><span class=\"line\">git status -s</span><br></pre></td></tr></table></figure>\n<h2 id=\"提交\"><a href=\"#提交\" class=\"headerlink\" title=\"提交\"></a>提交</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有已跟踪的文件添加到暂存区</span></span><br><span class=\"line\">git add -u</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 把所有已跟踪并有更新的文件提交到本地仓库</span></span><br><span class=\"line\">git commit -am \"update message\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"列出分支\"><a href=\"#列出分支\" class=\"headerlink\" title=\"列出分支\"></a>列出分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本地分支</span><br><span class=\"line\">git branch</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -v</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出本地和远程所有分支</span><br><span class=\"line\">git branch -a</span><br><span class=\"line\">或</span><br><span class=\"line\">git branch -va</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除本地分支</span><br><span class=\"line\">git branck -D/-d &lt;branch&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除远程分支，注意冒号前有空格</span><br><span class=\"line\">git push origin :&lt;分支名&gt;</span><br><span class=\"line\"># 等价于</span><br><span class=\"line\">git push origin -d &lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送分支\"><a href=\"#推送分支\" class=\"headerlink\" title=\"推送分支\"></a>推送分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 推送当前分支到默认remote上，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送当前分支到指定remote，remote上没有对应分支则自动创建</span><br><span class=\"line\">git push &lt;remote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 推送到指定分支到remote的指定分支上</span><br><span class=\"line\">git push &lt;remote&gt; &lt;remote_branch&gt;:&lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"重命名分支\"><a href=\"#重命名分支\" class=\"headerlink\" title=\"重命名分支\"></a>重命名分支</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch (-m | -M) [&lt;old-branch&gt;] &lt;new-branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"拉取远程分支到本地\"><a href=\"#拉取远程分支到本地\" class=\"headerlink\" title=\"拉取远程分支到本地\"></a>拉取远程分支到本地</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b &lt;branch&gt; &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout --track &lt;remote&gt;/&lt;branch&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"撤消提交（未push情况下）\"><a href=\"#撤消提交（未push情况下）\" class=\"headerlink\" title=\"撤消提交（未push情况下）\"></a>撤消提交（未<code>push</code>情况下）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset --mixed &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略</span><br><span class=\"line\">git reset --soft &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index不变</span><br><span class=\"line\">git reset --hard &lt;SHA1&gt; # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看commit记录\"><a href=\"#查看commit记录\" class=\"headerlink\" title=\"查看commit记录\"></a>查看<code>commit</code>记录</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --oneline -n # 单行显示最后n个commit的记录</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地分支和远程分支做关联\"><a href=\"#本地分支和远程分支做关联\" class=\"headerlink\" title=\"本地分支和远程分支做关联\"></a>本地分支和远程分支做关联</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch --set-upstream-to=&lt;remote&gt;/&lt;remote_branch&gt; &lt;loclal_branch&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送本地当前新分支到远程\"><a href=\"#推送本地当前新分支到远程\" class=\"headerlink\" title=\"推送本地当前新分支到远程\"></a>推送本地当前新分支到远程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin &lt;branch_name&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列出tag\"><a href=\"#列出tag\" class=\"headerlink\" title=\"列出tag\"></a>列出tag</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag -l</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除tag\"><a href=\"#删除tag\" class=\"headerlink\" title=\"删除tag\"></a>删除tag</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 删除本地tag</span><br><span class=\"line\">git tag -d &lt;tag_name&gt;</span><br><span class=\"line\"># 删除远程tag</span><br><span class=\"line\">git push origin :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"推送本地tag到远程\"><a href=\"#推送本地tag到远程\" class=\"headerlink\" title=\"推送本地tag到远程\"></a>推送本地tag到远程</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 推送单个tag</span><br><span class=\"line\">git push origin &lt;tag_name&gt;</span><br><span class=\"line\"># 推送所有tag</span><br><span class=\"line\">git push origin --tags</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 当前分支日志</span><br><span class=\"line\">git log</span><br><span class=\"line\"># 所有本地分支日志</span><br><span class=\"line\">git log --all</span><br><span class=\"line\"># 指定本地分支日志</span><br><span class=\"line\">git log &lt;branch_name&gt;</span><br><span class=\"line\"># 指定远程分支日志</span><br><span class=\"line\">git log origin/&lt;branch_name&gt;</span><br><span class=\"line\"># 所有远程分支日志</span><br><span class=\"line\">git log --all origin</span><br></pre></td></tr></table></figure>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Git","path":"api/tags/Git.json"}]},{"title":"JS笔记","slug":"js笔记","date":"2019-04-24T08:35:13.000Z","updated":"2020-08-15T03:06:50.901Z","comments":true,"path":"api/articles/js笔记.json","excerpt":"js中要用变量作为key的话使用方括号括住<br>例：this.searchKeyword<br>1<br>2<br>3<br>4<br>5<br>6<br>this.$http(&#123;<br>    url: this.searchUrl,<br>    method: this.remoteRequestMethod,<br>    params: Object.assign(&#123;&#125;, this.searchParams, this.pager),<br>    data: Object.assign(&#123; [this.searchKeyword]: query &#125;, this.searchBody, this.pager)<br>    &#125;)<br>","cover":null,"content":"<p>js中要用变量作为key的话使用方括号括住<br>例：<code>this.searchKeyword</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">this</span>.$http(&#123;</span><br><span class=\"line\">    url: <span class=\"keyword\">this</span>.searchUrl,</span><br><span class=\"line\">    method: <span class=\"keyword\">this</span>.remoteRequestMethod,</span><br><span class=\"line\">    params: <span class=\"built_in\">Object</span>.assign(&#123;&#125;, <span class=\"keyword\">this</span>.searchParams, <span class=\"keyword\">this</span>.pager),</span><br><span class=\"line\">    data: <span class=\"built_in\">Object</span>.assign(&#123; [<span class=\"keyword\">this</span>.searchKeyword]: query &#125;, <span class=\"keyword\">this</span>.searchBody, <span class=\"keyword\">this</span>.pager)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<p>全文完🙈</p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"js","path":"api/tags/js.json"}]},{"title":"MacOS远程连接Windows","slug":"mac远程连接windows","date":"2017-08-08T01:40:28.000Z","updated":"2017-08-16T08:58:43.000Z","comments":true,"path":"api/articles/mac远程连接windows.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>MacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。</p>\n<ol>\n<li>开始-运行-gpedit.msc，进入组策略编辑器。</li>\n<li>在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。<ul>\n<li>远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。</li>\n<li>要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。</li>\n</ul>\n</li>\n<li>关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。</li>\n</ol>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"远程","path":"api/tags/远程.json"}]},{"title":"Material Design资源","slug":"material-design资源","date":"2015-10-15T12:19:42.000Z","updated":"2020-08-15T03:06:58.776Z","comments":true,"path":"api/articles/material-design资源.json","excerpt":" [Figure] ","cover":"/media/materialdesign-goals-landingimage_large_mdpi.png","content":"<p><img alt=\"materialdesign-goals-landingimage_large_mdpi\" data-src=\"/media/materialdesign-goals-landingimage_large_mdpi.png\"></p>\n<p>Material Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。<br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-10-15 初稿</p>\n<h2 id=\"演示视频\"><a href=\"#演示视频\" class=\"headerlink\" title=\"演示视频\"></a>演示视频</h2><p><iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=\"0\" allowfullscreen></iframe></p>\n<h2 id=\"Material-Design-文档\"><a href=\"#Material-Design-文档\" class=\"headerlink\" title=\"Material Design 文档\"></a>Material Design 文档</h2><p>官方</p>\n<blockquote>\n<p><a href=\"http://www.google.com/design/spec/material-design/introduction.html\" target=\"_blank\" rel=\"noopener\">http://www.google.com/design/spec/material-design/introduction.html</a></p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://wiki.jikexueyuan.com/project/material-design/\" target=\"_blank\" rel=\"noopener\">http://wiki.jikexueyuan.com/project/material-design/</a><br>GitHub: <a href=\"https://github.com/1sters/material_design_zh_2\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh_2</a><br>PDF: <a href=\"http://pan.baidu.com/s/1fr1gi\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1fr1gi</a> </p>\n</blockquote>\n<p>Material Design 中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"http://design.1sters.com/\" target=\"_blank\" rel=\"noopener\">http://design.1sters.com/</a> （已关停）<br>GitHub: <a href=\"https://github.com/1sters/material_design_zh\" target=\"_blank\" rel=\"noopener\">https://github.com/1sters/material_design_zh</a></p>\n</blockquote>\n<p>Google Material Design 正體中文版（官网翻译而来）</p>\n<blockquote>\n<p>阅读: <a href=\"https://www.gitbook.com/book/wcc723/google_design_translate/details\" target=\"_blank\" rel=\"noopener\">https://www.gitbook.com/book/wcc723/google_design_translate/details</a><br>GitHub: <a href=\"https://github.com/Wcc723/google_design_translate\" target=\"_blank\" rel=\"noopener\">https://github.com/Wcc723/google_design_translate</a><br>PDF: <a href=\"http://pan.baidu.com/s/1dD8X1Zj\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1dD8X1Zj</a></p>\n</blockquote>\n<p>Material Design非官方中文指导手册</p>\n<p>PDF: <a href=\"http://pan.baidu.com/s/1mg3P45i\" target=\"_blank\" rel=\"noopener\">http://pan.baidu.com/s/1mg3P45i</a></p>\n<h2 id=\"Android资源\"><a href=\"#Android资源\" class=\"headerlink\" title=\"Android资源\"></a>Android资源</h2><p>资源大合集<br><a href=\"https://github.com/lightSky/Awesome-MaterialDesign\" target=\"_blank\" rel=\"noopener\">https://github.com/lightSky/Awesome-MaterialDesign</a> </p>\n<p>十大Material Design开源项目<br><a href=\"http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\" target=\"_blank\" rel=\"noopener\">http://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1</a></p>\n<h2 id=\"图标\"><a href=\"#图标\" class=\"headerlink\" title=\"图标\"></a>图标</h2><p>Material icons guide</p>\n<blockquote>\n<p>主页: <a href=\"http://google.github.io/material-design-icons/\" target=\"_blank\" rel=\"noopener\">http://google.github.io/material-design-icons/</a><br>GitHub: <a href=\"https://github.com/google/material-design-icons\" target=\"_blank\" rel=\"noopener\">https://github.com/google/material-design-icons</a></p>\n</blockquote>\n<h2 id=\"网页框架\"><a href=\"#网页框架\" class=\"headerlink\" title=\"网页框架\"></a>网页框架</h2><p>Angular Material（控件最全，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a><br>GitHub: <a href=\"https://material.angularjs.org/\" target=\"_blank\" rel=\"noopener\">https://material.angularjs.org/</a></p>\n</blockquote>\n<p>material ui（控件较多，样式不错，交互动态效果多）</p>\n<blockquote>\n<p>主页: <a href=\"http://material-ui.com/\" target=\"_blank\" rel=\"noopener\">http://material-ui.com/</a><br>GitHub: <a href=\"https://github.com/callemall/material-ui\" target=\"_blank\" rel=\"noopener\">https://github.com/callemall/material-ui</a></p>\n</blockquote>\n<p>bootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）</p>\n<blockquote>\n<p>主页: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a><br>GitHub: <a href=\"http://fezvrasta.github.io/bootstrap-material-design/\" target=\"_blank\" rel=\"noopener\">http://fezvrasta.github.io/bootstrap-material-design/</a></p>\n</blockquote>\n<p>muicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）</p>\n<blockquote>\n<p>主页: <a href=\"https://www.muicss.com/\" target=\"_blank\" rel=\"noopener\">https://www.muicss.com/</a><br>GitHub: <a href=\"https://github.com/muicss/mui\" target=\"_blank\" rel=\"noopener\">https://github.com/muicss/mui</a></p>\n</blockquote>\n<p>MaterializeCss（控件数量还行，样式较好，交互动态效果还行）</p>\n<blockquote>\n<p>主页: <a href=\"http://materializecss.com/\" target=\"_blank\" rel=\"noopener\">http://materializecss.com/</a><br>GitHub: <a href=\"https://github.com/Dogfalo/materialize\" target=\"_blank\" rel=\"noopener\">https://github.com/Dogfalo/materialize</a></p>\n</blockquote>\n<p>bootswatch里的parper主题</p>\n<blockquote>\n<p>主页: <a href=\"http://bootswatch.com/paper/\" target=\"_blank\" rel=\"noopener\">http://bootswatch.com/paper/</a><br>GitHub: <a href=\"https://github.com/thomaspark/bootswatch\" target=\"_blank\" rel=\"noopener\">https://github.com/thomaspark/bootswatch</a></p>\n</blockquote>\n<p>jQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）</p>\n<blockquote>\n<p>主页: <a href=\"http://store.ququplay.com/\" target=\"_blank\" rel=\"noopener\">http://store.ququplay.com/</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"Material Design","path":"api/tags/Material Design.json"},{"name":"网页框架","path":"api/tags/网页框架.json"}]},{"title":"pip常用命令","slug":"pip常用命令","date":"2015-01-01T15:38:56.000Z","updated":"2020-12-16T13:14:20.701Z","comments":true,"path":"api/articles/pip常用命令.json","excerpt":"列出已安装的包pip freeze or pip list","cover":null,"content":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>\n<a id=\"more\"></a>\n<h3 id=\"导出requirements-txt\"><a href=\"#导出requirements-txt\" class=\"headerlink\" title=\"导出requirements.txt\"></a>导出requirements.txt</h3><p><code>pip freeze &gt; &lt;目录&gt;/requirements.txt</code></p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p><code>pip install &lt;包名&gt;</code> 或 <code>pip install -r requirements.txt</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装1.9版本的django</span><br><span class=\"line\">pip install django==1.9</span><br><span class=\"line\"># 安装版本号大于1.9的django，注意有引号</span><br><span class=\"line\">pip install &quot;django&gt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;&lt;1.9&quot;</span><br></pre></td></tr></table></figure>\n<p>requirements.txt内容格式为：</p>\n<pre><code>APScheduler==2.1.2\nDjango==1.5.4\nMySQL-Connector-Python==2.0.1\nMySQL-python==1.2.3\nPIL==1.1.7\nSouth==1.0.2\ndjango-grappelli==2.6.3\ndjango-pagination==1.0.7\n</code></pre><h3 id=\"安装本地安装包\"><a href=\"#安装本地安装包\" class=\"headerlink\" title=\"安装本地安装包\"></a>安装本地安装包</h3><p><code>pip install &lt;目录&gt;/&lt;文件名&gt;</code> 或 <code>pip install --use-wheel --no-index --find-links=wheelhouse/ &lt;包名&gt;</code></p>\n<p><em>&lt;包名&gt;前有空格</em></p>\n<p>可简写为</p>\n<p><code>pip install --no-index -f=&lt;目录&gt;/ &lt;包名&gt;</code></p>\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><p><code>pip uninstall &lt;包名&gt;</code> 或 <code>pip uninstall -r requirements.txt</code></p>\n<h3 id=\"升级包\"><a href=\"#升级包\" class=\"headerlink\" title=\"升级包\"></a>升级包</h3><p><code>pip install -U &lt;包名&gt;</code></p>\n<h3 id=\"升级pip\"><a href=\"#升级pip\" class=\"headerlink\" title=\"升级pip\"></a>升级pip</h3><p><code>pip install -U pip</code></p>\n<h2 id=\"显示包所在的目录\"><a href=\"#显示包所在的目录\" class=\"headerlink\" title=\"显示包所在的目录\"></a>显示包所在的目录</h2><p><code>pip show -f &lt;包名&gt;</code></p>\n<h2 id=\"搜索包\"><a href=\"#搜索包\" class=\"headerlink\" title=\"搜索包\"></a>搜索包</h2><p><code>pip search &lt;搜索关键字&gt;</code></p>\n<h2 id=\"查询可升级的包\"><a href=\"#查询可升级的包\" class=\"headerlink\" title=\"查询可升级的包\"></a>查询可升级的包</h2><p><code>pip list -o</code></p>\n<h2 id=\"下载包而不安装\"><a href=\"#下载包而不安装\" class=\"headerlink\" title=\"下载包而不安装\"></a>下载包而不安装</h2><p> <code>pip install &lt;包名&gt; -d  &lt;目录&gt;</code> 或 <code>pip install -d &lt;目录&gt; -r requirements.txt</code></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><code>pip wheel &lt;包名&gt;</code></p>\n<h2 id=\"更换国内pypi镜像\"><a href=\"#更换国内pypi镜像\" class=\"headerlink\" title=\"更换国内pypi镜像\"></a>更换国内pypi镜像</h2><h3 id=\"国内pypi镜像\"><a href=\"#国内pypi镜像\" class=\"headerlink\" title=\"国内pypi镜像\"></a>国内pypi镜像</h3><ul>\n<li>阿里云 <a href=\"https://mirrors.aliyun.com/pypi/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>豆瓣：<a href=\"https://pypi.douban.com/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.douban.com/simple</a></li>\n<li>中国科学技术大学：<a href=\"https://mirrors.ustc.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.ustc.edu.cn/pypi/web/simple/</a></li>\n<li>清华大学TUNA：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\" target=\"_blank\" rel=\"noopener\">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/\" target=\"_blank\" rel=\"noopener\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</a></li>\n</ul>\n<h3 id=\"指定单次安装源\"><a href=\"#指定单次安装源\" class=\"headerlink\" title=\"指定单次安装源\"></a>指定单次安装源</h3><p><code>pip install &lt;包名&gt; -i http://pypi.v2ex.com/simple</code></p>\n<h3 id=\"指定全局安装源\"><a href=\"#指定全局安装源\" class=\"headerlink\" title=\"指定全局安装源\"></a>指定全局安装源</h3><p>在unix和macos，配置文件为：$HOME/.pip/pip.conf<br>在windows上，配置文件为：%HOME%\\pip\\pip.ini </p>\n<pre><code>[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple\n</code></pre><hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://pip.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">pip documentation</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"命令","path":"api/tags/命令.json"},{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"},{"name":"pip","path":"api/tags/pip.json"}]},{"title":"npm入门命令","slug":"npm入门命令","date":"2016-07-06T15:46:37.000Z","updated":"2020-08-15T03:07:04.634Z","comments":true,"path":"api/articles/npm入门命令.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-07-06 初稿</p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>显示npm版号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"># 或</span><br><span class=\"line\">npm version</span><br></pre></td></tr></table></figure></p>\n<p>安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 带-g为全局安装</span><br><span class=\"line\"># 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。</span><br><span class=\"line\"># 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</span><br><span class=\"line\">npm install &lt;package&gt; -g</span><br><span class=\"line\"># 简写</span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级全局安装的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下全部模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>升级node自身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一个叫n的模块</span><br><span class=\"line\">npm install -g n</span><br><span class=\"line\"># 升级到最新稳定版</span><br><span class=\"line\">n stable</span><br><span class=\"line\"># 升级到指定版本</span><br><span class=\"line\">n v0.10.26</span><br></pre></td></tr></table></figure></p>\n<p>卸载移除指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall &lt;package&gt;</span><br><span class=\"line\"># 别名：remove, rm, r, un, unlink</span><br></pre></td></tr></table></figure></p>\n<p>显示已安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list</span><br></pre></td></tr></table></figure></p>\n<p>显示模块详细信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm show &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>查看全局包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure></p>\n<p>查看当前包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看npm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure></p>\n<p>查看帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help</span><br></pre></td></tr></table></figure></p>\n<p>查看相关命令的帮助文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &lt;command&gt;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"npm","path":"api/tags/npm.json"},{"name":"Nodejs","path":"api/tags/Nodejs.json"}]},{"title":"python中的UUID","slug":"python中的UUID","date":"2015-06-02T15:32:59.000Z","updated":"2020-08-15T03:07:16.864Z","comments":true,"path":"api/articles/python中的UUID.json","excerpt":"简介（维基百科）通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[3]","cover":null,"content":"<h2 id=\"简介（维基百科）\"><a href=\"#简介（维基百科）\" class=\"headerlink\" title=\"简介（维基百科）\"></a>简介（维基百科）</h2><blockquote>\n<p>通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。<br>UUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" title=\"通用唯一识别码\" target=\"_blank\" rel=\"noopener\">[3]</a></p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义 :\"></a>定义 :</h2><p>UUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考<a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">随机UUID的重复机率</a>）。</p>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><ol>\n<li>uuid1()——基于时间戳<br>由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，<br>但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。</li>\n<li>uuid2()——基于分布式计算环境DCE（Python中没有这个函数）<br>算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。<br>实际中很少用到该方法。</li>\n<li>uuid3()——基于名字的MD5散列值<br>通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，<br>和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。</li>\n<li>uuid4()——基于随机数<br>由伪随机数得到，有一定的重复概率，该概率可以计算出来。</li>\n<li>uuid5()——基于名字的SHA-1散列值<br>算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法</li>\n</ol>\n<h2 id=\"在python中在生成UUID\"><a href=\"#在python中在生成UUID\" class=\"headerlink\" title=\"在python中在生成UUID\"></a>在<code>python</code>中在生成UUID</h2><p><code>import uuid</code>后即可使用<br>示例代码<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> uuid</span><br><span class=\"line\">uuid.uuid1()</span><br><span class=\"line\">uuid.uuid3(namespace, name)</span><br><span class=\"line\">uuid.uuid4()</span><br><span class=\"line\">uuid.uuid5(namespace, name)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><blockquote>\n<p><a href=\"http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\" target=\"_blank\" rel=\"noopener\">http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81</a><br><a href=\"https://docs.python.org/2/library/uuid.html\" target=\"_blank\" rel=\"noopener\">https://docs.python.org/2/library/uuid.html</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"UUID","path":"api/tags/UUID.json"}]},{"title":"ubuntu安装JDK8","slug":"ubuntu安装JDK8","date":"2015-03-28T09:29:42.000Z","updated":"2020-08-15T03:07:31.322Z","comments":true,"path":"api/articles/ubuntu安装JDK8.json","excerpt":"下载JDK8到oracle网站下载JDK8<br>","cover":null,"content":"<h2 id=\"下载JDK8\"><a href=\"#下载JDK8\" class=\"headerlink\" title=\"下载JDK8\"></a>下载JDK8</h2><p>到<a href=\"http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\" target=\"_blank\" rel=\"noopener\">oracle</a>网站下载JDK8<br><a id=\"more\"></a></p>\n<h2 id=\"解压安装\"><a href=\"#解压安装\" class=\"headerlink\" title=\"解压安装\"></a>解压安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo tar xzvf jdk-8u40-linux-x64.tar.gz</span><br><span class=\"line\">mkdir -p /usr/lib/jvm</span><br><span class=\"line\">sudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm</span><br><span class=\"line\">cd /usr/lib/jvm</span><br><span class=\"line\">sudo ln -s jdk1.8.0_40 java-8</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置环境变量\"><a href=\"#配置环境变量\" class=\"headerlink\" title=\"配置环境变量\"></a>配置环境变量</h2><p>添加PATH,CLASSPATH,JAVA_HOME环境变量<br><code>gedit ~/.bashrc</code><br>在打开的窗口里添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JAVA_HOME=/usr/lib/jvm/java-8</span><br><span class=\"line\">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</span><br><span class=\"line\">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</span><br><span class=\"line\">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</span><br></pre></td></tr></table></figure></p>\n<p>保存退出，执行命令使配置生效<br><code>source ~/.bashrc</code></p>\n<h2 id=\"配置默认JDK版本\"><a href=\"#配置默认JDK版本\" class=\"headerlink\" title=\"配置默认JDK版本\"></a>配置默认JDK版本</h2><p>在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300</span><br><span class=\"line\">sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300</span><br><span class=\"line\">sudo update-alternatives --config java</span><br><span class=\"line\">sudo update-alternatives --config javac</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"验证是否成功\"><a href=\"#验证是否成功\" class=\"headerlink\" title=\"验证是否成功\"></a>验证是否成功</h2><p><code>java -version</code></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Ubuntu","path":"api/tags/Ubuntu.json"},{"name":"JDK","path":"api/tags/JDK.json"}]},{"title":"Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool","slug":"ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool","date":"2015-03-28T09:54:03.000Z","updated":"2020-08-15T03:07:26.447Z","comments":true,"path":"api/articles/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.json","excerpt":null,"cover":null,"content":"<p>错误信息：<br><code>unable to run mksdcard sdk tool</code><br>原因：缺少库文件<br>解决方法：<br><code>sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</code></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Android","path":"api/tags/Android.json"},{"name":"Ubuntu","path":"api/tags/Ubuntu.json"}]},{"title":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","slug":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","date":"2015-02-04T15:35:40.000Z","updated":"2020-08-15T02:59:39.653Z","comments":true,"path":"api/articles/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.json","excerpt":"更新记录2016-03-04 更新教程<br>2015-    09-16 添加旧版软件下载<br>2015-02-04 初稿鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。","cover":null,"content":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-03-04 更新教程<br>2015-    09-16 添加旧版软件下载<br>2015-02-04 初稿</p>\n<p>鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<a id=\"more\"></a></p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><h3 id=\"1-注册ngrok账号\"><a href=\"#1-注册ngrok账号\" class=\"headerlink\" title=\"1. 注册ngrok账号\"></a>1. <a href=\"https://dashboard.ngrok.com/user/signup\" target=\"_blank\" rel=\"noopener\">注册ngrok账号</a></h3><p>注册成功后拿到授权码<code>auth token</code>，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；</p>\n<h3 id=\"2-下载ngrok，解压；\"><a href=\"#2-下载ngrok，解压；\" class=\"headerlink\" title=\"2. 下载ngrok，解压；\"></a>2. <a href=\"https://ngrok.com/download\" target=\"_blank\" rel=\"noopener\">下载ngrok</a>，解压；</h3><h3 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h3><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>让本地的‘<a href=\"http://127.0.0.1:80’\" target=\"_blank\" rel=\"noopener\">http://127.0.0.1:80’</a> 可以让外网访问<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ngrok</span> <span class=\"string\">http</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure></p>\n<p>ngrok会随机分配一个二级域名，可直接通过外网可通过<code>http://xxxx.tunnel.mobi</code>来访问本机的<code>http://127.0.0.1:80</code>网站</p>\n<h5 id=\"方式二：使用配置文件启动\"><a href=\"#方式二：使用配置文件启动\" class=\"headerlink\" title=\"方式二：使用配置文件启动:\"></a>方式二：使用配置文件启动:</h5><p>在<code>ngrok.exe</code>目录下执行命令（不带尖括号），生成配置文件（配置文件会在<code>C:\\Users\\用户名/.ngrok2/ngrok.yml</code>下「windows」）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok authtoken &lt;you authtoken&gt;</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authtoken:&lt;you authtoken&gt;</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  # 自定义隧道名 </span><br><span class=\"line\">  iblogc:</span><br><span class=\"line\">    #本地服务端口 </span><br><span class=\"line\">    addr: 4000</span><br><span class=\"line\">    # 用于http/https里的身份认证</span><br><span class=\"line\">    #auth: &quot;username:password&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    # 二级域名，如果运行提示重复，换一个就行</span><br><span class=\"line\">    subdomain: iblogc</span><br><span class=\"line\">  django:</span><br><span class=\"line\">    addr: 8000</span><br><span class=\"line\">    auth: &quot;abc:123456&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: django</span><br><span class=\"line\">  weixin:</span><br><span class=\"line\">    addr: 80</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: weixin</span><br></pre></td></tr></table></figure></p>\n<p>现在执行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc</span><br></pre></td></tr></table></figure></p>\n<p>试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。<br><code>http://iblogc.ngrok.io</code> <code>https://iblogc.ngrok.io</code> 协议均可以访问。<br>ngrok-start-iblogc.png)</p>\n<p>你也可以同时启动两个tunnel<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc django weixin</span><br></pre></td></tr></table></figure></p>\n<p>ngrok-start-iblogc-django-weixin.png)</p>\n<p>因为我的django tunnel配置文件里添加了<code>auth</code>配置所以访问<code>http://django.ngrok.io</code>需要输入用户名密码。<br>ngrok-auth.png)</p>\n<p>假设<code>weixin</code>就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用<code>weixin.ngrok.com</code>进行配置了，所有发向此域名的请求都会转发到你的本地<code>127.0.0.1:80</code>上。</p>\n<h3 id=\"4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\"><a href=\"#4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\" class=\"headerlink\" title=\"4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开http://127.0.0.1:4040查看详细信息\"></a>4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开<code>http://127.0.0.1:4040</code>查看详细信息</h3><p>nrok-web-interface.png)</p>\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>官方文档：<a href=\"https://ngrok.com/docs\" target=\"_blank\" rel=\"noopener\">https://ngrok.com/docs</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"微信公众号","path":"api/tags/微信公众号.json"},{"name":"端口","path":"api/tags/端口.json"},{"name":"ngrok","path":"api/tags/ngrok.json"},{"name":"内网穿透","path":"api/tags/内网穿透.json"}]},{"title":"使用alembic进行数据库版本管理","slug":"使用alembic进行数据库版本管理","date":"2018-09-13T10:53:14.000Z","updated":"2020-03-04T05:22:29.004Z","comments":true,"path":"api/articles/使用alembic进行数据库版本管理.json","excerpt":"转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改前言随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","cover":null,"content":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"}]},{"title":"使用Virtualenv创建独立的Python运行环境","slug":"使用virtualenv创建独立的python运行环境","date":"2015-01-01T12:39:14.000Z","updated":"2020-08-15T03:02:19.564Z","comments":true,"path":"api/articles/使用virtualenv创建独立的python运行环境.json","excerpt":"准备工作python环境pip安装1<br>pip install virtualenv<br>或<br>1<br>pip install https://github.com/pypa/virtualenv/tarball/develop<br>","cover":null,"content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>python环境</li>\n<li>pip</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pypa/virtualenv/tarball/develop</span><br></pre></td></tr></table></figure></p>\n<a id=\"more\"></a>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv myVE</span><br></pre></td></tr></table></figure>\n<p>指定python解释器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p PYTHON_EXE, --python=PYTHON_EXE</span><br></pre></td></tr></table></figure>\n<p><em>创建虚拟环境时默认会自动安装setuptools和pip</em></p>\n<p>不安装setuptool</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--setuptools</span><br></pre></td></tr></table></figure>\n<p>不安装pip</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--pip</span><br></pre></td></tr></table></figure>\n<p><em>更多Options请参考<a href=\"https://virtualenv.pypa.io/en/latest/reference.html\" target=\"_blank\" rel=\"noopener\">官方文档</a></em> </p>\n<h2 id=\"启动虚拟环境\"><a href=\"#启动虚拟环境\" class=\"headerlink\" title=\"启动虚拟环境\"></a>启动虚拟环境</h2><p> Mac OS</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">scripts\\activate</span><br></pre></td></tr></table></figure>\n<p>启动成功后可以在开头显示”(myVE)”，说明已经进入刚刚创建的虚拟环境了</p>\n<h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<h2 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ol>\n<li>将所有虚拟环境整合在一个目录下</li>\n<li>管理（新增，删除，复制）虚拟环境</li>\n<li>切换虚拟环境</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<p>Windows下还需额外安装virtualenvwrapper-win<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure></p>\n<p>ubuntu需要将下面这句加入到<code>~/.bashrc</code>里面<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then</span><br><span class=\"line\">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure></p>\n<p>加入后需要重启才能生效，如果想要立即生效，输入命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><em>部分命令在windows下无效</em></p>\n<ul>\n<li><code>workon myEnv</code>: 切换虚拟环境</li>\n<li><code>mkvirtualenv</code>: 新建工作环境</li>\n<li><code>rmvirtualenv</code>: 删除工作环境</li>\n<li><code>cdproject</code>: 切换到工程目录</li>\n<li><code>workon</code>/<code>lsvirtualenv</code>: 列出所有虚拟环境</li>\n<li><code>deactivate</code>: 退出虚拟环境</li>\n<li><code>cpvirtualenv [source] [dest]</code> 复制一份虚拟环境。</li>\n<li><code>cdvirtualenv [subdir]</code> 把当前工作目录设置为所在的环境目录。</li>\n<li><code>cdsitepackages [subdir]</code> 把当前工作目录设置为所在环境的sitepackages路径。</li>\n<li><code>add2virtualenv [dir] [dir]</code> 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。</li>\n<li><code>toggleglobalsitepackages -q</code> 控制当前的环境是否使用全局的sitepackages目录。</li>\n</ul>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://virtualenv.pypa.io/en/latest/\" target=\"_blank\" rel=\"noopener\">https://virtualenv.pypa.io/en/latest/</a></p>\n<p><a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/\" target=\"_blank\" rel=\"noopener\">http://virtualenvwrapper.readthedocs.org/en/latest/</a></p>\n<p><a href=\"https://github.com/davidmarble/virtualenvwrapper-win\" target=\"_blank\" rel=\"noopener\">https://github.com/davidmarble/virtualenvwrapper-win</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Virtualenv","path":"api/tags/Virtualenv.json"},{"name":"virtualenvwrapper","path":"api/tags/virtualenvwrapper.json"},{"name":"独立","path":"api/tags/独立.json"},{"name":"虚拟环境","path":"api/tags/虚拟环境.json"},{"name":"requirements","path":"api/tags/requirements.json"}]},{"title":"内网穿透工具frp客户端自定义子域名访问配置","slug":"内网穿透工具frp客户端自定义子域名访问配置","date":"2017-08-16T08:36:56.000Z","updated":"2019-04-09T03:26:20.218Z","comments":true,"path":"api/articles/内网穿透工具frp客户端自定义子域名访问配置.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>A: 公网电脑<br>B: 内网电脑</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>从<a href=\"[Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases\">releases</a>)下载系统对应的压缩包，Mac可使用<code>darwin amd64</code>的包，在公网电脑和本地电脑各放一份。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>公网电脑上<code>frps.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 用于接收 frpc 连接的端口</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"># 通过此端口访问http服务</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\"># 日志文件输出位置</span><br><span class=\"line\">log_file = ./frps.log</span><br><span class=\"line\"># 日志等级</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\"># 域名</span><br><span class=\"line\">subdomain_host = example.com</span><br><span class=\"line\"># frp管理后台端口</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># frp管理后台用户名</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\"># frp管理后台密码</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></p>\n<p>本地电脑上<code>frpc.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 公网电脑IP</span><br><span class=\"line\">server_addr = 111.111.111.111</span><br><span class=\"line\"># frp连接的端口</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地http服务端口</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 子域名前缀, 子域名前缀里不要使用下划线&quot;_&quot;，不然可能会出现莫名其妙的400错误可以用&quot;-&quot;代替。</span><br><span class=\"line\">subdomain = iblogc</span><br></pre></td></tr></table></figure></p>\n<p>配置域名<code>example.com</code>的A记录的泛解析<br><code>*.example.com</code>指向公网电脑IP<code>111.111.111.111</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>在内网电脑B上<code>8080</code>端口运行<code>http</code>服务</li>\n<li><p>在公网电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2><p>在任何一台能联网的机器上访问 <code>http://iblogc.example.com:8080</code> 即可访问内网电脑B上的http服务。<br>在任务一台能联网的机器上访问<code>111.111.111.111:7500</code>即可访问frp的管理后台。</p>\n<h2 id=\"frps服务端与nginx可共用80端口\"><a href=\"#frps服务端与nginx可共用80端口\" class=\"headerlink\" title=\"frps服务端与nginx可共用80端口\"></a>frps服务端与nginx可共用80端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen 80;</span><br><span class=\"line\">       server_name *.example.com;</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">           proxy_redirect http://$host/ http://$http_host/;</span><br><span class=\"line\">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">           proxy_set_header Host $host;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"内网穿透","path":"api/tags/内网穿透.json"}]},{"title":"在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django","slug":"在centos7使用mysql-nginx-gunicorn+supervisor部署django","date":"2016-12-08T15:19:59.000Z","updated":"2020-08-15T03:02:43.754Z","comments":true,"path":"api/articles/在centos7使用mysql-nginx-gunicorn+supervisor部署django.json","excerpt":"本文记录下在CentOS下部署Django项目的步骤。<br>","cover":null,"content":"<p>本文记录下在CentOS下部署Django项目的步骤。<br><a id=\"more\"></a></p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"安装mysql和mysql-devel\"><a href=\"#安装mysql和mysql-devel\" class=\"headerlink\" title=\"安装mysql和mysql-devel\"></a>安装mysql和mysql-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql-server\"><a href=\"#安装mysql-server\" class=\"headerlink\" title=\"安装mysql-server\"></a>安装mysql-server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置root密码\"><a href=\"#设置root密码\" class=\"headerlink\" title=\"设置root密码\"></a>设置root密码</h3><p>初次安装mysql需要设置root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br><span class=\"line\">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>在<code>/etc/my.cnf</code>文件中[mysql]和[mysql]中添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>字符编码保持和<code>/usr/share/mysql/charsets/Index.xml</code>中的一致。</p>\n<h3 id=\"远程连接设置\"><a href=\"#远程连接设置\" class=\"headerlink\" title=\"远程连接设置\"></a>远程连接设置</h3><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>如果是新用户而不是root，则要先新建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以进行远程连接了。</p>\n<h2 id=\"Virtualenv\"><a href=\"#Virtualenv\" class=\"headerlink\" title=\"Virtualenv\"></a>Virtualenv</h2><p>安装epel扩展源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure></p>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure></p>\n<p>安装virtualenv和virtualenvwrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>编辑<code>~/.bashrc</code>文件，结尾添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/.virtualenvs</span><br><span class=\"line\">source /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后执行以下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>创建env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv explame</span><br></pre></td></tr></table></figure></p>\n<p>使用pip安装项目需要的包</p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>在项目目录下新建<code>nginx_wsgi.py</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx_wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>添加如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import site</span><br><span class=\"line\">import os</span><br><span class=\"line\"> </span><br><span class=\"line\"># site-packages</span><br><span class=\"line\">site.addsitedir(&apos;/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages&apos;)</span><br><span class=\"line\"># Add the  project  directory</span><br><span class=\"line\"># sys.path.append(&apos;/home/nginxuser/nginxuser&apos;)</span><br><span class=\"line\">PROJECT_DIR = &apos;/home/nginxuser/projects/example&apos;</span><br><span class=\"line\">sys.path.insert(0, PROJECT_DIR)</span><br><span class=\"line\">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;example.settings.prod&apos;</span><br><span class=\"line\"># Activate your virtual env</span><br><span class=\"line\">activate_env = os.path.expanduser(&quot;/home/nginxuser/.virtualenvs/example/bin/activate_this.py&quot;)</span><br><span class=\"line\">execfile(activate_env, dict(__file__=activate_env))</span><br><span class=\"line\"> </span><br><span class=\"line\"># after activite env</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\"> </span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否有错\"><a href=\"#检查配置是否有错\" class=\"headerlink\" title=\"检查配置是否有错\"></a>检查配置是否有错</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd nginxuser</span><br><span class=\"line\">passwd nginxuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改nginx主配置\"><a href=\"#修改nginx主配置\" class=\"headerlink\" title=\"修改nginx主配置\"></a>修改nginx主配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>非注释首行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginxuser</span><br></pre></td></tr></table></figure></p>\n<p>不然可能会出现网站静态文件访问报403问题。</p>\n<h3 id=\"新建网站运行配置\"><a href=\"#新建网站运行配置\" class=\"headerlink\" title=\"新建网站运行配置\"></a>新建网站运行配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/example.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;                                                               </span><br><span class=\"line\">    listen      80;                                                    </span><br><span class=\"line\">    server_name example.com;                            </span><br><span class=\"line\">    charset     utf-8;                                                 </span><br><span class=\"line\">    client_max_body_size 75M;                                          </span><br><span class=\"line\">    access_log /home/nginxuser/projects/example/nginxlogs/access.log;</span><br><span class=\"line\">    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          </span><br><span class=\"line\"> </span><br><span class=\"line\">    location /static &#123;                                                 </span><br><span class=\"line\">        alias /home/nginxuser/projects/explame/static;                </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;                                                       </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8000;                              </span><br><span class=\"line\">        proxy_set_header Host $host;                                   </span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;                       </span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\">&#125;                                                                       jk</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gunicorn</span><br></pre></td></tr></table></figure>\n<p>项目根目录下添加gunicorn运行配置文件gunicorn.conf.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">bind = &quot;127.0.0.1:8000&quot;</span><br><span class=\"line\">workers = 2</span><br><span class=\"line\">errorlog = &quot;/home/nginxuser/example/gunicorn.error.log&quot;</span><br><span class=\"line\">#loglevel = &quot;debug&quot;</span><br><span class=\"line\">proc_name = &quot;gunicorn_example&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py</span><br></pre></td></tr></table></figure>\n<p>后台运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&amp;</span><br></pre></td></tr></table></figure></p>\n<p>如果运行报错先使用以下命令检查下nginx配置是否有错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建管理进程配置文件\"><a href=\"#创建管理进程配置文件\" class=\"headerlink\" title=\"创建管理进程配置文件\"></a>创建管理进程配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisord.d/example.ini</span><br></pre></td></tr></table></figure>\n<p>（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:example]</span><br><span class=\"line\">directory = /home/nginxuser/projects/example ; 程序的启动目录</span><br><span class=\"line\">command = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</span><br><span class=\"line\">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">user = nginx         ; 用哪个用户启动</span><br><span class=\"line\">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class=\"line\">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure></p>\n<p><strong>冒号后面要有空格</strong></p>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>使用<code>-c</code>指定配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时遇到以下报错信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</span><br><span class=\"line\">For help, use /use/bin/supervisord -h</span><br></pre></td></tr></table></figure></p>\n<p>可以使用以下命令解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /var/run/supervisor/supervisor.sock</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令行客户端工具supervisorctl\"><a href=\"#命令行客户端工具supervisorctl\" class=\"headerlink\" title=\"命令行客户端工具supervisorctl\"></a>命令行客户端工具supervisorctl</h3><p>启动时需要使用和<code>supervisorctl</code>使用一样的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动后进入<code>supervisorctl</code>的shell，在此shell里可以执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status # 查看程序状态</span><br><span class=\"line\">start example # 启动example程序</span><br><span class=\"line\">stop example # 关闭example程序</span><br><span class=\"line\">restart example # 重启example程序</span><br><span class=\"line\">reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<p>也可以不进shell执行以上命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # 查看程序状态</span><br><span class=\"line\">supervisorctl start example # 启动example程序</span><br><span class=\"line\">supervisorctl stop example # 关闭example程序</span><br><span class=\"line\">supervisorctl restart example # 重启example程序</span><br><span class=\"line\">supervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">supervisorctl update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开启web管理界面\"><a href=\"#开启web管理界面\" class=\"headerlink\" title=\"开启web管理界面\"></a>开启web管理界面</h3><p>如果要开启web管理界面，打开<code>/etc/supervisord.conf</code>把下面几行取消注释即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">:username=user              ; (default is no username (open server))</span><br><span class=\"line\">:password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"centOS","path":"api/tags/centOS.json"},{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"Gunicorn","path":"api/tags/Gunicorn.json"},{"name":"MySQL","path":"api/tags/MySQL.json"},{"name":"Supervisor","path":"api/tags/Supervisor.json"}]},{"title":"在macOS上更改Jenkins的默认用户，解决权限问题","slug":"在macos上更改jenkins默认用户解决权限问题","date":"2017-08-24T06:29:14.000Z","updated":"2020-08-15T03:08:14.874Z","comments":true,"path":"api/articles/在macos上更改jenkins默认用户解决权限问题.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>在MacOS上使用<code>dmg</code>安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为<code>jenkins</code>的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止Jenkins</span></span><br><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改Group和User</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &lt;用户名&gt;填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/&lt;用户名&gt; +wq org.jenkins-ci.plist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可能相应文件夹的权限</span></span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /Users/Shared/Jenkins/</span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /var/log/jenkins/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Jenkins</span></span><br><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"macOS","path":"api/tags/macOS.json"},{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"权限","path":"api/tags/权限.json"},{"name":"用户","path":"api/tags/用户.json"}]},{"title":"Git命令使用指南","slug":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","updated":"2020-01-17T07:55:59.340Z","comments":true,"path":"api/articles/Git命令使用指南.json","excerpt":" [Figure] ","cover":"/media/Git工作流图示.jpg","content":"<p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br><a id=\"more\"></a></p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img alt=\"工作流图示\" data-src=\"/media/git-reset_drbfhd.png\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name &#39;Your Name&#39;</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage &quot;reset HEAD&quot;</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img alt=\"status示例图\" data-src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\" target=\"_blank\" rel=\"noopener\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=&quot;%N&quot;\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\" target=\"_blank\" rel=\"noopener\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\" target=\"_blank\" rel=\"noopener\">git - 简易指南</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Git","path":"api/tags/Git.json"}]},{"title":"代码托管平台码云(Gitee)到Gitea迁移记","slug":"Gitee2Gitea","date":"2020-03-01T11:42:34.000Z","updated":"2020-03-24T06:15:27.492Z","comments":true,"path":"api/articles/Gitee2Gitea.json","excerpt":"团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。","cover":null,"content":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>\n<a id=\"more\"></a>\n<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\" target=\"_blank\" rel=\"noopener\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\" target=\"_blank\" rel=\"noopener\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080;</span><br><span class=\"line\">    keepalive 2000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80;</span><br><span class=\"line\">    server_name  git.i.example.com;</span><br><span class=\"line\">    client_max_body_size 1024M;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/;</span><br><span class=\"line\">        proxy_set_header Host $host:$server_port;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\" target=\"_blank\" rel=\"noopener\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta\">\t\t#</span><span class=\"bash\"> Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"&#123; \\\"auth_password\\\": \\\"NDY2&amp;F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true&#125;\";</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e 's/\\r//g');</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST \"http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;\" -H \"accept: application/json\"</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除'.bak'</span><br><span class=\"line\">sed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\" target=\"_blank\" rel=\"noopener\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">\"&lt;your access token&gt;\"</span></span><br><span class=\"line\">repos_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;'</span></span><br><span class=\"line\">branches_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;'</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">'http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">repos</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"keyword\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.format(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">'data'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = len(r.json()[<span class=\"string\">'data'</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"拉取项目所有分支代码到本地\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sync_repo</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        print(<span class=\"string\">'克隆第 &#123;&#125; 个仓库 &#123;&#125; '</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">\"git clone &#123;&#125;\"</span>.format(repo[<span class=\"string\">'ssh_url'</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        print(<span class=\"string\">'同步 &#123;&#125; 仓库所有分支'</span>.format(repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">'git fetch --all'</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == 'Windows':</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'full_name'</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">'git branch --track &#123;&#125; origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">'git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;'</span>.format(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all\")</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(\"git branch -r | grep -v '\\-&gt;' | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done\")</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">\"\"\"设置项目部署公钥\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">set_pub_key</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">\"key\"</span>: <span class=\"string\">\"ssh-rsa aabbcc\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"read_only\"</span>: <span class=\"keyword\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">\"title\"</span>: <span class=\"string\">\"SandBox\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        print(<span class=\"string\">'===&#123;&#125;. &#123;&#125;==='</span>.format(repo_index, repo[<span class=\"string\">'name'</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.format(</span><br><span class=\"line\">            repo[<span class=\"string\">'owner'</span>][<span class=\"string\">'username'</span>], repo[<span class=\"string\">'name'</span>], access_token), data=body)</span><br><span class=\"line\">        print(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\" target=\"_blank\" rel=\"noopener\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Python","path":"api/tags/Python.json"},{"name":"Git","path":"api/tags/Git.json"},{"name":"Gitee","path":"api/tags/Gitee.json"},{"name":"GitLab","path":"api/tags/GitLab.json"},{"name":"Gite","path":"api/tags/Gite.json"},{"name":"Gogs","path":"api/tags/Gogs.json"},{"name":"迁移","path":"api/tags/迁移.json"},{"name":"代码","path":"api/tags/代码.json"}]},{"title":"Django 1.9文档阅读笔记","slug":"django1-9文档阅读笔记","date":"2016-04-04T07:27:20.000Z","updated":"2020-08-15T03:05:48.007Z","comments":true,"path":"api/articles/django1-9文档阅读笔记.json","excerpt":"<br><br>","cover":"/media/django-commands.png","content":"<p><br><br><a id=\"more\"></a></p>\n<!--more-->\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-04-04 初稿<br>2016-06-30 更新内容</p>\n<h2 id=\"模型\"><a href=\"#模型\" class=\"headerlink\" title=\"模型\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/models.html\" target=\"_blank\" rel=\"noopener\">模型</a></h2><p><a href=\"http://python.usyiyi.cn/django_182/ref/models/meta.html#model-meta-field-api\" target=\"_blank\" rel=\"noopener\">Model _meta API</a></p>\n<p>限制普通字段的选择范围<br><code>choices</code>，value-text，<br>显示<code>get_foo_display()</code></p>\n<p>模型继承</p>\n<ol>\n<li>抽象基类<ul>\n<li>默认继承元类</li>\n</ul>\n</li>\n<li>多表继承<ul>\n<li>一般情况不继承元类</li>\n</ul>\n</li>\n<li>代理模型</li>\n</ol>\n<p>多重继承主要用于<code>mix-in</code>类</p>\n<p>多表继承时使用<code>parent_link=True</code>显示指定OneToOne字段</p>\n<h2 id=\"模型字段参考\"><a href=\"#模型字段参考\" class=\"headerlink\" title=\"模型字段参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/fields.html#lazy-relationships\" target=\"_blank\" rel=\"noopener\">模型字段参考</a></h2><p>与尚未定义的模型关联使用模型名字（字符串）而非本身（类）</p>\n<p>关联自己使用<code>self</code></p>\n<p><code>related_name</code> <code>relate_query_name</code></p>\n<p>外键关联到特定字段<br><code>to_field</code></p>\n<p>限制外键的选择范围（可以是一个字典、一个Q 对象或者一个返回字典或Q对象的可调用对象）<br><code>limit_choices_to</code></p>\n<p>外键关联对象删除行为<br><code>on_delete</code></p>\n<p>1.8以后保存模型时，未保存的外键对象将被忽略，除非设置<code>allow_unsaved_instance_assignment=True</code></p>\n<p>关联自身的多对多关系默认对称，取消对称设置<code>symmetrical=False</code></p>\n<p><code>ImageField</code>中的<code>height_field</code>和<code>width_field</code>是用来存储存入图片的高度和宽度值的</p>\n<p>##<a href=\"http://python.usyiyi.cn/django/topics/db/queries.html#spanning-multi-valued-relationships\" target=\"_blank\" rel=\"noopener\">执行查询</a></p>\n<p><a href=\"http://python.usyiyi.cn/django/howto/custom-lookups.html\" target=\"_blank\" rel=\"noopener\">可自定义查询（高级查找）</a><br><code>exclude</code>多条件查询时是用or关系而不是and关系</p>\n<p><code>F()</code><br>用于模型内部字段间的比较支持加法、减法、乘法、除法、取模以及幂计算等算术操作<br>支持.bitand() 和.bitor()位操作，<code>update()</code>也可以使用<code>F()</code>但有限制（在update 中你不可以使用F() 对象引入join —— 你只可以引用正在更新的模型的字段）</p>\n<p>查询集缓存<br>当只对查询集的部分进行求值时会检查缓存， 但是如果这个部分不在缓存中，那么接下来查询返回的记录都将不会被缓存。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.headline <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Evaluate the query set.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print([p.pub_date <span class=\"keyword\">for</span> p <span class=\"keyword\">in</span> queryset]) <span class=\"comment\"># Re-use the cache from the evaluation.</span></span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>queryset = Entry.objects.all()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">print</span> queryset[<span class=\"number\">5</span>] <span class=\"comment\"># Queries the database again</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; queryset = Entry.objects.all()</span><br><span class=\"line\">&gt;&gt;&gt; [entry for entry in queryset] # Queries the database</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br><span class=\"line\">&gt;&gt;&gt; print queryset[5] # Uses cache</span><br></pre></td></tr></table></figure>\n<p><code>Q()</code><br>可使用Q对象进行复杂查询</p>\n<p>判断两相模型实例是否相同，直接使用<code>==</code>比较即可</p>\n<p>默认批量删除对象时不会调用实例的<code>delete</code>方法</p>\n<p>拷贝实例，把<code>pk</code>设置为<code>None</code>再<code>save</code>即可（如果是继承的，则<code>pk</code>和<code>id</code>都需要设置为<code>None</code>）</p>\n<p><code>update()</code>方法也不会调用模型的<code>save()</code>方法，不会发出<code>pre_save</code>和<code>post_save</code>信号，字段的<code>auto_now</code>也不会起作用</p>\n<p>一对多关联对象访问会缓存<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>e = Entry.objects.get(id=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Hits the database to retrieve the associated Blog.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(e.blog)  <span class=\"comment\"># Doesn't hit the database; uses cached version.</span></span><br></pre></td></tr></table></figure></p>\n<p>自定义反向管理器1.7+<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Entry</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\">#...</span></span><br><span class=\"line\">    objects = models.Manager()  <span class=\"comment\"># Default Manager</span></span><br><span class=\"line\">    entries = EntryManager()    <span class=\"comment\"># Custom Manager</span></span><br><span class=\"line\"> </span><br><span class=\"line\">b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\">b.entry_set(manager=<span class=\"string\">'entries'</span>).all()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"查询集API-参考\"><a href=\"#查询集API-参考\" class=\"headerlink\" title=\"查询集API 参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/querysets.html\" target=\"_blank\" rel=\"noopener\">查询集API 参考</a></h2><h2 id=\"聚合\"><a href=\"#聚合\" class=\"headerlink\" title=\"聚合\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/aggregation.html\" target=\"_blank\" rel=\"noopener\">聚合</a></h2><p>一次创建多条数据（只有一条sql）<br><code>bulk_create</code></p>\n<p>根据提供的一组<code>pk</code>查询出所有对应的对象<br><code>in_bulk</code></p>\n<p>在查作者列表时要查每个作者有几篇博文<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Count</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"comment\"># authors[0]作者的博文数</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].blog__count</span><br><span class=\"line\"><span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors = Author.object.all().annotate(number_of_blog=Count(<span class=\"string\">'blog'</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>authors[<span class=\"number\">0</span>].number_of_blog</span><br><span class=\"line\"><span class=\"number\">3</span></span><br></pre></td></tr></table></figure></p>\n<p>算出所有作者的年龄总合（不需要其它数据）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ageAuthor.objects.all().aggregate(Sum(<span class=\"string\">'age'</span>))</span><br><span class=\"line\">&#123;<span class=\"string\">'age__sum'</span>: <span class=\"number\">26</span>&#125;</span><br></pre></td></tr></table></figure></p>\n<p><del><code>annotate</code>和</del><code>aggregate</code>都可写入多个注解表达式<br><code>annotate</code>和<code>aggregate</code>可聚合关联对象</p>\n<p>对注解进行过滤<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查询出作者数大于1的书本</span></span><br><span class=\"line\"><span class=\"comment\"># 只有一条sql</span></span><br><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).filter(num_authors__gt=<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure></p>\n<p>但顺序不一样，结果也不同，如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Publisher.objects.annotate(num_books=Count(<span class=\"string\">'book'</span>)).filter(book__rating__gt=<span class=\"number\">3.0</span>)</span><br><span class=\"line\">Publisher.objects.filter(book__rating__gt=<span class=\"number\">3.0</span>).annotate(num_books=Count(<span class=\"string\">'book'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>对注解项进行排序<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Book.objects.annotate(num_authors=Count(<span class=\"string\">'authors'</span>)).order_by(<span class=\"string\">'num_authors'</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>values()</code>使用注解时要小心，如果<code>values()</code>在注解之前，会对结果进行分组，注解会作用在分组上而不是整个查询集上</p>\n<blockquote>\n<p>与默认排序交换或order_by()¶</p>\n</blockquote>\n<blockquote>\n<p>在查询集中的order_by() 部分(或是在模型中默认定义的排序项) 会在选择输出数据时被用到，即使这些字段没有在 values() 调用中被指定。这些额外的字段可以将相似的数据行分在一起，也可以让相同的数据行相分离。在做计数时，  就会表现地格外明显：</p>\n</blockquote>\n<blockquote>\n<p>通过例子中的方法，假设有一个这样的模型：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Item</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">10</span>)</span><br><span class=\"line\">    data = models.IntegerField() </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        ordering = [<span class=\"string\">\"name\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>关键的部分就是在模型默认排序项中设置的name字段。如果你想知道每个非重复的data值出现的次数，可以这样写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Warning: not quite correct!</span></span><br><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>))</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这部分代码想通过使用它们公共的 data 值来分组 Item对象，然后在每个分组中得到  id 值的总数。但是上面那样做是行不通的。这是因为默认排序项中的 name也是一个分组项，所以这个查询会根据非重复的 (data, name) 进行分组，而这并不是你本来想要的结果。所以，你应该这样改写：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Item.objects.values(<span class=\"string\">\"data\"</span>).annotate(Count(<span class=\"string\">\"id\"</span>)).order_by()</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>…这样就清空了查询中的所有排序项。 你也可以在其中使用 data ，这样并不会有副作用，这是因为查询分组中只有这么一个角色了。</p>\n</blockquote>\n<blockquote>\n<p>这个行为与查询集文档中提到的 distinct() 一样，而且生成规则也一样：一般情况下，你不想在结果中由额外的字段扮演这个角色，那就清空排序项，或是至少保证它仅能访问 values()中的字段。</p>\n</blockquote>\n<h2 id=\"静态文件\"><a href=\"#静态文件\" class=\"headerlink\" title=\"静态文件\"></a>静态文件</h2><p><a href=\"http://python.usyiyi.cn/django/intro/tutorial06.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/intro/tutorial06.html</a><br><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">http://python.usyiyi.cn/django/ref/templates/builtins.html</a> </p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% load static %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static user_stylesheet %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% static 'polls/style.css' %&#125;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;% get_static_prefix %&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% get_static_prefix as STATIC_PREFIX %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; STATIC_PREFIX &#125;&#125;pools/style.css\"</span> /&gt;</span></span><br><span class=\"line\">&#123;% static \"images/hi.jpg\" as myphoto %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; myphoto &#125;&#125;\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">img</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>还有<code>get_media_prefix</code></p>\n<h2 id=\"模型实例参考\"><a href=\"#模型实例参考\" class=\"headerlink\" title=\"模型实例参考\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/instances.html#django.db.models.Model\" target=\"_blank\" rel=\"noopener\">模型实例参考</a></h2><p>从数据库中重新加载值<br><code>Model.refresh_from_db(using=None, fields=None, **kwargs)</code></p>\n<p>返回模型中当前所有延迟字段的属性名称<br><code>Model.get_deferred_fields()</code></p>\n<p>验证对象</p>\n<blockquote>\n<p>字段的基本验证会最先跑，但不管前面运行是否通过，对于每个字段，如果Field.clean() 方法抛出 ValidationError，那么将不会调用该字段对应的clean_<fieldname>()方法。 但是，剩余的字段的验证方法仍然会执行。<br>先跑<code>form</code>里验证，再跑<code>modle</code>验证<br>先跑验证器，再跑<code>clean</code><br>先跑单个字段验证，再跑整体验证<br><code>Model.clean_field()</code>会覆盖<code>Model</code>里所有字段的验证器，但不会对<code>Form</code>里的验证器产生影响</fieldname></p>\n</blockquote>\n<p>验证模型的字段<code>Model.clean_fields(exclude=None)</code><br>验证模型的完整性<code>Model.clean()</code><br>验证模型的唯一性<code>Model.validate_unique(exclude=None)</code><br>调用<code>full_clean()</code>时，上面三个方法都会执行（执行顺序即上面的书写顺序），<code>ModelForm</code>的<code>is_valid()</code>也会执行上所有验证<br><code>Model.full_clean(exclude=None, validate_unique=True)</code><br> <code>save()</code>时，<code>full_clean()</code>不会被调用，如果想验证数据，可手动调用</p>\n<p><code>Model.clean()</code>时，引发特定字段的异常<br>使用一个字典实例化<code>ValidationError</code>即可或使用<code>add_error(field, msg)</code>方法</p>\n<p>在数据库字段值的基础上进行简单的算法操作，应该尽量使用<code>F()</code>表达式，避免问题竞态条件</p>\n<blockquote>\n<p>指定要保存的字段</p>\n</blockquote>\n<blockquote>\n<p>如果传递给save() 的update_fields 关键字参数一个字段名称列表，那么将只有该列表中的字段会被更新。如果你想更新对象的一个或几个字段，这可能是你想要的。不让模型的所有字段都更新将会带来一些轻微的性能提升。例如：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">product.name = <span class=\"string\">'Name changed again'</span></span><br><span class=\"line\">product.save(update_fields=[<span class=\"string\">'name'</span>])</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>update_fields</code> 参数可以是任何包含字符串的可迭代对象。空的<code>update_fields</code>可迭代对象将会忽略保存。如果为<code>None</code>值，将执行所有字段上的更新。</p>\n</blockquote>\n<blockquote>\n<p>指定<code>update_fields</code>将强制使用更新操作。</p>\n</blockquote>\n<blockquote>\n<p>当保存通过延迟模型加载（<code>only()</code> 或<code>defer()</code>）进行访问的模型时，只有从数据库中加载的字段才会得到更新。这种情况下，有个自动的<code>update_fields</code>。如果你赋值或者改变延迟字段的值，该字段将会添加到更新的字段中。</p>\n</blockquote>\n<p>new in 1.9<br>使用<code>Model.delete()</code>删除多表继承的子表数据时，使用<code></code>keep_parents=True<code>可以保留上级数据，默认为</code>False`<br>返回值为删除数据的条数</p>\n<p><code>DateField</code>和<code>DateTimeField</code>字段如果<code>null=False</code>则支持下面两个方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Model.get_next_by_FOO(**kwargs)¶ </span><br><span class=\"line\">Model.get_previous_by_FOO(**kwargs)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"管理器\"><a href=\"#管理器\" class=\"headerlink\" title=\"管理器\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html\" target=\"_blank\" rel=\"noopener\">管理器</a></h2><p>django遇到的第一个管理器为默认管理器</p>\n<p>如果需要访问关联对象调用关联对象的默认管理器，需要在管理器中加<code>use_for_related_fields=True</code>，不然会调用朴素管理器<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DefaultManager</span><span class=\"params\">(models.Manager)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        queryset = super(DefaultManager, self).get_quertset().filter(is_delete=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> queryset</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Author</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Post</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    author = models.ForeignKey(Author)</span><br><span class=\"line\">    title = models.CharField(max_length=<span class=\"number\">100</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br><span class=\"line\">    is_delete = models.BooleanField()</span><br><span class=\"line\">    objects = DefaultManager()</span><br><span class=\"line\"> </span><br><span class=\"line\"> </span><br><span class=\"line\">author = Author.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\">post = Post.objects.get(pk=<span class=\"number\">2</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># 调用DefaultManager管理器</span></span><br><span class=\"line\">author.post_set.all()</span><br><span class=\"line\"><span class=\"comment\"># 调用朴素管理器，如果要调用DefaultManager管理器，需要设置DefaultManager管理器的类变量use_for_related_fields=True</span></span><br><span class=\"line\">post.author</span><br></pre></td></tr></table></figure></p>\n<p><em>注：朴素管理器里找不到的方法会在默认管理器里查找</em></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/db/managers.html#calling-custom-queryset-methods-from-the-manager\" target=\"_blank\" rel=\"noopener\">从Manager中调用自定义的QuerySet</a></p>\n<h2 id=\"进行原始的SQL查询\"><a href=\"#进行原始的SQL查询\" class=\"headerlink\" title=\"进行原始的SQL查询\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/sql.html\" target=\"_blank\" rel=\"noopener\">进行原始的SQL查询</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manager.raw(raw_query, params=<span class=\"keyword\">None</span>, translations=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>django.db.connection对象提供了常规数据库连接的方式。为了使用数据库连接，先要调用connection.cursor()方法来获取一个游标对象之后，调用cursor.execute(sql, [params])来执行sql语句，调用cursor.fetchone()或者cursor.fetchall()来返回结果行。</p>\n</blockquote>\n<h2 id=\"数据库事务\"><a href=\"#数据库事务\" class=\"headerlink\" title=\"数据库事务\"></a><a href=\"http://python.usyiyi.cn/django/topics/db/transactions.html\" target=\"_blank\" rel=\"noopener\">数据库事务</a></h2><p>详细笔记见django1.8事务.md</p>\n<p>将每个HTTP请求封装在一个数据库事务中<br>settings中设置<code>ATOMIC_REQUESTS=True</code></p>\n<p>单独给一个方法加上数据库事务控制使用<code>atomic</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@transaction.atomic</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">    do_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> transaction</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">viewfunc</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># This code executes in autocommit mode (Django's default).</span></span><br><span class=\"line\">    do_stuff()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">with</span> transaction.atomic():</span><br><span class=\"line\">        <span class=\"comment\"># This code executes inside a transaction.</span></span><br><span class=\"line\">        do_more_stuff()</span><br></pre></td></tr></table></figure></p>\n<p>避免在 atomic里捕获异常!</p>\n<h2 id=\"查询表达式\"><a href=\"#查询表达式\" class=\"headerlink\" title=\"查询表达式\"></a>查询表达式</h2><p>使用数据库的方法<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db.models <span class=\"keyword\">import</span> Func, F </span><br><span class=\"line\">queryset.annotate(field_lower=Func(F(<span class=\"string\">'field'</span>), function=<span class=\"string\">'LOWER'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>或<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Lower</span><span class=\"params\">(Func)</span>:</span></span><br><span class=\"line\">    function = <span class=\"string\">'LOWER'</span> </span><br><span class=\"line\">queryset.annotate(field_lower=Lower(F(<span class=\"string\">'field'</span>)))</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"条件表达式\"><a href=\"#条件表达式\" class=\"headerlink\" title=\"条件表达式\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/conditional-expressions.html\" target=\"_blank\" rel=\"noopener\">条件表达式</a></h2><p>高级用法查看在线版<br><code>When</code><br><code>Case</code></p>\n<h2 id=\"数据库函数\"><a href=\"#数据库函数\" class=\"headerlink\" title=\"数据库函数\"></a><a href=\"http://python.usyiyi.cn/django/ref/models/database-functions.html\" target=\"_blank\" rel=\"noopener\">数据库函数</a></h2><p><code>Coalesce</code> 接收一个含有至少两个字段名称或表达式的列表，返回第一个非空的值（空字符串不认为是一个空值）</p>\n<h2 id=\"将遗留数据库整合到Django\"><a href=\"#将遗留数据库整合到Django\" class=\"headerlink\" title=\"将遗留数据库整合到Django\"></a><a href=\"http://python.usyiyi.cn/django/howto/legacy-databases.html\" target=\"_blank\" rel=\"noopener\">将遗留数据库整合到Django</a></h2><p>根据遗留数据库生成models<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"为模型提供初始数据\"><a href=\"#为模型提供初始数据\" class=\"headerlink\" title=\"为模型提供初始数据\"></a><a href=\"http://python.usyiyi.cn/django/howto/initial-data.html\" target=\"_blank\" rel=\"noopener\">为模型提供初始数据</a></h2><p>使用fixtures<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 1,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;John&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;Lennon&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    &quot;model&quot;: &quot;myapp.person&quot;,</span><br><span class=\"line\">    &quot;pk&quot;: 2,</span><br><span class=\"line\">    &quot;fields&quot;: &#123;</span><br><span class=\"line\">      &quot;first_name&quot;: &quot;Paul&quot;,</span><br><span class=\"line\">      &quot;last_name&quot;: &quot;McCartney&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>导入数据命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py loaddata &lt;fixturename&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"数据库访问优化\"><a href=\"#数据库访问优化\" class=\"headerlink\" title=\"数据库访问优化\"></a>数据库访问优化</h2><p>添加索引，比任何查询语法优化都来的重要<br>理解查询集<br>QuerySets是延迟的。<br>什么时候它们被计算出来。<br>数据在内存中如何存储。</p>\n<p>使用<code>cached_property</code>装饰器，只要是同一个实例，一个方法就只会执行一次<br>使用<code>with</code>模版标签<br>使用<code>iterator</code>迭代器</p>\n<p>在数据库中而不是python中做数据库工作<br>使用过滤器和反射过滤器对数据进行过滤<br>使用<code>F()</code>表达式<br>使用注解和聚合<br>使用原始SQL</p>\n<p>用唯一的或被索引的列来检索独立对象</p>\n<p>在不同位置多次访问数据库，每次获取一个数据集，不如在一次查询中获取它们。比如循环的时候。</p>\n<p>使用<code>select_related()</code>和<code>prefetch_related()</code></p>\n<p>不检索你不需要的信息<br>使用<code>QuerySet.values()</code>和<code>QuerySet.values_list()</code></p>\n<p>使用<code>QuerySet.defer()</code>和<code>QuerySet.only()</code></p>\n<p>计算数量不要使用<code>len(queryset)</code>而是使用<code>QuerySet.count()</code></p>\n<p>判断是否存在结果使用<code>QuerySet.exists()</code>而不是用<code>if queryset</code></p>\n<p>但不要过度使用<code>count()</code>和<code>exists()</code>，如果你本来就需要里面的数据，那就不要使用</p>\n<p>使用<code>QuerySet.update()</code>和<code>QuerySet.delete()</code>批量操作数据</p>\n<p>直接使用外键的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">entry.blog_id</span><br><span class=\"line\"><span class=\"comment\"># 而不是</span></span><br><span class=\"line\">entry.blog.id</span><br></pre></td></tr></table></figure></p>\n<p>如果你并在意结果集的顺序，不要进行排序，移除<code>Meta.ordering</code></p>\n<p>创建对象时尽可能使用<code>bulk_create()</code>来减少sql查询数量<br>这也适用于<code>ManyToManyFields</code>的情况，一起<code>add</code>而不是一个一个<code>add</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_band.members.add(me, my_friend) </span><br><span class=\"line\"><span class=\"comment\">#更优于 </span></span><br><span class=\"line\">my_band.members.add(me)</span><br><span class=\"line\">my_band.members.add(my_friend)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"URL调度器\"><a href=\"#URL调度器\" class=\"headerlink\" title=\"URL调度器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html\" target=\"_blank\" rel=\"noopener\">URL调度器</a></h2><p>url捕获的参数永远是字符串</p>\n<p>在根url上获取的参数不影响参数传递<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># In settings/urls/main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^(?P&lt;username&gt;\\w+)/blog/'</span>, include(<span class=\"string\">'foo.urls.blog'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># In foo/urls/blog.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^$'</span>, views.blog.index),</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.blog.archive),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>在上面的例子中，捕获的”username”变量将被如期传递给include()指向的URLconf。</p>\n<p>可嵌套<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'blog/(page-(\\d+)/)?$'</span>, blog_articles),                  <span class=\"comment\"># bad</span></span><br><span class=\"line\">    url(<span class=\"string\">r'comments/(?:page-(?P&lt;page_number&gt;\\d+)/)?$'</span>, comments),  <span class=\"comment\"># good</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>传递额外的参数<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> . <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$'</span>, views.year_archive, &#123;<span class=\"string\">'foo'</span>: <span class=\"string\">'bar'</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>当url捕获的参数和字典中传递的参数同名时，将忽略url捕获的参数而使用字典里的参数值</p>\n<p>传递额外的参数给<code>include()</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>), &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p>效果等同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># main.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> include, url</span><br><span class=\"line\"><span class=\"keyword\">from</span> mysite <span class=\"keyword\">import</span> views</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^blog/'</span>, include(<span class=\"string\">'inner'</span>)),</span><br><span class=\"line\">]</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># inner.py</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> django.conf.urls <span class=\"keyword\">import</span> url</span><br><span class=\"line\"> </span><br><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^archive/$'</span>, views.archive, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">    url(<span class=\"string\">r'^about/$'</span>, views.about, &#123;<span class=\"string\">'blogid'</span>: <span class=\"number\">3</span>&#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure></p>\n<p><a href=\"http://python.usyiyi.cn/django/topics/http/urls.html#reversing-namespaced-urls\" target=\"_blank\" rel=\"noopener\">反查带命名空间的URL</a></p>\n<h2 id=\"编写视图\"><a href=\"#编写视图\" class=\"headerlink\" title=\"编写视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/views.html\" target=\"_blank\" rel=\"noopener\">编写视图</a></h2><p><code>HttpResponse</code>子类，状态码</p>\n<ul>\n<li><code>HttpResponseRedirect</code> 临时重定向，302</li>\n<li><code>HttpResponsePermanentRedirect</code> 永久重定向，301</li>\n<li><code>HttpResponseNotModified</code> 没有任何修改，304</li>\n<li><code>HttpResponseBadRequest</code> 语义有误码，当前请求不被服务器理解，400</li>\n<li><code>HttpResponseNotFound</code> 页面没找到，404</li>\n<li><code>HttpResponseForbidden</code> 服务器理解请求，但拒绝执行，403</li>\n<li><code>HttpResponseNotAllowed</code> 请求中指定的请求方式不能用于请求相应资源，405</li>\n<li><code>HttpResponseGone</code> 请求的资源在服务器上已经不可用，而且没有已知的转发地址，410</li>\n<li><code>HttpResponseServerError</code> 服务器遇到了一个意外的错误，导致无法完成对请求的处理，500</li>\n<li><code>HttpResponse(status=201)</code> 自定义返回状态码</li>\n</ul>\n<p>重写错误视图（在url中）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handler404 = &apos;mysite.views.my_custom_page_not_found_view&apos;</span><br><span class=\"line\">handler500 = &apos;mysite.views.my_custom_error_view&apos; </span><br><span class=\"line\">handler403 = &apos;mysite.views.my_custom_permission_denied_view&apos;</span><br><span class=\"line\">handler400 = &apos;mysite.views.my_custom_bad_request_view&apos;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的快捷函数\"><a href=\"#Django-的快捷函数\" class=\"headerlink\" title=\"Django 的快捷函数\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/shortcuts.html\" target=\"_blank\" rel=\"noopener\">Django 的快捷函数</a></h2><p><code>template_name</code>可传一个模版序列，django将使用存在的第一个模版</p>\n<p><code>redirect(to, [permanent=False, ]*args, **kwargs)[source]</code></p>\n<blockquote>\n<p>为传递进来的参数返回HttpResponseRedirect 给正确的URL 。<br>参数可以是：</p>\n<pre><code>一个模型：将调用模型的get_absolute_url() 函数\n一个视图，可以带有参数：将使用urlresolvers.reverse 来反向解析名称\n一个绝对的或相对的URL，将原样作为重定向的位置。\n</code></pre><p>默认返回一个临时的重定向；传递permanent=True 可以返回一个永久的重定向。</p>\n</blockquote>\n<p><code>get_object_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器<br><code>get_list_or_404(klass, *args, **kwargs)</code>可以传Model也可以传QuerySet实例和关联的管理器</p>\n<h2 id=\"视图装饰器\"><a href=\"#视图装饰器\" class=\"headerlink\" title=\"视图装饰器\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/decorators.html\" target=\"_blank\" rel=\"noopener\">视图装饰器</a></h2><p><a href=\"http://python.usyiyi.cn/django/topics/conditional-view-processing.html\" target=\"_blank\" rel=\"noopener\">按需内容处理</a><br><code>django.views.decorators.http</code>包里的装饰器可以基于请求的方法来限制对视图的访问。若条件不满足会返回 django.http.HttpResponseNotAllowed。<br><code>require_http_methods(request_method_list)</code>限制视图只能服务于规定的http方法（需要大写）<br><code>require_GET()</code><br><code>require_POST()</code><br><code>require_safe()</code>只允许视图接受GET和HEAD方法的装饰器。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@condition(etag_func=None, last_modified_func=None)</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@last_modified(last_modified_func)</span></span><br></pre></td></tr></table></figure>\n<p>根据最后修改时间来决定是否运行视图，可减少流量<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@etag(etag_func)</span></span><br></pre></td></tr></table></figure></p>\n<p><code>etag</code>（版本？）和<code>last_modified</code>不能同时使用</p>\n<p><code>GZip</code>对内容进行压缩，节省流量，但增加处理时间</p>\n<p><code>vary_on_cookie</code><br><code>vary_on_headers</code><br>基于特定的请求头部来控制缓存</p>\n<p><code>never_cache</code></p>\n<h2 id=\"Request-对象和Response-对象\"><a href=\"#Request-对象和Response-对象\" class=\"headerlink\" title=\"Request 对象和Response 对象\"></a><a href=\"http://python.usyiyi.cn/django/ref/request-response.html\" target=\"_blank\" rel=\"noopener\">Request 对象和Response 对象</a></h2><p><code>HttpRequest</code>对象(除非特殊说明，所有属性都是只读，<code>session</code>属性是个例外)<br><code>HttpRequest.scheme</code> 请求方案（通常为http或https）<br><code>HttpRequest.body</code> 字节字符串，表示原始http请求正文<br><code>HttpRequest.path</code> 字符串，表示请求的页面的完整路径，不包含域名<br><code>HttpRequest.path_info</code>    在某些Web 服务器配置下，主机名后的URL 部分被分成脚本前缀部分和路径信息部分。path_info 属性将始终包含路径信息部分，不论使用的Web 服务器是什么。使用它代替path 可以让代码在测试和开发环境中更容易地切换。<br>    例如，如果应用的WSGIScriptAlias 设置为”/minfo”，那么当path 是”/minfo/music/bands/the_beatles/“ 时path_info 将是”/music/bands/the_beatles/“。<br><code>HttpRequest.method</code> 请求使用的http方法，大写<br><code>HttpRequest.encoding</code> 表示提交的数据的编码方式，可写<br><code>HttpRequest.GET</code><br><code>HttpRequest.POST</code><br><code>HttpRequest.REQUEST</code>不建议使用，使用<code>GET</code>和<code>POST</code>代替<br><code>HttpRequest.COOKIES</code> 字典，键和值都是字符串<br><code>HttpRequest.FILES</code> 类似字典的对象，包含所有的上传文件，<form>带有<code>enctype=&quot;multipart/form-data&quot;</code>才会有数据<br><code>HttpRequest.META</code> 标准的python字典，包含所有http请求头部<br><code>HttpRequest.user</code><br><code>HttpRequest.session</code> 类似字典的对象<br><code>HttpRequest.urlconf</code> 如果其它地方设置了，则用来取代<code>ROOT_URLCONF</code><br><code>HttpRequest.resolver_match</code> 会在url解析之后设置，一个<code>ResolverMatch</code>实例，表示解析之后的url<br><code>HttpRequest.get_host()</code> 获取原始主机地址<br><code>HttpRequest.get_port()</code> 获取请求端端口号<br><code>HttpRequest.get_full_path()</code> 返回完整的path，包括查询字符串<br><code>HttpRequest.build_absolute_uri(location)</code> 返回绝对url<br><code>HttpRequest.get_signed_cookie(key, default=RAISE_ERROR, salt=&#39;&#39;, max_age=None)</code> 返回签名过的Cookie对应的值<br><code>HttpRequest.is_secure()</code> 如果请求是通过https发起的，则返回True<br><code>HttpRequest.is_ajax()</code> 如果请求是通过XMLHttpRequest发起的，则返回True<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HttpRequest.read(size=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">HttpRequest.readline()</span><br><span class=\"line\">HttpRequest.readlines()</span><br><span class=\"line\">HttpRequest.xreadlines()</span><br><span class=\"line\">HttpRequest.__iter__()</span><br></pre></td></tr></table></figure></form></p>\n<p>这几个方法实现类文件的接口用于读取HttpRequest· 实例</p>\n<p><code>QueryDict</code>对象<br>request.POST 和request.GET 的QueryDict 在一个正常的请求/响应循环中是不可变的。若要获得可变的版本，需要使用.copy()。</p>\n<h2 id=\"TemplateResponse-和SimpleTemplateResponse\"><a href=\"#TemplateResponse-和SimpleTemplateResponse\" class=\"headerlink\" title=\"TemplateResponse 和SimpleTemplateResponse\"></a><a href=\"http://python.usyiyi.cn/django/ref/template-response.html\" target=\"_blank\" rel=\"noopener\">TemplateResponse 和SimpleTemplateResponse</a></h2><p><code>SimpleTemplateResponse</code><br><code>TemplateResponse</code><br>TemplateResponse 对象和普通的django.http.HttpResponse 一样可以用于任何地方。它可以用来作为render() 和render_to_response() 的另外一种选择。</p>\n<p>例如，下面这个简单的视图使用一个简单模板和包含查询集的上下文返回一个TemplateResponse：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.template.response <span class=\"keyword\">import</span> TemplateResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blog_index</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> TemplateResponse(request, <span class=\"string\">'entry_list.html'</span>, &#123;<span class=\"string\">'entries'</span>: Entry.objects.all()&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/file-uploads.html\" target=\"_blank\" rel=\"noopener\">文件上传</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle_uploaded_file</span><span class=\"params\">(f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(<span class=\"string\">'some/file/name.txt'</span>, <span class=\"string\">'wb+'</span>) <span class=\"keyword\">as</span> destination:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> chunk <span class=\"keyword\">in</span> f.chunks():</span><br><span class=\"line\">            destination.write(chunk)</span><br></pre></td></tr></table></figure>\n<p>遍历UploadedFile.chunks()，而不是使用read()，能确保大文件并不会占用系统过多的内存。</p>\n<p>上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(&quot;django.core.files.uploadhandler.MemoryFileUploadHandler&quot;,</span><br><span class=\"line\">&quot;django.core.files.uploadhandler.TemporaryFileUploadHandler&quot;,)</span><br></pre></td></tr></table></figure></p>\n<p>MemoryFileUploadHandler 和TemporaryFileUploadHandler一起提供了Django的默认文件上传行为，将小文件读取到内存中，大文件放置在磁盘中。</p>\n<p>你可以编写自定义的处理器，来定制Django如何处理文件。例如，你可以使用自定义处理器来限制用户级别的配额，在运行中压缩数据，渲染进度条，甚至是向另一个储存位置直接发送数据，而不把它存到本地。关于如何自定义或者完全替换处理器的行为，详见编写自定义的上传处理器。</p>\n<p>更改上传处理器的行为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DEFAULT_FILE_STORAGE</span><br><span class=\"line\">FILE_CHARSET</span><br><span class=\"line\">FILE_UPLOAD_HANDLERS</span><br><span class=\"line\">FILE_UPLOAD_MAX_MEMORY_SIZE</span><br><span class=\"line\">FILE_UPLOAD_PERMISSIONS</span><br><span class=\"line\">FILE_UPLOAD_TEMP_DIR</span><br><span class=\"line\">MEDIA_ROOT</span><br><span class=\"line\">MEDIA_URL</span><br></pre></td></tr></table></figure></p>\n<p>在运行中更改上传处理器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p> 注意</p>\n</blockquote>\n<blockquote>\n<p> 你只可以在访问request.POST或者request.FILES之前修改上传处理器– 在上传处理工作执行之后再修改上传处理就毫无意义了。如果你在读取request.FILES之后尝试修改request.upload_handlers，Django会抛出异常。</p>\n</blockquote>\n<blockquote>\n<p> 所以，你应该在你的视图中尽早修改上传处理器。</p>\n</blockquote>\n<blockquote>\n<p> CsrfViewMiddleware 也会访问request.POST，它是默认开启的。意思是你需要在你的视图中使用csrf_exempt()，来允许你修改上传处理器。接下来在真正处理请求的函数中，需要使用csrf_protect()。注意这意味着处理器可能会在CSRF验证完成之前开始接收上传文件。例如：</p>\n</blockquote>\n<blockquote>\n<figure class=\"highlight plain\"><figcaption><span>django.views.decorators.csrf import csrf_exempt, csrf_protect </span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@csrf_exempt</span><br><span class=\"line\">def upload_file_view(request):</span><br><span class=\"line\">    request.upload_handlers.insert(0, ProgressBarUploadHandler())</span><br><span class=\"line\">    return _upload_file_view(request) </span><br><span class=\"line\">@csrf_protect</span><br><span class=\"line\">def _upload_file_view(request):</span><br><span class=\"line\">    ... # Process request</span><br></pre></td></tr></table></figure>\n</blockquote>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## [File对象](http://python.usyiyi.cn/django/ref/files/file.html)</span><br><span class=\"line\">`File`类</span><br><span class=\"line\">`ContentFile`类</span><br><span class=\"line\">`ImageFile`类 比`File`多了`width`和`height`属性</span><br><span class=\"line\">附加到对象的文件有额外的方法</span><br></pre></td></tr></table></figure>\n<p>File.save(name, content[, save=True])<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">提供文件名和内容保存一个新文件，不会替换已存在文件，但会创建一个新文件，并且更新对象来指向它。</span><br><span class=\"line\">测试出来直接`car.save()`也不会覆盖已存在文件，如果有重写会在原有名字后面加字符串</span><br><span class=\"line\">如果save为True，模型的save()方法会在文件保存之后调用。这就是说，下面两行：</span><br><span class=\"line\">​```python</span><br><span class=\"line\">&gt;&gt;&gt; car.photo.save(&apos;myphoto.jpg&apos;, content, save=False)</span><br><span class=\"line\">&gt;&gt;&gt; car.save()</span><br></pre></td></tr></table></figure></p>\n<p>等价于：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.save(<span class=\"string\">'myphoto.jpg'</span>, content, save=<span class=\"keyword\">True</span>)</span><br></pre></td></tr></table></figure></p>\n<p>从模型实例中移除文件，并且删除内部文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File.delete([save=True])</span><br></pre></td></tr></table></figure></p>\n<p>在页面展示中，<code>ImageFile</code>自带的清除勾选框勾选后只是清除了数据库中这具字段的值，并不会删除文件系统里对应的文件，而<code>File.delete()</code>会删除文件系统里的文件</p>\n<h2 id=\"文件储存API\"><a href=\"#文件储存API\" class=\"headerlink\" title=\"文件储存API\"></a><a href=\"http://python.usyiyi.cn/django/ref/files/storage.html\" target=\"_blank\" rel=\"noopener\">文件储存API</a></h2><p><code>DefaultStorage</code><br><code>FileSystemStorage</code><br><code>Storage</code></p>\n<h2 id=\"管理文件\"><a href=\"#管理文件\" class=\"headerlink\" title=\"管理文件\"></a><a href=\"http://python.usyiyi.cn/django/topics/files.html\" target=\"_blank\" rel=\"noopener\">管理文件</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Car</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField(max_length=<span class=\"number\">255</span>)</span><br><span class=\"line\">    price = models.DecimalField(max_digits=<span class=\"number\">5</span>, decimal_places=<span class=\"number\">2</span>)</span><br><span class=\"line\">    photo = models.ImageField(upload_to=<span class=\"string\">'cars'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>photo</code>有以下方法<br><code>photo.path</code>相对路径<br><code>photo.url</code>绝对路径</p>\n<p><em>实际测试有出入</em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方示例</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'http://media.example.com/cars/chevy.jpg'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 实际测试结果</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'E:\\workspace\\parking\\parking\\upload\\20151230171832_0.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.url</span><br><span class=\"line\"><span class=\"string\">'/upload/20151230171832_0.jpg'</span></span><br></pre></td></tr></table></figure></p>\n<p>更改一个文件的存储位置<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>initial_path = car.photo.path</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.name = <span class=\"string\">'cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>new_path = settings.MEDIA_ROOT + car.photo.name</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"comment\"># Move the file on the filesystem</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>os.rename(initial_path, new_path)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.save()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path</span><br><span class=\"line\"><span class=\"string\">'/media/cars/chevy_ii.jpg'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>car.photo.path == new_path</span><br><span class=\"line\"><span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"编写自定义存储系统\"><a href=\"#编写自定义存储系统\" class=\"headerlink\" title=\"编写自定义存储系统\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-file-storage.html\" target=\"_blank\" rel=\"noopener\">编写自定义存储系统</a></h2><ol>\n<li>必须是<code>django.core.files.storage.Storage</code>的子类</li>\n<li>Django必须能够不带任何参数来实例化</li>\n<li>必须实现 _open() 和 _save()方法，以及任何适合于你的储存类的其它方法</li>\n<li>你的储存类必须是 可以析构的，所以它在迁移中的一个字段上使用的时候可以被序列化。只要你的字段拥有自己可以序列化的参数，你就可以为它使用django.utils.deconstruct.deconstructible类装饰器（这也是Django用在FileSystemStorage上的东西）</li>\n</ol>\n<h2 id=\"基于类的视图\"><a href=\"#基于类的视图\" class=\"headerlink\" title=\"基于类的视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">基于类的视图</a></h2><h2 id=\"基于类的内建通用视图\"><a href=\"#基于类的内建通用视图\" class=\"headerlink\" title=\"基于类的内建通用视图\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-display.html\" target=\"_blank\" rel=\"noopener\">基于类的内建通用视图</a></h2><p><code>ListView</code>类视图中，默认的对象列表名除了<code>object_list</code>，还有一个<code>&lt;model_name&gt;_list</code></p>\n<h2 id=\"使用基于类的视图处理表单\"><a href=\"#使用基于类的视图处理表单\" class=\"headerlink\" title=\"使用基于类的视图处理表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/generic-editing.html\" target=\"_blank\" rel=\"noopener\">使用基于类的视图处理表单</a></h2><p>如果对应模型存在<code>get_absolute_url</code>方法的前提下<code>CreateView</code>和<code>UpdateView</code>类视图的<code>success_url</code>默认使用<code>get_absolute_url</code></p>\n<p>如何定义<code>form_class</code>，即使<code>form_class</code>是<code>ModelForm</code>也还是需要指定模型</p>\n<p>如果没有定义<code>form_class</code>，则必须定义<code>fields</code>，<code>fields</code>和<code>form_class</code>不能同时存在</p>\n<p>如果模型某个字段存的是模板路径，并且想通过此字段来动态的控制表单页的模板，可通过<code>template_name_field</code>来指定此字段。</p>\n<h2 id=\"Mixin\"><a href=\"#Mixin\" class=\"headerlink\" title=\"Mixin\"></a><a href=\"http://python.usyiyi.cn/django/topics/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">Mixin</a></h2><h2 id=\"基于类的视图的Mixin\"><a href=\"#基于类的视图的Mixin\" class=\"headerlink\" title=\"基于类的视图的Mixin\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/mixins.html\" target=\"_blank\" rel=\"noopener\">基于类的视图的Mixin</a></h2><p><code>ContextMixin</code>所有基于类的通用视图的这个模板Context 都包含一个view 变量指向视图实例。</p>\n<blockquote>\n<p>Use alters_data where appropriate<br>注意，将视图实例包含在模板Context 中可能将有潜在危险的方法暴露给模板作者。为了避免在模板中被调用类似这样的方法，可以在这些方法上设置alters_data=True。更多信息，参见渲染模板Context 的文档。<br>很显然，调用某些变量会带来副作用，允许模板系统访问它们将是愚蠢的还会带来安全漏洞。<br>    每个Django 模型对象的delete() 方法就是一个很好的例子。模板系统不应该允许下面的行为：<br>    I will now delete this valuable data. <br>    设置可调用变量的alters_data 属性可以避免这点。如果变量设置alters_data=True ，模板系统将不会调用它，而会无条件使用string_if_invalid 替换这个变量。Django 模型对象自动生成的delete() 和save() 方法自动 设置alters_data=True。 例如：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sensitive_function</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self.database_record.delete()</span><br><span class=\"line\">    sensitive_function.alters_data = <span class=\"keyword\">True</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>有时候，处于某些原因你可能想关闭这个功能，并告诉模板系统无论什么情况下都不要调用变量。设置可调用对象的do_not_call_in_templates 属性的值为True 可以实现这点。模板系统的行为将类似这个变量是不可调用的（例如，你可以访问可调用对象的属性）。<br><code>query_pk_and_slug</code>如果为<code>True</code>,<code>get_object()</code>将使用两者一起来查找。可以防止只使用<code>pk</code>时，如果<code>pk</code>连续，直接被攻击者都遍历<code>pk</code>获取整个列表</p>\n</blockquote>\n<h2 id=\"内建基于类的视图的API\"><a href=\"#内建基于类的视图的API\" class=\"headerlink\" title=\"内建基于类的视图的API\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/index.html\" target=\"_blank\" rel=\"noopener\">内建基于类的视图的API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">urlpatterns = [</span><br><span class=\"line\">    url(<span class=\"string\">r'^view/$'</span>, MyView.as_view(size=<span class=\"number\">42</span>)),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>视图参数的线程安全性<br>传递给视图的参数在视图的每个实例之间共享。这表示不应该使用列表、字典或其它可变对象作为视图的参数。如果你真这么做而且对共享的对象做过修改，某个用户的行为可能对后面访问同一个视图的用户产生影响。</p>\n</blockquote>\n<h2 id=\"基于类的通用视图-——-索引\"><a href=\"#基于类的通用视图-——-索引\" class=\"headerlink\" title=\"基于类的通用视图 —— 索引\"></a><a href=\"http://python.usyiyi.cn/django/ref/class-based-views/flattened-index.html\" target=\"_blank\" rel=\"noopener\">基于类的通用视图 —— 索引</a></h2><h2 id=\"使用Django输出CSV\"><a href=\"#使用Django输出CSV\" class=\"headerlink\" title=\"使用Django输出CSV\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-csv.html\" target=\"_blank\" rel=\"noopener\">使用Django输出CSV</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> csv</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate CSV header.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'text/csv'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.csv\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    writer = csv.writer(response)</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'First row'</span>, <span class=\"string\">'Foo'</span>, <span class=\"string\">'Bar'</span>, <span class=\"string\">'Baz'</span>])</span><br><span class=\"line\">    writer.writerow([<span class=\"string\">'Second row'</span>, <span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'\"Testing\"'</span>, <span class=\"string\">\"Here's a quote\"</span>])</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用Django输出PDF\"><a href=\"#使用Django输出PDF\" class=\"headerlink\" title=\"使用Django输出PDF\"></a><a href=\"http://python.usyiyi.cn/django/howto/outputting-pdf.html\" target=\"_blank\" rel=\"noopener\">使用Django输出PDF</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> reportlab.pdfgen <span class=\"keyword\">import</span> canvas</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.http <span class=\"keyword\">import</span> HttpResponse</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">some_view</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># Create the HttpResponse object with the appropriate PDF headers.</span></span><br><span class=\"line\">    response = HttpResponse(content_type=<span class=\"string\">'application/pdf'</span>)</span><br><span class=\"line\">    response[<span class=\"string\">'Content-Disposition'</span>] = <span class=\"string\">'attachment; filename=\"somefilename.pdf\"'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Create the PDF object, using the response object as its \"file.\"</span></span><br><span class=\"line\">    p = canvas.Canvas(response)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Draw things on the PDF. Here's where the PDF generation happens.</span></span><br><span class=\"line\">    <span class=\"comment\"># See the ReportLab documentation for the full list of functionality.</span></span><br><span class=\"line\">    p.drawString(<span class=\"number\">100</span>, <span class=\"number\">100</span>, <span class=\"string\">\"Hello world.\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\"># Close the PDF object cleanly, and we're done.</span></span><br><span class=\"line\">    p.showPage()</span><br><span class=\"line\">    p.save()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> response</span><br></pre></td></tr></table></figure>\n<h2 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html\" target=\"_blank\" rel=\"noopener\">中间件</a></h2><p>中间件的顺序很重要<br>接受请求时，自上向下调用中间件<br>返回响应时，自下向上调用中间件<br><code>process_request(request)</code><br>在django决定执行哪个视图之前（也就是解析url之前）被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的request、view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<p><code>process_view(request, view_func, view_args, view_kwargs)</code><br><em>注：<code>view_args</code>和<code>view_kwargs</code>都不包含<code>request</code></em><br>在django调用视图之前被调用<br>返回<code>None</code>继续处理请求<br>返回<code>HttpResponse</code>不再去调用其它的view 或exception 中间件，或对应的视图，直接调用响应阶段的中间件，并返回结果</p>\n<blockquote>\n<p>注意<br>在中间件内部，从process_request 或process_view 中访问request.POST 或request.REQUEST 将阻碍该中间件之后的所有视图无法修改请求的上传处理程序，一般情况下要避免这样使用。<br>类CsrfViewMiddleware可以被认为是个例外，因为它提供csrf_exempt() 和csrf_protect()两个装饰器，允许视图显式控制在哪个点需要开启CSRF验证。</p>\n</blockquote>\n<p><code>process_template_response(request, response)</code><br>在视图刚好执行完毕之后被调用<br>必须返回一个实现了<code>render</code>方法的响应对象</p>\n<p><code>process_response(request, response)</code><br>在所有响应返回浏览器之前被调用<br>必须返回<code>HttpResponse</code>或者<code>StreamingHttpResponse</code>对象<br><strong><em><a href=\"http://python.usyiyi.cn/django/topics/http/middleware.html#dealing-with-streaming-responses\" target=\"_blank\" rel=\"noopener\">处理流式响应</a></em></strong></p>\n<p><code>process_exception(request, exception)</code><br>在视图抛出异常时被调用<br>返回<code>None</code><br>返回<code>HttpResponse</code> <code>process_template_response</code>和响应中间件会被调用<br><strong>在处理响应期间，中间件的执行顺序是倒序执行的，这包括process_exception，如果一个中间件的<code>process_exception</code>返回了一个响应，那么这个中间件上面的中间件中的<code>process_exception</code>都不会被调用</strong></p>\n<p><code>__init__()</code><br>大多数中间件类都不需要初始化方法<br>django初始化中间件无需任何参数，所以不能定义一个有参数的<code>__init__方法</code><strong>init</strong><code>不会每次请求都执行，只在Web服务器响应第一个请求时执行\n标记中间件不被使用</code><strong>init</strong><code>抛出</code>django.core.exceptions.MiddlewareNotUsed`异常，django会从中间件处理过程中移动这部分中间件，并且当DEBUG为True的时候在django.request记录器中记录调试信息。</p>\n<ul>\n<li>中间件类不能是任何类的子类</li>\n<li>中间件可以放在python路径中的任务位置<br>正常<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"> </span><br><span class=\"line\">D.process_template_response</span><br><span class=\"line\">C.process_template_response</span><br><span class=\"line\">B.process_template_response</span><br><span class=\"line\">A.process_template_response</span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>视图异常<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A.init</span><br><span class=\"line\">B.init</span><br><span class=\"line\">C.init</span><br><span class=\"line\">D.init</span><br><span class=\"line\">A.process_request</span><br><span class=\"line\">B.process_request</span><br><span class=\"line\">C.process_request</span><br><span class=\"line\">D.process_request</span><br><span class=\"line\">A.process_view</span><br><span class=\"line\">B.process_view</span><br><span class=\"line\">C.process_view</span><br><span class=\"line\">D.process_view</span><br><span class=\"line\"></span><br><span class=\"line\">D.process_responst</span><br><span class=\"line\">C.process_responst</span><br><span class=\"line\">B.process_responst</span><br><span class=\"line\">A.process_responst</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"django中可用的中间件\"><a href=\"#django中可用的中间件\" class=\"headerlink\" title=\"django中可用的中间件\"></a><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">django中可用的中间件</a></h2><h3 id=\"class-CommonMiddleware\"><a href=\"#class-CommonMiddleware\" class=\"headerlink\" title=\"class CommonMiddleware\"></a><code>class CommonMiddleware</code></h3><p><code>DISALLOWED_USER_AGENTS</code>禁用匹配的<code>user-agents</code>访问网站<br><code>APPEND_SLASH</code>如果url结尾没有斜杠结尾，并且没有找到匹配的url，django会在结尾加上斜杠再匹配一次<br><code>PREPEND_WWW</code>如果url会重定向到www到头的网址<br><code>USE_ETAGS</code>设置来处理ETag。如果设置USE_ETAGS为True，Django会通过MD5-hashing处理页面的内容来为每一个页面请求计算Etag，并且如果合适的话，它将会发送携带Not Modified的响应。</p>\n<h3 id=\"class-BrokenLinkEmailsMiddleware\"><a href=\"#class-BrokenLinkEmailsMiddleware\" class=\"headerlink\" title=\"class BrokenLinkEmailsMiddleware\"></a><code>class BrokenLinkEmailsMiddleware</code></h3><p>向<code>MANAGERS</code> 发送死链提醒邮件</p>\n<h3 id=\"class-GZipMiddleware\"><a href=\"#class-GZipMiddleware\" class=\"headerlink\" title=\"class GZipMiddleware\"></a><code>class GZipMiddleware</code></h3><p>为支持<code>GZip</code>压缩的浏览器压缩内容<br>建议放在中间件配置列表的第一个<br>可通过<code>gzip_page()</code>装饰器使用独立的<code>GZip</code>压缩</p>\n<h3 id=\"class-ConditionalGetMiddleware\"><a href=\"#class-ConditionalGetMiddleware\" class=\"headerlink\" title=\"class ConditionalGetMiddleware\"></a><code>class ConditionalGetMiddleware</code></h3><h3 id=\"class-LocaleMiddeware\"><a href=\"#class-LocaleMiddeware\" class=\"headerlink\" title=\"class LocaleMiddeware\"></a><code>class LocaleMiddeware</code></h3><p>基于请求中的数据开启语言选择，它可以为每个用户进行定制。</p>\n<h3 id=\"class-MessageMiddleware\"><a href=\"#class-MessageMiddleware\" class=\"headerlink\" title=\"class MessageMiddleware\"></a><code>class MessageMiddleware</code></h3><p>开启基于<code>Cookie</code>和会话的消息支持</p>\n<h3 id=\"class-SecurityMiddleware\"><a href=\"#class-SecurityMiddleware\" class=\"headerlink\" title=\"class SecurityMiddleware\"></a><code>class SecurityMiddleware</code></h3><p><a href=\"http://python.usyiyi.cn/django/ref/middleware.html#middleware-ordering\" target=\"_blank\" rel=\"noopener\">中间件的排序</a></p>\n<h2 id=\"模版\"><a href=\"#模版\" class=\"headerlink\" title=\"模版\"></a><a href=\"http://python.usyiyi.cn/django/topics/templates.html\" target=\"_blank\" rel=\"noopener\">模版</a></h2><p><code>DjangoTemplates</code>引擎<code>OPTIONS</code>配置项中接受以下参数<br><code>string_if_invalid</code>当模版变量无效时，使用此值代替<br>可使用<br>comment<br>和<br>endcomment<br>进行多行注释</p>\n<h2 id=\"Django模版语言\"><a href=\"#Django模版语言\" class=\"headerlink\" title=\"Django模版语言\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/language.html\" target=\"_blank\" rel=\"noopener\">Django模版语言</a></h2><p>当模版系统遇到<code>.</code>时，按下面顺序查询<br>从技术上来说，当模版系统遇到点(“.”)，它将以这样的顺序查询：</p>\n<ul>\n<li>字典查询（Dictionary lookup）</li>\n<li>属性或方法查询（Attribute or method lookup）</li>\n<li>数字索引查询（Numeric index lookup）</li>\n</ul>\n<p>模版变量最终解释成字面量，而不是变量值</p>\n<p>load<br>可接受多个库名称<br>load humanize i18n<br>load<br>不支持继承</p>\n<h2 id=\"内置标签与过滤器\"><a href=\"#内置标签与过滤器\" class=\"headerlink\" title=\"内置标签与过滤器\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/builtins.html\" target=\"_blank\" rel=\"noopener\">内置标签与过滤器</a></h2><h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h3><p><code>filter</code>对一段内容进行过滤，使用<code>|</code>对多个过滤器进行连接，且过滤器可以有参数<br><em>比如一段纯文本不能使用之前说的过滤器写法，则可以使用<code>filter</code></em><br><code>firstof</code>输出第一个不为<code>False</code>的参数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% firstof var1 var2|safe var3 &quot;&lt;strong&gt;fallback value&lt;/strong&gt;&quot;|safe %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>ifchanged</code>检查循环中的一个值从最近一次重复其是否改变，支持`else</p>\n<p><code>with</code>可往<code>include</code>的模版里传上下文件变量<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with person=&quot;Jane&quot; greeting=&quot;Hello&quot; %&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% include &quot;name_snippet.html&quot; with greeting=&quot;Hi&quot; only %&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% lorem %&#125;</span><br></pre></td></tr></table></figure>\n<p>设计人员工具，好像是生成随机单词和段落<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 3 p  %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">lorem</span> 10 w random %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"人性化\"><a href=\"#人性化\" class=\"headerlink\" title=\"人性化\"></a><a href=\"http://python.usyiyi.cn/django/ref/contrib/humanize.html\" target=\"_blank\" rel=\"noopener\">人性化</a></h2><p><code>apnumber</code>转换整数或整数的字符串形式为英文描述<br>1 会变成one<br><code>intcomma</code>转换成第三位带一个逗号<br>4500 会变成 4,500<br><code>intword</code>将大的整数转换为友好的文字表示<br>1000000 会变成 1.0 million<br><code>naturalday</code>对于当天或者一天之内的日期， 返回“今天”，“明天”或者“昨天”，视情况而定。否则，使用传进来的格式字符串给日期格式化<br><code>naturaltime</code>对于日期时间的值，返回一个字符串来表示多少秒、分钟或者小时之前<br>例如（其中“现在”是2007年2月17日16时30分0秒）：<br>17 Feb 2007 16:30:00 会变成 now<br>17 Feb 2007 16:29:31 会变成 29 seconds ago<br><code>ordinal</code>将一个整数或是整数的字符串，转换为它的序数词<br>1 会变成 1st<br>2 会变成  2nd<br>3 会变成  3rd</p>\n<h2 id=\"Django-模板语言：面向Python程序员\"><a href=\"#Django-模板语言：面向Python程序员\" class=\"headerlink\" title=\"Django 模板语言：面向Python程序员\"></a><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html\" target=\"_blank\" rel=\"noopener\">Django 模板语言：面向Python程序员</a></h2><p><code>string_if_invalid</code>建议只在调试时设置，调试完成后就关闭，开发时最好不要使用，不然可能会遇到渲染问题</p>\n<p>每个上下文都包含<code>True</code> <code>False</code> <code>None</code></p>\n<h3 id=\"使用Context对象\"><a href=\"#使用Context对象\" class=\"headerlink\" title=\"[使用Context对象]\"></a>[使用<code>Context</code>对象]</h3><p><em><a href=\"http://python.usyiyi.cn/django/ref/templates/api.html#playing-with-context-objects\" target=\"_blank\" rel=\"noopener\">这里比较难理解</a></em><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Context.get(key, otherwise=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">Context.pop()</span><br><span class=\"line\">Context.push()</span><br><span class=\"line\">Context.update(other_dict)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>上下文处理器应用的时机<br>上下文处理器应用在上下文数据的顶端。也就是说，上下文处理器可能覆盖你提供给Context 或RequestContext 的变量，所以要注意避免与上下文处理器提供的变量名重复。<br>如果想要上下文数据的优先级高于上下文处理器，使用下面的模式：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"keyword\">from</span> django.template <span class=\"keyword\">import</span> RequestContext</span><br><span class=\"line\">&gt; request_context = RequestContext(request)</span><br><span class=\"line\">&gt; request_context.push(&#123;<span class=\"string\">\"my_name\"</span>: <span class=\"string\">\"Adrian\"</span>&#125;)</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Django 通过这种方式允许上下文数据在render() 和 TemplateResponse 等API 中覆盖上下文处理器。</span><br><span class=\"line\">你还可以赋予`RequestContext `一个额外的处理器列表，使用第三个可选的位置参数processors。在下面的示例中，RequestContext 实例获得一个ip_address 变量</span><br><span class=\"line\">​```python</span><br><span class=\"line\">def some_view(request):</span><br><span class=\"line\">    # ...</span><br><span class=\"line\">    c = RequestContext(request, &#123;</span><br><span class=\"line\">        &apos;foo&apos;: &apos;bar&apos;,</span><br><span class=\"line\">    &#125;, [&apos;ip_address&apos;:&apos;127.0.0.1&apos;])</span><br><span class=\"line\">    return HttpResponse(t.render(c))</span><br></pre></td></tr></table></figure>\n<p>上面例子中<code>ip_address</code>也会加入到上下文中</p>\n<h3 id=\"内建的模板上下文处理器\"><a href=\"#内建的模板上下文处理器\" class=\"headerlink\" title=\"内建的模板上下文处理器\"></a>内建的模板上下文处理器</h3><p>下面是内奸的上下文处理器所添加的内容<br><code>django.contrib.auth.context_processors.auth</code></p>\n<ul>\n<li><code>user</code></li>\n<li><code>perms</code></li>\n</ul>\n<p><code>django.template.context_processors.debug</code></p>\n<ul>\n<li>debug</li>\n<li>sql_queryes<br>一个{‘sql’: …, ‘time’: …} 字典的列表，表示请求期间到目前为止发生的每个SQL 查询及花费的时间。这个列表按查询的顺序排序，并直到访问时才生成。</li>\n</ul>\n<p><code>django.template.context_processors.i18n</code></p>\n<ul>\n<li><code>MEDIA_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.static</code></p>\n<ul>\n<li><code>STATIC_URL</code></li>\n</ul>\n<p><code>django.template.context_processors.csrf</code></p>\n<ul>\n<li><code>csrf_token</code></li>\n</ul>\n<p><code>django.template.context_processors.request</code></p>\n<ul>\n<li><code>request</code></li>\n</ul>\n<p><code>django.contrib.messages.context_processors.messages</code></p>\n<ul>\n<li><code>messages</code></li>\n<li><code>DEFAULT_MESSAGE_LEVELS</code></li>\n</ul>\n<h2 id=\"自定义模板标签和过滤器\"><a href=\"#自定义模板标签和过滤器\" class=\"headerlink\" title=\"自定义模板标签和过滤器\"></a><a href=\"http://python.usyiyi.cn/django/howto/custom-template-tags.html\" target=\"_blank\" rel=\"noopener\">自定义模板标签和过滤器</a></h2><h3 id=\"自定义过滤器\"><a href=\"#自定义过滤器\" class=\"headerlink\" title=\"自定义过滤器\"></a>自定义过滤器</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"><span class=\"meta\">@register.filter(name='cut')</span></span><br><span class=\"line\"> </span><br><span class=\"line\">register.filter(<span class=\"string\">'cut'</span>, cut)</span><br><span class=\"line\">register.filter(<span class=\"string\">'lower'</span>, lower)</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">cut</span><span class=\"params\">(value, arg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.replace(arg, <span class=\"string\">''</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.filter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lower</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value.lower()</span><br></pre></td></tr></table></figure>\n<p>可使用<code>SafeData</code>来验证是否是安全数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> isinstance(value, SafeData):</span><br><span class=\"line\">    <span class=\"comment\"># Do something with the \"safe\" string.</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p>或使用<code>is_safe</code>来控制只接收的安全的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.filter(is_safe=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">myfilter</span><span class=\"params\">(value)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> value</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"自定义标签\"><a href=\"#自定义标签\" class=\"headerlink\" title=\"自定义标签\"></a>自定义标签</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> datetime</span><br><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> template</span><br><span class=\"line\"> </span><br><span class=\"line\">register = template.Library()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@register.simple_tag</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">current_time</span><span class=\"params\">(format_string)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> datetime.datetime.now().strftime(format_string)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% show_results poll %&#125;</span><br></pre></td></tr></table></figure>\n<p>写一个标签，实现下面的效果<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>First choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Second choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>Third choice<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1开始<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('results.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">show_results</span><span class=\"params\">(poll)</span>:</span></span><br><span class=\"line\">    choices = poll.choice_set.all()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;<span class=\"string\">'choices'</span>: choices&#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>results.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">&#123;% for choice in choices %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span> &#123;&#123; choice &#125;&#125; <span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">&#123;% endfor %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>例子1结束</p>\n<p>可使用<code>takes_context=True</code>直接访问上下文件中的数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('link.html', takes_context=True)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">jump_link</span><span class=\"params\">(context)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 因为takes_context=True所以这里的context就是上下文，可以从里面拿想要的数据，如果有多个参数，方法里的第一个参数名必须是context</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"string\">'link'</span>: context[<span class=\"string\">'home_link'</span>],</span><br><span class=\"line\">        <span class=\"string\">'title'</span>: context[<span class=\"string\">'home_title'</span>],</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<p><code>link.html</code><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"&#123;&#123; link &#125;&#125;\"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span>.</span><br></pre></td></tr></table></figure></p>\n<p>页面直接写<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% jump_link %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>位置参数和关键字参数和<code>python</code>语法一样<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@register.inclusion_tag('my_template.html')</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_tag</span><span class=\"params\">(a, b, *args, **kwargs)</span>:</span></span><br><span class=\"line\">    warning = kwargs[<span class=\"string\">'warning'</span>]</span><br><span class=\"line\">    profile = kwargs[<span class=\"string\">'profile'</span>]</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ...</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\">my_tag</span> 123 \"abcd\" book.title warning=message|<span class=\"name\">lower</span> profile=user.profile %&#125;</span><span class=\"xml\"></span></span><br></pre></td></tr></table></figure>\n<p>还有一个<code>register.assignment_tag</code>与<code>register.simple_tag</code>功能一样，不知道有什么特殊作用</p>\n<h2 id=\"使用表单\"><a href=\"#使用表单\" class=\"headerlink\" title=\"使用表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/index.html\" target=\"_blank\" rel=\"noopener\">使用表单</a></h2><p>一些表单输入自带有html5的验证，要禁用这些验证可以设置<code>form</code>标签的<code>novalidate</code>属性</p>\n<p><code>is_bound</code>可以判断一个表单是否具有绑定数据<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure></p>\n<p>当表单通过<code>is_valid()</code>方法验证后，可以直接在<code>form.cleaned_data</code>中拿值，并且是已经转换好的<code>python</code>格式的数据，但仍然可以从<code>request.POST</code>直接访问到未验证的数据。</p>\n<p>表单排列<br><code></code><br><code></code><br><code></code></p>\n<p>表单属性<br><code></code>字段html标签<br><code></code>字段的<code>lable</code>html标签<br><code></code>字段<code>lable</code>标签上的<code>for</code>值，也是字段标签上的<code>id</code></p>\n<p><code></code>隐藏字段列表<br><code></code>显示的字段列表</p>\n<p>错误信息<br><code></code>不是特定字段的错误<br><code></code>全部错误，一个字典<br><code></code>字段错误</p>\n<p>可从<code>form</code>从遍历出<code>field</code><br><code></code>有以下属性<br><code>`</code>Model<code>或是</code>Form<code>上的</code>label<code>的值</code><code>整个</code>label<code>标签，包含冒号</code><code>字段的id</code><code>字段的值</code><code>字段的</code>name<code>，考虑表单的前缀</code><code>字段的帮助文档</code><code>字段的错误</code><code>判断字段是否隐藏</code><code>表单类中</code>Field<code>的实例，可以使用它来访问</code>Field`属性，如<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name.field.max_length</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单-API\"><a href=\"#表单-API\" class=\"headerlink\" title=\"表单 API\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/api.html\" target=\"_blank\" rel=\"noopener\">表单 API</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 未绑定表单</span></span><br><span class=\"line\">f = ContactForm()</span><br><span class=\"line\">data = &#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'hello'</span>,</span><br><span class=\"line\">        <span class=\"string\">'message'</span>: <span class=\"string\">'Hi there'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sender'</span>: <span class=\"string\">'foo@example.com'</span>,</span><br><span class=\"line\">        <span class=\"string\">'cc_myself'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\"><span class=\"comment\"># 已绑定的表单</span></span><br><span class=\"line\">f = ContactForm(data)</span><br></pre></td></tr></table></figure>\n<p>表单实例一但创建，数据不可更改</p>\n<h3 id=\"Form-clean\"><a href=\"#Form-clean\" class=\"headerlink\" title=\"Form.clean()\"></a><code>Form.clean()</code></h3><h3 id=\"Form-is-valid\"><a href=\"#Form-is-valid\" class=\"headerlink\" title=\"Form.is_valid()\"></a><code>Form.is_valid()</code></h3><h3 id=\"Form-errors\"><a href=\"#Form-errors\" class=\"headerlink\" title=\"Form.errors\"></a><code>Form.errors</code></h3><blockquote>\n<p><code>Form.errors</code><br>访问errors 属性可以获得错误信息的一个字典：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;<span class=\"string\">'sender'</span>: [<span class=\"string\">'Enter a valid email address.'</span>], <span class=\"string\">'subject'</span>: [<span class=\"string\">'This field is required.'</span>]&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<p>在这个字典中，键为字段的名称，值为表示错误信息的Unicode 字符串组成的列表。错误信息保存在列表中是因为字段可能有多个错误信息。<br>你可以在调用is_valid() 之前访问errors。表单的数据将在第一次调用is_valid() 或者访问errors 时验证。<br>验证只会调用一次，无论你访问errors 或者调用is_valid() 多少次。这意味着，如果验证过程有副作用，这些副作用将只触发一次。</p>\n<h3 id=\"Form-errors-as-data\"><a href=\"#Form-errors-as-data\" class=\"headerlink\" title=\"Form.errors.as_data()\"></a><code>Form.errors.as_data()</code></h3><blockquote>\n<p>返回一个字典，它映射字段到原始的ValidationError 实例</p>\n</blockquote>\n<h3 id=\"Form-errors-as-json-escape-html-False\"><a href=\"#Form-errors-as-json-escape-html-False\" class=\"headerlink\" title=\"Form.errors.as_json(escape_html=False)\"></a><code>Form.errors.as_json(escape_html=False)</code></h3><blockquote>\n<p>返回JSON 序列化后的错误。</p>\n</blockquote>\n<h3 id=\"Form-add-error-field-error\"><a href=\"#Form-add-error-field-error\" class=\"headerlink\" title=\"Form.add_error(field, error)\"></a><code>Form.add_error(field, error)</code></h3><blockquote>\n<p>这个方法允许在Form.clean() 方法内部或从表单的外部一起给字段添加错误信息<br>Form.add_error() 会自动删除cleaned_data 中的相关字段</p>\n</blockquote>\n<h3 id=\"Form-has-error-field-code-None\"><a href=\"#Form-has-error-field-code-None\" class=\"headerlink\" title=\"Form.has_error(field, code=None)\"></a><code>Form.has_error(field, code=None)</code></h3><blockquote>\n<p>这个方法返回一个布尔值，指示一个字段是否具有指定错误code 的错误。当code 为None 时，如果字段有任何错误它都将返回True。<br>若要检查非字段错误，使用NON_FIELD_ERRORS 作为field 参数。</p>\n</blockquote>\n<h3 id=\"Form-non-field-errors\"><a href=\"#Form-non-field-errors\" class=\"headerlink\" title=\"Form.non_field_errors()\"></a><code>Form.non_field_errors()</code></h3><blockquote>\n<p>这个方法返回Form.errors 中不是与特定字段相关联的错误。它包含在Form.clean() 中引发的ValidationError 和使用Form.add_error(None, “…”) 添加的错误。</p>\n</blockquote>\n<p>未绑定表单的行为<br>验证没有绑定数据的表单是没有意义的，下面的例子展示了这种情况：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.is_valid()</span><br><span class=\"line\"><span class=\"keyword\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.errors</span><br><span class=\"line\">&#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"Form-initial\"><a href=\"#Form-initial\" class=\"headerlink\" title=\"Form.initial\"></a><code>Form.initial</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(initial=&#123;<span class=\"string\">'subject'</span>: <span class=\"string\">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure>\n<p>这些值只显示在没有绑定的表单中，即使没有提供特定值它们也<strong><em>不会作为后备的值</em></strong>。<br>优先级高于<code>Form</code>中的<code>initial</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CommentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField(initial=<span class=\"string\">'class'</span>)</span><br><span class=\"line\"><span class=\"meta\">... </span>    url = forms.URLField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    comment = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = CommentForm(initial=&#123;<span class=\"string\">'name'</span>: <span class=\"string\">'instance'</span>&#125;, auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(f)</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"name\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Url:&lt;/th&gt;&lt;td&gt;&lt;input type=\"url\" name=\"url\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;Comment:&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"comment\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-has-changed\"><a href=\"#Form-has-changed\" class=\"headerlink\" title=\"Form.has_changed()\"></a><code>Form.has_changed()</code></h3><p><strong>也有<code>Field.has_changed()</code>方法</strong><br>检查表单数据是否从初始数据发生改变<br>当提交表单时，我们可以重新构建表单并提供初始值，这样可以实现比较：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm(request.POST, initial=data)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.has_changed()</span><br></pre></td></tr></table></figure></p>\n<p>如果request.POST 中的数据与initial 中的不同，has_changed() 将为True，否则为False。 计算的结果是通过调用表单每个字段的Field.has_changed() 得到的。</p>\n<p><code>Form.fields</code><br>从表单中访问字段<br>是一个<code>OrderedDict</code><br>可你可以修改表单实例的字段来改变字段在表单中的表示：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Name:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"instance\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<p>注意不要改变base_fields 属性，因为一旦修改将影响同一个Python 进程中接下来所有的ContactForm 实例：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.base_fields[<span class=\"string\">'name'</span>].label = <span class=\"string\">\"Username\"</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f = CommentForm(auto_id=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>another_f.as_table().split(<span class=\"string\">'\\n'</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\"><span class=\"string\">'&lt;tr&gt;&lt;th&gt;Username:&lt;/th&gt;&lt;td&gt;&lt;input name=\"name\" type=\"text\" value=\"class\" /&gt;&lt;/td&gt;&lt;/tr&gt;'</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>cleaned_data 始终只 包含表单中定义的字段，即使你在构建表单 时传递了额外的数据。<br>当表单合法时，cleaned_data 将包含所有字段的键和值，即使传递的数据不包含某些可选字段的值。</p>\n</blockquote>\n<h3 id=\"Form-cleaned-data\"><a href=\"#Form-cleaned-data\" class=\"headerlink\" title=\"Form.cleaned_data\"></a><code>Form.cleaned_data</code></h3><h3 id=\"Form-as-p\"><a href=\"#Form-as-p\" class=\"headerlink\" title=\"Form.as_p\"></a><code>Form.as_p</code></h3><p><code>Form.as_ul</code><br><code>Form.as_table</code></p>\n<h3 id=\"Form-error-css-class-Form-required-css-class\"><a href=\"#Form-error-css-class-Form-required-css-class\" class=\"headerlink\" title=\"Form.error_css_class Form.required_css_class\"></a><code>Form.error_css_class</code> <code>Form.required_css_class</code></h3><p>在<code>Form</code>类下可以用上面两个属性定义错误样式和必填样式，没有默认值，<code>required_css_class</code>也会回在<code>label</code>标签上</p>\n<h2 id=\"Form-auto-id\"><a href=\"#Form-auto-id\" class=\"headerlink\" title=\"Form.auto_id\"></a><code>Form.auto_id</code></h2><p>控制表单上的<code>label</code>和表单元素的id，值为<code>True</code>，<code>False</code>或字符串，支持<code>%s</code>占位符，表示当前字段名</p>\n<blockquote>\n<p>如果auto_id 设置为任何其它的真值 —— 例如不包含%s 的字符串 —— 那么其行为将类似auto_id 等于True。<br>默认情况下，auto_id 设置为’id_%s’。</p>\n</blockquote>\n<h3 id=\"Form-label-suffix\"><a href=\"#Form-label-suffix\" class=\"headerlink\" title=\"Form.label_suffix\"></a><code>Form.label_suffix</code></h3><p>默认为英文的<code>:</code></p>\n<h3 id=\"BoundField\"><a href=\"#BoundField\" class=\"headerlink\" title=\"BoundField\"></a><code>BoundField</code></h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">form = ContactForm()</span><br><span class=\"line\"><span class=\"keyword\">for</span> boundfield <span class=\"keyword\">in</span> form:</span><br><span class=\"line\">    print(boundfield)</span><br><span class=\"line\"><span class=\"comment\"># 或</span></span><br><span class=\"line\"><span class=\"keyword\">from</span>[<span class=\"string\">'name'</span>]</span><br></pre></td></tr></table></figure>\n<p><code>BoundField.errors</code><br><code>BoundField.label_tag(contents=None, attrs=None, label_suffix=None)</code><br><code>BoundField.css_classes()</code><br><code>BoundField.value()</code><br>提供初始值，会被绑定值覆盖<br><code>BoundField.id_for_label</code></p>\n<h3 id=\"Form-is-multipart\"><a href=\"#Form-is-multipart\" class=\"headerlink\" title=\"Form.is_multipart()\"></a><code>Form.is_multipart()</code></h3><p>可判断表单是否需要<code>multipart</code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">if</span></span> form.is_multipart %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">enctype</span>=<span class=\"string\">\"multipart/form-data\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">else</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"/foo/\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">endif</span></span> %&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"></span><span class=\"template-variable\">&#123;&#123; form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>子类化表单时可通过设置<code>None</code>来删除从父类中继承过来的字段<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ParentForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = forms.CharField()</span><br><span class=\"line\"><span class=\"meta\">... </span>    age = forms.IntegerField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ChildForm</span><span class=\"params\">(ParentForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    name = <span class=\"keyword\">None</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ChildForm().fields.keys()</span><br><span class=\"line\"><span class=\"meta\">... </span>[<span class=\"string\">'age'</span>]</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Form-prefix\"><a href=\"#Form-prefix\" class=\"headerlink\" title=\"Form.prefix\"></a><code>Form.prefix</code></h3><p>如果在页面中需要放多个相同的表单，可以设置表单的前缀<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>father = PersonForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(father.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"first_name\" id=\"id_first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"last_name\" id=\"id_last_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>mother = PersonForm(prefix=<span class=\"string\">\"mother\"</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(mother.as_ul())</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-first_name\"&gt;First name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-first_name\" id=\"id_mother-first_name\" /&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;li&gt;&lt;label for=\"id_mother-last_name\"&gt;Last name:&lt;/label&gt; &lt;input type=\"text\" name=\"mother-last_name\" id=\"id_mother-last_name\" /&gt;&lt;/li&gt;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单字段\"><a href=\"#表单字段\" class=\"headerlink\" title=\"表单字段\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/fields.html\" target=\"_blank\" rel=\"noopener\">表单字段</a></h2><h3 id=\"Field-has-change\"><a href=\"#Field-has-change\" class=\"headerlink\" title=\"Field.has_change()\"></a><code>Field.has_change()</code></h3><p>检查字段的值是否从初始值发生改变</p>\n<h3 id=\"内建字段\"><a href=\"#内建字段\" class=\"headerlink\" title=\"内建字段\"></a>内建字段</h3><h4 id=\"BooleanField\"><a href=\"#BooleanField\" class=\"headerlink\" title=\"BooleanField\"></a><code>BooleanField</code></h4><p>Widget：<code>CheckboxInput</code><br>错误信息的键：<code>required</code></p>\n<h4 id=\"CharField\"><a href=\"#CharField\" class=\"headerlink\" title=\"CharField\"></a><code>CharField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>max_length<code>min_length`\n接收两个可选参数\n`max_length</code>min_length`</p>\n<h4 id=\"ChoiceField\"><a href=\"#ChoiceField\" class=\"headerlink\" title=\"ChoiceField\"></a><code>ChoiceField</code></h4><p>Widtget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_choice<code>错误消息可能包含</code>%(value)s<code>，它将被选择的选项替换掉。\n接收一个额外的必选参数</code>choices`<br>是一个二元组组成的可迭代对象</p>\n<h4 id=\"TypeChoiceField\"><a href=\"#TypeChoiceField\" class=\"headerlink\" title=\"TypeChoiceField\"></a><code>TypeChoiceField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>接收额外的参数</code>choices<code>是一个二元组组成的可迭代对象</code>coerce<code>接收一个参数并返回强制转换后的值的一个函数。例如内建的int、float、bool 和其它类型。默认为id 函数。注意强制转换在输入验证结束后发生，所以它可能强制转换不在 choices 中的值</code>empty_value`<br>    用于表示“空”的值。默认为空字符串；None 是另外一个常见的选项。注意这个值不会被coerce 参数中指定的函数强制转换，所以请根据情况进行选择</p>\n<h4 id=\"DateField\"><a href=\"#DateField\" class=\"headerlink\" title=\"DateField\"></a><code>DateField</code></h4><p>Widget：<code>DateInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datateim.date`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d&apos;,      # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,       # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]       # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<p>另外，如果你在设置中指定USE_L10N=False，以下的格式也将包含在默认的输入格式中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%b %d %Y&apos;,      # &apos;Oct 25 2006&apos;</span><br><span class=\"line\">&apos;%b %d, %Y&apos;,      # &apos;Oct 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %b %Y&apos;,       # &apos;25 Oct 2006&apos;</span><br><span class=\"line\">&apos;%d %b, %Y&apos;,      # &apos;25 Oct, 2006&apos;</span><br><span class=\"line\">&apos;%B %d %Y&apos;,       # &apos;October 25 2006&apos;</span><br><span class=\"line\">&apos;%B %d, %Y&apos;,      # &apos;October 25, 2006&apos;</span><br><span class=\"line\">&apos;%d %B %Y&apos;,       # &apos;25 October 2006&apos;</span><br><span class=\"line\">&apos;%d %B, %Y&apos;]      # &apos;25 October, 2006&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DateTimeField\"><a href=\"#DateTimeField\" class=\"headerlink\" title=\"DateTimeField\"></a><code>DateTimeField</code></h4><p>Widget：<code>DateTimeInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收一个可选参数</code>input_formats<code>一个格式的列表，用于转换一个字符串为</code>datetime.datetime`对象<br>默认为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[&apos;%Y-%m-%d %H:%M:%S&apos;,    # &apos;2006-10-25 14:30:59&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d %H:%M&apos;,        # &apos;2006-10-25 14:30&apos;</span><br><span class=\"line\">&apos;%Y-%m-%d&apos;,              # &apos;2006-10-25&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M:%S&apos;,     # &apos;10/25/2006 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y %H:%M&apos;,        # &apos;10/25/2006 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%Y&apos;,              # &apos;10/25/2006&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M:%S&apos;,     # &apos;10/25/06 14:30:59&apos;</span><br><span class=\"line\">&apos;%m/%d/%y %H:%M&apos;,        # &apos;10/25/06 14:30&apos;</span><br><span class=\"line\">&apos;%m/%d/%y&apos;]              # &apos;10/25/06&apos;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"DecimalField\"><a href=\"#DecimalField\" class=\"headerlink\" title=\"DecimalField\"></a><code>DecimalField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为NumberInput，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_digits<code>max_decimal_places</code>max_whole_digits<code></code>max_value<code>和</code>min_value<code>错误信息可能包含</code>%(limit_value)s<code>，它们将被真正的限制值替换。类似地，</code>max_digits<code>、</code>max_decimal_places<code>和</code>max_whole_digits<code>错误消息可能包含</code>%(max)s<code>接收四个可选参数</code>max_value<code></code>min_value<code></code>max_digits<code>最大位数</code>decimal_places`最大小数位</p>\n<h4 id=\"DurationField\"><a href=\"#DurationField\" class=\"headerlink\" title=\"DurationField\"></a><code>DurationField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid`</p>\n<h4 id=\"EmailField\"><a href=\"#EmailField\" class=\"headerlink\" title=\"EmailField\"></a><code>EmailField</code></h4><p>Widget：<code>EmailInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>max_length<code></code>min_length`</p>\n<h4 id=\"FileField\"><a href=\"#FileField\" class=\"headerlink\" title=\"FileField\"></a><code>FileField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code>max_length`\n接收两个可选参数\n`max_length</code>allow_empty_file<code>如果提供，这两个参数确保文件名的最大长度，而且即使文件内容为空时验证也会成功</code>max_length<code>错误信息表示文件名的长度。在错误信息中，</code>%(max)d<code>将替换为文件的最大长度，%</code>(length)d` 将替换为当前文件名的长度</p>\n<h4 id=\"FilePathField\"><a href=\"#FilePathField\" class=\"headerlink\" title=\"FilePathField\"></a><code>FilePathField</code></h4><p>Widget：<code>Select</code><br>错误信息的键：<code>required`</code>invalid_choice<code>这个字段允许从一个特定的目录选择文件\n接收五个参数</code>path<code>必须\n想要列出的目录的绝对路径</code>recursive<code>可选\n布尔值，默认为</code>False<code>，是否需要递归这个目录</code>match<code>可选\n正则表达式表示一个模式，只有匹配这个表达式的名称才会允许作为选项</code>allow_files<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的文件，它和</code>allow_folders<code>必须有一个为</code>True<code></code>allow_folders<code>可选\n布尔值，默认为</code>True<code>，表示是否应该包含指定位置的目录，和</code>allow_files<code>必须有一个为</code>True`</p>\n<h4 id=\"FloatField\"><a href=\"#FloatField\" class=\"headerlink\" title=\"FloatField\"></a><code>FloatField</code></h4><p>Widget：当<code>Field.localize</code>是False 时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"ImageField\"><a href=\"#ImageField\" class=\"headerlink\" title=\"ImageField\"></a><code>ImageField</code></h4><p>Widget：<code>ClearableFileInput</code><br>错误信息的键：<code>required`</code>invalid<code>missing</code>empty<code></code>invalid_image`</p>\n<h4 id=\"IntegerField\"><a href=\"#IntegerField\" class=\"headerlink\" title=\"IntegerField\"></a><code>IntegerField</code></h4><p>Widget：当<code>Field.localize</code>是<code>False</code>时为<code>NumberInput</code>，否则为<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>max_value</code>min_value<code>接收两个可选参数</code>max_value<code></code>min_value`</p>\n<h4 id=\"IPAddressField\"><a href=\"#IPAddressField\" class=\"headerlink\" title=\"IPAddressField\"></a><code>IPAddressField</code></h4><p>1.7弃用</p>\n<h4 id=\"GenericIPAddressField\"><a href=\"#GenericIPAddressField\" class=\"headerlink\" title=\"GenericIPAddressField\"></a><code>GenericIPAddressField</code></h4><p>Widget：<code>TextInput</code><br>错误信息的键：<code>required`</code>invalid<code>接收两个可选参数</code>protocol<code></code>unpack_ipv4`</p>\n<h4 id=\"MultipleChoiceField\"><a href=\"#MultipleChoiceField\" class=\"headerlink\" title=\"MultipleChoiceField\"></a><code>MultipleChoiceField</code></h4><p>Widget：<code>SelectMultiple</code><br>错误信息的键：<code>required`</code>invalid_choice<code></code>invalid_list`</p>\n<h4 id=\"TypedMultipleChoiceField\"><a href=\"#TypedMultipleChoiceField\" class=\"headerlink\" title=\"TypedMultipleChoiceField\"></a><code>TypedMultipleChoiceField</code></h4><h4 id=\"NullBooleanField\"><a href=\"#NullBooleanField\" class=\"headerlink\" title=\"NullBooleanField\"></a><code>NullBooleanField</code></h4><h4 id=\"RegexField\"><a href=\"#RegexField\" class=\"headerlink\" title=\"RegexField\"></a><code>RegexField</code></h4><h4 id=\"SlugField\"><a href=\"#SlugField\" class=\"headerlink\" title=\"SlugField\"></a><code>SlugField</code></h4><h4 id=\"TimeField\"><a href=\"#TimeField\" class=\"headerlink\" title=\"TimeField\"></a><code>TimeField</code></h4><h4 id=\"URLField\"><a href=\"#URLField\" class=\"headerlink\" title=\"URLField\"></a><code>URLField</code></h4><h4 id=\"UUIDField\"><a href=\"#UUIDField\" class=\"headerlink\" title=\"UUIDField\"></a><code>UUIDField</code></h4><p>输出时需要<code>.hex</code></p>\n<h4 id=\"ComboField\"><a href=\"#ComboField\" class=\"headerlink\" title=\"ComboField\"></a><code>ComboField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ComboField</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ComboField(fields=[CharField(max_length=<span class=\"number\">20</span>), EmailField()])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'test@example.com'</span>)</span><br><span class=\"line\"><span class=\"string\">'test@example.com'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.clean(<span class=\"string\">'longemailaddress@example.com'</span>)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">...</span><br><span class=\"line\">ValidationError: [<span class=\"string\">'Ensure this value has at most 20 characters (it has 28).'</span>]</span><br></pre></td></tr></table></figure>\n<h4 id=\"MultiValueField\"><a href=\"#MultiValueField\" class=\"headerlink\" title=\"MultiValueField\"></a><code>MultiValueField</code></h4><h4 id=\"SplitDateTimeField\"><a href=\"#SplitDateTimeField\" class=\"headerlink\" title=\"SplitDateTimeField\"></a><code>SplitDateTimeField</code></h4><h4 id=\"ModelChoiceField\"><a href=\"#ModelChoiceField\" class=\"headerlink\" title=\"ModelChoiceField\"></a><code>ModelChoiceField</code></h4><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># A custom empty label</span></span><br><span class=\"line\">field1 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"string\">\"(Nothing)\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># No empty label</span></span><br><span class=\"line\">field2 = forms.ModelChoiceField(queryset=..., empty_label=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"ModelMultipleChoiceField\"><a href=\"#ModelMultipleChoiceField\" class=\"headerlink\" title=\"ModelMultipleChoiceField\"></a><code>ModelMultipleChoiceField</code></h4><h2 id=\"Widgets\"><a href=\"#Widgets\" class=\"headerlink\" title=\"Widgets\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/widgets.html\" target=\"_blank\" rel=\"noopener\">Widgets</a></h2><p>处理文本输入的Widget</p>\n<ul>\n<li><code>TextInput</code></li>\n<li><code>NumberInput</code></li>\n<li><code>EmailInput</code></li>\n<li><code>URLInput</code></li>\n<li><code>PasswordInput</code></li>\n<li><code>HiddenInput</code></li>\n<li><code>DateInput</code></li>\n<li><code>DateTimeInput</code></li>\n<li><code>TimeInput</code></li>\n<li><code>Textarea</code></li>\n</ul>\n<p>选择和复选框Widget</p>\n<ul>\n<li><code>CheckboxInput</code></li>\n<li><code>Select</code></li>\n<li><code>NullBooleanSelect</code></li>\n<li><code>SelectMultiple</code></li>\n<li><code>RadioSelect</code></li>\n<li><code>CheckboxSelectMultiple</code></li>\n</ul>\n<p>文件上传<code>Widget</code></p>\n<ul>\n<li><code>FileInput</code></li>\n<li><code>ClearableFileInput</code></li>\n</ul>\n<p>复合Widget</p>\n<ul>\n<li><code>MultipleHiddenInput</code></li>\n<li><code>SplitDateTimeWidget</code></li>\n<li><code>SplitHiddenDateTimeWidget</code></li>\n<li><code>SelectDateWidget</code></li>\n</ul>\n<h2 id=\"从模型创建表单\"><a href=\"#从模型创建表单\" class=\"headerlink\" title=\"从模型创建表单\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/modelforms.html\" target=\"_blank\" rel=\"noopener\">从模型创建表单</a></h2><p>下面两种方法效果相同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">author = Author(title=<span class=\"string\">'Mr'</span>)</span><br><span class=\"line\">form = PartialAuthorForm(request.POST, instance=author)</span><br><span class=\"line\">form.save()</span><br><span class=\"line\"><span class=\"comment\"># or</span></span><br><span class=\"line\">form = PartialAuthorForm(request.POST)</span><br><span class=\"line\">author = form.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\">author.title = <span class=\"string\">'Mr'</span></span><br><span class=\"line\">author.save()</span><br></pre></td></tr></table></figure></p>\n<p>显式定义的字段不会从对于的模型中获取属性，例如 max_length 或required。 如果你希望保持模型中指定的行为，你必须设置在声明表单字段时显式设置相关的参数。</p>\n<p>例如，如果Article 模型像下面这样：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Article</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    headline = models.CharField(max_length=<span class=\"number\">200</span>, null=<span class=\"keyword\">True</span>, blank=<span class=\"keyword\">True</span>,</span><br><span class=\"line\">                                help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\">    content = models.TextField()</span><br></pre></td></tr></table></figure></p>\n<p>而你想为headline 做一些自定义的验证，在保持blank 和help_text 值的同时，你必须定义这样定义ArticleForm：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArticleForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\">    headline = MyFormField(max_length=<span class=\"number\">200</span>, required=<span class=\"keyword\">False</span>,</span><br><span class=\"line\">                           help_text=<span class=\"string\">\"Use puns liberally\"</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Article</span><br><span class=\"line\">        fields = [<span class=\"string\">'headline'</span>, <span class=\"string\">'content'</span>]</span><br></pre></td></tr></table></figure>\n<p>创建简单的表单或表单集可以使用<code>modelform_factory()`</code>modelformset_factory()`方法来新建。</p>\n<p>启用字段的本地化功能¶</p>\n<p>默认情况下，ModelForm 中的字段不会本地化它们的数据。你可以使用Meta 类的localized_fields 属性来启用字段的本地化功能。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> ModelForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">AuthorForm</span><span class=\"params\">(ModelForm)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        model = Author</span><br><span class=\"line\"><span class=\"meta\">... </span>        localized_fields = (<span class=\"string\">'birth_date'</span>,)</span><br></pre></td></tr></table></figure></p>\n<p>如果localized_fields 设置为<code>&#39;__all__&#39;</code>这个特殊的值，所有的字段都将本地化。</p>\n<p>提供的初始值会覆盖从实例取得的值<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article = Article.objects.get(pk=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>article.headline</span><br><span class=\"line\"><span class=\"string\">'My headline'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form = ArticleForm(initial=&#123;<span class=\"string\">'headline'</span>: <span class=\"string\">'Initial headline'</span>&#125;, instance=article)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>form[<span class=\"string\">'headline'</span>].value()</span><br><span class=\"line\"><span class=\"string\">'Initial headline'</span></span><br></pre></td></tr></table></figure></p>\n<p>如果不需要很多自定义，可以直接使用工厂方法来生成表单类<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelform_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Book</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>BookForm = modelform_factory(Book, fields=(<span class=\"string\">\"author\"</span>, <span class=\"string\">\"title\"</span>))</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms <span class=\"keyword\">import</span> Textarea</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Book, form=BookForm,</span><br><span class=\"line\"><span class=\"meta\">... </span>                         widgets=&#123;<span class=\"string\">\"title\"</span>: Textarea()&#125;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>Form = modelform_factory(Author, form=AuthorForm, localized_fields=(<span class=\"string\">\"birth_date\"</span>,))</span><br></pre></td></tr></table></figure>\n<p>表单集<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.models <span class=\"keyword\">import</span> modelformset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.models <span class=\"keyword\">import</span> Author</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>, <span class=\"string\">'title'</span>))</span><br></pre></td></tr></table></figure></p>\n<p>使用<code>model</code>生成的<code>formset</code>默认带一个包含全部对象的<code>queryset</code><br><code>formset`</code>save()`之后，会有新的属性<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">models.BaseModelFormSet.changed_objects</span><br><span class=\"line\">models.BaseModelFormSet.deleted_objects</span><br><span class=\"line\">models.BaseModelFormSet.new_objects</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>为最大的表单数，如果初始<code>queryset</code>长度比<code>max_num</code>，则按照<code>queryset</code>来，<code>extra</code>是可以额外添加的空表单的个数，但<code>extra</code>和<code>queryset</code>长度相加如果大于<code>max_num</code>，则<code>extra</code>和实例设置可能表现不一样，如<code>queryset</code>长度为2，<code>max_num</code>为4，<code>extra</code>不管是2还是5，最终表现出来都是2。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AuthorFormSet = modelformset_factory(Author, fields=(<span class=\"string\">'name'</span>,), max_num=<span class=\"number\">4</span>, extra=<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure></p>\n<p><code>max_num</code>默认只影响显示，不影响验证，如果需要影响验证添加<code>validate_max=True</code>即可</p>\n<h2 id=\"表单素材-Media-类\"><a href=\"#表单素材-Media-类\" class=\"headerlink\" title=\"表单素材 ( Media 类)\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/media.html\" target=\"_blank\" rel=\"noopener\">表单素材 ( Media 类)</a></h2><p><strong><code>Form</code>和<code>Widget</code>都可以定义素材</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\">        css = &#123;</span><br><span class=\"line\">            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br></pre></td></tr></table></figure>\n<p>使用<code>CalendarWidget</code>会自动引入下列资源<br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/css\"</span> <span class=\"attr\">media</span>=<span class=\"string\">\"all\"</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/animations.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://static.example.com/actions.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p><code>Widget</code>会默认继承父类的素材，如果不想继承在<code>Media</code>里使用<code>extend</code>禁止。</p>\n<p>动态定义<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_media</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> forms.Media(css=&#123;<span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)&#125;,</span><br><span class=\"line\">                           js=(<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>))</span><br><span class=\"line\">    media = property(_media)</span><br></pre></td></tr></table></figure></p>\n<p>两个<code>Media</code>实例可以相加<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CalendarWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'pretty.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'animations.js'</span>, <span class=\"string\">'actions.js'</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">OtherWidget</span><span class=\"params\">(forms.TextInput)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        js = (<span class=\"string\">'whizbang.js'</span>,)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w1 = CalendarWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>w2 = OtherWidget()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>print(w1.media + w2.media)</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单<code>Media</code><br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactForm</span><span class=\"params\">(forms.Form)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    date = DateField(widget=CalendarWidget)</span><br><span class=\"line\"><span class=\"meta\">... </span>    name = CharField(max_length=<span class=\"number\">40</span>, widget=OtherWidget)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Media</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        css = &#123;</span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"string\">'all'</span>: (<span class=\"string\">'layout.css'</span>,)</span><br><span class=\"line\"><span class=\"meta\">... </span>        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = ContactForm()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f.media</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/pretty.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;link href=<span class=\"string\">\"http://static.example.com/layout.css\"</span> type=<span class=\"string\">\"text/css\"</span> media=<span class=\"string\">\"all\"</span> rel=<span class=\"string\">\"stylesheet\"</span> /&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/animations.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/actions.js\"&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=\"text/javascript\" src=\"http://static.example.com/whizbang.js\"&gt;&lt;/script</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单集\"><a href=\"#表单集\" class=\"headerlink\" title=\"表单集\"></a><a href=\"http://python.usyiyi.cn/django/topics/forms/formsets.html\" target=\"_blank\" rel=\"noopener\">表单集</a></h2><p>表单集控制<br><code>max_num</code><br><code>min_num</code><br><code>validate_max</code><br><code>validate_min</code><br><code>can_order</code><br><code>can_delete</code></p>\n<p>其中<code>can_order`</code>can_delete`默认以以下形式展现</p>\n<p>如果是使用<code>Model</code>生成的表单集，如果<code>delete</code>后，在调用<code>formset.save()</code>会自动删除相应的数据，但如果调用了<code>formset.save(commit=False)</code>，则需要手动删除（1.6或更早版还是会自动删除）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>instances = formset.save(commit=<span class=\"keyword\">False</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">... </span>    obj.delete()</span><br></pre></td></tr></table></figure></p>\n<p>如果要兼容1.6或更早版，可以这么写<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">try</span>:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># For Django 1.7+</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">for</span> obj <span class=\"keyword\">in</span> formset.deleted_objects:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>        obj.delete()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">except</span> AssertionError:</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># Django 1.6 and earlier already deletes the objects, trying to</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"comment\"># delete them a second time raises an AssertionError.</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure></p>\n<p>在表单集里添加额外的字段<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> BaseFormSet</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseArticleFormSet</span><span class=\"params\">(BaseFormSet)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_fields</span><span class=\"params\">(self, form, index)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>        super(BaseArticleFormSet, self).add_fields(form, index)</span><br><span class=\"line\"><span class=\"meta\">... </span>        form.fields[<span class=\"string\">\"my_field\"</span>] = forms.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>ArticleFormSet = formset_factory(ArticleForm, formset=BaseArticleFormSet)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>formset = ArticleFormSet()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> form <span class=\"keyword\">in</span> formset:</span><br><span class=\"line\"><span class=\"meta\">... </span>    print(form.as_table())</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-title\"&gt;Title:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-title\" id=\"id_form-0-title\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-pub_date\"&gt;Pub date:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-pub_date\" id=\"id_form-0-pub_date\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class=\"line\">&lt;tr&gt;&lt;th&gt;&lt;label for=\"id_form-0-my_field\"&gt;My field:&lt;/label&gt;&lt;/th&gt;&lt;td&gt;&lt;input type=\"text\" name=\"form-0-my_field\" id=\"id_form-0-my_field\" /&gt;&lt;/td&gt;&lt;/tr&gt;</span><br></pre></td></tr></table></figure></p>\n<p>表单集对应的模版写法<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-variable\">&#123;&#123; formset &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>\n<p>也可以手动渲染，不能缺少<code></code><br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">table</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;&#123; form &#125;&#125;</span></span><br><span class=\"line\"><span class=\"template-tag\">        &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">    &lt;/table&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>如果是手动渲染，<code>can_order`</code>can_delete`需要手动添加<br><figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">method</span>=<span class=\"string\">\"post\"</span> <span class=\"attr\">action</span>=<span class=\"string\">\"\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123; formset.management_form &#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;% <span class=\"name\"><span class=\"name\">for</span></span> form <span class=\"keyword\">in</span> formset</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.title &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &lt;li&gt;&#123;&#123; form.pub_date &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% if formset.can_delete</span></span><br><span class=\"line\"><span class=\"template-tag\">                &lt;li&gt;&#123;&#123; form.DELETE &#125;&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">            &#123;% endif</span></span><br><span class=\"line\"><span class=\"template-tag\">        &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"template-tag\">    &#123;% endfor</span></span><br><span class=\"line\"><span class=\"template-tag\">&lt;/form&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>在一个视图中使用多个<code>FormSet</code>需要回前缀<code>prefix</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.forms.formsets <span class=\"keyword\">import</span> formset_factory</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.shortcuts <span class=\"keyword\">import</span> render_to_response</span><br><span class=\"line\"><span class=\"keyword\">from</span> myapp.forms <span class=\"keyword\">import</span> ArticleForm, BookForm</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">manage_articles</span><span class=\"params\">(request)</span>:</span></span><br><span class=\"line\">    ArticleFormSet = formset_factory(ArticleForm)</span><br><span class=\"line\">    BookFormSet = formset_factory(BookForm)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> request.method == <span class=\"string\">'POST'</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(request.POST, request.FILES, prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> article_formset.is_valid() <span class=\"keyword\">and</span> book_formset.is_valid():</span><br><span class=\"line\">            <span class=\"comment\"># do something with the cleaned_data on the formsets.</span></span><br><span class=\"line\">            <span class=\"keyword\">pass</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        article_formset = ArticleFormSet(prefix=<span class=\"string\">'articles'</span>)</span><br><span class=\"line\">        book_formset = BookFormSet(prefix=<span class=\"string\">'books'</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> render_to_response(<span class=\"string\">'manage_articles.html'</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">'article_formset'</span>: article_formset,</span><br><span class=\"line\">        <span class=\"string\">'book_formset'</span>: book_formset,</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"表单验证和字段验证\"><a href=\"#表单验证和字段验证\" class=\"headerlink\" title=\"表单验证和字段验证\"></a><a href=\"http://python.usyiyi.cn/django/ref/forms/validation.html\" target=\"_blank\" rel=\"noopener\">表单验证和字段验证</a></h2><p>格式标准<br>抛出单个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError(</span><br><span class=\"line\">    _(<span class=\"string\">'Invalid value: %(value)s'</span>),</span><br><span class=\"line\">    code=<span class=\"string\">'invalid'</span>,</span><br><span class=\"line\">    params=&#123;<span class=\"string\">'value'</span>: <span class=\"string\">'42'</span>&#125;,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></p>\n<p>招聘多个错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Good</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 1'</span>), code=<span class=\"string\">'error1'</span>),</span><br><span class=\"line\">    ValidationError(_(<span class=\"string\">'Error 2'</span>), code=<span class=\"string\">'error2'</span>),</span><br><span class=\"line\">])</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\"># Bad</span></span><br><span class=\"line\"><span class=\"keyword\">raise</span> ValidationError([</span><br><span class=\"line\">    _(<span class=\"string\">'Error 1'</span>),</span><br><span class=\"line\">    _(<span class=\"string\">'Error 2'</span>),</span><br><span class=\"line\">])</span><br></pre></td></tr></table></figure></p>\n<p>创建一个新的表单字段添加默认验证<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django <span class=\"keyword\">import</span> forms</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.core.validators <span class=\"keyword\">import</span> validate_email</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MultiEmailField</span><span class=\"params\">(forms.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_python</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Normalize data to a list of strings.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Return an empty list if no input was given.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> value:</span><br><span class=\"line\">            <span class=\"keyword\">return</span> []</span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.split(<span class=\"string\">','</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"Check if value consists only of valid emails.\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># Use the parent's handling of required fields, etc.</span></span><br><span class=\"line\">        super(MultiEmailField, self).validate(value)</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span> email <span class=\"keyword\">in</span> value:</span><br><span class=\"line\">            validate_email(email)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Django-的设置\"><a href=\"#Django-的设置\" class=\"headerlink\" title=\"Django 的设置\"></a><a href=\"http://python.usyiyi.cn/django/topics/settings.html\" target=\"_blank\" rel=\"noopener\">Django 的设置</a></h2><p>django-admin 工具</p>\n<p>当使用django-admin 时， 你可以设置只设置环境变量一次，或者每次运行该工具时显式传递设置模块。</p>\n<p>例如（Unix Bash shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>例如（Windows shell）：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set DJANGO_SETTINGS_MODULE=mysite.settings</span><br><span class=\"line\">django-admin runserver</span><br></pre></td></tr></table></figure></p>\n<p>使用–settings 命令行参数可以手工指定设置：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">django-admin runserver --settings=mysite.settings</span><br></pre></td></tr></table></figure></p>\n<p>使用下面的命令可以查询设置与默认设置的不同<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py diffsettings</span><br></pre></td></tr></table></figure></p>\n<p>在django app中使用设置应使用以下导入方式<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf <span class=\"keyword\">import</span> settings</span><br></pre></td></tr></table></figure></p>\n<p>注意，django.conf.settings 不是一个模块 —— 它是一个对象。所以不可以导入每个单独的设置：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.conf.settings <span class=\"keyword\">import</span> DEBUG  <span class=\"comment\"># This won't work.</span></span><br></pre></td></tr></table></figure></p>\n<p>不要在应用运行时改变设置</p>\n<h2 id=\"完整列表设置-Settings\"><a href=\"#完整列表设置-Settings\" class=\"headerlink\" title=\"完整列表设置(Settings)\"></a><a href=\"http://python.usyiyi.cn/django/ref/settings.html\" target=\"_blank\" rel=\"noopener\">完整列表设置(Settings)</a></h2><p><code>CSRF_COOKIE_SECURE=True</code>只通过<code>HTTPS</code>传递<code>cookie</code></p>\n<p><code>DATABASES[&#39;CONN_MAX_AGE&#39;]</code>数据库连接的戚时间，默认为0（历史遗留行为），设置为<code>None</code>表示无限的持久连接<br><code>DECIMAL_SEPARATOR</code>类型数据的分隔符默认为点<code>.</code><br><code>DISALLOWED_USER_AGENTS</code>编写正则表达式元组禁用代码访问，需要启用<code>CommonMiddleware</code>中间件<br><code>INTERNAL_IPS</code>设置公司内容的ip，在些ip列表中的ip可以访问admindoc下的书签</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/applications.html\" target=\"_blank\" rel=\"noopener\">应用</a></h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/apps.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> AppConfig</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">RockNRollConfig</span><span class=\"params\">(AppConfig)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">'rock_n_roll'</span></span><br><span class=\"line\">    verbose_name = <span class=\"string\">\"Rock ’n’ roll\"</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rock_n_roll/__init__.py</span></span><br><span class=\"line\"> </span><br><span class=\"line\">default_app_config = <span class=\"string\">'rock_n_roll.apps.RockNRollConfig'</span></span><br></pre></td></tr></table></figure>\n<p><code>AppConfig</code>可配置的属性</p>\n<ul>\n<li><code>AppConfig.name</code></li>\n<li><code>AppConfig.label</code></li>\n<li><code>AppConfig.verbose_name</code></li>\n<li><code>Appconfig.path</code></li>\n</ul>\n<p><code>AppConfig</code>只读属性</p>\n<ul>\n<li><code>AppConfig.module</code></li>\n<li><code>Appconfig.models_module</code></li>\n</ul>\n<p><code>AppConfig</code>方法</p>\n<ul>\n<li><code>AppConfig.get_models()</code></li>\n<li><code>AppConfig..get_model(model_name)</code></li>\n<li><code>AppConfigevaluate.ready()</code></li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> django.apps <span class=\"keyword\">import</span> apps</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>apps.get_app_config(<span class=\"string\">'admin'</span>).verbose_name</span><br><span class=\"line\"><span class=\"string\">'Admin'</span></span><br></pre></td></tr></table></figure>\n<p><code>APP</code></p>\n<ul>\n<li><code>apps.ready</code></li>\n<li><code>apps.get_app_configs()</code></li>\n<li><code>apps.get_app_config(app_label)</code></li>\n<li><code>apps.is_installed(app_name)</code></li>\n<li><code>apps.get_model(app_label, model_name)</code></li>\n</ul>\n<h2 id=\"Django异常\"><a href=\"#Django异常\" class=\"headerlink\" title=\"Django异常\"></a><a href=\"python.usyiyi.cn/django_182/ref/exceptions.html\">Django异常</a></h2><h3 id=\"核心异常\"><a href=\"#核心异常\" class=\"headerlink\" title=\"核心异常\"></a>核心异常</h3><p><em><code>django.core.exceptions</code></em></p>\n<ul>\n<li><p><code>ObjectDoesNotExist</code><br>对象不存在<br><code>DoesNotExist</code>的基类<br>对ObjectDoesNotExist的try/except会为所有模型捕获到所有DoesNotExist 异常</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.exceptions <span class=\"keyword\">import</span> ObjectDoesNotExist</span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    e = Entry.objects.get(id=<span class=\"number\">3</span>)</span><br><span class=\"line\">    b = Blog.objects.get(id=<span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> ObjectDoesNotExist:</span><br><span class=\"line\">    print(<span class=\"string\">\"Either the entry or blog doesn't exist.\"</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>FieldDoesNotExist</code><br>当被请求的字段在模型或模型的父类中不存在时，<code>FieldDoesNotExist</code>异常由模型的 <code>_meta.get_field()</code>方法抛出</p>\n</li>\n<li><p><code>MultipleObjectsReturned</code><br>查询时，预期只有一个对象，但是返回了多个对象会抛出此异常</p>\n</li>\n<li><p><code>SuspiciousOperation</code><br>当用户进行的操作在安全方面可疑的时候，抛出此异常，例如，篡改<code>cookie</code><br>子类</p>\n<ul>\n<li><code>DisallowedHost</code></li>\n<li><code>DisallowedModelAdminLookup</code></li>\n<li><code>DisallowedModelAdminToField</code></li>\n<li><code>DisallowedRedirect</code></li>\n<li><code>InvalidSessionKey</code></li>\n<li><code>SuspiciousFileOperation</code></li>\n<li><code>SuspiciousMultipartForm</code></li>\n<li><code>SuspiciousSession</code></li>\n</ul>\n</li>\n<li><p><code>PermissionDenied</code><br>当用户不被允许来执行请求的操作时产生</p>\n</li>\n<li><p><code>ViewDoesNotExist</code><br>当请求的视图不存在时抛出此异常</p>\n</li>\n<li><p><code>MiddlewareNotUsed</code><br>当中间件没有在服务器配置中出现时，抛出此异常</p>\n</li>\n<li><p><code>ImproperlyConfigured</code><br>django配置不当时抛出此异常，如<code>settings.py</code>中的值不正确或者不可解析</p>\n</li>\n<li><p><code>FieldError</code><br>当模型上的字段出现问题时，抛出此异常，由以下原因造成：</p>\n<ul>\n<li>模型中的字段与抽象基类中的字段重名</li>\n<li>排序造成了一个死循环</li>\n<li>关键词不能由过滤器参数解析</li>\n<li>字段不能由查询参数中的关键词决定</li>\n<li>连接（join）不能在指定对象上使用</li>\n<li>字段名称不可用</li>\n<li><p>查询包含了无效的<code>order_by</code>参数</p>\n</li>\n<li><p><code>ValidationError</code><br>当表单或模型字段验证失败时抛出此异常</p>\n</li>\n</ul>\n</li>\n<li><p><code>NON_FIELD_ERRORS</code><br>在表单或者模型中不属于特定字段的<code>ValidationError</code>被归类为<code>NON_FIELD_ERRORS</code></p>\n</li>\n</ul>\n<h3 id=\"URL解析器异常\"><a href=\"#URL解析器异常\" class=\"headerlink\" title=\"URL解析器异常\"></a>URL解析器异常</h3><ul>\n<li><p><code>Resolver404</code><br><code>django.http.Http404</code>的子类<br>当向<code>resolve</code>传递的路径不能匹配到对应视图时抛出此异常</p>\n</li>\n<li><p><code>NoReverseMatch</code><br>当你的URLconf中的一个匹配的URL不能基于提供的参数识别时，抛出此异常</p>\n</li>\n</ul>\n<h3 id=\"数据库异常\"><a href=\"#数据库异常\" class=\"headerlink\" title=\"数据库异常\"></a>数据库异常</h3><p>数据库异常由django.db导入</p>\n<ul>\n<li><code>Error</code></li>\n<li><code>InterfaceError</code></li>\n<li><code>DatabaseError</code></li>\n<li><code>DataError</code></li>\n<li><code>OperationalError</code></li>\n<li><code>IntegrityError</code></li>\n<li><code>InternalError</code></li>\n<li><code>ProgrammingError</code></li>\n<li><code>NotSupportedError</code></li>\n</ul>\n<h3 id=\"HTTP异常\"><a href=\"#HTTP异常\" class=\"headerlink\" title=\"HTTP异常\"></a>HTTP异常</h3><p>HTTP异常由django.http导入</p>\n<ul>\n<li><code>UnreadablePostError</code><br>用户取消上传时抛出此异常</li>\n</ul>\n<h3 id=\"事务异常\"><a href=\"#事务异常\" class=\"headerlink\" title=\"事务异常\"></a>事务异常</h3><p>事务异常定义由<code>django.db.transaction</code>导入</p>\n<h3 id=\"测试框架异常\"><a href=\"#测试框架异常\" class=\"headerlink\" title=\"测试框架异常\"></a>测试框架异常</h3><p>由DJango django.test 包提供的异常</p>\n<ul>\n<li><code>RedirectCycleError</code><br>当测试客户端检测到重定向的循环或者过长的链时抛出此异常</li>\n</ul>\n<h3 id=\"Python异常\"><a href=\"#Python异常\" class=\"headerlink\" title=\"Python异常\"></a><code>Python</code>异常</h3><p>Django在适当的时候也会抛出Python的内建异常</p>\n<h2 id=\"django-admin-and-manage-py\"><a href=\"#django-admin-and-manage-py\" class=\"headerlink\" title=\"django-admin and manage.py\"></a><a href=\"http://python.usyiyi.cn/django_182/ref/django-admin.html\" target=\"_blank\" rel=\"noopener\">django-admin and manage.py</a></h2><ul>\n<li><p><code>dumpdata</code><br>该命令将所有与被命名应用相关联的数据库中的数据输出到标准输出。<br>如果在dumpdate命令后面未指定Django应用名，则Django项目中安装的所有应用的数据都将被dump到fixture中<br><code>dumpdata --output data.json</code></p>\n</li>\n<li><p><code>flus</code><br>清空数据库，重新装载初始数据</p>\n</li>\n<li><code>--noinput</code></li>\n<li><code>--database</code></li>\n<li><code>--no-initial-data</code></li>\n</ul>\n<ul>\n<li><p><code>inspectdb</code><br>根据数据库结构生成model</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python manage.py inspectdb &gt; models.py</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>loaddata</code><br>导入fixture数据</p>\n</li>\n<li><p><code>runserver</code><br>启动本地上一个轻量级的Web服务器，默认多线程<br><code>--noreload</code>禁用自动重新载入<br><code>--nothreading</code>禁用多线程</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">runserver <span class=\"number\">0.0</span><span class=\"number\">.0</span><span class=\"number\">.0</span>:<span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"添加自定义的命令\"><a href=\"#添加自定义的命令\" class=\"headerlink\" title=\" 添加自定义的命令\"></a><a href=\"http://python.usyiyi.cn/django_182/howto/custom-management-commands.html\" target=\"_blank\" rel=\"noopener\"> 添加自定义的命令</a></h2><p>向应用下添加management/commands目录，Django会为此目录下的所有没有带下划线开头的python模块都注册一个<code>manage.py</code>命令。<br>在Python 2上，请确保management和management/commands两个目录都包含<code>__init__.py</code> 文件。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.core.management.base <span class=\"keyword\">import</span> BaseCommand, CommandError</span><br><span class=\"line\"><span class=\"keyword\">from</span> polls.models <span class=\"keyword\">import</span> Poll</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Command</span><span class=\"params\">(BaseCommand)</span>:</span></span><br><span class=\"line\">    help = <span class=\"string\">'Closes the specified poll for voting'</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add_arguments</span><span class=\"params\">(self, parser)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 命令行接收一个或多个poll_id值</span></span><br><span class=\"line\">        <span class=\"comment\">#</span></span><br><span class=\"line\">        parser.add_argument(<span class=\"string\">'poll_id'</span>, nargs=<span class=\"string\">'+'</span>, type=int)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">handle</span><span class=\"params\">(self, *args, **options)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> poll_id <span class=\"keyword\">in</span> options[<span class=\"string\">'poll_id'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">try</span>:</span><br><span class=\"line\">                poll = Poll.objects.get(pk=poll_id)</span><br><span class=\"line\">            <span class=\"keyword\">except</span> Poll.DoesNotExist:</span><br><span class=\"line\">                <span class=\"keyword\">raise</span> CommandError(<span class=\"string\">'Poll \"%s\" does not exist'</span> % poll_id)</span><br><span class=\"line\"> </span><br><span class=\"line\">            poll.opened = <span class=\"keyword\">False</span></span><br><span class=\"line\">            poll.save()</span><br><span class=\"line\"> </span><br><span class=\"line\">            self.stdout.write(<span class=\"string\">'Successfully closed poll \"%s\"'</span> % poll_id)</span><br></pre></td></tr></table></figure>\n<p><img alt=\"django-commands\" data-src=\"/media/django-commands.png\"></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"文档","path":"api/tags/文档.json"},{"name":"笔记","path":"api/tags/笔记.json"}]}]}