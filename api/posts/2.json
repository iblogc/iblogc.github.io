{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"使用alembic进行数据库版本管理","slug":"使用alembic进行数据库版本管理","date":"2018-09-13T10:53:14.000Z","updated":"2020-03-04T05:22:29.004Z","comments":true,"path":"api/articles/使用alembic进行数据库版本管理.json","excerpt":"转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改前言随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br>","cover":null,"content":"<p>转自：<a href=\"https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改</a></p>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。</p>\n<p>Alembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。<br><a id=\"more\"></a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install alembic</span><br></pre></td></tr></table></figure>\n<p>通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令</p>\n<p>同时需要安装的还有 SQLAlchemy 和 PyMysql</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install sqlalchemy</span><br><span class=\"line\">pip install pymysql</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在使用 alembic 之前，需要进行初始化操作。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init &lt;YOUR_ALEMBIC_DIR&gt;</span><br></pre></td></tr></table></figure>\n<p>YOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic init alembic</span><br></pre></td></tr></table></figure>\n<p><strong>此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。</strong></p>\n<p><strong>同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。</strong></p>\n<p>显示类似结果即初始化成功。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Creating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Please edit configuration/connection/logging settings <span class=\"keyword\">in</span> <span class=\"string\">'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini'</span> befor</span><br><span class=\"line\">e proceeding.</span><br></pre></td></tr></table></figure>\n<p>初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。</p>\n<h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><p>接下来对 alembic.ini 的信息进行修改。</p>\n<p>主要修改的是配置文件中的数据库连接部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sqlalchemy.url = driver://user:<span class=\"keyword\">pass</span>@localhost:port/dbname</span><br></pre></td></tr></table></figure>\n<p>将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。</p>\n<p>如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql+pymysql://demo_user:demo123456@<span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>:<span class=\"number\">3306</span>/demo_db</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改-env-py\"><a href=\"#修改-env-py\" class=\"headerlink\" title=\"修改 env.py\"></a>修改 env.py</h2><p>除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。</p>\n<p>在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。</p>\n<p>将原先的</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">target_metadata = <span class=\"keyword\">None</span></span><br></pre></td></tr></table></figure>\n<p>修改成项目中的 model<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\">sys.path.append(dirname(dirname(abspath(__file__))))</span><br><span class=\"line\"><span class=\"keyword\">from</span> app <span class=\"keyword\">import</span> db</span><br><span class=\"line\">target_metadata = db.metadata</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"创建新版本\"><a href=\"#创建新版本\" class=\"headerlink\" title=\"创建新版本\"></a>创建新版本</h2><p>用 alembic revision -m + 注释 创建数据库版本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic revision --autogenerate -m <span class=\"string\">\"init db\"</span></span><br></pre></td></tr></table></figure>\n<p>运行后，类似如下结果，即创建版本成功</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.autogenerate.compare] Detected removed table <span class=\"string\">'user'</span></span><br><span class=\"line\">Generating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。</p>\n<p>执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)</p>\n<p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。</p>\n<h2 id=\"变更数据库\"><a href=\"#变更数据库\" class=\"headerlink\" title=\"变更数据库\"></a>变更数据库</h2><p>在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本</p>\n<p><strong>将数据库升级到最新版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade head</span><br></pre></td></tr></table></figure>\n<p>运行结果类似</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(venv_win) D:\\Project\\py_sqlalchemy_demo&gt;alembic upgrade head</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -&gt; b034414f04cd, create tables02</span><br></pre></td></tr></table></figure>\n<p>其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。</p>\n<p><strong>将数据库降级到最初版本</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade base</span><br></pre></td></tr></table></figure>\n<p><strong>将数据库降级到执行版本</strong>，使用 alembic downgrade + 版本号，不包含注释部分</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade &lt;version&gt;</span><br></pre></td></tr></table></figure>\n<p>如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic downgrade 7b55b3d83158</span><br></pre></td></tr></table></figure>\n<p>运行结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  [alembic.runtime.migration] Context impl MySQLImpl.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Will assume non-transactional DDL.</span><br><span class=\"line\">INFO  [alembic.runtime.migration] Running downgrade b034414f04cd -&gt; 7b55b3d83158, create tables02</span><br></pre></td></tr></table></figure>\n<p>升级也是同样的道理，alembic upgrade + 版本号</p>\n<h2 id=\"离线更新（生成-sql-脚本）\"><a href=\"#离线更新（生成-sql-脚本）\" class=\"headerlink\" title=\"离线更新（生成 sql 脚本）\"></a>离线更新（生成 sql 脚本）</h2><p>在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;version&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>从特定起始版本生成 sql 脚本：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade &lt;vsersion&gt;:&lt;vsersion&gt; --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alembic upgrade 1975ea83b712:ae1027a6acf --sql &gt; migration.sql</span><br></pre></td></tr></table></figure>\n<p>如果是数据库降级操作，把 upgrade 替换为 downgrade。</p>\n<h2 id=\"查询当前数据库版本号\"><a href=\"#查询当前数据库版本号\" class=\"headerlink\" title=\"查询当前数据库版本号\"></a>查询当前数据库版本号</h2><p>在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。</p>\n<p>表中的 version_num 字段记录了当前的数据库版本号。</p>\n<h2 id=\"清除所有版本\"><a href=\"#清除所有版本\" class=\"headerlink\" title=\"清除所有版本\"></a>清除所有版本</h2><p>如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"http://alembic.zzzcomputing.com/en/latest/tutorial.html\" target=\"_blank\" rel=\"noopener\">http://alembic.zzzcomputing.com/en/latest/tutorial.html</a></p>\n<p><a href=\"http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/\" target=\"_blank\" rel=\"noopener\">http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/</a></p>\n<p><a href=\"http://blog.csdn.net/wenxuansoft/article/details/50242957\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/wenxuansoft/article/details/50242957</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"Python","path":"api/tags/Python.json"}]},{"title":"Django REST framework单元测试「Unit Testing」","slug":"django-rest-framework接口单元测试","date":"2017-09-05T15:23:41.000Z","updated":"2020-01-17T07:57:22.316Z","comments":true,"path":"api/articles/django-rest-framework接口单元测试.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"settings\"><a href=\"#settings\" class=\"headerlink\" title=\"settings\"></a><code>settings</code></h2><p><code>Django</code>运行单元测试时，会以<code>settings</code>里的数据库配置里的<code>NAME</code>新建一个以<code>test_</code>开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的<code>migrations</code>文件来创建数据表并进行迁移，但如果<code>migrations</code>文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前<code>Model</code>结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用<code>SQLite</code>数据库引擎，当使用<code>SQLite</code>数据库引擎时，测试将默认使用内存数据库。<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TESTING = len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">and</span> sys.argv[<span class=\"number\">1</span>] == <span class=\"string\">'test'</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> TESTING:</span><br><span class=\"line\">    <span class=\"comment\"># 当使用SQLite数据库引擎时，测试将默认使用内存数据库</span></span><br><span class=\"line\">    DATABASES[<span class=\"string\">'default'</span>] = &#123;</span><br><span class=\"line\">        <span class=\"string\">'ENGINE'</span>: <span class=\"string\">'django.db.backends.sqlite3'</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\"># 单元测试时, 跳过migrate, 极 的提升测试运 效率</span></span><br><span class=\"line\">    <span class=\"comment\"># 具体可以查看</span></span><br><span class=\"line\">    <span class=\"comment\"># https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html</span></span><br><span class=\"line\">    <span class=\"comment\"># https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">DisableMigrations</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__contains__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">True</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__getitem__</span><span class=\"params\">(self, item)</span>:</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">\"notmigrations\"</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    MIGRATION_MODULES = DisableMigrations()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"示例代码\"><a href=\"#示例代码\" class=\"headerlink\" title=\"示例代码\"></a>示例代码</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> absolute_import</span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> unicode_literals</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> status</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.test <span class=\"keyword\">import</span> APITestCase</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> apps.account.tests.test_utils <span class=\"keyword\">import</span> TestCaseUtils</span><br><span class=\"line\"></span><br><span class=\"line\">__author__ = <span class=\"string\">'jeff'</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserAPITests</span><span class=\"params\">(APITestCase, TestCaseUtils)</span>:</span></span><br><span class=\"line\">    <span class=\"comment\"># 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成</span></span><br><span class=\"line\">    <span class=\"comment\"># xml/yaml/json格式的数据</span></span><br><span class=\"line\">    <span class=\"comment\"># 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找</span></span><br><span class=\"line\">    <span class=\"comment\"># 此测试类运行结束后，会自动从数据库里销毁这份数据</span></span><br><span class=\"line\">    <span class=\"comment\"># fixtures = ['user.json']</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个测试方法执行前会运行</span></span><br><span class=\"line\">        <span class=\"comment\"># 在此方法执行前，django会运行以下操作</span></span><br><span class=\"line\">        <span class=\"comment\"># 1. 重置数据库，数据库恢复到执行migrate后的状态</span></span><br><span class=\"line\">        <span class=\"comment\"># 2. 加载fixtures数据</span></span><br><span class=\"line\">        <span class=\"comment\"># 所以每个测试方法里对数据库的操作都是独立的，不会相互影响</span></span><br><span class=\"line\">        kwargs = dict(mobile_phone=<span class=\"string\">'15999999999'</span>, password=<span class=\"string\">'111111'</span>)</span><br><span class=\"line\">        self.user = User.app_user_objects.create(**kwargs)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类里每个方法结束执行后会运行</span></span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUpClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在类初始化时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).setUpClass()</span><br><span class=\"line\">        cls.token = <span class=\"string\">''</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDownClass</span><span class=\"params\">(cls)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># 在整个测试类运行结束时执行，必须调用super</span></span><br><span class=\"line\">        super(UserAPITests, cls).tearDownClass()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"APP用户登录接口成功情况\"\"\"</span></span><br><span class=\"line\">        <span class=\"comment\"># path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'111111'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        <span class=\"comment\"># response.data是字典对象</span></span><br><span class=\"line\">        <span class=\"comment\"># response.content是json字符串对象</span></span><br><span class=\"line\">        self.assertEquals(response.status_code,</span><br><span class=\"line\">                          status.HTTP_200_OK,</span><br><span class=\"line\">                          <span class=\"string\">'登录接口返回状态码错误: 错误信息: &#123;&#125;'</span>.format(response.content))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'token'</span>, response.data, <span class=\"string\">'登录成功后无token返回'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_app_user_login_with_error_pwd</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/api-token-auth/'</span></span><br><span class=\"line\">        data = &#123;<span class=\"string\">'mobile_phone'</span>: <span class=\"string\">'15999999999'</span>, <span class=\"string\">'password'</span>: <span class=\"string\">'123456'</span>&#125;</span><br><span class=\"line\">        response = self.client.post(path, data)</span><br><span class=\"line\">        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)</span><br><span class=\"line\">        self.assertJSONEqual(<span class=\"string\">'&#123;\"errors\":[\"用户名或密码错误。\"]&#125;'</span>, response.content)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_success</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"成功获取app用户个人信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        headers = self.get_headers(user=self.user)</span><br><span class=\"line\">        response = self.client.get(path, **headers)</span><br><span class=\"line\">        <span class=\"comment\"># 校验一些关键数据即可</span></span><br><span class=\"line\">        <span class=\"comment\"># 如果是创建新数据，不仅要校验返回的状态码和数据，</span></span><br><span class=\"line\">        <span class=\"comment\"># 还需要到使用Django ORM去数据库查询数据是否创建成功</span></span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_200_OK)</span><br><span class=\"line\">        self.assertEqual(<span class=\"number\">6</span>, len(response.data))</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'url'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'mobile_phone'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'avatar'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'company_name'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'username'</span>, response.data)</span><br><span class=\"line\">        self.assertIn(<span class=\"string\">'is_inviter'</span>, response.data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_get_app_user_profile_without_token</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"不传token请求获取用户信息接口\"\"\"</span></span><br><span class=\"line\">        path = <span class=\"string\">'/api/account/user/profile/'</span></span><br><span class=\"line\">        response = self.client.get(path)</span><br><span class=\"line\">        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)</span><br></pre></td></tr></table></figure>\n<h2 id=\"断言\"><a href=\"#断言\" class=\"headerlink\" title=\"断言\"></a>断言</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 来自unittest.case.TestCase</span></span><br><span class=\"line\">assertFalse(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTrue(expr, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotAlmostEqual(first, second, places=<span class=\"keyword\">None</span>, msg=<span class=\"keyword\">None</span>, delta=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSequenceEqual(seq1, seq2, msg=<span class=\"keyword\">None</span>, seq_type=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertListEqual(list1, list2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertTupleEqual(tuple1, tuple2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertSetEqual(set1, set2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIn(member, container, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIs(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNot(expr1, expr2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictEqual(d1, d2, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertDictContainsSubset(expected, actual, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertItemsEqual(expected_seq, actual_seq, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertMultiLineEqual(first, second, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLess(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertLessEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreater(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertGreaterEqual(a, b, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsNone(obj, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotIsInstance(obj, cls, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertRaisesRegexp(expected_exception, expected_regexp,</span><br><span class=\"line\">                           callable_obj=<span class=\"keyword\">None</span>, *args, **kwargs)</span><br><span class=\"line\">assertRegexpMatches(text, expected_regexp, msg=<span class=\"keyword\">None</span>)</span><br><span class=\"line\">assertNotRegexpMatches(text, unexpected_regexp, msg=<span class=\"keyword\">None</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"测试接口地址\"><a href=\"#测试接口地址\" class=\"headerlink\" title=\"测试接口地址\"></a>测试接口地址</h2><p>测试接口地址建议使用硬编码，不要使用<code>reverse</code>反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。</p>\n<h2 id=\"测试数据准备\"><a href=\"#测试数据准备\" class=\"headerlink\" title=\"测试数据准备\"></a>测试数据准备</h2><p>有如下两种方法准备测试数据</p>\n<ol>\n<li>简单的数据可以在<code>setUp()</code>里来创建；</li>\n<li>复杂数据可以使用fixtures来写，并在赋值给测试类的<code>fixtures</code>属性；<br>fixtures数据示例<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"John\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"Lennon\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"model\"</span>: <span class=\"string\">\"myapp.person\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"pk\"</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"fields\"</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"first_name\"</span>: <span class=\"string\">\"Paul\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"last_name\"</span>: <span class=\"string\">\"McCartney\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"测试覆盖率（coverage）\"><a href=\"#测试覆盖率（coverage）\" class=\"headerlink\" title=\"测试覆盖率（coverage）\"></a>测试覆盖率（coverage）</h2><p>在<code>Pycharm</code>里可以通用右键项目，选择<code>Run &#39;Test:&#39; with Coverage</code>来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。</p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful api","path":"api/tags/restful api.json"},{"name":"接口","path":"api/tags/接口.json"},{"name":"单元测试","path":"api/tags/单元测试.json"},{"name":"测试","path":"api/tags/测试.json"}]},{"title":"在macOS上更改Jenkins的默认用户，解决权限问题","slug":"在macos上更改jenkins默认用户解决权限问题","date":"2017-08-24T06:29:14.000Z","updated":"2020-08-15T03:08:14.874Z","comments":true,"path":"api/articles/在macos上更改jenkins默认用户解决权限问题.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>在MacOS上使用<code>dmg</code>安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为<code>jenkins</code>的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">停止Jenkins</span></span><br><span class=\"line\">sudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 修改Group和User</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> &lt;用户名&gt;填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号</span></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/&lt;用户名&gt; +wq org.jenkins-ci.plist</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 可能相应文件夹的权限</span></span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /Users/Shared/Jenkins/</span><br><span class=\"line\">sudo chown -R &lt;用户名&gt;:staff /var/log/jenkins/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 启动Jenkins</span></span><br><span class=\"line\">sudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"macOS","path":"api/tags/macOS.json"},{"name":"Jenkins","path":"api/tags/Jenkins.json"},{"name":"权限","path":"api/tags/权限.json"},{"name":"用户","path":"api/tags/用户.json"}]},{"title":"内网穿透工具frp客户端自定义子域名访问配置","slug":"内网穿透工具frp客户端自定义子域名访问配置","date":"2017-08-16T08:36:56.000Z","updated":"2019-04-09T03:26:20.218Z","comments":true,"path":"api/articles/内网穿透工具frp客户端自定义子域名访问配置.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>A: 公网电脑<br>B: 内网电脑</p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>从<a href=\"[Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases\">releases</a>)下载系统对应的压缩包，Mac可使用<code>darwin amd64</code>的包，在公网电脑和本地电脑各放一份。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>公网电脑上<code>frps.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 用于接收 frpc 连接的端口</span><br><span class=\"line\">bind_port = 7000</span><br><span class=\"line\"># 通过此端口访问http服务</span><br><span class=\"line\">vhost_http_port = 8080</span><br><span class=\"line\"># 日志文件输出位置</span><br><span class=\"line\">log_file = ./frps.log</span><br><span class=\"line\"># 日志等级</span><br><span class=\"line\">log_level = info</span><br><span class=\"line\"># 域名</span><br><span class=\"line\">subdomain_host = example.com</span><br><span class=\"line\"># frp管理后台端口</span><br><span class=\"line\">dashboard_port = 7500</span><br><span class=\"line\"># frp管理后台用户名</span><br><span class=\"line\">dashboard_user = admin</span><br><span class=\"line\"># frp管理后台密码</span><br><span class=\"line\">dashboard_pwd = admin</span><br></pre></td></tr></table></figure></p>\n<p>本地电脑上<code>frpc.ini</code><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[common]</span><br><span class=\"line\"># 公网电脑IP</span><br><span class=\"line\">server_addr = 111.111.111.111</span><br><span class=\"line\"># frp连接的端口</span><br><span class=\"line\">server_port = 7000</span><br><span class=\"line\"></span><br><span class=\"line\">[web]</span><br><span class=\"line\">type = http</span><br><span class=\"line\"># 本地http服务端口</span><br><span class=\"line\">local_port = 8080</span><br><span class=\"line\"># 子域名前缀, 子域名前缀里不要使用下划线&quot;_&quot;，不然可能会出现莫名其妙的400错误可以用&quot;-&quot;代替。</span><br><span class=\"line\">subdomain = iblogc</span><br></pre></td></tr></table></figure></p>\n<p>配置域名<code>example.com</code>的A记录的泛解析<br><code>*.example.com</code>指向公网电脑IP<code>111.111.111.111</code></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><ol>\n<li>在内网电脑B上<code>8080</code>端口运行<code>http</code>服务</li>\n<li><p>在公网电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frps -c ./frps.ini</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在本地电脑上运行（Windows电脑上运行请去掉<code>./</code>）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./frpc -c ./frpc.ini</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"成功\"><a href=\"#成功\" class=\"headerlink\" title=\"成功\"></a>成功</h2><p>在任何一台能联网的机器上访问 <code>http://iblogc.example.com:8080</code> 即可访问内网电脑B上的http服务。<br>在任务一台能联网的机器上访问<code>111.111.111.111:7500</code>即可访问frp的管理后台。</p>\n<h2 id=\"frps服务端与nginx可共用80端口\"><a href=\"#frps服务端与nginx可共用80端口\" class=\"headerlink\" title=\"frps服务端与nginx可共用80端口\"></a>frps服务端与nginx可共用80端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">       listen 80;</span><br><span class=\"line\">       server_name *.example.com;</span><br><span class=\"line\">       location / &#123;</span><br><span class=\"line\">           proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">           proxy_redirect http://$host/ http://$http_host/;</span><br><span class=\"line\">           proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">           proxy_set_header Host $host;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"教程","path":"api/tags/教程.json"},{"name":"内网穿透","path":"api/tags/内网穿透.json"}]},{"title":"MacOS远程连接Windows","slug":"mac远程连接windows","date":"2017-08-08T01:40:28.000Z","updated":"2017-08-16T08:58:43.000Z","comments":true,"path":"api/articles/mac远程连接windows.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a><br>MacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。</p>\n<ol>\n<li>开始-运行-gpedit.msc，进入组策略编辑器。</li>\n<li>在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。<ul>\n<li>远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。</li>\n<li>要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。</li>\n</ul>\n</li>\n<li>关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。</li>\n</ol>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"远程","path":"api/tags/远程.json"}]},{"title":"Django Rest framework入门笔记及跳坑记录","slug":"django-rest-framework入门笔记及跳坑记录","date":"2016-12-17T07:03:10.000Z","updated":"2020-08-15T03:05:28.930Z","comments":true,"path":"api/articles/django-rest-framework入门笔记及跳坑记录.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-26 初稿</p>\n<h2 id=\"序列化时嵌套显示外键关联字段\"><a href=\"#序列化时嵌套显示外键关联字段\" class=\"headerlink\" title=\"序列化时嵌套显示外键关联字段\"></a>序列化时嵌套显示外键关联字段</h2><ul>\n<li><p>自动<br>使用<code>depth</code>参数指定外键深度</p>\n</li>\n<li><p>手动指定<br>使用外键对应<code>model</code>的小写为属性，外键对应的<code>model</code>序列化程序为值<br>以下例子在<code>HospitalPic</code>序列化结果里嵌套显示<code>Hospital</code><br>models.py</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.db <span class=\"keyword\">import</span> models</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Hospital</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    name = models.CharField()</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPic</span><span class=\"params\">(models.Model)</span>:</span></span><br><span class=\"line\">    hospital = models.ForeignKey(Hospital)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>serializers.py<br>  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Hospital </span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br></pre></td></tr></table></figure></p>\n<p>  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):<br>      hospital = HospitalSerializer()</p>\n<pre><code>class Meta:\n    model = HospitalPic\n    fields = &apos;__all__&apos;\n</code></pre>  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">***反向关系嵌套***</span><br><span class=\"line\">在`Hospital`序列化结果里嵌套显示`HospitalPic`</span><br><span class=\"line\">serializers.py</span><br><span class=\"line\">  ```python</span><br><span class=\"line\">  from rest_framework import serializers</span><br><span class=\"line\">  </span><br><span class=\"line\">  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): </span><br><span class=\"line\">      class Meta:</span><br><span class=\"line\">          model = HospitalPic</span><br><span class=\"line\">          fields = &apos;__all__&apos;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">  class HospitalSerializer(serializers.HyperlinkedModelSerializer):</span><br><span class=\"line\">      hospitalpic_set = HospitalPicSerializer(many=Ture)</span><br><span class=\"line\">      class Meta:</span><br><span class=\"line\">          model = Hospital</span><br><span class=\"line\">          fields = &apos;__all__&apos;</span><br></pre></td></tr></table></figure>\n<h2 id=\"在序列化对象里添加关联表的字段内容\"><a href=\"#在序列化对象里添加关联表的字段内容\" class=\"headerlink\" title=\"在序列化对象里添加关联表的字段内容\"></a>在序列化对象里添加关联表的字段内容</h2><p>定义一个<code>serializer Field</code>，并添加参数<code>source</code>指向外键对对应的字段（<code>source</code>值其实是从当前序列化的实例的属性）<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_address= serializers.ReadOnlyField(source=<span class=\"string\">'address.full_address'</span>)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"在序列化对象里添加自定义内容\"><a href=\"#在序列化对象里添加自定义内容\" class=\"headerlink\" title=\"在序列化对象里添加自定义内容\"></a>在序列化对象里添加自定义内容</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> django.contrib.auth.models <span class=\"keyword\">import</span> User</span><br><span class=\"line\"><span class=\"keyword\">from</span> django.utils.timezone <span class=\"keyword\">import</span> now</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework <span class=\"keyword\">import</span> serializers</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    days_since_joined = serializers.SerializerMethodField()</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_days_since_joined</span><span class=\"params\">(self, obj)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> (now() - obj.date_joined).days</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\"><a href=\"#使用ViewSet，并不有设置queryset，而是重写了get-queryset时，需要在router里增加base-name参数（base-name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url-name为-lt-base-name-gt-list-lt-base-name-gt-detail-等）\" class=\"headerlink\" title=\"使用ViewSet，并不有设置queryset，而是重写了get_queryset时，需要在router里增加base_name参数（base_name为router为ViewSet注册url时自动添加的name前缀，如果未设置则从ViewSet的queryset里取，使用ViewSet自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）\"></a>使用<code>ViewSet</code>，并不有设置<code>queryset</code>，而是重写了<code>get_queryset</code>时，需要在<code>router</code>里增加<code>base_name</code>参数（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）</h2><p>views.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactViewSet</span><span class=\"params\">(viewsets.ModelViewSet)</span>:</span></span><br><span class=\"line\">    serializer_class = ContactSerializer</span><br><span class=\"line\">    permission_classes = (permissions.IsAuthenticated,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_queryset</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.request.user.contact_set.all()</span><br></pre></td></tr></table></figure></p>\n<p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(<span class=\"string\">r'contact'</span>, ContactViewSet, base_name=<span class=\"string\">'contact'</span>)</span><br></pre></td></tr></table></figure></p>\n<p>未设置<code>base_name</code>会报下面错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"给api接口的url添加了命名空间namespace\"><a href=\"#给api接口的url添加了命名空间namespace\" class=\"headerlink\" title=\"给api接口的url添加了命名空间namespace\"></a>给api接口的url添加了命名空间<code>namespace</code></h2><p>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>需要对<code>HyperlinkedRelatedField</code>字段的参数进行修改<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HospitalPicSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = HospitalPic</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospitalpic-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'hospital'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:hospital-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>不然会出现以下错误<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could <span class=\"keyword\">not</span> resolve URL <span class=\"keyword\">for</span> hyperlinked relationship using view name <span class=\"string\">\"user-detail\"</span>. You may have failed to include the related model <span class=\"keyword\">in</span> your API, <span class=\"keyword\">or</span> incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>不过话说我们全api的url加<code>namespace</code>一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于<code>namespace</code>的版本控制，这样就不需要修改<code>HyperlinkedRelatedField</code>字段的<code>view_name</code>了<br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/v1/'</span>, include(router.urls, namespace=<span class=\"string\">'v1'</span>)),</span><br><span class=\"line\">url(<span class=\"string\">r'^api/v2/'</span>, include(router.urls, namespace=<span class=\"string\">'v2'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"要drf的错误提示为中文，需要设置\"><a href=\"#要drf的错误提示为中文，需要设置\" class=\"headerlink\" title=\"要drf的错误提示为中文，需要设置\"></a>要drf的错误提示为中文，需要设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-CN'</span></span><br></pre></td></tr></table></figure>\n<p>如果设置为<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LANGUAGE_CODE = <span class=\"string\">'zh-Hans'</span></span><br></pre></td></tr></table></figure></p>\n<p>虽然django默认表单错误会输出中文，但drf还是输出英文</p>\n<h2 id=\"django的validators可以直接在drf中使用，不需要做任何修改\"><a href=\"#django的validators可以直接在drf中使用，不需要做任何修改\" class=\"headerlink\" title=\"django的validators可以直接在drf中使用，不需要做任何修改\"></a>django的<code>validators</code>可以直接在drf中使用，不需要做任何修改</h2><h2 id=\"当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"><a href=\"#当字段里的属性editable-False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\" class=\"headerlink\" title=\"当字段里的属性editable=False时，ModelSerializer里该字段会抛弃model里显式和隐式（unique）的所有validators\"></a>当字段里的属性<code>editable=False</code>时，<code>ModelSerializer</code>里该字段会抛弃<code>model</code>里显式和隐式（unique）的所有<code>validators</code></h2><h2 id=\"Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\"><a href=\"#Serializer里write-only写在field里和写在extra-kwargs里是有区别的，\" class=\"headerlink\" title=\"Serializer里write_only写在field里和写在extra_kwargs里是有区别的，\"></a><code>Serializer</code>里<code>write_only</code>写在<code>field</code>里和写在<code>extra_kwargs</code>里是有区别的，</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserRegisterSerializer</span><span class=\"params\">(serializers.ModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"string\">\"\"\"用户注册Serializer\"\"\"</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    code = serializers.CharField(min_length=<span class=\"number\">4</span>, max_length=<span class=\"number\">6</span>, label=_(<span class=\"string\">'验证码'</span>),</span><br><span class=\"line\">                                 help_text=_(<span class=\"string\">'验证码'</span>), write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\">    re_password = serializers.CharField(label=_(<span class=\"string\">'重复密码'</span>), help_text=_(<span class=\"string\">'重复密码'</span>),</span><br><span class=\"line\">                                        validators=validators.password_validators(),</span><br><span class=\"line\">                                        write_only=<span class=\"keyword\">True</span>)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = User</span><br><span class=\"line\">        fields = (<span class=\"string\">'mobile_phone'</span>, <span class=\"string\">'code'</span>, <span class=\"string\">'password'</span>, <span class=\"string\">'re_password'</span>)</span><br><span class=\"line\">        extra_kwargs = &#123;<span class=\"string\">'password'</span>:</span><br><span class=\"line\">                            &#123;<span class=\"string\">'write_only'</span>: <span class=\"keyword\">True</span>&#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">validate</span><span class=\"params\">(self, attrs)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"</span></span><br><span class=\"line\"><span class=\"string\">        Check that the start is before the stop.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> attrs[<span class=\"string\">'password'</span>] != attrs[<span class=\"string\">'re_password'</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> serializers.ValidationError(_(<span class=\"string\">'密码不一致'</span>))</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\"># 校验验证码</span></span><br><span class=\"line\">        verify_result = Sms(attrs[<span class=\"string\">'mobile_phone'</span>]).verify_sms_code(</span><br><span class=\"line\">            attrs.pop(<span class=\"string\">'code'</span>))</span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> verify_result:</span><br><span class=\"line\">            error = verify_result.get(<span class=\"string\">'error'</span>)</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> ParseError(error)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> attrs</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">create</span><span class=\"params\">(self, validated_data)</span>:</span></span><br><span class=\"line\">        user = User(</span><br><span class=\"line\">            username=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">            mobile_phone=validated_data[<span class=\"string\">'mobile_phone'</span>],</span><br><span class=\"line\">        )</span><br><span class=\"line\">        user.set_password(validated_data[<span class=\"string\">'password'</span>])</span><br><span class=\"line\">        user.save()</span><br><span class=\"line\">        <span class=\"keyword\">return</span> user</span><br></pre></td></tr></table></figure>\n<p>因为<code>create()</code>这个方法return了一个<code>user</code>实例，<code>User</code>里没有的字段<code>code</code>和<code>re_password</code>需要将<code>write_only</code>写在<code>field</code>参数里，不然会报以下错误<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.</span><br><span class=\"line\">The serializer field might be named incorrectly and not match any attribute or key on the `User` instance.</span><br><span class=\"line\">Original exception text was: &apos;User&apos; object has no attribute &apos;code&apos;.</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"如果使用django-rest-swagger报以下错误\"><a href=\"#如果使用django-rest-swagger报以下错误\" class=\"headerlink\" title=\"如果使用django-rest-swagger报以下错误\"></a>如果使用<code>django-rest-swagger</code>报以下错误</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Can&apos;t read from server. It may not have the appropriate access-control-origin settings.</span><br></pre></td></tr></table></figure>\n<p>注释掉设置里的<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 'base_path': '127.0.0.1:8000/docs',</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"serializer-data和serializer-validated-data\"><a href=\"#serializer-data和serializer-validated-data\" class=\"headerlink\" title=\"serializer.data和serializer.validated_data\"></a><code>serializer.data</code>和<code>serializer.validated_data</code></h2><p>在<code>serializer</code>只使用<code>data</code>参数实例化的时：</p>\n<ul>\n<li><code>serializer.data</code>是原始数据（字符串），<code>serializer.validated_data</code>是进行数据验证并转换成对应数据类型的数据。</li>\n<li>两者者必须在<code>serializer</code>调用<code>is_valid</code>方法后才能调用<br>在<code>serializer</code>只使用<code>instance</code>参数实例化时：</li>\n<li>只有<code>serializer.data</code>没有<code>serializer.validated_data</code>，并且<code>serializer.data</code>里的数据也是字符串；</li>\n<li>没有方法<code>is_valid</code>；</li>\n<li>即<code>is_valid</code>和<code>validated_data</code>只在有data参数实例化时才可调用；</li>\n</ul>\n<h2 id=\"在serializer里获取原始请求信息\"><a href=\"#在serializer里获取原始请求信息\" class=\"headerlink\" title=\"在serializer里获取原始请求信息\"></a>在<code>serializer</code>里获取原始请求信息</h2><p>默认的，上下文信息会被传递到<code>serializer</code>里，所以在<code>serializer</code>可以直接使用<code>self.context[&#39;request&#39;]</code>来获取请求信息。（在要继承自<code>viewsets.GenericViewSet</code>的类里使用的<code>serializer</code>才能取到，如果是继承<code>APIView</code>的，自己传入即可<code>serializer = self.serializer_class(data=request.data, context={&#39;request&#39;: request})</code>）</p>\n<h2 id=\"自定义serializer字段\"><a href=\"#自定义serializer字段\" class=\"headerlink\" title=\"自定义serializer字段\"></a>自定义<code>serializer</code>字段</h2><p>自定义字段继承<code>serializers.Field</code>，<code>to_representation</code>方法处理出来的数据用来序列化显示，<code>to_internal_value</code>处理接收到的数据，<code>get_attribute</code>方法指定这个字段访问的实例属性，<code>get_value</code>方法指定<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QiNiuField</span><span class=\"params\">(serializers.Field)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_attribute</span><span class=\"params\">(self, instance)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> instance.key</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_value</span><span class=\"params\">(self, dictionary)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）从传入数据中提取一个值给这个字段处理</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> super(QiNiuField, self).get_value(dictionary)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_representation</span><span class=\"params\">(self, value)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （序列化时）处理出来的数据用来序列化显示</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> value.url</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">to_internal_value</span><span class=\"params\">(self, data)</span>:</span></span><br><span class=\"line\">        <span class=\"comment\"># （反序列化时）处理接收到的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> data[<span class=\"string\">'key'</span>]</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"嵌套序列化，传参问题\"><a href=\"#嵌套序列化，传参问题\" class=\"headerlink\" title=\"嵌套序列化，传参问题\"></a>嵌套序列化，传参问题</h2><p>官方文档中有这么一个例子<a href=\"http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects\" target=\"_blank\" rel=\"noopener\">Dealing with nested objects</a><br>如果是以<code>Content-Type:application/json</code>形式传数据格式传数据，直接嵌套传就可以了<code>{&#39;user&#39;: {&#39;email&#39;: &#39;foobar&#39;, &#39;username&#39;: &#39;doe&#39;}, &#39;content&#39;: &#39;baz&#39;}</code>，但如果是以,<br>但是如果以<code>Content-Type:form-data</code>或<code>Content-Type:x-www-form-urlencoded</code>上传，则上传<code>user</code>信息进不是嵌套，而是就<code>.</code>连接了，<code>&quot;user.email&quot;:&quot;foobar&quot;</code>.</p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"问题","path":"api/tags/问题.json"}]},{"title":"Django Rest framework使用问题及解决方法","slug":"django-rest-framework使用问题及解决方法","date":"2016-12-17T06:58:04.000Z","updated":"2020-08-15T03:05:35.805Z","comments":true,"path":"api/articles/django-rest-framework使用问题及解决方法.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-29 初稿</p>\n<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）<br>urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>访问部分接口出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Contact</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:contact-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:&#123;<span class=\"string\">'view_name'</span>:<span class=\"string\">'api:user-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"问题","path":"api/tags/问题.json"}]},{"title":"Django Rest framework里的API请求频率控制","slug":"django-rest-framework里的api请求频率控制","date":"2016-12-17T06:48:19.000Z","updated":"2020-08-15T03:05:17.846Z","comments":true,"path":"api/articles/django-rest-framework里的api请求频率控制.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-08-25 初稿</p>\n<p><code>Django Rest framework</code>有自带的频率控制配置</p>\n<h2 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"comment\"># 开启匿名用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.AnonRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 开启授权用户接口请求频率限制</span></span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.UserRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\"># 频率限制有second, minute, hour, day</span></span><br><span class=\"line\">        <span class=\"comment\"># 匿名用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'anon'</span>: <span class=\"string\">'100/day'</span>,</span><br><span class=\"line\">        <span class=\"comment\"># 授权用户请求频率</span></span><br><span class=\"line\">        <span class=\"string\">'user'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"类视图单独配置\"><a href=\"#类视图单独配置\" class=\"headerlink\" title=\"类视图单独配置\"></a>类视图单独配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.response <span class=\"keyword\">import</span> Response</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.throttling <span class=\"keyword\">import</span> UserRateThrottle</span><br><span class=\"line\"><span class=\"keyword\">from</span> rest_framework.views <span class=\"keyword\">import</span> APIView</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExampleView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_classes = (UserRateThrottle,)</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, request, format=None)</span>:</span></span><br><span class=\"line\">        content = &#123;</span><br><span class=\"line\">            <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"方法视图配置\"><a href=\"#方法视图配置\" class=\"headerlink\" title=\"方法视图配置\"></a>方法视图配置</h2><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@api_view(['GET'])</span></span><br><span class=\"line\"><span class=\"meta\">@throttle_classes([UserRateThrottle])</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">example_view</span><span class=\"params\">(request, format=None)</span>:</span></span><br><span class=\"line\">    content = &#123;</span><br><span class=\"line\">        <span class=\"string\">'status'</span>: <span class=\"string\">'request was permitted'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Response(content)</span><br></pre></td></tr></table></figure>\n<h2 id=\"自定义\"><a href=\"#自定义\" class=\"headerlink\" title=\"自定义\"></a>自定义</h2><p>方法一：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BurstRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'burst'</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SustainedRateThrottle</span><span class=\"params\">(UserRateThrottle)</span>:</span></span><br><span class=\"line\">    scope = <span class=\"string\">'sustained'</span></span><br><span class=\"line\">...<span class=\"keyword\">and</span> the following settings.</span><br></pre></td></tr></table></figure></p>\n<p><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.BurstRateThrottle'</span>,</span><br><span class=\"line\">        <span class=\"string\">'example.throttles.SustainedRateThrottle'</span></span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'burst'</span>: <span class=\"string\">'60/min'</span>,</span><br><span class=\"line\">        <span class=\"string\">'sustained'</span>: <span class=\"string\">'1000/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在视图里设置<code>throttle_classes</code>即可。</p>\n<p>方法二：<br><code>settings.py</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_CLASSES'</span>: (</span><br><span class=\"line\">        <span class=\"string\">'rest_framework.throttling.ScopedRateThrottle'</span>,</span><br><span class=\"line\">    ),</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_THROTTLE_RATES'</span>: &#123;</span><br><span class=\"line\">        <span class=\"string\">'contacts'</span>: <span class=\"string\">'1000/day'</span>,</span><br><span class=\"line\">        <span class=\"string\">'uploads'</span>: <span class=\"string\">'20/day'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>然后在类视图中设置<code>throttle_scope</code><br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactListView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactDetailView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'contacts'</span></span><br><span class=\"line\">    ...</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UploadView</span><span class=\"params\">(APIView)</span>:</span></span><br><span class=\"line\">    throttle_scope = <span class=\"string\">'uploads'</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></figure></p>\n<p><strong>1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。</strong><br><strong>2. 频率限制是针对单个接口的频率，而不是所有接口的频率。</strong></p>\n","raw":null,"categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api， version","path":"api/tags/api， version.json"}]},{"title":"在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django","slug":"在centos7使用mysql-nginx-gunicorn+supervisor部署django","date":"2016-12-08T15:19:59.000Z","updated":"2020-08-15T03:02:43.754Z","comments":true,"path":"api/articles/在centos7使用mysql-nginx-gunicorn+supervisor部署django.json","excerpt":"本文记录下在CentOS下部署Django项目的步骤。<br>","cover":null,"content":"<p>本文记录下在CentOS下部署Django项目的步骤。<br><a id=\"more\"></a></p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"安装mysql和mysql-devel\"><a href=\"#安装mysql和mysql-devel\" class=\"headerlink\" title=\"安装mysql和mysql-devel\"></a>安装mysql和mysql-devel</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install mysql</span><br><span class=\"line\">yum install mysql-devel</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装mysql-server\"><a href=\"#安装mysql-server\" class=\"headerlink\" title=\"安装mysql-server\"></a>安装mysql-server</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<h3 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service mysqld restart</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置root密码\"><a href=\"#设置root密码\" class=\"headerlink\" title=\"设置root密码\"></a>设置root密码</h3><p>初次安装mysql需要设置root密码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br><span class=\"line\">set password for &apos;root&apos;@&apos;localhost&apos; =password(&apos;password&apos;);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"配置mysql\"><a href=\"#配置mysql\" class=\"headerlink\" title=\"配置mysql\"></a>配置mysql</h3><p>在<code>/etc/my.cnf</code>文件中[mysql]和[mysql]中添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysql]</span><br><span class=\"line\">default-character-set=utf8</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>字符编码保持和<code>/usr/share/mysql/charsets/Index.xml</code>中的一致。</p>\n<h3 id=\"远程连接设置\"><a href=\"#远程连接设置\" class=\"headerlink\" title=\"远程连接设置\"></a>远程连接设置</h3><p>把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; grant all privileges on *.* to root@&apos;%&apos;identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>如果是新用户而不是root，则要先新建用户<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;create user &apos;username&apos;@&apos;%&apos; identified by &apos;password&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>此时就可以进行远程连接了。</p>\n<h2 id=\"Virtualenv\"><a href=\"#Virtualenv\" class=\"headerlink\" title=\"Virtualenv\"></a>Virtualenv</h2><p>安装epel扩展源<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install epel-release</span><br></pre></td></tr></table></figure></p>\n<p>安装pip<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install python-pip</span><br></pre></td></tr></table></figure></p>\n<p>安装virtualenv和virtualenvwrapper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv virtualenvwrapper</span><br></pre></td></tr></table></figure></p>\n<p>编辑<code>~/.bashrc</code>文件，结尾添加以下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export WORKON_HOME=~/.virtualenvs</span><br><span class=\"line\">source /usr/bin/virtualenvwrapper.sh</span><br></pre></td></tr></table></figure></p>\n<p>然后执行以下命令使配置生效<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<p>创建env<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkvirtualenv explame</span><br></pre></td></tr></table></figure></p>\n<p>使用pip安装项目需要的包</p>\n<h2 id=\"WSGI\"><a href=\"#WSGI\" class=\"headerlink\" title=\"WSGI\"></a>WSGI</h2><p>在项目目录下新建<code>nginx_wsgi.py</code>文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch nginx_wsgi.py</span><br></pre></td></tr></table></figure></p>\n<p>添加如下内容<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import sys</span><br><span class=\"line\">import site</span><br><span class=\"line\">import os</span><br><span class=\"line\"> </span><br><span class=\"line\"># site-packages</span><br><span class=\"line\">site.addsitedir(&apos;/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages&apos;)</span><br><span class=\"line\"># Add the  project  directory</span><br><span class=\"line\"># sys.path.append(&apos;/home/nginxuser/nginxuser&apos;)</span><br><span class=\"line\">PROJECT_DIR = &apos;/home/nginxuser/projects/example&apos;</span><br><span class=\"line\">sys.path.insert(0, PROJECT_DIR)</span><br><span class=\"line\">os.environ[&apos;DJANGO_SETTINGS_MODULE&apos;] = &apos;example.settings.prod&apos;</span><br><span class=\"line\"># Activate your virtual env</span><br><span class=\"line\">activate_env = os.path.expanduser(&quot;/home/nginxuser/.virtualenvs/example/bin/activate_this.py&quot;)</span><br><span class=\"line\">execfile(activate_env, dict(__file__=activate_env))</span><br><span class=\"line\"> </span><br><span class=\"line\"># after activite env</span><br><span class=\"line\">from django.core.wsgi import get_wsgi_application</span><br><span class=\"line\"> </span><br><span class=\"line\">application = get_wsgi_application()</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h2><h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"检查配置是否有错\"><a href=\"#检查配置是否有错\" class=\"headerlink\" title=\"检查配置是否有错\"></a>检查配置是否有错</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<h3 id=\"启动nginx\"><a href=\"#启动nginx\" class=\"headerlink\" title=\"启动nginx\"></a>启动nginx</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service nginx start</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置开机自启\"><a href=\"#设置开机自启\" class=\"headerlink\" title=\"设置开机自启\"></a>设置开机自启</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable nginx</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建用户\"><a href=\"#创建用户\" class=\"headerlink\" title=\"创建用户\"></a>创建用户</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd nginxuser</span><br><span class=\"line\">passwd nginxuser</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改nginx主配置\"><a href=\"#修改nginx主配置\" class=\"headerlink\" title=\"修改nginx主配置\"></a>修改nginx主配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure>\n<p>非注释首行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginx</span><br></pre></td></tr></table></figure></p>\n<p>改为<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user nginxuser</span><br></pre></td></tr></table></figure></p>\n<p>不然可能会出现网站静态文件访问报403问题。</p>\n<h3 id=\"新建网站运行配置\"><a href=\"#新建网站运行配置\" class=\"headerlink\" title=\"新建网站运行配置\"></a>新建网站运行配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/nginx/conf.d/example.conf</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;                                                               </span><br><span class=\"line\">    listen      80;                                                    </span><br><span class=\"line\">    server_name example.com;                            </span><br><span class=\"line\">    charset     utf-8;                                                 </span><br><span class=\"line\">    client_max_body_size 75M;                                          </span><br><span class=\"line\">    access_log /home/nginxuser/projects/example/nginxlogs/access.log;</span><br><span class=\"line\">    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          </span><br><span class=\"line\"> </span><br><span class=\"line\">    location /static &#123;                                                 </span><br><span class=\"line\">        alias /home/nginxuser/projects/explame/static;                </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\"> </span><br><span class=\"line\">    location / &#123;                                                       </span><br><span class=\"line\">        proxy_pass http://127.0.0.1:8000;                              </span><br><span class=\"line\">        proxy_set_header Host $host;                                   </span><br><span class=\"line\">        proxy_set_header X-Real-IP $remote_addr;                       </span><br><span class=\"line\">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   </span><br><span class=\"line\">    &#125;                                                                  </span><br><span class=\"line\">&#125;                                                                       jk</span><br></pre></td></tr></table></figure>\n<h2 id=\"Gunicorn\"><a href=\"#Gunicorn\" class=\"headerlink\" title=\"Gunicorn\"></a>Gunicorn</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install gunicorn</span><br></pre></td></tr></table></figure>\n<p>项目根目录下添加gunicorn运行配置文件gunicorn.conf.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import multiprocessing</span><br><span class=\"line\">bind = &quot;127.0.0.1:8000&quot;</span><br><span class=\"line\">workers = 2</span><br><span class=\"line\">errorlog = &quot;/home/nginxuser/example/gunicorn.error.log&quot;</span><br><span class=\"line\">#loglevel = &quot;debug&quot;</span><br><span class=\"line\">proc_name = &quot;gunicorn_example&quot;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py</span><br></pre></td></tr></table></figure>\n<p>后台运行<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&amp;</span><br></pre></td></tr></table></figure></p>\n<p>如果运行报错先使用以下命令检查下nginx配置是否有错<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t -c /etc/nginx/nginx.conf</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Supervisor\"><a href=\"#Supervisor\" class=\"headerlink\" title=\"Supervisor\"></a>Supervisor</h2><h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install supervisor</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建管理进程配置文件\"><a href=\"#创建管理进程配置文件\" class=\"headerlink\" title=\"创建管理进程配置文件\"></a>创建管理进程配置文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/supervisord.d/example.ini</span><br></pre></td></tr></table></figure>\n<p>（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[program:example]</span><br><span class=\"line\">directory = /home/nginxuser/projects/example ; 程序的启动目录</span><br><span class=\"line\">command = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的</span><br><span class=\"line\">autostart = true     ; 在 supervisord 启动的时候也自动启动</span><br><span class=\"line\">startsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class=\"line\">autorestart = true   ; 程序异常退出后自动重启</span><br><span class=\"line\">startretries = 3     ; 启动失败自动重试次数，默认是 3</span><br><span class=\"line\">user = nginx         ; 用哪个用户启动</span><br><span class=\"line\">redirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false</span><br><span class=\"line\">stdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB</span><br><span class=\"line\">stdout_logfile_backups = 20     ; stdout 日志文件备份数</span><br><span class=\"line\">; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）</span><br><span class=\"line\">stdout_logfile = /data/logs/usercenter_stdout.log</span><br><span class=\"line\"></span><br><span class=\"line\">; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH</span><br><span class=\"line\">; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere</span><br></pre></td></tr></table></figure></p>\n<p><strong>冒号后面要有空格</strong></p>\n<h3 id=\"启动-1\"><a href=\"#启动-1\" class=\"headerlink\" title=\"启动\"></a>启动</h3><p>使用<code>-c</code>指定配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>如果启动时遇到以下报错信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Error: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.</span><br><span class=\"line\">For help, use /use/bin/supervisord -h</span><br></pre></td></tr></table></figure></p>\n<p>可以使用以下命令解决<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo unlink /var/run/supervisor/supervisor.sock</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"命令行客户端工具supervisorctl\"><a href=\"#命令行客户端工具supervisorctl\" class=\"headerlink\" title=\"命令行客户端工具supervisorctl\"></a>命令行客户端工具supervisorctl</h3><p>启动时需要使用和<code>supervisorctl</code>使用一样的配置文件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl -c /etc/supervisord.conf</span><br></pre></td></tr></table></figure></p>\n<p>启动后进入<code>supervisorctl</code>的shell，在此shell里可以执行以下命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">status # 查看程序状态</span><br><span class=\"line\">start example # 启动example程序</span><br><span class=\"line\">stop example # 关闭example程序</span><br><span class=\"line\">restart example # 重启example程序</span><br><span class=\"line\">reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<p>也可以不进shell执行以上命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisorctl status # 查看程序状态</span><br><span class=\"line\">supervisorctl start example # 启动example程序</span><br><span class=\"line\">supervisorctl stop example # 关闭example程序</span><br><span class=\"line\">supervisorctl restart example # 重启example程序</span><br><span class=\"line\">supervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序</span><br><span class=\"line\">supervisorctl update # 重启配置文件修改过的程序</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"开启web管理界面\"><a href=\"#开启web管理界面\" class=\"headerlink\" title=\"开启web管理界面\"></a>开启web管理界面</h3><p>如果要开启web管理界面，打开<code>/etc/supervisord.conf</code>把下面几行取消注释即可<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:[inet_http_server]         ; inet (TCP) server disabled by default</span><br><span class=\"line\">:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)</span><br><span class=\"line\">:username=user              ; (default is no username (open server))</span><br><span class=\"line\">:password=123               ; (default is no password (open server))</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"centOS","path":"api/tags/centOS.json"},{"name":"Nginx","path":"api/tags/Nginx.json"},{"name":"Gunicorn","path":"api/tags/Gunicorn.json"},{"name":"MySQL","path":"api/tags/MySQL.json"},{"name":"Supervisor","path":"api/tags/Supervisor.json"}]},{"title":"npm入门命令","slug":"npm入门命令","date":"2016-07-06T15:46:37.000Z","updated":"2020-08-15T03:07:04.634Z","comments":true,"path":"api/articles/npm入门命令.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-07-06 初稿</p>\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>显示npm版号<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br><span class=\"line\"># 或</span><br><span class=\"line\">npm version</span><br></pre></td></tr></table></figure></p>\n<p>安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 带-g为全局安装</span><br><span class=\"line\"># 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。</span><br><span class=\"line\"># 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。</span><br><span class=\"line\">npm install &lt;package&gt; -g</span><br><span class=\"line\"># 简写</span><br><span class=\"line\">npm i &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级全局安装的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt; -g</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下的指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>升级当前目录下全部模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm update</span><br></pre></td></tr></table></figure></p>\n<p>升级node自身<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一个叫n的模块</span><br><span class=\"line\">npm install -g n</span><br><span class=\"line\"># 升级到最新稳定版</span><br><span class=\"line\">n stable</span><br><span class=\"line\"># 升级到指定版本</span><br><span class=\"line\">n v0.10.26</span><br></pre></td></tr></table></figure></p>\n<p>卸载移除指定模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm uninstall &lt;package&gt;</span><br><span class=\"line\"># 别名：remove, rm, r, un, unlink</span><br></pre></td></tr></table></figure></p>\n<p>显示已安装模块<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm list</span><br></pre></td></tr></table></figure></p>\n<p>显示模块详细信息<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm show &lt;package&gt;</span><br></pre></td></tr></table></figure></p>\n<p>查看全局包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root -g</span><br></pre></td></tr></table></figure></p>\n<p>查看当前包安装路径<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm root</span><br></pre></td></tr></table></figure></p>\n<p>查看npm配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config list</span><br></pre></td></tr></table></figure></p>\n<p>查看帮助<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help</span><br></pre></td></tr></table></figure></p>\n<p>查看相关命令的帮助文档<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm help &lt;command&gt;</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"npm","path":"api/tags/npm.json"},{"name":"Nodejs","path":"api/tags/Nodejs.json"}]}]}