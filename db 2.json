{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/README","path":"README","modified":1,"renderable":0},{"_id":"source/avatar.png","path":"avatar.png","modified":1,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"source/headimg.jpg","path":"headimg.jpg","modified":1,"renderable":0},{"_id":"source/iblogc.jpg","path":"iblogc.jpg","modified":1,"renderable":0},{"_id":"source/leancloud.memo","path":"leancloud.memo","modified":1,"renderable":0},{"_id":"source/logo.png","path":"logo.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Ubuntu客户端配置首页.png","path":"media/Synergy-Ubuntu客户端配置首页.png","modified":1,"renderable":0},{"_id":"source/media/Git工作流图示.jpg","path":"media/Git工作流图示.jpg","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端启动.png","path":"media/Synergy-Windows服务端启动.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-01.png","path":"media/Synergy-Windows服务端添加客户端-01.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-02.png","path":"media/Synergy-Windows服务端添加客户端-02.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端添加客户端-03.png","path":"media/Synergy-Windows服务端添加客户端-03.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-Windows服务端配置首页.png","path":"media/Synergy-Windows服务端配置首页.png","modified":1,"renderable":0},{"_id":"source/media/Synergy-logo.png","path":"media/Synergy-logo.png","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-01.png","path":"media/chrome-add-to-homescreen-01.png","modified":1,"renderable":0},{"_id":"source/media/django-commands.png","path":"media/django-commands.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-start-iblogc-django-weixin.png","path":"media/ngrok-start-iblogc-django-weixin.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-iblogc.png","path":"media/ngrok-iblogc.png","modified":1,"renderable":0},{"_id":"source/media/materialdesign-goals-landingimage_large_mdpi.png","path":"media/materialdesign-goals-landingimage_large_mdpi.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-auth.png","path":"media/ngrok-auth.png","modified":1,"renderable":0},{"_id":"source/media/ngrok-start-iblogc.png","path":"media/ngrok-start-iblogc.png","modified":1,"renderable":0},{"_id":"source/media/nrok-web-interface.png","path":"media/nrok-web-interface.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-14.10-15.04-01.png","path":"media/ubuntu-14.10-15.04-01.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-15.04-info.png","path":"media/ubuntu-15.04-info.png","modified":1,"renderable":0},{"_id":"source/media/ubuntu-15.04-logo.jpg","path":"media/ubuntu-15.04-logo.jpg","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_144.png","path":"res/ic_launcher_144.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_192.png","path":"res/ic_launcher_192.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_48.png","path":"res/ic_launcher_48.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_32.png","path":"res/ic_launcher_32.png","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_72.png","path":"res/ic_launcher_72.png","modified":1,"renderable":0},{"_id":"source/res/微依LOGO.JPG","path":"res/微依LOGO.JPG","modified":1,"renderable":0},{"_id":"source/res/ic_launcher_96.png","path":"res/ic_launcher_96.png","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-02.png","path":"media/chrome-add-to-homescreen-02.png","modified":1,"renderable":0},{"_id":"source/media/chrome-add-to-homescreen-04.png","path":"media/chrome-add-to-homescreen-04.png","modified":1,"renderable":0},{"_id":"source/media/git-reset_drbfhd.png","path":"media/git-reset_drbfhd.png","modified":1,"renderable":0},{"_id":"source/media/花木兰/10.jpg","path":"media/花木兰/10.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/1.jpg","path":"media/花木兰/1.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/2.jpg","path":"media/花木兰/2.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/5.jpg","path":"media/花木兰/5.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/8.jpg","path":"media/花木兰/8.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/9.jpg","path":"media/花木兰/9.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/anime.min.js","path":"lib/anime.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"source/media/花木兰/15.jpg","path":"media/花木兰/15.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/13.jpg","path":"media/花木兰/13.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/4.jpg","path":"media/花木兰/4.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/7.jpg","path":"media/花木兰/7.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/3.jpg","path":"media/花木兰/3.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/6.jpg","path":"media/花木兰/6.jpg","modified":1,"renderable":0},{"_id":"themes/next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","path":"lib/canvas-ribbon/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","path":"lib/canvas-ribbon/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/README.md","path":"lib/pace/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/LICENSE","path":"lib/pace/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/LICENSE","path":"lib/pangu/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pangu/README.md","path":"lib/pangu/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","path":"lib/pjax/CHANGELOG.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/LICENSE","path":"lib/pjax/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.d.ts","path":"lib/pjax/index.d.ts","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/index.js","path":"lib/pjax/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/README.md","path":"lib/pjax/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.min.js","path":"lib/pjax/pjax.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/package.json","path":"lib/pjax/package.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pjax/pjax.js","path":"lib/pjax/pjax.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/README.md","path":"lib/three/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/LICENSE","path":"lib/fancybox/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/README.md","path":"lib/fancybox/README.md","modified":1,"renderable":1},{"_id":"source/media/花木兰/11.jpg","path":"media/花木兰/11.jpg","modified":1,"renderable":0},{"_id":"source/media/花木兰/14.jpg","path":"media/花木兰/14.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/.DS_Store","hash":"fd87ee4026bc85238878c7bd4138f0b924132c6a","modified":1584064780608},{"_id":"source/CNAME","hash":"12429add85bfdc53322e275c4b2e8e1cf86ae660","modified":1446990516000},{"_id":"source/README","hash":"d001ba1bb6097331b01adcdd63dceac23fba917f","modified":1451124952000},{"_id":"source/404.html","hash":"0cc1ab165059bc3bcb1bc958af23c4c7ffb7460a","modified":1529324544517},{"_id":"source/avatar.png","hash":"4a2f19c786849c7ba5a0ca788a8c5362111dd7e6","modified":1441035990000},{"_id":"source/favicon.ico","hash":"7e52610aa79be8b2715cdc796ff70888027a096c","modified":1445444294000},{"_id":"source/googlec83004d17e7bf8d6.html","hash":"10c653130166f31a58fc384d410ad91874d7baa5","modified":1487294435000},{"_id":"source/headimg.jpg","hash":"c410e4e6ca6620fa70f61b8fea8993898c5fe4f4","modified":1429893902000},{"_id":"source/iblogc.jpg","hash":"b59417411922e40c352142a1a4045ac08be14954","modified":1483156220000},{"_id":"source/leancloud.memo","hash":"017341b0e5a13fb64b9152d67aded258a732fb5e","modified":1585940547693},{"_id":"source/logo.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1442072976000},{"_id":"source/manifest.json","hash":"77c4fff75be5fc7fd0ee805b375735b1ae908f4c","modified":1442077082000},{"_id":"themes/next/.DS_Store","hash":"a2709dfea738ff4172c68cbbc932039b0e0469cb","modified":1570873179544},{"_id":"themes/next/.all-contributorsrc","hash":"a03f0ccb9b6798679dc2a77e5c395a167ce388c2","modified":1575025512999},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1568699013420},{"_id":"themes/next/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1568699013420},{"_id":"themes/next/.gitignore","hash":"7b68ca7a46104cf9aa84ec0541a4856ab1836eca","modified":1568699013426},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1568699013427},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1568699013428},{"_id":"themes/next/README.md","hash":"e0fcd99c0a6db47fe5739df32d6ab39c44c65196","modified":1575025513008},{"_id":"themes/next/_config.yml","hash":"429ff40e9ee0ea7a891784b1a183ba1d7b6e1bf3","modified":1585029078260},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1527752362676},{"_id":"themes/next/gulpfile.js","hash":"94e80ca87826b90744618b00d08bc7e5eefbaef4","modified":1575025513018},{"_id":"themes/next/package.json","hash":"aca29ae07d4d4164ac260c2ae1e27d2ce6cd7ffe","modified":1575025513082},{"_id":"source/.MWebMetaData/ImgUpload-10E65E2EFD72AEFA2491EE39E1690E62.data","hash":"1cdfd593dce962d93f4f2a1020dde944fc579e21","modified":1486617742000},{"_id":"source/.MWebMetaData/ImgUpload-4343841817E225355D1D64A18A4C557C.data","hash":"fa71971a176effc61c890c4653e501e550261509","modified":1486617643000},{"_id":"source/.MWebMetaData/ImgUpload-4F325A0CBB65C2523A44DEE8C7DF3E55.data","hash":"bedf1b408202952998fbed8ebf9ae680f0b2f933","modified":1486617938000},{"_id":"source/.MWebMetaData/ImgUpload-7BB6093676AD8DF842448D125F968F87.data","hash":"961a4fd6562abbd9cbc2b85588b03151bbffba06","modified":1486617854000},{"_id":"source/.MWebMetaData/ImgUpload-6576429E75439F2D83C93768E6EDC17A.data","hash":"c5094a5a54b98584618e6b8820215db07e5a711c","modified":1486617816000},{"_id":"source/.MWebMetaData/ImgUpload-77630AE8D727906DFF25439D8E5EF403.data","hash":"4dba00bbbbe9cc203c115745420494a5d6b26d7a","modified":1486617792000},{"_id":"source/.MWebMetaData/ImgUpload-EDADC824820B5778AAA70749BA5F44B9.data","hash":"0ce9bbf02eb54d695db7a50e9786e1ef884089bc","modified":1486617915000},{"_id":"source/.MWebMetaData/ImgUpload-FE88F7274F26B024F9A036EEEBC4C4FC.data","hash":"d8e50680f6d7ecbd026001e37422ddd33d9004c3","modified":1486617877000},{"_id":"source/_posts/.DS_Store","hash":"2b76496a5a3e0beba941ec0d4d9401f2a6c43eec","modified":1583895484716},{"_id":"source/_posts/Apache-Rewrite.md","hash":"2d0a6661a4983592866449fc8bf2b7048b9ee90c","modified":1579247869478},{"_id":"source/_posts/Git命令使用指南.md","hash":"5c5a57131054df8133a2d925f0ec3daca33704a6","modified":1579247759340},{"_id":"source/_posts/Gitee2Gitea.md","hash":"5574017926300d0b35afd2889273545fd1c692d6","modified":1585030527492},{"_id":"source/_posts/Github-Pages-Gitcafe-Pages绑定自定义域名.md","hash":"5dc136e43c1fc7e289614cca50f13ade3525c7da","modified":1579247754741},{"_id":"source/_posts/UC和QQ浏览器私有META.md","hash":"19e818518dcc6fb8d4ee1bda2dc0e708971cf3cf","modified":1585020538980},{"_id":"source/_posts/WebFlux中mongo操作-Aggregation.md","hash":"2fe749985df9b11cffc0c2a11a149d6395d07aa9","modified":1579248092735},{"_id":"source/_posts/WebFlux中mongo操作-Transaction.md","hash":"01f0cbd2f987e52c66de5ec4eaa5a290168f0412","modified":1579248096430},{"_id":"source/_posts/SpringWebFlux.md","hash":"c42d69fd7bd84048eb216dc8b35a4675633f74bd","modified":1579245306398},{"_id":"source/_posts/android真机调试常用命令.md","hash":"5078cb30b21aec86a000d2ee722be763071273a8","modified":1563256248949},{"_id":"source/_posts/awesome-software.md","hash":"d23d27b59e2a6435ea3a23a07e80abe6eea0ed39","modified":1585818285988},{"_id":"source/_posts/chrome-add-to-homescreen.md","hash":"d7623f8ca78a009781dd0e5a955ff72fd5e6a02d","modified":1579247861851},{"_id":"source/_posts/chrome扩展-插件-应用推荐.md","hash":"5ad65121c2c1bc544beb054cb40713dc9a95da1f","modified":1579247853175},{"_id":"source/_posts/curl常用命令.md","hash":"641cee924cb6cf2ce40da33fa0a5e9b195535db9","modified":1579247848928},{"_id":"source/_posts/adoption-cat-Hua-Mulan.md","hash":"45ebe88754f230b29c45b8a3bc5d1394e98ef9e2","modified":1579247890992},{"_id":"source/_posts/django-rest-framework之版本号version.md","hash":"d0d5520a93f1e1d3cb852151f3604bac1cb200ea","modified":1579247823785},{"_id":"source/_posts/django-rest-framework使用问题及解决方法.md","hash":"7bc81354dbe1d8e9adb5a31d6de658ab3255216e","modified":1579247828102},{"_id":"source/_posts/django-rest-framework入门笔记及跳坑记录.md","hash":"1486aeb94560a9314a7f6d656f0ecca80adb6c6e","modified":1579247831568},{"_id":"source/_posts/django-rest-framework里的api请求频率控制.md","hash":"61c92e2d1e1dc02560034414ca593edb32b27b5d","modified":1579247837325},{"_id":"source/_posts/django-rest-framework接口单元测试.md","hash":"047d947c2803f7524ab6003669c75586cd10b2b9","modified":1579247842316},{"_id":"source/_posts/django字段选项related-name和related-query-name.md","hash":"b176b664284c8fc60534b8895a1fa934fddb369f","modified":1579247801859},{"_id":"source/_posts/duoshuo-comments-ua.md","hash":"da90b6d44602e5013b149bfb1147d0d8ab67163d","modified":1481210984000},{"_id":"source/_posts/django内置的flatpages应用.md","hash":"061b683eb5522c0a9ebc950b0f13111efa95f038","modified":1579247807960},{"_id":"source/_posts/git-patch的简单运用.md","hash":"9fa1ad53c688b16b5734e872c4a952a0817f9d45","modified":1579247779486},{"_id":"source/_posts/git-stash的简单运用.md","hash":"cbb3c6e325c9d093e2cca96a6f347fc1b78e21af","modified":1579247766503},{"_id":"source/_posts/git-alias.md","hash":"1c3e0e36cb2f3faa03ab256b80e54decc8f23ae1","modified":1586516214384},{"_id":"source/_posts/git常用命令.md","hash":"45071323205831c78ad9f9e52593e604106280db","modified":1587563683855},{"_id":"source/_posts/git-reset.md","hash":"2543ba593c7c33375e5a4f0a9605e697ed5e8fa8","modified":1579419667687},{"_id":"source/_posts/hello-world.md","hash":"009870b7ef0d285731a9cf7055ae9a9f168ddd3b","modified":1415538100000},{"_id":"source/_posts/mac远程连接windows.md","hash":"991960d1c914da6bfa431e839e32710faa27590e","modified":1502873923000},{"_id":"source/_posts/material-design资源.md","hash":"8ef4bf47523bcf1fb8e91c65a2688776b635d731","modified":1579247701986},{"_id":"source/_posts/pip常用命令.md","hash":"90ed9b4a9b77d9489797009925e771008c76f4b8","modified":1579245387113},{"_id":"source/_posts/npm入门命令.md","hash":"2cbbb3dbfd906bb30189eb4bf45722c04f1ad151","modified":1579247682950},{"_id":"source/_posts/python中的UUID.md","hash":"4c66f97feb0c66add3898eb560186ff1987f9d5e","modified":1579247667888},{"_id":"source/_posts/js笔记.md","hash":"53612b253a7b55b11bd65e63ccdf787e1b634256","modified":1579247725756},{"_id":"source/_posts/ubuntu安装JDK8.md","hash":"82b3e79b6aa7ab6386a1ce4fa40b27ac7d2f21db","modified":1579247647657},{"_id":"source/_posts/ubuntu从14-10升级到15-04.md","hash":"87a55d814e4f1316d4fa7133e089d930b10dc8e7","modified":1579247638888},{"_id":"source/_posts/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.md","hash":"e18c45a74cb3a1a9824390c424f1ebaf4c7a5d90","modified":1579247655070},{"_id":"source/_posts/xy-problem.md","hash":"c55a8613bb6d578f9a649611d206c2bc2f747ac9","modified":1442925696000},{"_id":"source/_posts/ubuntu更新NV显卡驱动.md","hash":"22de89da4bbf834d9a8dc94a2bb41fff4e241bc3","modified":1579247609601},{"_id":"source/_posts/ubuntu运行shadowsocks客户端.md","hash":"6ebbe13f7f1778ee9497019931e92772bbf07161","modified":1579247601486},{"_id":"source/_posts/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.md","hash":"144c14b37faf2ce65ef16cc8e8adbd804002bd1b","modified":1548916061625},{"_id":"source/_posts/使用alembic进行数据库版本管理.md","hash":"b30175a899bf3d37e56f5f2c9e50d1e1fa57496e","modified":1583299349004},{"_id":"source/_posts/使用synergy实现多台电脑共享一套键鼠.md","hash":"8a3e4e6d2f40c254b305144a1617eb1638a3b558","modified":1579248002978},{"_id":"source/_posts/使用virtualenv创建独立的python运行环境.md","hash":"1d2a348e02ab23faf2bde963bce9c242b856b86f","modified":1579247998300},{"_id":"source/_posts/内网穿透工具frp客户端自定义子域名访问配置.md","hash":"7e2a5ff177b0d7e8cd190b8c20ecf7c6d3a5949d","modified":1554780380218},{"_id":"source/_posts/在centos7使用mysql-nginx-gunicorn+supervisor部署django.md","hash":"4c39629c0aab7d8624584f9fef0da9227f1697e4","modified":1579247955669},{"_id":"source/about/index.md","hash":"4061bcc469e36b456e3dabe1e19e9742b56bf268","modified":1486205718000},{"_id":"source/_posts/在macos上更改jenkins默认用户解决权限问题.md","hash":"e499bc6fb8a2538790931b8abbe063084f557dc7","modified":1579247913377},{"_id":"source/categories/index.md","hash":"2035cc420d663db2ed8ca4425b6ff37c88df5597","modified":1445444294000},{"_id":"source/_posts/电影《小黄人》中文预告片.md","hash":"0275322b16b97c999fa76facdda08aeb183b0fae","modified":1579248019665},{"_id":"source/guestbook/index.md","hash":"2245f1676e475139b1ba1dd4dc9d464798b8e4c4","modified":1445444294000},{"_id":"source/history/index.md","hash":"35258ede9ef6f06cc404969b5e0956cc4cd77936","modified":1451121744000},{"_id":"source/instagram/index.md","hash":"ac6bc6d53ca00344bcffe201de2cfd26de2c8d96","modified":1441986780000},{"_id":"source/media/Synergy-Ubuntu客户端配置首页.png","hash":"6be912785635eab8d50d9c6a8fbf936bb837a2f6","modified":1561714706304},{"_id":"source/media/Git工作流图示.jpg","hash":"ff47b8fe4f51e3f8e8786aecaac828a31687cc33","modified":1561714645882},{"_id":"source/media/.DS_Store","hash":"d4425aaa2c5733d1f1b8417b9693f444e0279096","modified":1568965571742},{"_id":"source/media/Synergy-Windows服务端启动.png","hash":"e2e474b0d53b4d3ef9b8fb73b890bf4e222df819","modified":1561714707292},{"_id":"source/media/Synergy-Windows服务端添加客户端-01.png","hash":"06b483ef17ba74aa9fa3b1fcdcf014a1034cd463","modified":1561714708780},{"_id":"source/media/Synergy-Windows服务端添加客户端-02.png","hash":"8d5f9f631dd86d330f7ac29ffba7a068250bb365","modified":1561714708346},{"_id":"source/media/Synergy-Windows服务端添加客户端-03.png","hash":"de178e92103cc351e61b0c6fe51c0947d8931dad","modified":1561714709883},{"_id":"source/media/Synergy-Windows服务端配置首页.png","hash":"32a75306f6b436bb5c21395b3df0f91dfd1b0675","modified":1561714712899},{"_id":"source/media/Synergy-logo.png","hash":"93a0b5041c5d8991e0f8d54eb78e4bc9333ea983","modified":1561714716535},{"_id":"source/media/chrome-add-to-homescreen-01.png","hash":"eda787be416140cc44ce3315e92b8d5a1484e6aa","modified":1561714432714},{"_id":"source/media/django-commands.png","hash":"b5440646c7f0c08d36d9f8ec318a1478b96357c1","modified":1561714415778},{"_id":"source/media/ngrok-start-iblogc-django-weixin.png","hash":"76d9a641237ca6be00317d1ccced0d190cebde66","modified":1561714721713},{"_id":"source/media/ngrok-iblogc.png","hash":"8f0b03810f6707c8c52bc328eadb301a832884e0","modified":1561714654616},{"_id":"source/media/materialdesign-goals-landingimage_large_mdpi.png","hash":"6be66328478c4f7f493851e8111d7fefd632a17e","modified":1561714655665},{"_id":"source/media/ngrok-auth.png","hash":"fa87d4245d014a27ef0a1ab3ea8a596652e40d05","modified":1561714657583},{"_id":"source/media/ngrok-start-iblogc.png","hash":"4193180dd1b54527291695864f99f229bcdb59bf","modified":1561714721697},{"_id":"source/media/nrok-web-interface.png","hash":"30a1c7cac707cc34a7f14073d81ee196806f2e92","modified":1561714720340},{"_id":"source/media/ubuntu-14.10-15.04-01.png","hash":"aae6d385e821ca525d44467e703e006dba8e16fd","modified":1561714711151},{"_id":"source/media/ubuntu-15.04-info.png","hash":"bfac826b50887ba62d060f5916412d16b2cdafca","modified":1561714714297},{"_id":"source/media/ubuntu-15.04-logo.jpg","hash":"c7cd03bf4f445f6d30ce4c4dfc8b75d8f49ac1f7","modified":1561714708458},{"_id":"source/plan/index.md","hash":"29e1502bd5e73f4f5978d8a1c332590cfb700188","modified":1440084534000},{"_id":"source/res/ic_launcher_144.png","hash":"2d6ff7004c2b0a5216aaa4a793c0652f9774c954","modified":1442072976000},{"_id":"source/res/ic_launcher_192.png","hash":"8256955ca218af0d89239467eb2aeafb9d6efb2f","modified":1442072976000},{"_id":"source/res/ic_launcher_48.png","hash":"f01f57128c1a4ede6ab10db40b691710ce4ad88c","modified":1442072976000},{"_id":"source/res/ic_launcher_32.png","hash":"82904aaf780efcd29c36e3342b6c5b7dab6d4cd4","modified":1442073308000},{"_id":"source/res/ic_launcher_72.png","hash":"09b49bb09e024f154c285f2bd1cf128ed61846c7","modified":1442072976000},{"_id":"source/tags/index.md","hash":"abbf020ebc57365b801dd23a2c32b857064f652b","modified":1445444294000},{"_id":"source/thanks/index.md","hash":"76733c5fd0b63f625b71c8eceecc461db1bfefca","modified":1486571227000},{"_id":"source/res/微依LOGO.JPG","hash":"870b497e38687960db98cc169db502324255269e","modified":1412860078000},{"_id":"source/res/ic_launcher_96.png","hash":"88f3d836089f20390c874ce1ed80279d9ab4b045","modified":1442072976000},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527752362653},{"_id":"themes/next/.git/ORIG_HEAD","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1575025513152},{"_id":"themes/next/.git/COMMIT_EDITMSG","hash":"6070278c2e3b31bc1e40c485f66da5336bd2cbb0","modified":1570870072334},{"_id":"themes/next/.git/FETCH_HEAD","hash":"1da07767e3720f77b888cd44226073be8ba53774","modified":1587113183180},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527752340644},{"_id":"themes/next/.git/config","hash":"48d964952b48d65144611a7364293f938110d180","modified":1570870146860},{"_id":"themes/next/.git/index","hash":"73ee2a66e821fd722cc48c284f7b265b2d68ce6d","modified":1575025514401},{"_id":"themes/next/.git/packed-refs","hash":"e277289607b97219cf350f6a9de7e6cbb9c9e510","modified":1527752362650},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1575025513002},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"fb80bb52a76dc9100d9524456f73c7a263c85437","modified":1575025513003},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"88780daa3db837a34fe3ed90cc61cc578b5760ed","modified":1575025513006},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1568699013424},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1568699013424},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1568699013424},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"b09c85aa449f46bc025317ed196ec33a877f7c23","modified":1568699013424},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1575025513006},{"_id":"themes/next/.github/mergeable.yml","hash":"0ee56e23bbc71e1e76427d2bd255a9879bd36e22","modified":1568699013425},{"_id":"themes/next/.github/release-drafter.yml","hash":"f8a0ee0ad08e1493475dbb67b2957cd6afcafac0","modified":1575025513007},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1575025513007},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1568699013426},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1527752362677},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"20f8a3d7db6e797a5a3ed8c84837315cb8e09e5b","modified":1575025513010},{"_id":"themes/next/docs/AUTHORS.md","hash":"44c3b963d877c6cbc3a720ed4e266532db3c12ac","modified":1575025513010},{"_id":"themes/next/docs/DATA-FILES.md","hash":"a85ae0f3a9655eea9acd3f6209b72eb002f2058d","modified":1575025513011},{"_id":"themes/next/docs/INSTALLATION.md","hash":"5385246ab4756e3e26ec9fe1f6a6759812177cc4","modified":1575025513011},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"1fb2c852fad03b73882069f1ec0659db2e1f2da0","modified":1575025513011},{"_id":"themes/next/docs/MATH.md","hash":"aa90364b1ac069b4f8cfdb48b4879311856224e6","modified":1575025513012},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1568699013696},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"a07ca23c38f6e4dddd4b74016b30e88cd3796f75","modified":1575025513012},{"_id":"themes/next/languages/de.yml","hash":"3d8920676d89494d7d1c74d4238680151ea6d9df","modified":1575025513018},{"_id":"themes/next/languages/default.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1575025513019},{"_id":"themes/next/languages/en.yml","hash":"c13eda783f8717c62b7ad9e8a9b724314ae74e1a","modified":1575025513019},{"_id":"themes/next/languages/es.yml","hash":"7dc1d7d5ea1078ee3b9bc8e0e8d0f15f52a7a4aa","modified":1575025513019},{"_id":"themes/next/languages/fa.yml","hash":"269b5cb70774485d7dbbcf98eec72c9e84e135b2","modified":1575025513019},{"_id":"themes/next/languages/fr.yml","hash":"dfdcfa536c40d06125dff373d042c50e08fcafd8","modified":1575025513020},{"_id":"themes/next/languages/hu.yml","hash":"e4a5f43fb45acd992def3de3b600aa4df4c95ed7","modified":1575025513020},{"_id":"themes/next/languages/id.yml","hash":"5665dece8435964a27b5061d7283f339f84721f0","modified":1575025513021},{"_id":"themes/next/languages/it.yml","hash":"311597c620059dbb99474f19b2110a4485ecf70b","modified":1575025513021},{"_id":"themes/next/languages/ja.yml","hash":"4f929842b3d6aaed709ea99da679d3910ee184e5","modified":1575025513022},{"_id":"themes/next/languages/nl.yml","hash":"561c77ca68e9d51a5ce8c89d3361fdb033c96bba","modified":1575025513024},{"_id":"themes/next/languages/ko.yml","hash":"5f5194dd0f5a3c8484e7668bce6fbe23340e531a","modified":1575025513023},{"_id":"themes/next/languages/pt-BR.yml","hash":"13b579911e44a8b213e1860f9a50c341be1bf95e","modified":1575025513025},{"_id":"themes/next/languages/tr.yml","hash":"39caf8a3677fd6dfbd523e73f8482a509e87b603","modified":1575025513029},{"_id":"themes/next/languages/pt.yml","hash":"af9d9b581dca45ab9789ca41d3492883a911e383","modified":1575025513026},{"_id":"themes/next/languages/ru.yml","hash":"b485c57dd7b447406dafd0dcfdfc9356266708c9","modified":1575025513026},{"_id":"themes/next/languages/vi.yml","hash":"3c6bb816ee7278afcddac06998c9ebe47ee19aef","modified":1575025513030},{"_id":"themes/next/languages/uk.yml","hash":"4cbdbb0ed09487c9b435be21ac35f62182f53283","modified":1575025513030},{"_id":"themes/next/languages/zh-CN.yml","hash":"7c2273ccec71ff45bd9d77aa339433b139f1f574","modified":1575025513030},{"_id":"themes/next/languages/zh-HK.yml","hash":"93d10d6e448c519004b09b11fba980b5036c93af","modified":1575025513032},{"_id":"themes/next/languages/zh-TW.yml","hash":"ae2aa1c6ec1a5a01a3a3bde17bcc3a82f9a35fa7","modified":1575025513032},{"_id":"themes/next/layout/_layout.swig","hash":"4ad7afa0af254b26b7de849dc11c01c7aab9c07f","modified":1586510569063},{"_id":"themes/next/layout/.DS_Store","hash":"fc72a4b88001021b879f62342e237710c02d7e18","modified":1568718349333},{"_id":"themes/next/layout/index.swig","hash":"531dfd069a5497c37817360097e1cb0d8ba515f4","modified":1575025513077},{"_id":"themes/next/layout/archive.swig","hash":"72b4e0786668bc61c11eafa12da5d75272b93b61","modified":1575025513077},{"_id":"themes/next/layout/category.swig","hash":"38433a9de15f019267c9130e243e14343fb9bc3d","modified":1575025513077},{"_id":"themes/next/layout/page.swig","hash":"f038deec70adfecb0a87256ba8c319d4781925a5","modified":1575025513081},{"_id":"themes/next/layout/post.swig","hash":"0c3b34a6832b8e33574edc17095344f9e0bea74f","modified":1575025513082},{"_id":"themes/next/layout/tag.swig","hash":"153fb65e710a9643634aea4813431e92c11d09fe","modified":1575025513082},{"_id":"source/_posts/django1-9文档阅读笔记.md","hash":"fae40e5862a68d36994ef0e2ff151ce557efb63b","modified":1579247815500},{"_id":"source/media/chrome-add-to-homescreen-02.png","hash":"cedf1fd253b592f7587e1d4a5bbeece98603c45d","modified":1561714433822},{"_id":"source/media/chrome-add-to-homescreen-04.png","hash":"9a087913f791b6d68db35c5515cbc1ff9d085cb4","modified":1568772703449},{"_id":"source/media/git-reset_drbfhd.png","hash":"eedef60b857f50b5f96044a833e59b0f0c9a2480","modified":1568772706497},{"_id":"source/media/花木兰/.DS_Store","hash":"117379538af2d644592ea60bb15f46faabedc94b","modified":1568976727935},{"_id":"source/media/花木兰/10.jpg","hash":"76e51f260de7d0c9c086b55501a2db063551250f","modified":1568732597000},{"_id":"source/media/花木兰/1.jpg","hash":"ef361dbf85290e019e14d8f2288a419b73c69a83","modified":1568732649000},{"_id":"source/media/花木兰/2.jpg","hash":"4993fb89246274e1069405492c9b03c0eaa7ba4b","modified":1568732622000},{"_id":"source/media/花木兰/5.jpg","hash":"a43adae2646d182e809721e1b5f82219c352d344","modified":1568732644000},{"_id":"source/media/花木兰/8.jpg","hash":"caea2805302864c8164c0c740526eb4536f0969b","modified":1568732597000},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1527752340646},{"_id":"source/media/花木兰/9.jpg","hash":"9521454ddaaff69aad26a76280c2f04ea5d8e35b","modified":1568732597000},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1527752340644},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1527752340646},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1527752340646},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1527752340648},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1527752340648},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1527752340649},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1527752340648},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1527752340647},{"_id":"themes/next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1527752340643},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1527752340649},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1527752340645},{"_id":"themes/next/.git/logs/HEAD","hash":"97dc5f1f124fe8bf78c801ca4314fa8ae178c915","modified":1575025513155},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"2bb989a73168ff9e67722814fb30590cde36548f","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"17f900aa124af0c9317d0b26429e14af43482b64","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"f1bd86cc5a310997e9f18abc115eaf62dd1c8095","modified":1575025513005},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"6fda3f0e0b9968562d6bd81d8d87e9a7b5c24b36","modified":1575025513005},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"67d04e3e29a2675d1a9f87d1ae6ea0769e963ff1","modified":1575025513013},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1575025513013},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1575025513014},{"_id":"themes/next/docs/ru/README.md","hash":"3ceab62de4db29e2257dd5a187c7f8731a207f84","modified":1575025513014},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"5ad2c2d0a11443a03b3fd912925bc0dcfbcda88c","modified":1575025513015},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0dfb458370a0ffbbe37c00f53c15e3aa3e79b125","modified":1575025513015},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"ca39e510b43ea1efe7e5feeca2243375e55eff5c","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"c46f3f7496fc422207cc5954e10a2bc972b650aa","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"c13546dd70a99a7d2d409cddf5d59f2f4d4d44a4","modified":1575025513016},{"_id":"themes/next/docs/zh-CN/README.md","hash":"0981aaf68145a05b02cd10c95d38cbaf97622944","modified":1575025513017},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"4ee0607ddcfb2fe0e5868aced6d5814d1ada4405","modified":1575025513018},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"8ceaad956a1afedf179b2e0b98a67adee9afec08","modified":1575025513017},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"a658a72589738e11aefaa3a714b188ffd5aac822","modified":1575025513017},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"1bb927e0560d3d3c95369da461911cced5bd537b","modified":1575025513033},{"_id":"themes/next/layout/_partials/comments.swig","hash":"e0f59221b6010bd3e05d34fac915556f51b8a458","modified":1575025513038},{"_id":"themes/next/layout/_macro/post.swig","hash":"20ef46756b2a8026cc85e7830e5414fe749d1391","modified":1575025513034},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"e92b9b2518c2ff0bd767a375fe33a65643ec8537","modified":1575025513035},{"_id":"themes/next/layout/_partials/footer.swig","hash":"9d9a5d6a2f0d4f65fe57c3737c91ecaf276c1f5c","modified":1575025513040},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1575025513051},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"769a983fe2f77908bfc8590ff37a0d8958b47598","modified":1575025513051},{"_id":"themes/next/layout/_partials/post-edit 2.swig","hash":"4b0c972c44bfa7ab07604280563deb9cc3974657","modified":1568699013000},{"_id":"themes/next/layout/_partials/widgets.swig","hash":"58f12810a730ba8e3129c9b0d1a7cce42ac6f2d2","modified":1575025513056},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"e08feac6f8904d7f2006e350514a2f07eb9fff44","modified":1575025513057},{"_id":"themes/next/layout/_scripts/index.swig","hash":"cea942b450bcb0f352da78d76dc6d6f1d23d5029","modified":1568699013456},{"_id":"themes/next/layout/_scripts/pjax.swig","hash":"105004ddcc7fe9f4fd7ad1007b628ba8c08c1e27","modified":1575025513058},{"_id":"themes/next/layout/_scripts/three.swig","hash":"eee4d26b5c0bb7872a21346151c38612a9b76d0b","modified":1575025513065},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1568699013460},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"d3448044776dd23abd42b09ef0f26827f95efdf5","modified":1575025513066},{"_id":"themes/next/layout/_third-party/facebook-sdk 2.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1568699013000},{"_id":"themes/next/layout/_third-party/facebook-sdk.swig","hash":"3cf1a1a83ceddef4033a2964150f81b979ced6ff","modified":1575025513070},{"_id":"themes/next/layout/_third-party/index.swig","hash":"32e4fe8dd8b3c40a17314569d1a14bde55251074","modified":1575025513070},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"65f94b115c42d33e6a90b1f8e62075c6d4ac60c1","modified":1575025513071},{"_id":"themes/next/layout/_third-party/vkontakte-api 2.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1568699013000},{"_id":"themes/next/layout/_third-party/vkontakte-api.swig","hash":"e0d012bdbae5545d90143030116114c34219bd37","modified":1575025513076},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"da6a9d14ed10203e378c6e2c00a7b5e7afabca58","modified":1568699013466},{"_id":"themes/next/scripts/events/index.js","hash":"a25690d8b03779f7e318108c8eace9baf6d4283a","modified":1575025513083},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"834599d2b83f06e90f8cf618cddc106fe900ba5c","modified":1575025513092},{"_id":"themes/next/scripts/filters/excerpt 2.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1568699013000},{"_id":"themes/next/scripts/filters/excerpt.js","hash":"827c3733fa14b018dd1f07e41686c207880e823a","modified":1575025513092},{"_id":"themes/next/scripts/filters/exturl 2.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1568699013000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"9c32675f64121ffbe454189b8e418b408f79d9c2","modified":1575025513093},{"_id":"themes/next/scripts/filters/lazyload 2.js","hash":"51672320fff6b39f56fe6a2881c611afe4e79b8e","modified":1568699013000},{"_id":"themes/next/scripts/filters/lazyload.js","hash":"8b5951c5b1d80aaff6213a220ef0d43ad5261458","modified":1579248049613},{"_id":"themes/next/scripts/filters/minify.js","hash":"19985723b9f677ff775f3b17dcebf314819a76ac","modified":1568699013474},{"_id":"themes/next/scripts/helpers/engine.js","hash":"896a581feb9432e58a325ad04d66d6310a12374e","modified":1575025513094},{"_id":"themes/next/scripts/helpers/font.js","hash":"53169e2d04f0c21e68beb07c212be0a6c2a9aaea","modified":1575025513095},{"_id":"themes/next/scripts/helpers/next-inject 2.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1568699013000},{"_id":"themes/next/scripts/helpers/next-inject.js","hash":"33eb6f38de575b973fed237032c34d878594fdc1","modified":1575025513098},{"_id":"themes/next/scripts/helpers/next-js 2.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1568699013000},{"_id":"themes/next/scripts/helpers/next-js.js","hash":"b28a8ed6d033946acbb5b91f6d8b884857410dd9","modified":1575025513099},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1575025513099},{"_id":"themes/next/scripts/helpers/next-vendors 2.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1568699013000},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"d512f44195f68b0ff93f3c82afff9161cdf1b7d6","modified":1575025513099},{"_id":"themes/next/scripts/tags/button.js","hash":"1d1d25f7e579d92fa563778dd0f163e8eda190da","modified":1568699013476},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"20e392b8583ba6ae5037449c2c7e191d3927641b","modified":1568699013476},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1568699013476},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"8fc05f22b88553bc1d96e0c925799cd97920fc6a","modified":1575025513101},{"_id":"themes/next/scripts/tags/include-raw 2.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1568699013000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"60f880c1e11a7df1aee4f2e01d65451fecc0372c","modified":1575025513104},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1568699013478},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1568699013479},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1568699013479},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1568699013479},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1568699013479},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1568699013480},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1568699013617},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1527752362850},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1527752362850},{"_id":"themes/next/source/css/main.styl","hash":"68c3377b643162aeaae2b60c196486fdb3b509c3","modified":1568699013616},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1527752362851},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1527752362851},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1527752362852},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1527752362852},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1527752362852},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1527752362853},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1527752362853},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1527752362856},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1527752362856},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1527752362854},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1527752362855},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1527752362853},{"_id":"themes/next/source/lib/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1568699013621},{"_id":"themes/next/source/lib/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1527768460327},{"_id":"themes/next/source/js/algolia-search.js","hash":"813afcc30feee11d59f297f2d5a96f98fbbd4743","modified":1568699013617},{"_id":"themes/next/source/js/next-boot.js","hash":"2294cdcc61f265388c02955e86ff74641d18915a","modified":1575025513148},{"_id":"themes/next/source/js/bookmark.js","hash":"60cab6771a57c268da331920edd6d7fcd2713d42","modified":1575025513147},{"_id":"themes/next/source/js/motion.js","hash":"d52807a73efc34b1189c096477f348d05debf861","modified":1575025513148},{"_id":"themes/next/source/js/local-search.js","hash":"0579159bf994e3726b3ba063e5905f79465fdfb1","modified":1575025513147},{"_id":"themes/next/source/js/utils.js","hash":"6aa2f859eee9791a2a41d3cf58403dd19714fbfb","modified":1575025513149},{"_id":"source/media/花木兰/15.jpg","hash":"bab4a1a38176708e256460ae5f1d3ba89e055219","modified":1568732650000},{"_id":"source/media/花木兰/13.jpg","hash":"5508a140aa87367e33490ac596ac93cba3e7a6d9","modified":1568732622000},{"_id":"source/media/花木兰/4.jpg","hash":"d63c2a35981e67a91aac052f490fca5202f36d55","modified":1568732597000},{"_id":"source/media/花木兰/7.jpg","hash":"b2ed67a3f11b2c5eb8f59cec94a45048db67b277","modified":1568732649000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527752362835},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1527752362835},{"_id":"source/media/花木兰/3.jpg","hash":"bc11442dd01b439c8dbe9589887fdeafa0a79483","modified":1568732598000},{"_id":"source/media/花木兰/6.jpg","hash":"1f44e894a046df81bb1b7405b28b6ccb8f03779d","modified":1568732622000},{"_id":"themes/next/.git/refs/heads/master","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1570870072336},{"_id":"themes/next/.git/refs/heads/coding","hash":"2e600ec033244e3a6c20404d85d009a9577b12a8","modified":1568697931042},{"_id":"themes/next/.git/refs/heads/origin","hash":"2e600ec033244e3a6c20404d85d009a9577b12a8","modified":1568697906484},{"_id":"themes/next/.git/refs/tags/v6.4.1","hash":"ac845fb35dc632c804d5d2eebcd731ad4d4ddfac","modified":1548916311454},{"_id":"themes/next/.git/refs/tags/v6.4.0","hash":"48dd2138567e9dd832f6adcbdf2e1945f999a59a","modified":1548916311453},{"_id":"themes/next/.git/refs/tags/v6.4.2","hash":"106bd960739a3bbb6142bd76625fcba8991d7abd","modified":1548916311455},{"_id":"themes/next/.git/refs/tags/v6.5.0","hash":"b6c2091da7683b424070a8dd6d7e377dec7c8ea0","modified":1548916311455},{"_id":"themes/next/.git/refs/tags/v6.7.0","hash":"b857a6c4428702973dc7b67a5c2a1e248653b49c","modified":1548916311457},{"_id":"themes/next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1548916311456},{"_id":"themes/next/.git/refs/tags/v7.0.0","hash":"2d4536d7701746b3624fa92eeddeb943c32094d8","modified":1551440729477},{"_id":"themes/next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1551440729428},{"_id":"themes/next/.git/refs/tags/v7.1.0","hash":"d4eb8a8fc73617512e52707a8696a911b067f12f","modified":1561715404557},{"_id":"themes/next/.git/refs/tags/v7.1.2","hash":"5da254a35926656e17cb71d94eaee61c2610ed37","modified":1561715404560},{"_id":"themes/next/.git/refs/tags/v7.1.1","hash":"9a421ea6943f449d6efad94759fbf056fb880391","modified":1561715404559},{"_id":"themes/next/.git/refs/tags/v7.2.0","hash":"2a50b758ec214ed4b5a33e8d12624f75ab9e5fac","modified":1563240952433},{"_id":"themes/next/.git/refs/tags/v7.3.0","hash":"b5e6ac477dd2020ebef248726ece844afb8d2624","modified":1568697628072},{"_id":"themes/next/.git/refs/tags/v7.4.0","hash":"1f4233a1de644e88922e010592393339ab082fd9","modified":1568697628073},{"_id":"themes/next/.git/objects/00/6a4b0f7c94ad38e67af78c5492d810e8027bd3","hash":"bc7ba60567086c3bcf7ca7362057e54fbab6f99a","modified":1568881985892},{"_id":"themes/next/.git/refs/tags/v7.4.1","hash":"dfca465bfc3833228507b73b8fff5568a51c5016","modified":1570869290079},{"_id":"themes/next/.git/objects/00/848791fdd0ec3518720fed4b10bf754ebbb1c1","hash":"ee580017278563bc746f75b168708403c0aa49e4","modified":1563764364458},{"_id":"themes/next/.git/objects/00/82a46d49f27d50e803d7c7b841f17b6d118059","hash":"7e70498b56004948222904c429a656098d0fa923","modified":1568877235787},{"_id":"themes/next/.git/objects/01/34bf2741e2df87b0250fb040b0eaf434db37a3","hash":"9496573ae950c8c22a17546b317a919933b0ec22","modified":1563764364860},{"_id":"themes/next/.git/objects/05/18c72bedf3b7fa303b978594fe462152c93b41","hash":"63dd7447d2e859f4fa736b0deec6d5a20eee4a90","modified":1586516443894},{"_id":"themes/next/.git/objects/06/de0bdd625a6592fd4902d56fcad2f589216fc3","hash":"e47a6dbf7a561549316bfcad75ff94c6e08cf58c","modified":1568877235806},{"_id":"themes/next/.git/objects/06/3ac6cbacb5ca8974e20ffec8303cce91965d5c","hash":"87d78b081622184c605cb1d19c2c0f9fc6c85196","modified":1563416717989},{"_id":"themes/next/.git/objects/05/c2309c6f3c9801f19da5bef36dbb90dd7593a3","hash":"80db52bbe8af01a6e13ceb3b9216a1f40b5317c7","modified":1568697710071},{"_id":"themes/next/.git/objects/0d/c7500763dc66a2f0cd4c605b2034fc5215dbef","hash":"67a72c2e0bf5a4cb579a31e5e5a1990d517fa7e2","modified":1568877235802},{"_id":"themes/next/.git/objects/02/3eb642398336a0560eda940b84b3c7f54d8c04","hash":"f779a21049de20c4777cf32af34829f1e26777da","modified":1563764364452},{"_id":"themes/next/.git/objects/0c/89ae8d819c689a02138655f577550c23b3adb5","hash":"eb2cda273449907899706f4eeb51ada48c06f8d6","modified":1563764364850},{"_id":"themes/next/.git/objects/0b/8b297b324bd9f40bded5f15c8a90e5de1ca503","hash":"2640ecd520e9ff97a3fc096e824a3b15256f9d9a","modified":1563764368381},{"_id":"themes/next/.git/objects/09/818fe6e682f2f526b4594eb88e6e7d1d26733d","hash":"fc05f50746293d2b313a6603334a3e3acb5a167f","modified":1568707757352},{"_id":"themes/next/.git/objects/08/4d87ae7a5176402e6e184386a56483132898c2","hash":"fb638e989a8db62c305ee1b3478d02b766ca9d31","modified":1564113948829},{"_id":"themes/next/.git/objects/0b/c68c9ed27be240b04fcbeb8a9c287b5310b859","hash":"b153062437c9fd812716b7da26d448efbe54d61d","modified":1586516443865},{"_id":"themes/next/.git/objects/0d/4ed91c7d0ab85cdc739ed5b3a1acfa977466d9","hash":"0cb6bc4868e874f11478d6f23918b4e340912f2b","modified":1564113948818},{"_id":"themes/next/.git/objects/0b/a6216e1f6b0139945bef07c76b21d7462d4b8f","hash":"c3b0f6d96ad59399347d4464ea56f0f7b8568230","modified":1563416717978},{"_id":"themes/next/.git/objects/0b/f71a91886a379a05f210898c8c3069f293a22a","hash":"81546589f64e464b1b785e478899c7bf5932bd40","modified":1568877235789},{"_id":"themes/next/.git/objects/0a/722ded5d9658467bf888146321873bbd03e77a","hash":"3c5d03744b8fe54ae34a2c289fe8cf2c9c2e8072","modified":1568877235795},{"_id":"themes/next/.git/objects/0f/19281440713376daa8dc321c633fa3bf99b229","hash":"958f234f09b2a422dde06a0d791038d3afaa8997","modified":1563764364844},{"_id":"themes/next/.git/objects/0f/9daedd9da865da9aac8eb7c5a0ca13cae3fd5e","hash":"2344809f6b9971e32f976a3fe64a8538c715ac4d","modified":1564113948824},{"_id":"themes/next/.git/objects/0e/5bb4b42c606dfada4d1e2ffe18eb64464db5e9","hash":"2bf11b88147bab896257c0928152e55344bdda38","modified":1568770502674},{"_id":"themes/next/.git/objects/0f/5e875a36ca406aff87ad0571281d5fec905329","hash":"4e17c72eaa41b7ff6d3c2a8663b1f305799193d5","modified":1563793628469},{"_id":"themes/next/.git/objects/0a/d9c1140090071e5556e16ab405b171092fbcca","hash":"136497ba2a36a98b889bd1b15882535be6ec9eed","modified":1575024955984},{"_id":"themes/next/.git/objects/0a/7454610904c600bb62aeb7afca6b105849f52e","hash":"4263cbc3a872c1c7fcc8366f8fcfaf262dbef070","modified":1568979149799},{"_id":"themes/next/.git/objects/0e/c4aef32d5082f8b82974aeadda976930284b1e","hash":"0edff2c5fe01b73daf4b9711e969619b8874bf4f","modified":1568979149798},{"_id":"themes/next/.git/objects/0c/3c619f3db528f9d798e7120da8e09a0e788e0f","hash":"792e89c7574b32d3b7a8f65e172229b8e13afd20","modified":1575024956016},{"_id":"themes/next/.git/objects/0e/d7b2aa90ba3c50afdb46ad29da2fedf76e54f2","hash":"24172d3bb958142cbf5d1522d335f07400b020e6","modified":1568700998276},{"_id":"themes/next/.git/objects/11/0d47d1f6152558c1bfbc8e708f81c59311f1a2","hash":"401b9be2493016826885f26049c2985a26df5e46","modified":1563764368408},{"_id":"themes/next/.git/objects/11/b621e8aced5893b88ffda3e42870f22fa90a7e","hash":"c091b0b203c83759829e08928dca34c0ac3fb51e","modified":1568707757358},{"_id":"themes/next/.git/objects/10/012b572d2ac73c76e767b857ff314024a35642","hash":"ff023c299dee1a3154fecdd20636cc06b4e79135","modified":1563764368380},{"_id":"themes/next/.git/objects/10/5e842e63704a0e9ca082132dbdd84ceeaaaf72","hash":"42ded98a6b6c55b220acdf8a38e9026547e7a7bb","modified":1563764364434},{"_id":"themes/next/.git/objects/10/ecc09f36beefaa7218f3f75e5cfe68fcc86234","hash":"e067755b827ae1a646a84aee06f6ce18e919e5ef","modified":1563764364387},{"_id":"themes/next/.git/objects/10/332b548976e48696e7edf9e71a7a5cb39d9fd6","hash":"4fdfc883ce47bf04b56235358ad8451ac1630dcb","modified":1568958704214},{"_id":"themes/next/.git/objects/14/138be441636b7fd37c057df6c7f67684dae02e","hash":"c73e176153c2e2cdc87820240aba9ce99c4876d9","modified":1563764364405},{"_id":"themes/next/.git/objects/14/88e83fb96fc408330f4de246990a4a26d3cd48","hash":"4f0ffed63c182b5e0ec5afc35ddefd8cf9a6e321","modified":1586516443858},{"_id":"themes/next/.git/objects/12/00d8c553d97c02ef11e6efbfe6eeb5c8489ba8","hash":"deb94c01be176abd96a40aa50b2d144014cd996c","modified":1575024975419},{"_id":"themes/next/.git/objects/12/449bb68ce675d21a30bd9497794a986aa57a27","hash":"ebef6d8c6e7db602c82cda9fefb17de963e1bd8d","modified":1564113948828},{"_id":"themes/next/.git/objects/14/c00cf75d65004c96c263eaad603f587da01897","hash":"6cade938fbd606cd910a2466fc2426556c7ab539","modified":1575024975386},{"_id":"themes/next/.git/objects/12/e3cfeb152379dbe5426449c16663b7e0730987","hash":"780c68620cbfa8088bce78ffcf7c0d10f20a5787","modified":1568877235795},{"_id":"themes/next/.git/objects/15/d5474e6363c6f3002896772dc5e8d8034679ad","hash":"8efb1016de85e3c8891c6de26a2bd4502a3e1975","modified":1563764364469},{"_id":"themes/next/.git/objects/13/bd92d1c9a55aad1cc0ccf5fd9dbf73c35b12a3","hash":"503e2811c7da5a3713d23a2b5c5e986c8aa7b592","modified":1575026261742},{"_id":"themes/next/.git/objects/19/4144d19b3f3bef501a80454807112186e38ddc","hash":"fc260336b1297b9c3e9dcd77a6ed308685f5f761","modified":1564113948868},{"_id":"themes/next/.git/objects/17/ab6bb3d5502a65f136a9dd70abda307fbafc6a","hash":"4ffe701e661e66d68de0006ddc3535ca0b1b2aa5","modified":1568697710066},{"_id":"themes/next/.git/objects/19/ad4ee0719f9bacbb01a9d8f5a6d35a2314cbee","hash":"9334aa9d1bfa8486303cfca0f375b59a40dcc105","modified":1563764364930},{"_id":"themes/next/.git/objects/18/5371957b2fc699a3e5b4dfed3580bdc77d993c","hash":"7c1f2d174a2dab7aa957e584ebaebde3503b14c7","modified":1563764368379},{"_id":"themes/next/.git/objects/1a/12d82efe284056630638a8f58fdbc5a918d451","hash":"f93121fd5affb075e6868fd944f7934a21547b33","modified":1564113948832},{"_id":"themes/next/.git/objects/18/78f9250a9d063ad45f366056e9453687295a4e","hash":"3cbeb5382b8526ab08ea3e49b0ab93f60b2f36a0","modified":1568697710068},{"_id":"themes/next/.git/objects/1a/f7d05a375dba8ff035ee97f8027cf3a8c5120a","hash":"050ed5ec5bfeb9cc56d63561398739dbc4c50979","modified":1568958704213},{"_id":"themes/next/.git/objects/18/3e5b1bae84f6d07c6071270c1c46da16fd9082","hash":"d166cf0960a1b19a92c521b27e2da71606f1db23","modified":1563416717954},{"_id":"themes/next/.git/objects/1a/b2553f729cef80f280a4d9282a6c10817619bd","hash":"a840175b6dc36917d05c197fd68bb30332bfb6e8","modified":1568958704200},{"_id":"themes/next/.git/objects/1e/188cc209ad8dbbb70e3315fdac0d9b6b3e58af","hash":"a45fe20a84701aecd3d4fca2df2f883c6fee9525","modified":1568958704219},{"_id":"themes/next/.git/objects/1b/fc74484f70f665652f025734f7de3f49f66446","hash":"299ca979689682c103e193d51a9ec2edb62ad104","modified":1586516443868},{"_id":"themes/next/.git/objects/1b/6bf0d0059993db80a9506650bd2207dc2ea80e","hash":"2bf6dea8d42636853b1de6e033f38dbdaa1b6175","modified":1568958704218},{"_id":"themes/next/.git/objects/1d/1b32f4bf83b41c59dab6a0542f54258aeba359","hash":"5b77800792671d9f9b720303d4847608186d46d3","modified":1564113948867},{"_id":"themes/next/.git/objects/1e/a61e7639b56918c6b35fbdeb4db6448b406f39","hash":"820d71718176fc59f5a29dd55330f1482eec1958","modified":1564113948821},{"_id":"themes/next/.git/objects/1c/5a282573676436b6b0615d5ed51ea0027dcece","hash":"f6bf5d98f71290fa673a1309490fe4bd6cc1d70e","modified":1568877235774},{"_id":"themes/next/.git/objects/1d/4463406190c369bc741fc3325ac8d0a7fe3780","hash":"e82437155289657678087cdff65df146c6f17162","modified":1586516443870},{"_id":"themes/next/.git/objects/23/00f450297c7b9109914f032e866b873888f219","hash":"750a4630d09268032c68a9b18ed940b93bdf1d93","modified":1563764364866},{"_id":"themes/next/.git/objects/23/01ed790b1a8705dbdfcfb499640e61aa5dc401","hash":"7d5c5d82136c63b4c4a7684bac8fb2ff67e08635","modified":1563764368401},{"_id":"themes/next/.git/objects/20/bd28601d6962125b74e580c84d2f15471aec0a","hash":"f036e8562f57eece13712654ad03c6d8372225bb","modified":1568877235772},{"_id":"themes/next/.git/objects/24/3f71f6e8ebea649cdb703205d4196cfce1b1a1","hash":"7e60524a1d6a2ffd48464605475218b67fc3be35","modified":1564113948875},{"_id":"themes/next/.git/objects/20/55c89f63748acf486a115c1d6ec013cc392db1","hash":"2a118640b6c0f6c5bd2e312fd8ce6a018b7b1f3a","modified":1563776837396},{"_id":"themes/next/.git/objects/22/d89a53811dc498622bb3dd0088d6f808cbfbcc","hash":"4bfbf526e3b4decb199c7f89b436f11cb7a85af2","modified":1575024975384},{"_id":"themes/next/.git/objects/24/e2b6e2283568b15561982fee60e7716535a3fd","hash":"70185b0ca23cc3d1e2e9ff0fef926ebc7993ac54","modified":1568770502669},{"_id":"themes/next/.git/objects/24/7be490fd36146d87bb5bb0d638ee8fbd3b947e","hash":"2866625659cf05716fe4540c5c99f4420f27169a","modified":1570870072328},{"_id":"themes/next/.git/objects/24/b0df9bc5e425658b51501cbbd8715719e14906","hash":"176e54baa55e39369188ba94fe6c86bcd3217a6e","modified":1563776837391},{"_id":"themes/next/.git/objects/1f/96bb0a35d7b794595b476e24cc3b8d8a0d759c","hash":"7ce1ab1a12f7db1d9940db31334d61e0fe7c2ee0","modified":1575026262203},{"_id":"themes/next/.git/objects/22/e22b93409c7668dec12eb7890c41508ae2372a","hash":"76011328bca245edd6e20c031880c1038e19b8c0","modified":1563764364402},{"_id":"themes/next/.git/objects/25/7110ad8bb4ce278ed6239f4701c4ad2a804a38","hash":"3ec89c884dc7616df79cc1ac166cd6deecaaf91e","modified":1586516443869},{"_id":"themes/next/.git/objects/25/c4ccc91abef8228fe721b146565a58409c718b","hash":"c444fe79c651c4c35047ad541f85bd2dc306b735","modified":1575026262190},{"_id":"themes/next/.git/objects/26/37c53ab3ea8104a3ab5b2b8921b55eba2f42a8","hash":"87d50cd9f4010df4e9fb86f544e589d2bef8a83d","modified":1568877235773},{"_id":"themes/next/.git/objects/2b/3f69c5140737d0e283b5a2c4179f59e4680ae5","hash":"ded5cd2065be0e888dacf222944551bd1b5bb363","modified":1564113948830},{"_id":"themes/next/.git/objects/29/a25b220ce2646dfb3578101d3daa12124d740c","hash":"a3324b96942fcc1c35f3337681d14686c737d612","modified":1586516443877},{"_id":"themes/next/.git/objects/27/5369bab73f1b44e386ae054d04bc9ce3a2dd03","hash":"807022ce5cbf26faf91ddccbad821ffcf62adf0c","modified":1563776837392},{"_id":"themes/next/.git/objects/26/ec9a3e341f8d9e76a454ade0eada5634b71ae0","hash":"8a2dea4c84ee7b69d33f7e9cb51cd6eef5f9b468","modified":1570870072331},{"_id":"themes/next/.git/objects/27/60bb8529880bb7179588418812d084991b2104","hash":"2fc41c4a12cee32e8bd7e79a05e9aff8cfe215f2","modified":1563764364444},{"_id":"themes/next/.git/objects/27/b4fddfd68843ac875ff246f625714f7ae481c6","hash":"7d28f05d0a50cb8b8a5e442bdaf66e034433461c","modified":1568979149805},{"_id":"themes/next/.git/objects/2b/ec5f7529eab4480ad19066d2bf4ff59186c382","hash":"1bfff9b032c8cb2fd3a64d06e2a4b5a49dc849e3","modified":1568770502671},{"_id":"themes/next/.git/objects/2d/34d302f740218f293419233422933fbeeb24a8","hash":"81d8efa4e012ba26359ebac071efaff9a1b9a6a5","modified":1575026262206},{"_id":"themes/next/.git/objects/2d/72fa055daf57e09421f77fe181f217eeebc12c","hash":"741b9d8a13d25f7ef65806c7ecbcc9b516cb7802","modified":1568697710065},{"_id":"themes/next/.git/objects/2d/bb794cb415a2038fa98ae60cb057090acc802f","hash":"ad9eb23775e5b6002e2fb576a80f6592cfcab09a","modified":1575024975420},{"_id":"themes/next/.git/objects/2d/7c46efb4a40c1979de04a0c1a074c328428980","hash":"de1423acbe944274fd5bdf88902a219ffd563eb3","modified":1564113948822},{"_id":"themes/next/.git/objects/2f/91b9109c2d845179d08d5b7cf3972c08d07cb7","hash":"a34aa68b075713b9ad5986a04878c395f8707bac","modified":1586516443892},{"_id":"themes/next/.git/objects/30/7f060cc0ecf2d14a59386568aa2b0d5aa5a1ad","hash":"902ae80c79f57db2e7ebc6b6d76d95d0d0e9c02b","modified":1563764368391},{"_id":"themes/next/.git/objects/33/2efd42e60ea2f2e1906230b4c9bb957afaf425","hash":"86481246914055e7e97f9275d205211d5810aecf","modified":1564113948825},{"_id":"themes/next/.git/objects/32/b5521f30e7a7173cd615b412d96190f85cbad4","hash":"3c9de5aab4de409a23c1d929720f85cc4d124bf5","modified":1568877235797},{"_id":"themes/next/.git/objects/36/228d8af238cdf3875e8e728953d18d67c375fe","hash":"2fb5f734bc69599c3c393a78d388e2014ee7e33c","modified":1568877235787},{"_id":"themes/next/.git/objects/36/654d5872435fe113c12d864c1ba7240683d4a4","hash":"3ca02bddf69a02d666b0269df13ee709b79ea0ce","modified":1568877235791},{"_id":"themes/next/.git/objects/3b/ea3d6e8097cc72e329d28ffb795e74816823e3","hash":"30a492d68af502f7dcf4dbcfa1c2ac4a53c16a85","modified":1563776837397},{"_id":"themes/next/.git/objects/36/bb47be4618724d365dfcb4dbd5b0adc2780040","hash":"fd1db3c868542169be563a9ee1765e501a112f36","modified":1564113948819},{"_id":"themes/next/.git/objects/31/15076c37b0b0ce25271ada1b3e10bb78cb5539","hash":"4cb6446d768cadcb7c09baa9be45e08b5a40e977","modified":1586516443864},{"_id":"themes/next/.git/objects/30/e85560c69c58c514b8db0a201a80f322ba9083","hash":"0dc8ffebfd800c2251c0c63020df2fde47c40584","modified":1568877235789},{"_id":"themes/next/.git/objects/31/e2c9bf385a4687604d7a7f47f007fb1d3537b9","hash":"2415d1d9ce9bb1b47237c84cad5f7543b30be9e0","modified":1568877235801},{"_id":"themes/next/.git/objects/31/a827017981a643a2cef4ee503e807676aae7cb","hash":"fdbdb7f23eefb54cb90e09bdd1d8270e13aed6ee","modified":1586516443935},{"_id":"themes/next/.git/objects/31/fa32e1e96f03c5a140385cc13293a0c54fcf7d","hash":"82341932dcecefd84964841a3120609cbd6ed529","modified":1568958704207},{"_id":"themes/next/.git/objects/31/f3fcc880b86b7bf33ee59abc98dbcffe92eca0","hash":"2354238f5bfc0f07d141a55423814e11cf59428c","modified":1568877235803},{"_id":"themes/next/.git/objects/2e/ec252d1649526fb651244eaf04af961432ee62","hash":"ab91f6bd32f4c8f65bb770d1a2d55fb3efcdccd5","modified":1563764368387},{"_id":"themes/next/.git/objects/35/af4b88a23d5b5cd53505410ced9968925d96aa","hash":"360f79bba3ea0a44f89b56785a9e53e9dc842700","modified":1563764368389},{"_id":"themes/next/.git/objects/3f/6377aa3f05941f3cd18cae55ab419bdeb0913f","hash":"7a9c3ac81b11e74ede16a3138fcd0b21ba42df70","modified":1586516443804},{"_id":"themes/next/.git/objects/3f/7d8a51268d92a47e5ed0bd25e6dbf5dcf5b307","hash":"762cd511fec9e36214833effa0b772f151a3270b","modified":1575026262185},{"_id":"themes/next/.git/objects/40/9620b2d4019d84188bf637b9182bf6281f5dd0","hash":"93881b99b5aa6284f129152b770f81e67439fb6c","modified":1570870072335},{"_id":"themes/next/.git/objects/40/a86c679a80d47da2e019c17006c46a4e19fed3","hash":"a85a52e79927ab8c7ac94f4db196de8e05cc4146","modified":1575024975577},{"_id":"themes/next/.git/objects/3c/408f8c563a00668c15b1d53b3290b9136bb615","hash":"54449f3eb70913f18873933e5463816a7eab280c","modified":1564113948816},{"_id":"themes/next/.git/objects/3c/b360b58dd35618f55795810e577bb604927f25","hash":"3dba29d6466de3c7f4b9ea3f3e52d5671238c368","modified":1586516443903},{"_id":"themes/next/.git/objects/3f/c187cd05cc61d8ea7a58c563a4b7c909a15cec","hash":"f96896bd7da51e1c1b4152202d18baefd565853d","modified":1564113948826},{"_id":"themes/next/.git/objects/40/f9584bf4f39d050ddaa9f26002d075ebedfd45","hash":"1f05903c8ab6797c2cc09155d4109fc6e7f24bc3","modified":1563416717987},{"_id":"themes/next/.git/objects/31/d5f0ffdcd0d3a016e9cd1342ef13a435a01a9b","hash":"66d216b8d0c8e050e185fe9edb42f38b28f8471f","modified":1563764368393},{"_id":"themes/next/.git/objects/41/3ba52e6bd00b5bcb85fc4cb0eb84c61f4a8f12","hash":"d2feabd20cb3ec8d4850c4c831b2510b84a5843f","modified":1575024975129},{"_id":"themes/next/.git/objects/41/de77cdff0e169a58120c603254b5d06f0ae1d2","hash":"767f7e3603986d620c445afb52d6d8265042f911","modified":1563764364856},{"_id":"themes/next/.git/objects/37/c7e1567a1bf6d0817588005bcfc071e06914b8","hash":"5671e14e997897c58e4c97083f8c309ae0534890","modified":1575024975428},{"_id":"themes/next/.git/objects/41/f0d1cfaedbcc7a12d3243550f732ca8409a36f","hash":"ecc153e7f52e679684cfd53b097e6c793e774ffc","modified":1563764368406},{"_id":"themes/next/.git/objects/42/4d9aa40c81ed4234246d3282debe2780768abf","hash":"817cb71d14176d5cdc35fb5d439305b7afe9dcf0","modified":1563764364414},{"_id":"themes/next/.git/objects/44/1ccba4ea697ee39fe58dacfca1e453eb9b1748","hash":"8267f57476d7dc8290f09d6eff62ad5b2f49229e","modified":1563764368399},{"_id":"themes/next/.git/objects/44/593a6c4456110b160e830fcada526ac3fbe149","hash":"2d37ff8c7bd48d225d5d96e6259a1e94b5fbbdde","modified":1575024975571},{"_id":"themes/next/.git/objects/45/e4db431dad5aa8ab2fec57e72b4cf2b32e7437","hash":"40a1ac2cf6d73a7160ea88486efb2d6aa96bfe10","modified":1563776837390},{"_id":"themes/next/.git/objects/41/4b14d0f615271dc19becc94b084f8cf31a46f9","hash":"4da6069139a420af65aaf80ecf84c5576cb66968","modified":1575024975579},{"_id":"themes/next/.git/objects/46/dccb317d34c65ec0e38602dd3f8759c993d7cd","hash":"3d592d6af59bf0120cc41ae1d38993868b6e58c0","modified":1575024975421},{"_id":"themes/next/.git/objects/34/70c90833de68e1b1d084eb60cbdf7281316511","hash":"8cb1b03e5eec19c74c9c7aa63bc5b35058a78b8d","modified":1575024975418},{"_id":"themes/next/.git/objects/46/52e41ddcd9a7b2ac891cf7cee6b10efaaac0bd","hash":"babc10380024c4fe51aa2100fc334504242bb442","modified":1568979149806},{"_id":"themes/next/.git/objects/48/bda0db0a95d10bb1cad3d8eb520b3402789380","hash":"d660a83d0ea34c2e4c7b58d8b36121880b1fc608","modified":1568881985889},{"_id":"themes/next/.git/objects/47/f3432cb07b113fd4b6033e69a94e023e6c960d","hash":"98a8d99bf86df12f4e69f8ce6b42755e5f97e57c","modified":1563764364431},{"_id":"themes/next/.git/objects/49/02e5033551d32e0a260942fd755a3c85c03256","hash":"ced6cd2aa88bf5680f940c931393eb06cc818476","modified":1564113948817},{"_id":"themes/next/.git/objects/48/218e31d6bf8e4a2d4897ed61f2e8fcb374e0f2","hash":"6f0073e044441215233678207cc0411700224d44","modified":1568877235801},{"_id":"themes/next/.git/objects/49/6787205225cf9b746d37e27c5b8c9747e63a13","hash":"b01f160c9192ac1c265e7dce6e5982b78de1e393","modified":1575024975409},{"_id":"themes/next/.git/objects/4b/67377f48acce92312f9c04b850aa4e5b5140a4","hash":"da9a9e3aef03d6f08a189d617279285ffdca8dcd","modified":1575024975409},{"_id":"themes/next/.git/objects/4b/9309704148d69822e001cb60d7da97432db603","hash":"eb28ee55d54f4f07fff7b8b1b6911bedf02fe8b6","modified":1575026262205},{"_id":"themes/next/.git/objects/50/923fd19f33fd7cbf0dab73ddd3307e5bf86e63","hash":"49e1965f341635be812d1c0e1485315461853fcf","modified":1586516443939},{"_id":"themes/next/.git/objects/4b/f2b124f4d22a672a95e15aa13b9653b1172552","hash":"2e9ecdfcaaae48e5b4f8098c80e6158c5d62c108","modified":1568713902280},{"_id":"themes/next/.git/objects/4c/ca7a1785c50aa117cdf872ac2aa780f69da200","hash":"f515e2e0c1a975660109fe2fec13a54f0035e4af","modified":1568713902274},{"_id":"themes/next/.git/objects/50/9a6e9bd1ae2064308c0fd37ba12612b26ea9ec","hash":"820aa58aa7dfc36f77197614ad5970e26e645648","modified":1568877235807},{"_id":"themes/next/.git/objects/4b/b0f077223710dad6016f6609bba17843e67d96","hash":"d62ad9959f4dfd943806cf03a87ef64dfb7543e7","modified":1568700786141},{"_id":"themes/next/.git/objects/51/2512a9edeb7a452c98296f8127f918a3e95c1e","hash":"f5a47a3ccf86e4e41ebb869ecbd1937a0934a30e","modified":1563764364862},{"_id":"themes/next/.git/objects/51/d133f2ddf1419c752fe75c28b1978c28b46800","hash":"b28df5b40ed7b6a89bbec5fe6bb6b4389db0b620","modified":1563776837389},{"_id":"themes/next/.git/objects/51/590d67ff093a14ba5aae2ec1e27a04813af16a","hash":"7954999d7d669c092c5e4eebe6ca92cde579d08f","modified":1568877235792},{"_id":"themes/next/.git/objects/51/c259bad9eea71e3660eecf05c61b3ecdbef6a0","hash":"f82d61ac024d60ee8193eeac66c65c4b40071624","modified":1563416717968},{"_id":"themes/next/.git/objects/52/7ff05fb0d0cb4a35c073e3aaf2cabb957753a6","hash":"e996c4904d70eaa9934d63909310d2aad2884806","modified":1568697710064},{"_id":"themes/next/.git/objects/43/8c98e22d58a0d1e1f281c860986788c193b60a","hash":"b1df33f4eafe18bbe5d52608bf2b0880faeb22a3","modified":1575024975618},{"_id":"themes/next/.git/objects/2d/25626f733f70beaf5e577b91c32862c58a94ab","hash":"4baa0c9cda7fef8b02ea23bbca5b945f02c72e24","modified":1563764364424},{"_id":"themes/next/.git/objects/51/f20fe14b5ad53587053887e0c51df3e95dc414","hash":"93333836c5075857310a9f0cbe091e95e900a3f6","modified":1563416717974},{"_id":"themes/next/.git/objects/52/83fad5a443a353252b21b95a4c5706bbb24a9e","hash":"d3f72aff7c33d1627abce8b14b61e48cff1a9aa5","modified":1563764364395},{"_id":"themes/next/.git/objects/52/b28c2da10d5484f3e2d69090709f67af0c36fb","hash":"30ee12840a45303663517a1fc499f7b115b78e90","modified":1586516443802},{"_id":"themes/next/.git/objects/52/9ca7d810bd93b12909b35b0fa6f3cb91c296b6","hash":"bac0b93fbe38b1c2b76c5eac2345c9f5fdd8fda5","modified":1586516443936},{"_id":"themes/next/.git/objects/53/15be8742b7377762e08b696a61042188245f2e","hash":"999e4e0e7a5f526da3d1659fe67d1aa661e54f09","modified":1568770502675},{"_id":"themes/next/.git/objects/52/cad0540865bb3d6f413d29ef37702efea770f0","hash":"8de4bd37f317ed2d5773ecff4ba1bcbf08a9bfb2","modified":1568979149799},{"_id":"themes/next/.git/objects/56/e8e73e5bef0c81a28cb188253732004b44cdd6","hash":"d04102da65b39007774f94a9f3fb6c985655ddc1","modified":1568713902276},{"_id":"themes/next/.git/objects/56/c165803ae47dfc5a3aaadbf5c74aa3482bc021","hash":"eb9e86fffcc41410eef679aef8d4245cbcdc6d9d","modified":1568958704216},{"_id":"themes/next/.git/objects/57/cbdc4bdbfd677840f1f315c2565049938c9577","hash":"c831cc65a23e37406486db52b82d51e8842eef05","modified":1563764364463},{"_id":"themes/next/.git/objects/55/035bf62c935c281ef7a4b1cc6955bfacda51ec","hash":"792e1955eb875570af278559ce0f11afa144d7fd","modified":1568877235793},{"_id":"themes/next/.git/objects/57/e7348c5a2342c58795feb5f5e50a1aa40f3cef","hash":"fa124044486d5ed246ff24115596e6a8cde3035b","modified":1563764364860},{"_id":"themes/next/.git/objects/55/b4fa653a808e1a3d26beb3214474063016ddd1","hash":"3d406dd49aa20743aa3919e2f3dc1840a986bff7","modified":1568877235798},{"_id":"themes/next/.git/objects/55/71e17a1709b909db0bc0f46329ba4735d3d6d9","hash":"ff40668788a6ce644b7dacd361c4c7a64b57a2f1","modified":1575024975619},{"_id":"themes/next/.git/objects/55/de03e35e3ebfd515b03c3a5ef48b85b73c4a77","hash":"ecc84d8a352edeb5c77e504f48080cabf25d3f34","modified":1563764368405},{"_id":"themes/next/.git/objects/58/5d062d0d85f20db688e9c8364c7eed6f8d69f4","hash":"79611b1c6aa2ae2fd516540c824e2164d2ac5df9","modified":1564113948817},{"_id":"themes/next/.git/objects/58/762aa715b0596978b7ff884120ef65fc14e6e4","hash":"bad6be2f6807b738315a28799809dc0bc0e34ff5","modified":1570870072327},{"_id":"themes/next/.git/objects/59/336032dc6fc4d910b356c54290dcd329933738","hash":"b6c0395ee408ed007989292129f23b3feb951561","modified":1563416717964},{"_id":"themes/next/.git/objects/59/af5c6c518f82eb987152b9dd1712f7f7ac2d15","hash":"09c58aa38c159d4e2169edea2bef6e0bc789cec2","modified":1564113948831},{"_id":"themes/next/.git/objects/59/cc27e61c6aac5020ef22b70c234e81b0d4b29e","hash":"67b5375e71aaa2c5f2d0e654f1f2fdde2132e0a2","modified":1575026262241},{"_id":"themes/next/.git/objects/59/c6210d74e9c05a9ab6dad8685c664f379a3956","hash":"91ba98b760d9f26d9bf3b54e327c9454a7c605d8","modified":1563416717986},{"_id":"themes/next/.git/objects/59/f465a752c117c6e7b027e3bd1e9e4049c4fb71","hash":"9c2067e4d5605979b2cb9558290ea708ea85474c","modified":1563793628470},{"_id":"themes/next/.git/objects/5a/6d3aa87796f402dea4c43ea7432af612ae5c88","hash":"00bf1c9db198c0bd1a4db2efefa6bd2add50cf28","modified":1568877235775},{"_id":"themes/next/.git/objects/5a/d3da6d908e0ea9f066fada6c6e394ac13f669f","hash":"a050d3608093fd73c7db643aa8f4b95699b8c84a","modified":1568707757352},{"_id":"themes/next/.git/objects/5b/bf23a0122c8632bff7aa0c083855bf9a45b328","hash":"b8dca8ffb80246029250e2b87dbde0d52b7e5b5a","modified":1575024975425},{"_id":"themes/next/.git/objects/4a/6bfbd4495f8222b3c41303ae8ae2fcb0069db0","hash":"858d7204aa88c9bdccca9c24ad915d40befc1bdb","modified":1575024975408},{"_id":"themes/next/.git/objects/5d/cf2e642cb95d8bfdb4e139046da979abe5e034","hash":"4b5e0376821b9fbee874e4f2fbcdafb3b70a13e3","modified":1564113948827},{"_id":"themes/next/.git/objects/5d/311fffceec3eb793c2fee89bc156c244ef6692","hash":"c870837bada87d5217c950bd7a0a5cf344d8d8fa","modified":1575026262200},{"_id":"themes/next/.git/objects/5f/0e8de535bc78570ddfb7582cf426822dd56004","hash":"078694db893af2240a65d21b9f99452e68d81251","modified":1568958704208},{"_id":"themes/next/.git/objects/60/645c2db9bcb67c183f4a3e471da312eb631ad4","hash":"a0df4019ef1cb40f54f5ae54d08766e6cac7696c","modified":1563764368411},{"_id":"themes/next/.git/objects/5f/857292ae6d8140ce39858ae0f647266f33c73a","hash":"4f2753a5fe3fe6d74985910b48c07ad3478d831b","modified":1568700998521},{"_id":"themes/next/.git/objects/60/8bc78dcec37cd0b5c9c2328c4e741d1dc416ca","hash":"1edf186f3b2d28ce0e7323e764f2040c8ecbe08e","modified":1568707757357},{"_id":"themes/next/.git/objects/61/70c7c3ccf34d6c0270a944c1e5535a81851e34","hash":"29759b3e66254568837c8aa16afd03ffddedf599","modified":1568700998273},{"_id":"themes/next/.git/objects/60/df313fd016e5b693dfecad30e6b142967ef625","hash":"8cdf410c4da9ee816e1fa8e80f01164a5e462bea","modified":1575026262186},{"_id":"themes/next/.git/objects/63/41e5fe6e7bc5d0defcb96619cd2daaef41ee2e","hash":"5fd3d8a4e4c936edaf76cc9ae6cd1eee8c11d7d8","modified":1575024975399},{"_id":"themes/next/.git/objects/65/89169394f2dd8a2d02f17b7f43fcb8e0fc3984","hash":"65ff85e331a1177c5a0792db73502e3f0d650f5a","modified":1568877235780},{"_id":"themes/next/.git/objects/66/917a9b08f24f989e152d94e7d4d28181a96722","hash":"8e01546cd21bc274ef6ae8281a1cfc3d0adadaa4","modified":1568958704210},{"_id":"themes/next/.git/objects/64/e82856f227fd222cb820db92f24f8b38c6bc05","hash":"cad6f1cfa86e211b1074a233e7f5d77f61c5771e","modified":1563764364442},{"_id":"themes/next/.git/objects/67/052798c570823a456425a4eb8e66bc57194cba","hash":"5306664229962c512dd6d29af3d2a449e6db5b1e","modified":1563764364863},{"_id":"themes/next/.git/objects/67/9c97d0ca159a9b898b452a904eea517222fc75","hash":"d13d1e69d1d8119f85ce33d92f9d7ffe7f8cac69","modified":1563764364474},{"_id":"themes/next/.git/objects/67/bf3522f4206dbd13a7c6b4840bdd2a073cbae0","hash":"acc1f4d439bc233227adc11a38389be0096513e5","modified":1575024956006},{"_id":"themes/next/.git/objects/67/d367ba011ee2eae7e7b27cf1a0b76376bb327e","hash":"283e147fe7b66315b1126784356d5b05000f754d","modified":1563764368390},{"_id":"themes/next/.git/objects/68/19aee5bfca1c6221d73a3d08476dd28de79122","hash":"4d7828acaf9a178575e0bc45706df8e2ef04b64a","modified":1575026262240},{"_id":"themes/next/.git/objects/6a/580f645d9906b301ca269a1623df68b11b1cf4","hash":"a2cf58c500a238cbfc66a3d92b0804d176c0c2b2","modified":1575026262188},{"_id":"themes/next/.git/objects/6a/9293cfed7a1d68985fc1fdd3b2d117832ede9b","hash":"ef383f47bed86cd07c4758c1b43954102f81544a","modified":1564113948873},{"_id":"themes/next/.git/objects/6c/0668df46e89b4f7a14ee17d6f68a3d3bf3ea9a","hash":"5495f96f28b7deca97d726cea24301855dd3d885","modified":1564113948871},{"_id":"themes/next/.git/objects/6c/8f35c0b37a0c51ecb1e1d3ac8450ffd2ab3812","hash":"bc02e41bf2c7dc843161e0a5361a891229ad0d32","modified":1563764368407},{"_id":"themes/next/.git/objects/6c/fdb11711d5dbbe1b814d4462c50f761058462e","hash":"09132d1e44b9bb36f4faa4016052ba05f0e1ad65","modified":1586516443937},{"_id":"themes/next/.git/objects/6c/a3c7cf554526c6ab9d79f952504ff64f5e18e4","hash":"d0f55bc38d250fe2a3599dcb02b963d76790792f","modified":1586516443873},{"_id":"themes/next/.git/objects/6e/48129d2e5781d7aeef3d70415165fe4a5a1a72","hash":"70a8b1a20a6386132736af54b18dfe8b14487100","modified":1575024975406},{"_id":"themes/next/.git/objects/6e/6c1e663f288a739ebb1220f09d1f9e06a49bc5","hash":"f644443568541763ca9adbd6d1997321bfa96f44","modified":1568958704211},{"_id":"themes/next/.git/objects/6f/7c1fb738a0321b11130542b0fa61401a300eac","hash":"1919cd241055e1e6efa6e4eb73666affbe267f39","modified":1568699013705},{"_id":"themes/next/.git/objects/6f/65ec56340d3e02dff3163df42b68d6d5d6f02d","hash":"98913b468160ec7445c0c5ab39a72d30d7987d5e","modified":1575026262199},{"_id":"themes/next/.git/objects/6f/5ff546a39e515effc1f865edee9ed6d878ef7b","hash":"074201607f957da734decf893e8325c00b85a6df","modified":1568700784097},{"_id":"themes/next/.git/objects/6e/9f3dfe31ab5f04ab14ee3b877e6462379fc6f8","hash":"e30f19cd72a49decdce83482ecf134d43034513d","modified":1568958704214},{"_id":"themes/next/.git/objects/71/e7f637cc6785210d5b0c7ebf494dc8f8fe9373","hash":"cba9704471504d5f5759f277373fad885d9319d3","modified":1564113948820},{"_id":"themes/next/.git/objects/6f/dfbf1981cb55e0e7d200cd53da7ae1d5ee0561","hash":"e6b70082d92860a93cd536d46210ba7c20468f14","modified":1575026262187},{"_id":"themes/next/.git/objects/72/3fb9162c8b3c9a3f1ae94f83e6a54f75efe367","hash":"a960aca39f3a9170470547a3aec11ac8a217dd45","modified":1568958704212},{"_id":"themes/next/.git/objects/73/025fc78b2704125f2adb9d1f1054e4c805ab29","hash":"e8a76f5fab67ff69054570baf7a4d737da7d174d","modified":1564113948831},{"_id":"themes/next/.git/objects/70/d58bfb2bea61263b843012769b54419dfd9359","hash":"1aef2832d0878f96b1b594724d5cd65b54f09f9f","modified":1575024975391},{"_id":"themes/next/.git/objects/73/e1fc706306e763376cadc475637bfdd7cc23e3","hash":"42c70d5cb1d8811089c42d12ec88a91793c8dd42","modified":1568770502676},{"_id":"themes/next/.git/objects/73/99e27bd83e47eb46a60baaeb47583b262feaac","hash":"a5fe3ed9b8c2d9be0aed85216ace01e841cf6d3f","modified":1575024975623},{"_id":"themes/next/.git/objects/75/93c0ab6cf98e3823860b001ea8050e65b6e0ce","hash":"75dfde0f235d41b942bf624e06aaaea4eccb4679","modified":1586516443857},{"_id":"themes/next/.git/objects/75/b312bebde4146db8143befecf40ff57789155d","hash":"818979961615958f0e3d0f903d1407b29a5f76e0","modified":1568877235791},{"_id":"themes/next/.git/objects/77/45c6730454d459e52db3db563f5872f8396288","hash":"0bc54bbe3621ca82b769185bc2b6cb440e86bf10","modified":1568699013692},{"_id":"themes/next/.git/objects/75/e607be33c891bd3852bf758b63b945b7608270","hash":"fd3da910aeba0862c2ca19097eb1dd2c84d8f3c2","modified":1568697710067},{"_id":"themes/next/.git/objects/77/f762e5c46dbc2ef671d451bd6f315e4f2e6f15","hash":"9ad66c482c7b80750f1291f3175c3db4c8e56b98","modified":1563764364449},{"_id":"themes/next/.git/objects/76/66ee8dee91aa1193a0e4dc6d2246057482e752","hash":"65b8bc4f67a473c1ff33f20b9afd7eba2470298d","modified":1564113948869},{"_id":"themes/next/.git/objects/78/453161c82dae101b6abf8dfe65530a7ca1f2ad","hash":"4fc0cdc2d697f6b10420a168e320cf538413dd72","modified":1575024975585},{"_id":"themes/next/.git/objects/78/65c7cd3df9eb1655a4075cbad8ca4b809bb2cd","hash":"32f091c3ba75022e63f8f0056efd8cd7634124c7","modified":1568979149800},{"_id":"themes/next/.git/objects/78/ab4ae3e9f688858eb40f5886e15455f4b38a59","hash":"dabc1c52b688c01833f5f09807bc4e258dbcb67d","modified":1563764364448},{"_id":"themes/next/.git/objects/7a/ba6c4499b82e20ca6dc4edbd559a7efdc7a4d0","hash":"d4f3970752e15163ed4a061b83741380ff6dd283","modified":1563776837393},{"_id":"themes/next/.git/objects/79/8f94e2969f2d064cbb38ae4b93bf67ed3399ae","hash":"ad0b95da1110b1e3037dd9a1539a391558c6c2d9","modified":1564113948877},{"_id":"themes/next/.git/objects/7c/2ecb1c05ada60c9aa0014add9af19fbacd11a0","hash":"e8e8119aaa93718bb7b4740531bf895384acb459","modified":1564113948872},{"_id":"themes/next/.git/objects/7c/6f80511016095f431f1ee16852aa3af7378035","hash":"38b4fc8bb1eed0c01a4afeb97bd07e95548cffbc","modified":1563764368378},{"_id":"themes/next/.git/objects/7b/a0818142e6c455744dc29b49bd297309920b69","hash":"a90dc0037bc0837e35c25aa997ca81893758a866","modified":1575024975383},{"_id":"themes/next/.git/objects/7b/01ac4f2ec7a5a7c6f752300efca2d131a1ceb8","hash":"7f9c6807315ca029269e5f88f42f644e3d15be35","modified":1568707757357},{"_id":"themes/next/.git/objects/7d/135c57a231a1230275cda05f5f5770efd8679f","hash":"f63db2f63dfdac489f45d3da368f1a6fcfc6106f","modified":1564113948871},{"_id":"themes/next/.git/objects/7d/62e76fc5506cf04d40b5bf6a9e2d385bf44933","hash":"4c3cf35d5f42ffa3d48c38ca09fb111707a7accd","modified":1568707757355},{"_id":"themes/next/.git/objects/7d/a80c80fcafa1d3b32267053e215b0e39b76351","hash":"61b48ab71348d3df03713f949568ac769d435491","modified":1563764368409},{"_id":"themes/next/.git/objects/7d/d834bfbd046933da68b80c016627d8012a054b","hash":"192d7e3c9250ca2cb892f290c793ed27c9520728","modified":1568877235799},{"_id":"themes/next/.git/objects/7e/1fc76822fe8ff0b90f24859b4405f26efdc450","hash":"ac420b7d0ff8541f957d295bc71d3740dfc8d3ee","modified":1564113948873},{"_id":"themes/next/.git/objects/7f/07c1b0a5a93b934b9efa3dbe79ad1159ae5a3b","hash":"070084d9cd751ef602a88f57c899c600044412f0","modified":1568707757354},{"_id":"themes/next/.git/objects/7e/9e9eb61a27853a2d01426500f4949ec78406a9","hash":"e507184d6a05c51b29934b76e89ae6406da8e885","modified":1563764368386},{"_id":"themes/next/.git/objects/80/01d052406d23dbf72ca4eb5ecfd6b4107be0e0","hash":"9f21f67b33b7c1416e8f337aa4fefa6b5c705d99","modified":1563764364476},{"_id":"themes/next/.git/objects/7f/cd0f7c4d6cf4c494e9fd92b7c329623e78b608","hash":"4e57107ddefd81e4c1720b02f62fcb0bf0a9ee6d","modified":1568877235780},{"_id":"themes/next/.git/objects/83/ac74f84d572ae69bff4ef76e96a42cf341eff6","hash":"83f074c74bcce2f864e68cd96cac39922312e0f1","modified":1568979149803},{"_id":"themes/next/.git/objects/86/5407f23242cd5aa111551c17d98c9e88de21d8","hash":"7177f982609194ff81155d36c5852d7b202edeca","modified":1563776837394},{"_id":"themes/next/.git/objects/85/ed5532f2aa0004b4eeffe7508cc2769f814551","hash":"a167ac8c494b266000c51104059b6eb71e480fbc","modified":1563764364401},{"_id":"themes/next/.git/objects/86/f1d0a3f18d3d630c0e3f1a2c3293b9b16a44ff","hash":"65cf508280fa145cbd86bf53aecc7462afc5bbcd","modified":1568958704204},{"_id":"themes/next/.git/objects/82/1753dd06beb7c506f9fb090779c2f9e257850c","hash":"27ad89e5ee2da2427e89b7fec2932411cfe5529f","modified":1563764364399},{"_id":"themes/next/.git/objects/87/df5ac15f36febd87ffc028e8161d79eaad1541","hash":"d53dfcfded4ae4ce8d1683d9aba420a6833312fe","modified":1575024975404},{"_id":"themes/next/.git/objects/88/cd69ff24fa6110b8a9e88358b4f024dcec5fb1","hash":"76d938cc6f7e644573bd5d0924b3ee57d7842fcc","modified":1568958704206},{"_id":"themes/next/.git/objects/89/e9c00a9a22fd7bfe48c492fbb8b41350b9f6bc","hash":"4981cd336c79d670d91e25454b876efb7804a282","modified":1568713902275},{"_id":"themes/next/.git/objects/88/d467118f872c1b01525ef8ffbab19e3e2b0a9b","hash":"f9f3e46b761b529ba40a5f190fb58a8e32f7b952","modified":1568877235807},{"_id":"themes/next/.git/objects/6d/880f80f65c35c28c58c8c49e98f8a404221385","hash":"5f9fac2925acfd43373576f320c491932bde56a5","modified":1575025083169},{"_id":"themes/next/.git/objects/8b/3aa245125301334308a16ae6c95bbdecf36461","hash":"f1367c5d35412d06cbdd6916d248f5309d9c2bcd","modified":1563764364871},{"_id":"themes/next/.git/objects/8c/ad95ae7e73dd3e1bbd381e7ccfefb64ff1b8bd","hash":"27f86386f70ec6aaacb47b3429ed3bc312da3fcf","modified":1575026262188},{"_id":"themes/next/.git/objects/8c/af91743ccf87ae94a435c588ab4ba510d26e17","hash":"bd8cb78d598003d4663a72afeae1130dcd875870","modified":1575024975386},{"_id":"themes/next/.git/objects/8c/b44ea303a644f512387da63b853b33b374862a","hash":"f189ba2cd5c6024c05937f72c390d327b3f800a4","modified":1568958704201},{"_id":"themes/next/.git/objects/8c/e3d4cb24f78cf4040313403dd7b333e0a080fc","hash":"1ce798ed76869864246177bf30b1e00941f2ed6f","modified":1568958704199},{"_id":"themes/next/.git/objects/8d/400d5bec760e13fd2e4f673415d0c894de3cfc","hash":"05690727bf8ebfdd8a7d06550a7939215a7188c4","modified":1563416717970},{"_id":"themes/next/.git/objects/8b/c7e9d261fd16e1fe174a5e8520d7bb70ba2541","hash":"8c7a35fa07b3695f7ddf9da1a9f6060c0db6559b","modified":1586516443878},{"_id":"themes/next/.git/objects/8d/c20e89de07fa30bca1f8f95e73c29eb7e2d285","hash":"b8b3ff518bb30c015dca7f33fcecf3537383661f","modified":1563764364932},{"_id":"themes/next/.git/objects/91/a1e344192fa311d76f7f0cc94d013cb567a3fe","hash":"361c7d1e325e9018e61b11adffc2172c491750bc","modified":1563764368395},{"_id":"themes/next/.git/objects/92/7b89c5863dcf1980b1b0789f165f3866503745","hash":"3b6c9e85acd8c280d6a1ed97343a5d955e3b35e9","modified":1568877235776},{"_id":"themes/next/.git/objects/91/e0e0cb7d86b82a4291e849c063334cbf047269","hash":"0b20eb8442a7dd982ae93a4766e7f9db2e1efd18","modified":1563764364846},{"_id":"themes/next/.git/objects/92/df92af21911c2ca69e44d3334f55051c089d82","hash":"d0d4d49bc4985bbf76943911ba958c886ab247b4","modified":1563764368404},{"_id":"themes/next/.git/objects/90/06eaf4009a7894ea49ff05bb71a2959dbad735","hash":"838ca465205ef1f78c6f4434b065c25cdc258c64","modified":1575024975397},{"_id":"themes/next/.git/objects/90/786916eafe2dc6155641f271408494e452c85f","hash":"5faf2a56cee5d0afe07ef01ad76a0bd8bf08bac5","modified":1563764368394},{"_id":"themes/next/.git/objects/93/1719cb13c3a321d2658aac90bdc8de994b431a","hash":"916ddc12ea637a03a793cf984b2d1a62f7fdbc48","modified":1563764364389},{"_id":"themes/next/.git/objects/93/d8321e2af88bc6c5fdc27f4de4c18f32f7ea7b","hash":"558b7e80273001a658a6edf1f64d794c08e8d7c1","modified":1563764364851},{"_id":"themes/next/.git/objects/90/c78b508d54d2b399bfab30361709a9015d1e73","hash":"e39350c5e6c9364893f768d79b42e16510b6688f","modified":1568877235786},{"_id":"themes/next/.git/objects/93/eec05fd6b7cafe9941dfb25ec4977cdc49722b","hash":"e23dd85e094ad0370ea653b8f7c5cf87d1674b40","modified":1575024975410},{"_id":"themes/next/.git/objects/94/0da615283024ed30c2944cf6f64482e87f45cd","hash":"0013f48d6a20c65d1e2736baf539df078ba773a9","modified":1575026262236},{"_id":"themes/next/.git/objects/96/136f47c7625c841cc07425ed6cf7d09f9d580c","hash":"6544689f0f7d5eb1b8fff4ac8abdb199cf60089f","modified":1575024975393},{"_id":"themes/next/.git/objects/95/88d94f8dfc572292993117091b2c70bba4ac48","hash":"49bcc360ca2bffa1f514fa0c870542df1b714ec0","modified":1575024975398},{"_id":"themes/next/.git/objects/9e/a6f8849c14e144d4728953b90248dbe626f6fb","hash":"877212fab3f3366ebbef5ac0e7a981e1a46a38e7","modified":1575026261742},{"_id":"themes/next/.git/objects/9e/05fd889dd464cd5eb69a71c34a819fb40987ce","hash":"09ded9ce529f7240922e4e15f6a3037063394722","modified":1575024975426},{"_id":"themes/next/.git/objects/9e/b7e69f354d2125c258847b61f8bc847dc00c0b","hash":"e0c8880207871cced5c2668cce82a198cbcfefad","modified":1563416717983},{"_id":"themes/next/.git/objects/9b/f28db8c3c6621106ee15d26bef24df36345470","hash":"0f2d37c8709a98e9f9a88d990dbd829a7b45411b","modified":1575026262242},{"_id":"themes/next/.git/objects/a4/1f9ccf77f646c81a14d73bd73dda5ef546e687","hash":"5972e3214a3631ef2dee36e72f16ca18c21cee2f","modified":1563416717984},{"_id":"themes/next/.git/objects/9d/a9a3c7b880afab5153ad0519b10ccf3b5cdbaa","hash":"3622e023e1f0ceb90fbd5d30d5edb70367447e9f","modified":1568877235778},{"_id":"themes/next/.git/objects/a4/660de9b55502aec9bd6fc484a7a33244a5e409","hash":"8a7f5745757517f3da585143c3466d547d9774ab","modified":1563764364931},{"_id":"themes/next/.git/objects/a4/7a4f3d18a871c74043913829567ca2cc4d806a","hash":"2fc27299ac779ae88259e11b833fec8807c12197","modified":1563764364413},{"_id":"themes/next/.git/objects/a4/b95027d6e69be0f87e0c44e4dc5d71afc9359f","hash":"64ea7bb70f16f8517339b92d0827341ae0e8891d","modified":1563416717969},{"_id":"themes/next/.git/objects/9f/2d56af713bf873d59f11d525b1f5676c502a60","hash":"8fdfbd5bb941de5247fa6c4128f0cae28efe4318","modified":1564113948819},{"_id":"themes/next/.git/objects/9f/b98b42140cfce34d8585e0a8911199acb74cb3","hash":"3cfda529e4d189d7647b70f89abeeabf26e1d021","modified":1568697710063},{"_id":"themes/next/.git/objects/9f/fe472576a140454cdd7ef1b03b7489b881559a","hash":"902785a3882136295975a4e91ea7b60781c9a0f4","modified":1575024975626},{"_id":"themes/next/.git/objects/a3/4343be15975b1684bcd9536718a6096d29b6e9","hash":"8812a70ad761dbb8f6e51751cc29e3297fe61025","modified":1563764364453},{"_id":"themes/next/.git/objects/a2/8349f7a8564b9e1e8279c06a4b9111008b4719","hash":"487d2dc2f077a554d969c0ace028ee37735305a8","modified":1563764364472},{"_id":"themes/next/.git/objects/a7/9aa446ed8d2b9a44d82e28bbae5320a2eb7b36","hash":"26069102d8064d77cd1f25d11fd68f668f954da6","modified":1568877235775},{"_id":"themes/next/.git/objects/a7/a9caddae015e1baa88a0e267f969b4ed83bca5","hash":"11a22048a59381836bbe7c3bc4d2493a3266f35e","modified":1568877235800},{"_id":"themes/next/.git/objects/a9/cdc6f133e8852124782521edeefb286b9e569b","hash":"789c1ced724e9acbf0b8cf9991f72222df2b5766","modified":1568877235777},{"_id":"themes/next/.git/objects/a8/beb0a0b755adbe35a00a3440caaa99622216b8","hash":"680912da893e8daac1a7b408dbad178daf8c0426","modified":1586516443919},{"_id":"themes/next/.git/objects/aa/65360aadd8e7992a030043a3a91c37a872f9b1","hash":"a9925943ef880fc296e4c27d99f1588dcb874ab4","modified":1575026262197},{"_id":"themes/next/.git/objects/ab/99c42d64f3a8cb8e6c521e27dc68beafd5c3f6","hash":"0d6e952766a6c73408d394bdad920a9cd6b6409e","modified":1575026262202},{"_id":"themes/next/.git/objects/aa/92411e8507ac989c862ea52f4116606c38b4cf","hash":"1c9dd9d27fe3a1fa496c49ed2ae4afed31e9abd1","modified":1563764364397},{"_id":"themes/next/.git/objects/ac/2b09d1ef240e415f95b5fc5e13862dbe72848f","hash":"587e18d12868fd11a4fed3c2972c89f92cfbc60c","modified":1563764364418},{"_id":"themes/next/.git/objects/ac/2e0ddca7c998b8d4bfd0d1794bf9b412a497b3","hash":"9d46242b5b4d3515153b3c95ca9f0d87d931548a","modified":1563764364854},{"_id":"themes/next/.git/objects/ac/79293a5284f3bbafd3fee41a077cbf83228564","hash":"41f86c74a4eb0da1add37cd48172bd72d0542f00","modified":1568881985887},{"_id":"themes/next/.git/objects/ac/f126a0783fdedca425514186ceba5ba0ccfb87","hash":"4b463231cfc116bc4dd4410a1e46ac48e8fdbfaf","modified":1563764368392},{"_id":"themes/next/.git/objects/ad/187498f30d4fbccccb16e8fe7c9aca752fdf05","hash":"72061bd89fb13cf4849cc3998b247d2de4cf8be7","modified":1568958704217},{"_id":"themes/next/.git/objects/af/2cabaed44c899dea29c9f6ca2cbf7a0300b373","hash":"04fc105682de44a96f2172df1a9e55284061bab4","modified":1575024975422},{"_id":"themes/next/.git/objects/ae/c13412f4c444d345dc9d9c2217ea20a0a94ea8","hash":"6b25cff4dd9ab95ac28690af15b5a35a88de273c","modified":1575024975621},{"_id":"themes/next/.git/objects/af/d37198704664afcbc3980325d56c00024229fa","hash":"5162829d4d67a0e62998eada36d1ed065392286e","modified":1563764364401},{"_id":"themes/next/.git/objects/b1/f578a6a672fed82d50a8536714191135ababe5","hash":"8d2869d3b2ca99b3322345bf89237983a6e03157","modified":1568877235773},{"_id":"themes/next/.git/objects/ae/62180db56709f3c6171613e34b99c669fd5693","hash":"218fb2968ed9598ac9ef8634014060cf94a5abf7","modified":1568701020351},{"_id":"themes/next/.git/objects/b2/4b0e70106a71874632ab023331c44e0847111c","hash":"2319373e3fcdf56d580e887f6c3b4bb5dfc2cc59","modified":1575026262193},{"_id":"themes/next/.git/objects/b4/6b19ad097d252f171a9193d84c528c1bb6582e","hash":"bd9c6da2eca649392c81e8d7f78b2f87720877d2","modified":1568770502676},{"_id":"themes/next/.git/objects/b1/ad55d03d1aec5c6ac4094e2a89d056467f99e6","hash":"2d5c0af24ee711504204e926520ca473de11ece0","modified":1586516443863},{"_id":"themes/next/.git/objects/b3/408f0064d95adb10ecaa61b1b48e9dd7af50a3","hash":"7adf4d0b0b0bdeca1aa0bc138e029a4409c4deeb","modified":1568707757350},{"_id":"themes/next/.git/objects/b5/33ea6c433eb9f7e57a42d0eb0bc880fcdb298b","hash":"d619aab24323a3019b5c357f32b2e6d92c9cb90e","modified":1563416717972},{"_id":"themes/next/.git/objects/b0/b62bf57cfda053c939542918ec7f9b72a9443c","hash":"96900e35384368fb0211a56a211e514aff323461","modified":1568877235799},{"_id":"themes/next/.git/objects/b6/bafbd8b8c950c87fde75222d060ffa703b39a3","hash":"021bddac1a470eb6db29ff5f84877d37bcde8fc0","modified":1568877235805},{"_id":"themes/next/.git/objects/b5/5431d27085bfa63cf15fd7a742f44db98ee7b1","hash":"2920ce651887283c5ce9fb0de9a6dfb289c083ef","modified":1568958704220},{"_id":"themes/next/.git/objects/b9/2bc6020a588d3535412e069d96737d2c39cd28","hash":"78c8ca3566d3741fe183d5ccda124f640e4ce895","modified":1563764364466},{"_id":"themes/next/.git/objects/b8/fc504bb03ffa88a796dd789f0ed2dae334f74c","hash":"a9f92a46e49840c408a89b4b469c2169f20ed1d6","modified":1568881985895},{"_id":"themes/next/.git/objects/b7/c5132b9afdffe8bc6ac37fc37e34bdf30aa703","hash":"86021035c147df828036ee17fee80271311deae5","modified":1586516443917},{"_id":"themes/next/.git/objects/b9/7f16bd201ca1fc7ea9f5a453ce9e734586c6ed","hash":"7ce6238a479e392476210b0c6767a180393d68b5","modified":1563764364854},{"_id":"themes/next/.git/objects/ba/2f28c9e01ab89e8d52140289e5917d027d4146","hash":"b7bfa1772ae9d2703a80a2e9809144166228a502","modified":1564113948822},{"_id":"themes/next/.git/objects/bc/05293612c7624f97e287d42164c115fdbd38bd","hash":"af52229161c671252d822a1e08111445e3039664","modified":1563764364392},{"_id":"themes/next/.git/objects/bd/210db3d2f332868585440622cf09f17c1d3263","hash":"422403f5d6681808648ebb719c9d01a55c83dd05","modified":1575024956003},{"_id":"themes/next/.git/objects/be/d97508ea043101aee9c2045036c2cbdea56fd1","hash":"fb34122e199312dde2ad0a623d33702012bb87d4","modified":1563764368388},{"_id":"themes/next/.git/objects/bd/4e7c64b362ad53c9a718ea824f95a137395f79","hash":"720bc1c1d14b043d7f0cc39f690cfa33ea59ecce","modified":1563764364396},{"_id":"themes/next/.git/objects/c1/c3fc77de5dc4a0e9495c6e6018b633ed0f7c29","hash":"dc80c0a8fa6cdf9217a81f2c396cd5a1e59342ac","modified":1563764364398},{"_id":"themes/next/.git/objects/c1/e228bdeae6f958ea1a5ce6c3e70d59fa3ea07f","hash":"c50cc80a7b82e7c0b79723c987107d8e984949ec","modified":1575024975394},{"_id":"themes/next/.git/objects/c0/53be712b8194c44888a1f3c68fcd7ada377a0f","hash":"c04eb9c89a16a95829aca4f5ddd5c3c77f4bb547","modified":1568958704205},{"_id":"themes/next/.git/objects/c3/7cf2294dc274bd4e34edaf39765efd0b1554c4","hash":"6c4b9f634e513df5168b10f3ff1e890f58e5f46f","modified":1568877235790},{"_id":"themes/next/.git/objects/c2/897420ffc7ba7c95b6985881f8df4d8970d8d3","hash":"61b95bdb0a4c0d86b26d539bcfe115143d7068ef","modified":1563764364861},{"_id":"themes/next/.git/objects/c4/895757764c03d61ba62f3e3a57c0ae42257844","hash":"3a98b1ac52ce48163bfd8e6cbadbda99cf4ed0e4","modified":1563416717958},{"_id":"themes/next/.git/objects/c4/4f3afb7f1e122ec33a40839e0b913c0dd43cd0","hash":"8cd72a1a77528cd7a63b5cfcda7cee303d093b5d","modified":1563764364454},{"_id":"themes/next/.git/objects/c5/9d85c49707c4791cf939bff5e7f3c6fcbf04dd","hash":"414c31597409991451ffd64c4138f35f4646014c","modified":1568877235784},{"_id":"themes/next/.git/objects/c4/e2aeae3d8943348786f1dd039603bbac831628","hash":"14f17936c2c1e07c2ef0ed4b79448867b8b897d6","modified":1563764368410},{"_id":"themes/next/.git/objects/cb/340b74b0d98618babe8f0268334c9420ea00c6","hash":"26208a7f1ac5ba76dd3c49705996e0a5c856bcb9","modified":1568958704219},{"_id":"themes/next/.git/objects/c5/6e974435b61b6496a62c77e2799aadb08140dd","hash":"fde790b9bfb0c38c9b895858bb40a2a8382484f0","modified":1568877235794},{"_id":"themes/next/.git/objects/c5/a2ce4d41d991585ab4cd9bebc545e79e2dbce2","hash":"2b8f0e006b83cbc4f700b98d3a9b8355c8898780","modified":1586516443801},{"_id":"themes/next/.git/objects/cb/3d2efc77bc3f8038885978edbb4e56e077e80e","hash":"9ebf36fd1fb2b4d6484aa710c6b7a801c14d4021","modified":1568707757349},{"_id":"themes/next/.git/objects/cb/cbeaeb37fb6be73a23318ca03c0741fcb9536f","hash":"78395f491ee4c4bf400f86052001d860c98f438d","modified":1575026262192},{"_id":"themes/next/.git/objects/ca/83cc85ea5d9167194d8632d3e7bf9a53678dff","hash":"dd3f9b5b499575d68f441dd0fc6efee1278914f2","modified":1563764368409},{"_id":"themes/next/.git/objects/ca/b692abd173401b7e271ade4f7d697cf2aa71a4","hash":"9675683d021802360f3d3269591a4705853433f7","modified":1563764364439},{"_id":"themes/next/.git/objects/ce/5132b9badd2fa412d684d0cf89d341768b1a77","hash":"3fee09f95cac716b33b45933472c8432764c083f","modified":1563793628468},{"_id":"themes/next/.git/objects/ce/a32c78ba302a9fb1306fb37defa6b16453ce38","hash":"457789a3f8a622b3e1447974c133cea18f5a0563","modified":1570870072325},{"_id":"themes/next/.git/objects/c9/86f980c1b83145010735302f0882fdb3cce203","hash":"fb97f18ab14694b1c49b6540a1eb877c913982c2","modified":1568979149802},{"_id":"themes/next/.git/objects/ce/beddba9bbfcb2277b1151d779d7987b80a98da","hash":"e757328f9f09b8ea96be22e6110fa59dde676c64","modified":1568958704223},{"_id":"themes/next/.git/objects/cf/5f986d89872bf957e2d578818db3366e56a7eb","hash":"8376c1a57e52889a4a236517adc2a8c6df4226d2","modified":1575024975128},{"_id":"themes/next/.git/objects/d0/54f2582877dc3e6c98406ce82fb7a3d38b6cd7","hash":"45f7ab6367aa1b96033f526b3bc77cf02ca88540","modified":1563764364410},{"_id":"themes/next/.git/objects/cf/d1d0c655670ab8a24c8b217416c85750ecd028","hash":"d6338518ba424d041eb0fcd5b0cf0d4d21652541","modified":1563416717961},{"_id":"themes/next/.git/objects/d0/c52baa06b84cee56235b4aae58a906415c3588","hash":"7c8049fc9d8ed42430d83f2cfd7178c29efcf7cf","modified":1563764364851},{"_id":"themes/next/.git/objects/ca/947b63b967eb163936ae74eaef763080251f3c","hash":"d92d4628e0a085858554420d5fad61c9450066f5","modified":1570870072330},{"_id":"themes/next/.git/objects/d0/e52164b8ae0f66014f7f1465284ea04903a97d","hash":"3f646938339b732cefd036091829835e2c904321","modified":1563764364393},{"_id":"themes/next/.git/objects/d1/38463eb1a5d10f6fe07a759d55e7ed97176fcd","hash":"7af496441aa464f6b00355843ad0a9e97eacf2a8","modified":1563764364459},{"_id":"themes/next/.git/objects/d1/ee0605a3f7c2c5eb3c7a31fcc74d7778d53f0a","hash":"78aa4654f0978db9aeb75db207280fa962cceebe","modified":1563764364870},{"_id":"themes/next/.git/objects/d2/9e5a518bef564e077f6e7899338dee51bb0ead","hash":"951accc6daef7a1cf4917e9198d0243cf12614db","modified":1568877235804},{"_id":"themes/next/.git/objects/ce/841b7b4c4fe3803f677ffe58c457960442d095","hash":"347094a6654e172870e859527d9560d84a0aea5a","modified":1575025041962},{"_id":"themes/next/.git/objects/d1/f0ac5e3201de3db97c38eb507a088b4cbf9907","hash":"ab9b9e5f050228473bbd7027ba2711e525ed884a","modified":1575024975623},{"_id":"themes/next/.git/objects/d2/1b3d791e1f7649d5d9b5e8b79c11996b7cc509","hash":"30a1d235892e98ce640d39e645efdacff6ff586c","modified":1563776837398},{"_id":"themes/next/.git/objects/d2/d8e3298af71347890adef7daf2818cf59e4561","hash":"155b3ccb6f816b2df2429b852dddd8effb5df3a2","modified":1563793628471},{"_id":"themes/next/.git/objects/d3/a05ea90520366171ef5d040afa227c3658178f","hash":"3cfe28f4490bf0ca72a3b3c1b5f809e1cdc83c77","modified":1568958704222},{"_id":"themes/next/.git/objects/d3/aaa83689289f20364bd7307ac9d6b2b73b422e","hash":"cf3fb607a10e2384cab76a21a76365eccf6cbf00","modified":1563764364428},{"_id":"themes/next/.git/objects/d4/eeb18a9b99d8a984740d26a407465ff694cc6f","hash":"333e97dfa8b12ea4daa83265e9e768e85839ea03","modified":1563416717956},{"_id":"themes/next/.git/objects/d4/a8e1fa14e33ed82c94f8f5cad2eb5d379f38f6","hash":"250ef13d9c12b6635b330f8982ff29da2179ccd4","modified":1563764364852},{"_id":"themes/next/.git/objects/d5/7f9b4300a7fb42b21f3a187f1bd0ad96af4855","hash":"e2e6c2aa165ffcf476684ae3d49abd7d48375fc4","modified":1575026262203},{"_id":"themes/next/.git/objects/d6/50fb40968dc51a3b315583cdd9b98f274ba82c","hash":"bb324d67b8de4ede95419d75c5a9ec02fc801b85","modified":1575024975616},{"_id":"themes/next/.git/objects/d8/24e2095d0a27ac7408b1cd2ae29aff99dfa866","hash":"b3c4d888eee25faeaa08108068755cb613866770","modified":1568700998274},{"_id":"themes/next/.git/objects/d7/babf55d946f165041d60e989f213dd9bfb560e","hash":"27dd318cfd6214d16a978044deeb2087689eabe7","modified":1575026262207},{"_id":"themes/next/.git/objects/db/cc7ad4f755c294374fecc0d5ed5aa6203a068b","hash":"2273d7fbc7e12ab6f423c1a22b3336466c440337","modified":1568958704202},{"_id":"themes/next/.git/objects/d9/da1d12945e1e11f760c714e115d0bc45dbfc23","hash":"e8283a7bf9e675e2549525a1a06627228c8ff6cc","modified":1564113948874},{"_id":"themes/next/.git/objects/da/a5e0eaeacb637cff30374694de5272ad569b6e","hash":"daddbd61370d35093513780e9b017c66020c8d92","modified":1563764364388},{"_id":"themes/next/.git/objects/da/8082966589be8347aed0ac21f0da7d4946dea7","hash":"813855c3449d13679c9b196b866247c0bf921991","modified":1568877235778},{"_id":"themes/next/.git/objects/dc/d640c18314a817b25ab9ba3aa013a65535b1e4","hash":"1a6cfac295deb35ff2d4d4d3856faa6b38e41124","modified":1568877235783},{"_id":"themes/next/.git/objects/dc/da0a40d9bd4f551f750c37ac982228d14f2618","hash":"384e113b1626080acff147612c4616ad6ba0fba7","modified":1568979149798},{"_id":"themes/next/.git/objects/dd/7b3be62bd3715ccb347288786dfa14b2ed3ced","hash":"342fb511ba45eb747dd321f31912387295180898","modified":1564113948826},{"_id":"themes/next/.git/objects/e2/51bc2598462207cf75e9aba70ba10c6ce135c8","hash":"cddf421bbf43c4368f650ad83241bad5477e9036","modified":1575024975626},{"_id":"themes/next/.git/objects/de/b556c7e017728e635a587c5b852630b7ca98c0","hash":"fc598ced5901b19c9c8cbe929008640055dc766a","modified":1564113948823},{"_id":"themes/next/.git/objects/e2/fe9a7aff84e0a661ac354a97b334a44d382851","hash":"3b16126780960949963fa0d59dbe122313a69ed8","modified":1563764364845},{"_id":"themes/next/.git/objects/e3/5240722f4f830e735c4ed7f8b30025d2367c13","hash":"e29890285826951210de1d559227c761492ffc78","modified":1563764368413},{"_id":"themes/next/.git/objects/e3/6a5d3c2757a21fa19819f2375b4eb04e0bdc5a","hash":"450d057ff5f1f3a3eb1dee666beaf3ecfb8df088","modified":1575024975617},{"_id":"themes/next/.git/objects/e5/0fce7896880ee973e1439b4077ab57519b9426","hash":"85406b7dbf354b2c15ba8e43fd7b8acc456bd76b","modified":1575024975392},{"_id":"themes/next/.git/objects/e5/9c9ffa4a10ecaf4fd2609822818712dd7c602a","hash":"015be50a2704da98eb7bc85f01928e3af0ddb7fd","modified":1575024975618},{"_id":"themes/next/.git/objects/e5/36c11c58c8fa88fff0524543a55651fb00ec04","hash":"a1b0ac7cd8ffa42342adceb5ed1e6621c307acc9","modified":1568770502669},{"_id":"themes/next/.git/objects/e8/ae0b73a8c156d0f6dbd31b5573a4b4d3839649","hash":"1b0f2aa3daf70862932d3a8c776079087ee98905","modified":1563776837396},{"_id":"themes/next/.git/objects/e9/030b5a358534afce53a0da4b981b7fb924d5f9","hash":"50eae1a832720829fd7ee0c5b52e88b92e0038a5","modified":1575024975385},{"_id":"themes/next/.git/objects/ea/3685330ed9d6e1af98b5c296ccd517553c6a24","hash":"8bb5486c8c1480dba298a728fce59d5aca60909b","modified":1568877235804},{"_id":"themes/next/.git/objects/e1/38bbfeabf80c1df94bdce8f7843813f19f1f59","hash":"ee6bf8ddc436ada79713ca98970ccc14b36c99f4","modified":1586516443899},{"_id":"themes/next/.git/objects/e1/abfa09463540b2bda06f122ed67271a87ed9a6","hash":"e8174eee3d0439f31f2bc5e8de45778beaa15404","modified":1563416717960},{"_id":"themes/next/.git/objects/ed/898330e009f01de7b2c2ee496c05e6b49e8abb","hash":"61650ee178bbe0de47953092c12c6606de1b41a2","modified":1563764364859},{"_id":"themes/next/.git/objects/eb/e044bec9ec775db124212048c42170ce872352","hash":"abaf876009c450b118bef81376b3411902e26170","modified":1568877235796},{"_id":"themes/next/.git/objects/ed/f1a08e923ceed88552075462850e6bf41723aa","hash":"13ae993ed09ffe8ed7ac770b939b821cb25dcd37","modified":1568699013680},{"_id":"themes/next/.git/objects/ed/c6307ba230980e68a7d501060d32a71f718129","hash":"f4039effe59cbecf3198f0eeb9795d5d966f0019","modified":1564113948876},{"_id":"themes/next/.git/objects/e6/a779517ea43dc7079d46df03b1c3dfcd584ad1","hash":"b3c4fd9c633028ceab6460bf3c1537f5296f5f1f","modified":1568770502672},{"_id":"themes/next/.git/objects/e6/693fdd32202bd11baf0a52d1ed2635467f7a24","hash":"d912414c14867ead3a96b9a977c7ef91cfaa1f67","modified":1563764364394},{"_id":"themes/next/.git/objects/e6/aa031809bc27bd727d3e2c0867db1b493b0052","hash":"4df310c469931359bcb89f8aeb3000764f942f98","modified":1568707757347},{"_id":"themes/next/.git/objects/f1/b0d93a461c9457155923c4386672f260d10dc6","hash":"61e82a81d567e57becb1c7e6b43827691836f860","modified":1575024975411},{"_id":"themes/next/.git/objects/f1/2ff04ba9cab7e3c59d369a0f3563b34e080331","hash":"e69374a685150efd4e03286cc30256f89acc570c","modified":1575024975393},{"_id":"themes/next/.git/objects/f3/af20ce5a80a63a1b90fcefefae32c59a6edd06","hash":"bf634f7d0ea39aaf1d7e0e9893279d145ec3df27","modified":1568881985891},{"_id":"themes/next/.git/objects/f2/6b04198361819281bc26dd2f5d1781f70b871e","hash":"c4fa3427f8392871c515210b1cf1ce17ef77ed11","modified":1575024975412},{"_id":"themes/next/.git/objects/f6/b667010a192139898ef8d430b5fc3d19c804a5","hash":"b31797245b3936afd5274c6911e5dc10d3d2b293","modified":1568701020348},{"_id":"themes/next/.git/objects/f5/bd0f9aef60c62e77c06dae3a685e1f2ae5032d","hash":"11a895463503d1399cfa3a15beab845dc2364e3f","modified":1568958704224},{"_id":"themes/next/.git/objects/f0/f4118e04486b8f51654e30f6f93cb8cc1edec0","hash":"520dad0cb564c1428ecea2a14718b65d545bdd48","modified":1563764364443},{"_id":"themes/next/.git/objects/f9/7e3320862185f38712c6e7b3e26ed907165a68","hash":"6e4c85bac5c2c1284d59bdbe0b587d369ce82757","modified":1563793628469},{"_id":"themes/next/.git/objects/f7/14546ad37e47c5f5a7a93ee91b335f3ace1861","hash":"4e2de4c2a2281f4002f05fd5261e3fc7af985299","modified":1563416717971},{"_id":"themes/next/.git/objects/f8/849f07b839359aa08fc64dbf760f046315460f","hash":"d710b9d85947114749cb84fabf089f11b191fe24","modified":1563764368403},{"_id":"themes/next/.git/objects/f9/e906014897d76b2cc67a1b9baa101f9d8968e0","hash":"a6fe15a8e52732ec255a46e2427a0d3d456cd0f7","modified":1563764364929},{"_id":"themes/next/.git/objects/fa/0c97336b0378d6d9f384403058f25415880976","hash":"cb237aa8f8cd30a2d4c569c75aa36dca6274d4f3","modified":1568877235788},{"_id":"themes/next/.git/objects/fa/6ed20f001caee83c087f7a6174a844a9db8ab7","hash":"f98e2ee2f835c7b560d0eda089e33ea73a4f4c41","modified":1563764364477},{"_id":"themes/next/.git/objects/fa/e31fec3a70b8638627d488e4152cb7c2ecdf02","hash":"c865ab4cf769c8be3d94c54d3fed434fe999ea7d","modified":1568713902279},{"_id":"themes/next/.git/objects/f7/68dc576cc244db4c78d423b4ea74fcfab7cb80","hash":"bccb45afb3f89747da57a163a3c0cdf21358a382","modified":1563416717959},{"_id":"themes/next/.git/objects/fb/4438b28c70e9cf3cf4ceaf860e17671c15b9a1","hash":"c1a7eec4c22e6f56f4d1e5ddb53f9ddc84d8d3c1","modified":1575026262243},{"_id":"themes/next/.git/objects/fc/b185ab8a05b5f5dea8a4bc1983a8af74e1afc3","hash":"c74b847805604d653829985586dcfb0af59b9de2","modified":1568958704209},{"_id":"themes/next/.git/objects/fc/426768d158df6ea124adc956ab4e75f23594ac","hash":"dcad0b068e5241859121b6c86aa79cfccb0fa31c","modified":1568979149807},{"_id":"themes/next/.git/objects/fc/c73be09ab378aec4157ecdd1df78120f5c8664","hash":"6d5b98681b7575978ba83fde83934a8df4c09169","modified":1575024975130},{"_id":"themes/next/.git/objects/f4/a21c668be777f1a7fbe7c50c2ab12189e680f3","hash":"aed311f366e81cfb39c32abf27c787f97571bf6c","modified":1575026261743},{"_id":"themes/next/.git/objects/f4/40bab5595f6b7fb39d7acd9298e802c55f20ce","hash":"07aba4e20c8f1aeec088d1f5e40c739ad7aed70a","modified":1575026262238},{"_id":"themes/next/.git/objects/fe/a2082332b93e1277cbad3c4a5ef80f36e20374","hash":"b748653b9eac3b4b9499277119c17ae8576f8f1b","modified":1575024975423},{"_id":"themes/next/.git/objects/fe/396b022079cd3c6b5b2ca1a71aee2d82270fed","hash":"a7426f1faebe2c3eb82eb8b152da38a73a59e801","modified":1563764364849},{"_id":"themes/next/.git/objects/fd/c5b6a762417b34e8a2ea7d6c875415e7c83848","hash":"5b4dec95dce1e8b66dbdfe6df7647ae81a7b76c9","modified":1563764364447},{"_id":"themes/next/.git/objects/ff/0527eb25fc4c84a8896cdd36ea5f34520a7f74","hash":"ee7156ae2cd402f9045c2e5c3e5267592c41d186","modified":1563764364478},{"_id":"themes/next/.git/objects/ff/c3b96631971e19a864109b881f68aefce2c1c7","hash":"9e9d713fc93896760fe781db8fa89eed20085082","modified":1568881985893},{"_id":"themes/next/.git/objects/pack/pack-1362b7cbdeeba0642c99fbbee839596f6a264eb0.idx","hash":"e0d65e0dcc7a9dc84db76f6c3a679cb3f9e0be50","modified":1568711617867},{"_id":"themes/next/.git/objects/pack/pack-1362b7cbdeeba0642c99fbbee839596f6a264eb0.pack","hash":"63ecfe5c0e944c861a937295e381e19fc77f0c53","modified":1568711617867},{"_id":"themes/next/.git/objects/pack/pack-4868790d7fd1ea02f203a1b873e8502451af29cf.idx","hash":"56f7ca8e61c43cbb5b3821f78e08bf0d85d47de6","modified":1570869289939},{"_id":"themes/next/.git/objects/pack/pack-4c854c77e07c3fa78cddcec06a11dad413f6d394.idx","hash":"7b59996f62fca2fe1a4ea0c23fbc33e7a2a5e4ec","modified":1563240952354},{"_id":"themes/next/.git/objects/pack/pack-4c752d21db198528757c62a956ddb236042de4cc.idx","hash":"218531feec405db6a3d439dcf8f117a50ac709e2","modified":1548916311354},{"_id":"themes/next/.git/objects/pack/pack-4df2bdb1e7330802e4635cc85a3e7c1d24d061fb.idx","hash":"074d01f0c7a3d62df19a7c99f59eb49e6a11d91f","modified":1586516081393},{"_id":"themes/next/.git/objects/pack/pack-670f6b3d6dd8dfe014e5072c6c4196266a1b7ba7.idx","hash":"43f786b83e2ee707d643e2f21a0ecb47076a3630","modified":1585940636518},{"_id":"themes/next/.git/objects/pack/pack-507a3d81c9dbe0363decaecc36bfbbfc205794ff.idx","hash":"b8d1894faef7e8648d26d3274312af2781d1db59","modified":1585029823357},{"_id":"themes/next/.git/objects/pack/pack-79c614ceef5cabd04eeea647221a50af3dca214e.idx","hash":"152f8f387a4f1291f7723f438a03eeee5c3bdf8d","modified":1564053168610},{"_id":"themes/next/.git/objects/pack/pack-726ba2b8db3d7b1abf88ce21cd910711ec66a27b.idx","hash":"7a23c44017a235442b6fcee8aa00839c7f426e93","modified":1583303076073},{"_id":"themes/next/.git/objects/pack/pack-83662d50c8a83f83c2d989c84ec89eb276ac4621.idx","hash":"67c56810404e22f2bde8fa5d57f83b70ea18cb91","modified":1551440729389},{"_id":"themes/next/.git/objects/pack/pack-7cd11b464fded3e757fd7a571cc9ebd54f5d70b8.idx","hash":"32df61cac3b9a450355492fa2487cccd43d1ccaa","modified":1577246287372},{"_id":"themes/next/.git/objects/pack/pack-81f2208af4bdd073662b2e220f02dcf41c1ac227.idx","hash":"260cbb093f43f1cd492c4a11596f06b64c375be2","modified":1585029398576},{"_id":"themes/next/.git/objects/pack/pack-8d9dfe92fa051c4613133f9b52675d4c8feb1a53.idx","hash":"c75647b9858f26f14cdb521d09e1bb3418567fe6","modified":1583302435252},{"_id":"themes/next/.git/objects/pack/pack-bdf41ff59ba66aeaae645c349268eea3e9ffff07.idx","hash":"0922e0715898636d4d06dce5b99af6b175bb670d","modified":1575024955305},{"_id":"themes/next/.git/objects/pack/pack-aff469b76c4e023f358e156fbe84f453e35d1357.idx","hash":"deac61445e64f95272af47750fdf522424066b70","modified":1583304477701},{"_id":"themes/next/.git/objects/pack/pack-d63e129f5fbf3ec102fe448bdb8d2c00e04620fa.idx","hash":"7f5182947897818ac5505475c289d835c919a0fa","modified":1564108273771},{"_id":"themes/next/.git/objects/pack/pack-d63e129f5fbf3ec102fe448bdb8d2c00e04620fa.pack","hash":"027cd0e348a6eaf03457dd4030ba0b832cc6925c","modified":1564108273771},{"_id":"themes/next/.git/objects/pack/pack-c4aeb6e7fed0d119c52d371bb803993c0bce7ae1.idx","hash":"d3211572a24548a65666980d68e11ec9d160f8a0","modified":1583304661085},{"_id":"themes/next/.git/objects/pack/pack-f8ffd978128d538fe0bf5a338fbdef85dde14844.idx","hash":"794e2c52ceafad60d9e40805ebdf5b0a1c1d22f0","modified":1561715404475},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1575025513033},{"_id":"themes/next/layout/_macro/menu/menu-item 2.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1568699013000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"1dc3875981923aee38b7b1e3ca3813b75ed6ab9c","modified":1575025513033},{"_id":"themes/next/layout/_macro/menu/menu-badge 2.swig","hash":"9e959646899a1dd381c0bea870408cd392c93c70","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/busuanzi-counter 2.swig","hash":"d7258d02bcf0dac6c0fd8377c0909ddecb09d1d4","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/cnzz-analytics 2.swig","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/firestore.swig","hash":"67e63c25d509f02a6057ee9724f1b6efd647f72f","modified":1575025513035},{"_id":"themes/next/layout/_partials/analytics/index.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/lean-analytics.swig","hash":"fb7729b69ef443db1f3f2755506ee998cfe4b973","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/index 2.swig","hash":"ac6a3995c1330d2d73300b2427006509d0f8dba5","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics 2.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1568699013000},{"_id":"themes/next/layout/_partials/analytics/tencent-analytics.swig","hash":"493a1ef6c8f475d4dd3156a6ab37690dc75695ea","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/tencent-mta.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1575025513036},{"_id":"themes/next/layout/_partials/analytics/tencent-mta 2.swig","hash":"198813a3f382bda4278fe3759bf0f18a5769bb33","modified":1568699013000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"0edd29b972aceecccb65b3e63d79c01f6639d0c5","modified":1575025513040},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"9718d372887f4b0ee952da42d10b2f736d0fc6de","modified":1575025513042},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"6236a874b93ac1be56fc21df8534a7ae8acffcfc","modified":1575025513042},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"1ba4cd71b826186b7f782bd06258f2ec52a2b491","modified":1575025513045},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"e0767e09a632264f189570e95ccf70fb1dad9110","modified":1575025513044},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"c3a484d7bb15b55e4e48d412b0b30981168be6f3","modified":1575025513048},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"d3c25d70f0fd76121e4cacb9f8af4ccbe2a3c74d","modified":1575025513050},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"c851717497ca64789f2176c9ecd1dedab237b752","modified":1568699013452},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"b68ccb90e2ee42bd98c93fc030a29d38689dd55c","modified":1575025513052},{"_id":"themes/next/layout/_partials/post/post-footer.swig","hash":"b654d63d2ed221a8b642223e220392e5172d8f4d","modified":1575025513053},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f05225f7d0ada3853c425899b515056b96ca49bf","modified":1575025513053},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"7fa01334a0ba84500e920bb9202baa08067d2ee1","modified":1568699013455},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"2edfaf1579ea58e15cb5583fb7962dfee9af2257","modified":1575025513054},{"_id":"themes/next/layout/_partials/post/post-reward.swig","hash":"90a0869c6cc351d92fc97bf42fdc6e1bfa6bc513","modified":1575025513054},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"733d6874aa4f50d1071e670a554508a5a0094eb3","modified":1568699013455},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"d6fa9e4432b87004c5678dfe2d4b2c1f4a702b93","modified":1568699013455},{"_id":"themes/next/layout/_partials/sidebar/site-overview.swig","hash":"4e71b26d91ab750791f3be6035a946eb96ca7b34","modified":1575025513055},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7f14ef43d9e82bc1efc204c5adf0b1dbfc919a9f","modified":1568699013458},{"_id":"themes/next/layout/_scripts/pages/schedule.swig","hash":"9e44c795565837ba318fd739e42713de365673fd","modified":1575025513057},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1575025513058},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1575025513065},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"1c910fc066c06d5fbbe9f2b0c47447539e029af7","modified":1568699013458},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1568699013459},{"_id":"themes/next/layout/_third-party/analytics/application-insights 2.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1568699013000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"7fd0459d2f1cfe1254f2c2b8087dc094c8cb0e84","modified":1575025513066},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"9f73476ebcf5cd3b7f55525b3f35dc7e9f01e154","modified":1575025513066},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"1130b8bd60f3b84397974486e6586d7f0afaf836","modified":1568699013462},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"42aa3022f7739a552c7a55de316d8c0994b2fdc1","modified":1575025513066},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"86092b31761948486ecb379eb7445f66a158769d","modified":1575025513067},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"6f95bc4d7ffaddc3c0df0ef3eeeaac58ff83f560","modified":1568699013463},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"df8413cba22deffca94cf4edd6d9f8d35d2bb58f","modified":1575025513068},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"ab937195168a0e8a911bf5730307f680e6d521e9","modified":1575025513070},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"261c4f1ab42f692279a310943b807ed34516df7c","modified":1575025513069},{"_id":"themes/next/layout/_third-party/chat/chatra.swig","hash":"fdcf006e1ba2e53eab65e901b6c63159538307ef","modified":1568699013461},{"_id":"themes/next/layout/_third-party/chat/index 2.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1568699013000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"20fcbed44aede1b908bd17d7a0279b03639068b1","modified":1575025513067},{"_id":"themes/next/layout/_third-party/chat/index.swig","hash":"5ab4a8b4306c837d2f8c211a9d7fdaed76fa254d","modified":1575025513067},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"bc23c9eb9c06b0b377695f44373c14c5cde1d0e3","modified":1575025513071},{"_id":"themes/next/layout/_third-party/chat/tidio.swig","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1568699013461},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"b9d7a99534e9c2608765b958eae3b5c50f5e4889","modified":1575025513071},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"dff6835d0b03ecc2db6919ca27cfb7b63949e6a8","modified":1575025513071},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"ad7a22ee0f183481c7843ecd881b9f9e8e037e31","modified":1575025513072},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1575025513072},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1568699013466},{"_id":"themes/next/layout/_third-party/search/index 2.swig","hash":"b2fd17688f0433571b37704bc8df798e175e7811","modified":1568699013000},{"_id":"themes/next/layout/_third-party/search/swiftype.swig","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1568699013682},{"_id":"themes/next/layout/_third-party/tags/index.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1575025513072},{"_id":"themes/next/layout/_third-party/tags/index 2.swig","hash":"83d0a8f71878c6b96a04ba08567b9064de6cce83","modified":1568699013000},{"_id":"themes/next/scripts/events/lib/injects-point.js","hash":"6661c1c91c7cbdefc6a5e6a034b443b8811235a1","modified":1568699013470},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"2a5f7c7e507bb354ec05a881bc9a1f4f2f28197c","modified":1575025513087},{"_id":"themes/next/scripts/events/lib/config.js","hash":"b710d896fccd34657a70244645470e476a4e069f","modified":1575025513083},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"3ac62f5510f22e9d970089bb01f96ba2134ae161","modified":1575025513088},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"7f2d93af012c1e14b8596fecbfc7febb43d9b7f5","modified":1568699013472},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"0803d4f4d3d02c24417c163ad0b27b60fda79250","modified":1568699013471},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"ccfac51bde0063ab7ef88182f8cbc98c210e78c9","modified":1575025513089},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"178c4618b29a1e06221285146071e72e24c40499","modified":1575025513089},{"_id":"themes/next/scripts/filters/comment/facebook-comments-plugin.js","hash":"e3c74b24f3818f2504fd0c7a954adaa6681bb969","modified":1575025513091},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"e51dc3072c1ba0ea3008f09ecae8b46242ec6021","modified":1568699013472},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"3c4bdc2a682f9889a532e1cb856bc5caeb4208e1","modified":1568699013473},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"e34d38aee93558b2c68a7fa6203c2e4806405d62","modified":1575025513092},{"_id":"themes/next/scripts/filters/comment/vkontakte.js","hash":"031337c2e2157628a15a5f4d96fa6e3fcf2733fe","modified":1575025513092},{"_id":"themes/next/layout/_third-party/tags/mermaid.swig","hash":"a54308f934c33b12f6bf28e4ce90e517f38cab57","modified":1575025513076},{"_id":"themes/next/layout/_third-party/tags/pdf.swig","hash":"7597800b6ce2f545baea797d95d1b8c7cf624299","modified":1575025513076},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"644c1f0b02be9bf59955ebdf496136b3fa4b660b","modified":1568699013551},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2315dd8a7a2c7aabd29efa6193df08e805cb15fc","modified":1568699013551},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"14e4bd0bd702c7a7f83bf7d529fade2d0634c2f1","modified":1575025513145},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"59384f63e608b272e4c8679009bbe5e6594fd1b1","modified":1575025513136},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"d9a2eff154fafff547b3aca7321eee94b450c00a","modified":1575025513144},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"1e99dfbe7736acfee59d6f54dbd6b33ddfe2fe8a","modified":1575025513145},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"db52bce619bb848189e83b7bfabd1b2a06fd5578","modified":1575025513146},{"_id":"themes/next/source/css/_variables/base.styl","hash":"639b65a486154cf1f70c31f3fff440ce022255c0","modified":1575025513146},{"_id":"themes/next/source/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527762077878},{"_id":"themes/next/source/lib/Han/README.md","hash":"572a02d6dfcb37f35eb47339862da6fddae00826","modified":1527762077878},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1527766406257},{"_id":"themes/next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766406256},{"_id":"themes/next/source/lib/canvas-nest/README.md","hash":"bf7819cbb879bb82ec1097513d8f799df8835e0f","modified":1527766406256},{"_id":"themes/next/source/lib/canvas-ribbon/README.md","hash":"07e86d67c508a3f974c45ff61cd0760d79bcebc5","modified":1527766851796},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1527766851796},{"_id":"themes/next/source/lib/canvas-ribbon/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766851795},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527765884742},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"a79e7b87a27497922f34e1013d7299f838badc79","modified":1527765884743},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1527765884743},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1527765884742},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1527752362874},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1527752362874},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1527752362877},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1527752362878},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1527752362874},{"_id":"themes/next/source/lib/pace/README.md","hash":"33b87ed998d59f117dc329f999a4ffc744b41e79","modified":1527765966667},{"_id":"themes/next/source/lib/pace/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527765966667},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1527765966668},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1527765966668},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1527746142163},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1527746142164},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1527765966669},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1527765966669},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1527765966668},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1527765966671},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1527746142163},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1527765966671},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1527765966672},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1527765966673},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1527765966675},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1527765966673},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1527765966676},{"_id":"themes/next/source/lib/pangu/LICENSE","hash":"41ba9068d26515f43fa44a3f975f016c06171ef4","modified":1527762043722},{"_id":"themes/next/source/lib/pangu/README.md","hash":"07eeb2e7ecec3f182d898fe3ec737d1aca634b82","modified":1527762043722},{"_id":"themes/next/source/lib/pjax/.editorconfig","hash":"c064a6369e31f846061fec42fd20c94cd34baebf","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.eslintignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.eslintrc.json","hash":"cdbc258b29270771e1846aeacc67198d0aed5447","modified":1568702634064},{"_id":"themes/next/source/lib/pjax/.prettierignore","hash":"9039b3607514f44ee5955e986ee96920ea324398","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/.travis.yml","hash":"0948420e18b2cec89c40093da5c7c14fa4c9bc5d","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/.gitignore","hash":"af77252405d1ae97b1d4139b53f2684b64d87596","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/CHANGELOG.md","hash":"4482a245ac2c867102490c71d0fcbb502be0e3e5","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/LICENSE","hash":"0cadc79604daeacf95062d1e5ccd43edbfaed836","modified":1568702634065},{"_id":"themes/next/source/lib/pjax/index.d.ts","hash":"b90fe99fe90ee7024d760467e75565da561f7ccd","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/index.js","hash":"4af61bcf253ce67d67bb0f524b441869301de9a5","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/README.md","hash":"51abff31a95ce17360dbf1f43807d3eb75023c98","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/pjax.min.js","hash":"7cd20a50053da5563cf1a24c10401a13e6eab4e6","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/package.json","hash":"2ca53bb41de64dca00d8b0fc9ef6249fba445a8f","modified":1568702634081},{"_id":"themes/next/source/lib/pjax/pjax.js","hash":"d37d773dbb45633fb4df1e8b75b8e0830cf2cf31","modified":1568702634081},{"_id":"themes/next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1527766422633},{"_id":"themes/next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1527766422634},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1527766422636},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1527766422636},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1527766422637},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1527752362895},{"_id":"themes/next/source/js/schemes/muse.js","hash":"be8471d4a84b773014b46a3650887ab55116ea68","modified":1575025513149},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1527752362894},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"1e47ffdda23f7f645a2a883a90e2e9d9ddbf9a46","modified":1575025513149},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"d8bf9cb15d9d91c7ad022ba2954b5b4d326f17f7","modified":1527765617926},{"_id":"themes/next/source/lib/fancybox/LICENSE","hash":"8624bcdae55baeef00cd11d5dfcfa60f68710a02","modified":1527765617928},{"_id":"themes/next/source/lib/fancybox/README.md","hash":"a40db80eb6386b085ff810fd3e302f12e76b8df7","modified":1527765617928},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1527765617927},{"_id":"source/media/花木兰/11.jpg","hash":"9bce83bca3d73ac859f1fff522dc7fe95a1afd3e","modified":1568732650000},{"_id":"source/media/花木兰/14.jpg","hash":"9e043c958be8797c8196ba9b4992ad6002ed3a7f","modified":1568732597000},{"_id":"themes/next/.git/objects/47/9ebe65f2f12a808ce324ef15a5bd63aaeb4404","hash":"940c3a07527396c2b8ea4dc3b68cd22f792a12f2","modified":1575024975442},{"_id":"themes/next/.git/objects/63/b4c76d42ec14767b5f53c9a5d14dd9d493adc9","hash":"bb90708804f2fd46a136704f962298a6e8522f42","modified":1586516443891},{"_id":"themes/next/.git/objects/68/481803a35f47cd3222282a20d4cdb76be79dd1","hash":"471da78792b5c99e09851172b152dab95605a54a","modified":1586516443934},{"_id":"themes/next/.git/objects/f2/a16842aea74cc3266f92a2aa1ed2e796baced9","hash":"cfc305a8d277f0b8da357fffbbe6577f26e3edda","modified":1575024975615},{"_id":"themes/next/.git/objects/fb/8161640a4ab81e3ff45b15652efb008945f494","hash":"edd8334b3e50f633f796af2c532bb0693fb25bd6","modified":1575026262231},{"_id":"themes/next/.git/objects/pack/pack-3ed9fd21e5decb57cbe7d733be85bf5e38e391ee.idx","hash":"05a19ca78d508cc64e8f1096cab127dbaf34fb67","modified":1568697627967},{"_id":"themes/next/.git/objects/pack/pack-83662d50c8a83f83c2d989c84ec89eb276ac4621.pack","hash":"f93c6f7adcb62ac267545da426962a646be9f6b8","modified":1551440729388},{"_id":"themes/next/.git/objects/pack/pack-866c7527085bf5b3bb71a2d719241d45025577fc.idx","hash":"558c37a256b1742c1ec15bc196b661b66cbb1e67","modified":1579248795333},{"_id":"themes/next/.git/objects/pack/pack-90166903e8ef7b86526be4c1292de80ef12f49d5.idx","hash":"39aa81567219ab0fa4936dcfe5786aaff062bb7e","modified":1583896242007},{"_id":"themes/next/.git/objects/pack/pack-a4fcdc916028901217fe01bd511cf84f276c99f5.idx","hash":"64f7a99a28035044407ec604bc020ca660c4aa96","modified":1527752362625},{"_id":"themes/next/.git/objects/pack/pack-d96767940915332ee1a61ed8c6daf68518b281ef.idx","hash":"dc6f01494d1bc3ee2eff98d6298c59709153137d","modified":1583299845099},{"_id":"themes/next/.git/logs/refs/heads/coding","hash":"7e344f79fae0538387a7e3035e22241ffa2bddcb","modified":1568697931043},{"_id":"themes/next/.git/logs/refs/heads/origin","hash":"a0b111e349fac89067e432c89f8065cc5290dc18","modified":1568697906486},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"60c6c2c5a19be185c71ded162bbaafa27fdf34e1","modified":1570870072337},{"_id":"themes/next/.git/refs/remotes/origin/can","hash":"036e7c1319c0badc0cdb9d95be4c96c36e45cd0b","modified":1570869289996},{"_id":"themes/next/.git/refs/remotes/origin/GP","hash":"a64be7df71eebe97aa06c6729b56cd802f2637e1","modified":1561715404516},{"_id":"themes/next/.git/refs/remotes/origin/disqus","hash":"d2a0aa8c3cca094867aa6d869fb602bb643c7e69","modified":1570869289998},{"_id":"themes/next/.git/refs/remotes/origin/coding-pages","hash":"4f1d51cd3bb146b4e6c993f2cce65de19a405d89","modified":1586516444106},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1527752362652},{"_id":"themes/next/.git/refs/remotes/origin/count","hash":"556a4cc5100e75fee5d724fbb3f0c15d89a77bf9","modified":1563416718029},{"_id":"themes/next/.git/refs/remotes/origin/escape","hash":"9eff621dda1bcdafee862e0df712319ee522c778","modified":1568713902307},{"_id":"themes/next/.git/refs/remotes/origin/ext-font","hash":"d3e2535508cf9325242984449d7b4b167b47dc5f","modified":1564113948918},{"_id":"themes/next/.git/refs/remotes/origin/font-refactoring","hash":"565b214aef0038b43fc7e0290c27211c681343db","modified":1564053168640},{"_id":"themes/next/.git/refs/remotes/origin/master","hash":"6317d945be222c0a6107591c4034a1c7c57b51d0","modified":1575024955352},{"_id":"themes/next/.git/refs/remotes/origin/front-matter","hash":"1dea2bedc4dd5b9887971666bf1f7935dae7a052","modified":1570869290000},{"_id":"themes/next/.git/refs/remotes/origin/gitcafe-pages","hash":"b90fbe87951190677ca5d0fdafe6266be5cca3fb","modified":1570870202707},{"_id":"themes/next/.git/refs/remotes/origin/font","hash":"59274b8353ab2e23b9da6c6da0f65a6df2a6cd3e","modified":1564113948919},{"_id":"themes/next/.git/refs/remotes/origin/muse","hash":"aedbc329a894e34ed4deb0613cd9830f9c9d5fd3","modified":1564108273801},{"_id":"themes/next/.git/refs/remotes/origin/next","hash":"296ccd7ad076420791506dae4f921ace1623a4cd","modified":1570870174538},{"_id":"themes/next/.git/refs/remotes/origin/njk","hash":"c5d205b2e0c216b7063648d6b78efbb13217a759","modified":1570869290001},{"_id":"themes/next/.git/refs/remotes/origin/preview-image","hash":"d8b09c15354a25f12289ca63414b2883f443d626","modified":1568697628020},{"_id":"themes/next/.git/refs/remotes/origin/script","hash":"5bded4508498e690d80a90f962fc313cf536085d","modified":1570869290002},{"_id":"themes/next/.git/refs/remotes/origin/router","hash":"6fb7c881e4ccf5db8d1617d158edf662b5b8c986","modified":1563793628509},{"_id":"themes/next/.git/refs/remotes/origin/src","hash":"6a19e919a0d0d8e82da36eb04cd27f3c1c493aac","modified":1586516444110},{"_id":"themes/next/.git/refs/remotes/origin/style","hash":"eb23dbe99f9875cfa20b2cd20a3343de28522c79","modified":1570869290006},{"_id":"themes/next/.git/refs/remotes/origin/three","hash":"5617d255aaf98a202f4b6632d56952319d7f0d89","modified":1568697628025},{"_id":"themes/next/.git/refs/remotes/origin/v6.x","hash":"81f1073f2bd2f1e1b3e13e260043918e8c458cae","modified":1548916311408},{"_id":"themes/next/.git/refs/remotes/origin/search","hash":"7529119f15a86e24c82e992447a6d2b36f078a5c","modified":1564108273801},{"_id":"themes/next/.git/refs/remotes/origin/warn","hash":"023f16a67197bc9e6f298bad21b8f04897623bfd","modified":1564053168642},{"_id":"themes/next/.git/objects/pack/pack-79c614ceef5cabd04eeea647221a50af3dca214e.pack","hash":"335088aa3dd1c2a69002910468dbeaf37485c51e","modified":1564053168610},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"e0db0d9205cd47c48edba81c7397e09ed24783fa","modified":1575025513105},{"_id":"themes/next/source/css/_common/components/buttons 2.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"cda066b495a4b6b10c7bc88b2a9b82722156b66b","modified":1575025513104},{"_id":"themes/next/source/css/_common/components/comments 2.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"060aeb5cff414014f7cdbb61e0ec7855cb0d4b32","modified":1575025513107},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"6c61a120d61dec145c8db3a244cae0e724f6f3ef","modified":1575025513110},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"3faa8a7cdb05ef3f3b02920d381773dfd54270a5","modified":1575025513108},{"_id":"themes/next/source/css/_common/components/pagination 2.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"674c32b6e9df4b2294df07c3966bf6555e0fb5ad","modified":1575025513120},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"8e9deaf1e0a27d5bf5f0401bf04f5637df12b6c4","modified":1575025513125},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"0dd11537a4b9a4d2faf3ad5cdae0f0f770a99ccf","modified":1575025513126},{"_id":"themes/next/source/css/_common/components/scrollbar 2.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1568699013000},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"202ee1f1f8e64d8292df16f40ee176ff4e5d7e71","modified":1575025513126},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"b6b9dc8a350e51ad7b8bb08141a61fc2fd7466fc","modified":1575025513133},{"_id":"themes/next/source/css/_common/scaffolding/helpers 2.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1568699013000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"cb25eed35117be256ea7a573fec2cdfb66901dbb","modified":1575025513133},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"0c60cf489cd083d3a1e3502a240a761b656241c2","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/mobile 2.styl","hash":"c4a5c52e30444602237530f379c1707ec864fa9a","modified":1568699013000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"4f7140cc0db08b47a25c4c7aad71047d433051a1","modified":1575025513134},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"4ddbc8b2dba6fad900c5eca793a31f18ba850f5a","modified":1575025513135},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"19a20393d266b21ee44ff07d6fa1e9ebbc39a5d9","modified":1575025513135},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"c42802ecca44d4ea435c26700070a65375edfd7c","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_base 2.styl","hash":"71d75fa309cf5b96d876da536f57c047e57afcff","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"87d19a45db10689aae9a09736efd1eb896a35b3d","modified":1575025513138},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"73fe940abb0787a19f505fb614aafe73c8a24f08","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/_logo 2.styl","hash":"3462ffd270f3e218e0a8362262466e79d731f975","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"dc2a3217f9b50cf42c4262c9e486281203eaef83","modified":1575025513139},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"e859283440617f18f1ad298f7f1218aafa9b39d5","modified":1575025513140},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"54c5e23ec3dcbbc77848ededba76e861cf0f4719","modified":1575025513140},{"_id":"themes/next/source/css/_schemes/Muse/_logo 2.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"3646e915b0a55f3b66e41d802b082aba88a76e06","modified":1575025513141},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"b22583b7340c2686a46aefeeed086540b08324a3","modified":1575025513141},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"eeab294e14abbae231107e1a327e907b25323136","modified":1568699013602},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"41b1d10a530913908e026fd991216e234766d148","modified":1575025513142},{"_id":"themes/next/source/css/_schemes/Pisces/_brand 2.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1568699013000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"2ab9e0499f241d1b91e2f7722072d23c95104e1f","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"ac523812bebb13cde268dc3cde65d0b7c6862e30","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"44ac3dff65c1bd3fe47feeed8e58aa00c9f2fb7b","modified":1575025513143},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"3bcb47b9b9ea671e0a3cba6a821045d3434734cb","modified":1575025513144},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"10b4794ba62726fc052c74d786d962ed79d0780b","modified":1575025513144},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"f1f81bca31e82ccbd375f0cb9fb8dbb3beac810d","modified":1575025513142},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1527762077883},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1527762077882},{"_id":"themes/next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527762077871},{"_id":"themes/next/source/lib/Han/.git/FETCH_HEAD","hash":"537c3549cfa4afbdc8521eb28284118da98b2179","modified":1568698917711},{"_id":"themes/next/source/lib/Han/.git/config","hash":"a3f105c8a521127ed214de7c66afe2fc5bbd7538","modified":1527762077874},{"_id":"themes/next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527762070789},{"_id":"themes/next/source/lib/Han/.git/index","hash":"90863eeeff6002736cd51fe46278040987920019","modified":1527762077883},{"_id":"themes/next/source/lib/Han/.git/packed-refs","hash":"6e2c4e71af7f142cc38f974c70328b7b85a30e91","modified":1527762077869},{"_id":"themes/next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766406246},{"_id":"themes/next/source/lib/canvas-nest/.git/config","hash":"6aef6bbfcb8ccf9d042bf26defe7d08167b6d81e","modified":1527766406252},{"_id":"themes/next/source/lib/canvas-nest/.git/FETCH_HEAD","hash":"256739712ff7d85a89dfcd10e8b34671f638d85e","modified":1568698916385},{"_id":"themes/next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766400335},{"_id":"themes/next/source/lib/canvas-nest/.git/index","hash":"e1862a814ddce065c28962fabd7c3bfa979ed0d8","modified":1527766406257},{"_id":"themes/next/source/lib/canvas-nest/.git/packed-refs","hash":"60cebf9a6bcd88fd6b2132480cdef3ebf7a7dcf7","modified":1527766406242},{"_id":"themes/next/source/lib/canvas-ribbon/.git/FETCH_HEAD","hash":"aa1c4076e7151c84e7dffb6ce24b4a7f4965432d","modified":1568698916139},{"_id":"themes/next/source/lib/canvas-ribbon/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766851785},{"_id":"themes/next/source/lib/canvas-ribbon/.git/config","hash":"f79e33176f8d3e893553102df6eb347a74fd078f","modified":1527766851788},{"_id":"themes/next/source/lib/canvas-ribbon/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766845898},{"_id":"themes/next/source/lib/canvas-ribbon/.git/index","hash":"1217f6699e9e5bb563d14c3dffd12178bbbaa9eb","modified":1527766851797},{"_id":"themes/next/source/lib/canvas-ribbon/.git/packed-refs","hash":"35076774be8e5f297f34b1efbd310b067d4601b7","modified":1527766851782},{"_id":"themes/next/source/lib/fastclick/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765884732},{"_id":"themes/next/source/lib/fastclick/.git/config","hash":"b355df77af94588e555c06b72b2073ad4e697feb","modified":1527765884736},{"_id":"themes/next/source/lib/fastclick/.git/index","hash":"741e235a404a41a6e09d10618a8bce8f2e04542f","modified":1527765884744},{"_id":"themes/next/source/lib/fastclick/.git/packed-refs","hash":"3fc39e985e9f6593f545758c828d9e0c2f1e4f02","modified":1527765884727},{"_id":"themes/next/source/lib/fastclick/.git/FETCH_HEAD","hash":"5179043b158d54b4952a2ba0a9b7cc2f83c77e32","modified":1568698916358},{"_id":"themes/next/source/lib/fastclick/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765879987},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1527765884744},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1527765884743},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1527752362880},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1527752362881},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1527752362881},{"_id":"themes/next/source/lib/pace/.git/FETCH_HEAD","hash":"00d380218db271385430bce53bfd4c4806226938","modified":1568698917148},{"_id":"themes/next/source/lib/pace/.git/config","hash":"46d590e05dc25560a69d5cc71b337adad9654443","modified":1527765966662},{"_id":"themes/next/source/lib/pace/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765957997},{"_id":"themes/next/source/lib/pace/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765966660},{"_id":"themes/next/source/lib/pace/.git/index","hash":"951ec74e28f148145da7db4a1da0f2352d54ff81","modified":1527765966676},{"_id":"themes/next/source/lib/pace/.git/packed-refs","hash":"2423e57d7b82d584aa814481ceeff0055b991cda","modified":1527765966658},{"_id":"themes/next/source/lib/pangu/.git/FETCH_HEAD","hash":"68177a5d89f41f4867d55712093b464693c3e7bc","modified":1568698916024},{"_id":"themes/next/source/lib/pangu/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527762043714},{"_id":"themes/next/source/lib/pangu/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527762038449},{"_id":"themes/next/source/lib/pangu/.git/config","hash":"4a81d1732b46502bf07bec02936b1b7aca117b4b","modified":1527762043717},{"_id":"themes/next/source/lib/pangu/.git/index","hash":"12da4d5b60236ac6d1f961344ff939aef79bf38f","modified":1527762043724},{"_id":"themes/next/source/lib/pangu/.git/packed-refs","hash":"53b18dbcc9940bac320a19779536f55b17810585","modified":1527762043711},{"_id":"themes/next/source/lib/pangu/dist/pangu.js","hash":"8f2c5a78edf77a7e4a6d04e7dd568d544cc93737","modified":1527762043723},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js","hash":"9887d0641d828b330969dc2f81f6d45a1e97be2c","modified":1527762043723},{"_id":"themes/next/source/lib/pangu/dist/pangu.min.js.map","hash":"1aa0d935665a2f075bbc4b5f0a53bbfaece12c5b","modified":1527762043724},{"_id":"themes/next/source/lib/pjax/.git/config","hash":"b668d1d9a28843557320d14b8660f46e0eeb76d7","modified":1568702634051},{"_id":"themes/next/source/lib/pjax/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1568702634047},{"_id":"themes/next/source/lib/pjax/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1568702571594},{"_id":"themes/next/source/lib/pjax/.git/index","hash":"7745f189bb170d30a749d23c1d776cd32670c565","modified":1568702634088},{"_id":"themes/next/source/lib/pjax/.git/packed-refs","hash":"8025ebef1dbce2adfb3c41109f696a817df9ca71","modified":1568702634043},{"_id":"themes/next/source/lib/pjax/example/example.js","hash":"48b27c93eb351d2fa91247c35038a9f1627e971a","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/example/forms.html","hash":"aa62fc6e697e17e16a947eb0176dc24e2e42d72c","modified":1568702634066},{"_id":"themes/next/source/lib/pjax/example/index.html","hash":"4a00b556253eeb11fc10013c8c3940a019154001","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/example/page3.html","hash":"8d1d6a9afd80caf29e5b22f10a849b23a864a6a4","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/example/page2.html","hash":"7654e0a5a471bec5d74fb88d9f2f218817afdd52","modified":1568702634067},{"_id":"themes/next/source/lib/pjax/lib/abort-request.js","hash":"cbae038c94f70163340801cb608f4e503640b88d","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/lib/eval-script.js","hash":"d5980b3c5f3c1a95427eab0d7d2263324fb72bca","modified":1568702634068},{"_id":"themes/next/source/lib/pjax/lib/execute-scripts.js","hash":"8c7c18b14c11af7e2d8dd0146b7df428bf8149bb","modified":1568702634070},{"_id":"themes/next/source/lib/pjax/lib/foreach-els.js","hash":"d8e50967878930891112f4acb46f47697ddc3ad7","modified":1568702634071},{"_id":"themes/next/source/lib/pjax/lib/foreach-selectors.js","hash":"b11d36344a7a6aa36d533a335785772c9bfb6bc9","modified":1568702634072},{"_id":"themes/next/source/lib/pjax/lib/is-supported.js","hash":"62ede7268080ab7efddd64fced8b3e79af2901f6","modified":1568702634073},{"_id":"themes/next/source/lib/pjax/lib/parse-options.js","hash":"054a902e9f350f7414b80f62419da004dd90aa37","modified":1568702634074},{"_id":"themes/next/source/lib/pjax/lib/send-request.js","hash":"15c341d066b0d60879ef3ca5ff858103381fb378","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/switches-selectors.js","hash":"f31b4af163db3d9a5b3bb7c7534a4a2dd5543435","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/switches.js","hash":"4e283f667c10e0fea15e269f1c73ccb699979bb4","modified":1568702634079},{"_id":"themes/next/source/lib/pjax/lib/uniqueid.js","hash":"eb127cf8936e5bdcaa7459cf5bd042ff96b5a387","modified":1568702634080},{"_id":"themes/next/source/lib/pjax/tests/.DS_Store","hash":"8f88ccc54ec777df39e223a0f6f44dac6848d878","modified":1583893985880},{"_id":"themes/next/source/lib/three/.git/FETCH_HEAD","hash":"d562b20891423afcdbc8063f2ee5cec29beeb3dc","modified":1568698917954},{"_id":"themes/next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527766422624},{"_id":"themes/next/source/lib/pjax/tests/setup.js","hash":"4a9489e72cbe98527931d95d68b68e2d6a9bff6e","modified":1568702634087},{"_id":"themes/next/source/lib/pjax/tests/test.ts","hash":"3a5222592fc1883ba6d07fbb2095e4bb4866e9d9","modified":1568702634087},{"_id":"themes/next/source/lib/three/.git/config","hash":"65f90ae2568e8c72066580065d3e1df0d03f415c","modified":1527766422627},{"_id":"themes/next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527766417246},{"_id":"themes/next/source/lib/three/.git/index","hash":"e0bc31464d0aab408a9bcab91e262b14f2ccbd3a","modified":1527766422642},{"_id":"themes/next/source/lib/three/.git/packed-refs","hash":"3e9cbba9f328f4378f17624962e553d1a6020e3f","modified":1527766422621},{"_id":"themes/next/source/lib/fancybox/.git/FETCH_HEAD","hash":"88c20c9a05d253b4ed9ccd39199305ecb0d2b8de","modified":1568698922912},{"_id":"themes/next/source/lib/fancybox/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1527765617909},{"_id":"themes/next/source/lib/fancybox/.git/config","hash":"0bd9061daa1ae14bc8c15ccb2616123858620669","modified":1527765617915},{"_id":"themes/next/source/lib/fancybox/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1527765600896},{"_id":"themes/next/source/lib/fancybox/.git/index","hash":"dae07f22ced998d3ba77ce23bbab6d474114c96f","modified":1527765617935},{"_id":"themes/next/source/lib/fancybox/.git/packed-refs","hash":"a1338c173c56e17c1fb2c7a539ccd3a7eb0da164","modified":1527765617905},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"a5913612c237bb7443c6006a386edd775201d423","modified":1527765617929},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.min.css","hash":"84adea69673c392c1d34a5a316e8e5960aa348b5","modified":1527765617931}],"Category":[{"name":"程序猿","_id":"ck9beg8yw001in6yhl862uqe6"},{"name":"网站","_id":"ck9beg978001nn6yh9z6ytd7h"},{"name":"程序员","_id":"ck9beg980001zn6yhwhixf9ji"},{"name":"工具","_id":"ck9beg9810021n6yh1qim7n6o"},{"name":"优化辅助","_id":"ck9beg99l0025n6yhezaxtqeb"},{"name":"其它","_id":"ck9beg9bv0034n6yhbkncil9g"},{"name":"随笔","_id":"ck9beg9ez0038n6yh22gcdn9n"},{"name":"影视","_id":"ck9beg9kt003pn6yhn1bkg6or"},{"name":"猫","_id":"ck9bega8s0062n6yhvxhrwx2t"}],"Data":[],"Page":[{"title":"宝贝回家","_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","source":"404.html","raw":"title: 宝贝回家\n---\n<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\n<script type=\"text/javascript\" src=\"//qzonestyle.gtimg.cn/qzone/hybrid/app/404/search_children.js\" charset=\"utf-8\" homePageUrl=\"/\" homePageName=\"回到我的主页\"></script>\n\n</body>\n</html>","date":"2019-11-29T08:03:52.311Z","updated":"2018-06-18T12:22:24.517Z","path":"404.html","comments":1,"layout":"page","_id":"ck9beg7940000n6yh5m89frul"},{"layout":"false","_content":"google-site-verification: googlec83004d17e7bf8d6.html","source":"googlec83004d17e7bf8d6.html","raw":"layout: false  \n---\ngoogle-site-verification: googlec83004d17e7bf8d6.html","date":"2019-11-29T08:03:52.536Z","updated":"2017-02-17T01:20:35.000Z","path":"googlec83004d17e7bf8d6.html","title":"","comments":1,"_id":"ck9beg7980001n6yh8m8e26zn"},{"_content":"{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"/res/ic_launcher_36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}","source":"manifest.json","raw":"{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"/res/ic_launcher_36.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_48.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_72.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_96.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_144.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"/res/ic_launcher_192.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}","date":"2019-11-29T08:03:52.518Z","updated":"2015-09-12T16:58:02.000Z","path":"manifest.json","layout":"false","title":"","comments":1,"_id":"ck9beg79n0002n6yhctj2f35d"},{"title":"about","slug":"about","date":"2014-09-14T10:00:42.000Z","categories":null,"_content":"大龄男青年一杖……\n","source":"about/index.md","raw":"title: about\nslug: about\ndate: 2014-09-14 18:00:42\ncategories:\n---\n大龄男青年一杖……\n","updated":"2017-02-04T10:55:18.000Z","path":"about/index.html","comments":1,"layout":"page","_id":"ck9beg88v0003n6yhq5ajamve"},{"title":"分类","date":"2015-10-19T14:35:55.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: 分类\ndate: 2015-10-19 22:35:55\ntype: \"categories\"\ncomments: false\n---","updated":"2015-10-21T16:18:14.000Z","path":"categories/index.html","layout":"page","_id":"ck9beg8920005n6yhrvs48wfm"},{"title":"留言板","date":"2015-08-20T15:25:52.000Z","categories":null,"slug":"guestbook","_content":"大家的脚印！\n\n> <ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","source":"guestbook/index.md","raw":"title: 留言板\ndate: 2015-08-20 23:25:52\ncategories:\nslug: guestbook\n---\n大家的脚印！\n\n> <ul class=\"ds-recent-visitors\" data-num-items=\"100\" data-avatar-size=\"50\"></ul>\n\n<style>\n#ds-recent-visitors div img {\n  border-radius: 100%\n}\n\n.ds-avatar img{\n  display: inline;\n}\n\n.ds-avatar a{\n  border-bottom: 0;\n}\n#ds-recent-visitors div:hover img {\n  transform: scale(1.5, 1.5);\n  transition: .3s transform;\n}\n</style>","updated":"2015-10-21T16:18:14.000Z","path":"guestbook/index.html","comments":1,"layout":"page","_id":"ck9beg8a10007n6yh7ltat9mm"},{"title":"更新历史","date":"2015-05-10T07:48:40.000Z","categories":null,"slug":"history","_content":"\n# 2015-09-12\nTOC目录导航优化\n\n# 2015-09-09\n文章页面左侧增加目录导航\n使用`swiftype`增加全站搜索功能\n\n# 2015-08-24\n精简页面\n  - 删除博客宠物；\n  - 删除左侧[感谢](/thanks)、[历史](/history)菜单项；\n  \n# 2015-08-23\n移动端顶部方块颜色也改为随机[2be5bc07de357a88fd96f1de6b918a9e365c4800](https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800)。\n静态资源mathjax.js由国外地址改为国内bootcdn[c9b04a4de8619eec839671f0ab816fdb841f3117](https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117)。\n留言板页面增加来访人员显示。\n\n# 2015-08-22\n侧边栏头像后面广块增加随机颜色[6444f25c95676086a5fcd64c7e7335f348436ae7](https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7)。\n\n# 2015-08-20\npage页面头部添加`slug`标签，防止多说评论串页。\n文章页面加入toc目录的支持，目录显示样式等优化[a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3](https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3)。\n修改左侧边栏menu数目多后，和图标区域重叠问题。\n\n# 2015-08-19\ninstagram相册页面提示`access_token timeout`错误修正，重新注册了一个instagram号来用就正常了。\n\n# 2015-08-12\n页面底部增加[不蒜子](http://service.ibruce.info/)网页计数器[e6de451b583f300be8ebd0f2f2deab70b01d25ef](https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef)。\n\n# 2015-05-10\n博客宠物在浏览器宽度小于1024px时隐藏。\npost文件名「UC&QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的`atom.xml`文件时出错。\n\n# 2015-05-05\n增加在Android Chrome上的add to homescreen功能。\n增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。","source":"history/index.md","raw":"title: 更新历史\ndate: 2015-05-10 15:48:40\ncategories:\nslug: history\n---\n\n# 2015-09-12\nTOC目录导航优化\n\n# 2015-09-09\n文章页面左侧增加目录导航\n使用`swiftype`增加全站搜索功能\n\n# 2015-08-24\n精简页面\n  - 删除博客宠物；\n  - 删除左侧[感谢](/thanks)、[历史](/history)菜单项；\n  \n# 2015-08-23\n移动端顶部方块颜色也改为随机[2be5bc07de357a88fd96f1de6b918a9e365c4800](https://github.com/iblogc/hexo-theme-yilia/commit/2be5bc07de357a88fd96f1de6b918a9e365c4800)。\n静态资源mathjax.js由国外地址改为国内bootcdn[c9b04a4de8619eec839671f0ab816fdb841f3117](https://github.com/iblogc/hexo-theme-yilia/commit/c9b04a4de8619eec839671f0ab816fdb841f3117)。\n留言板页面增加来访人员显示。\n\n# 2015-08-22\n侧边栏头像后面广块增加随机颜色[6444f25c95676086a5fcd64c7e7335f348436ae7](https://github.com/iblogc/hexo-theme-yilia/commit/6444f25c95676086a5fcd64c7e7335f348436ae7)。\n\n# 2015-08-20\npage页面头部添加`slug`标签，防止多说评论串页。\n文章页面加入toc目录的支持，目录显示样式等优化[a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3](https://github.com/iblogc/hexo-theme-yilia/commit/a3f259e7df9a673fa5c36fcf9a0369b7b2e97ba3)。\n修改左侧边栏menu数目多后，和图标区域重叠问题。\n\n# 2015-08-19\ninstagram相册页面提示`access_token timeout`错误修正，重新注册了一个instagram号来用就正常了。\n\n# 2015-08-12\n页面底部增加[不蒜子](http://service.ibruce.info/)网页计数器[e6de451b583f300be8ebd0f2f2deab70b01d25ef](https://github.com/iblogc/hexo-theme-yilia/commit/e6de451b583f300be8ebd0f2f2deab70b01d25ef)。\n\n# 2015-05-10\n博客宠物在浏览器宽度小于1024px时隐藏。\npost文件名「UC&QQ浏览器私有META」改为「UC和QQ浏览器私有META」避免生成rss的`atom.xml`文件时出错。\n\n# 2015-05-05\n增加在Android Chrome上的add to homescreen功能。\n增加在UC浏览器和QQ浏览器进入以应用模式全屏打开。","updated":"2015-12-26T09:22:24.000Z","path":"history/index.html","comments":1,"layout":"page","_id":"ck9beg8b70009n6yhfr8jccnq"},{"layout":"post","slug":"instagram","title":"相册","noDate":"true","comments":0,"_content":"\n<div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\">\n    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","source":"instagram/index.md","raw":"---\nlayout: post\nslug: \"instagram\"\ntitle: \"相册\"\nnoDate: \"true\"\ncomments: \"false\"\n---\n\n<div class=\"instagram\" data-client-id=\"2046d714069442fc8930e693919681ff\" data-user-id=\"2045963035\">\n    <a href=\"http://instagram.com\" target=\"_blank\" class=\"open-ins\">图片来自instagram，正在加载中…</a>\n</div>\n<script src=\"http://libs.baidu.com/jquery/1.9.0/jquery.js\"></script>\n<script src=\"/js/jquery.lazyload.js\"></script>\n<script src=\"/js/instagram.js\"></script>\n","date":"2019-11-29T08:03:52.573Z","updated":"2015-09-11T15:53:00.000Z","path":"instagram/index.html","_id":"ck9beg8b9000bn6yh2xd8qsed"},{"title":"健身任务","slug":"plan","date":"2014-11-07T14:35:17.000Z","_content":"\n- **哑铃** *200*\n- **哑铃平举** *20*\n- **plank** *9分钟内三组2分钟*\n- **健腹器** *40*\n\n\n- 始于2014-11-07\n- *2015-01-01坚持中……*\n\n![图片1](http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg)\n","source":"plan/index.md","raw":"title: 健身任务\nslug: plan\ndate: 2014-11-07 22:35:17\n---\n\n- **哑铃** *200*\n- **哑铃平举** *20*\n- **plank** *9分钟内三组2分钟*\n- **健腹器** *40*\n\n\n- 始于2014-11-07\n- *2015-01-01坚持中……*\n\n![图片1](http://bruce.u.qiniudn.com/2013/11/27/reading/photos-0.jpg)\n","updated":"2015-08-20T15:28:54.000Z","path":"plan/index.html","comments":1,"layout":"page","_id":"ck9beg8be000dn6yh7hwgbinm"},{"title":"Tagcloud","date":"2015-10-19T15:50:33.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"title: Tagcloud\ndate: 2015-10-19 23:50:33\ntype: \"tags\"\ncomments: false\n---","updated":"2015-10-21T16:18:14.000Z","path":"tags/index.html","layout":"page","_id":"ck9beg8bg000fn6yh2nh7i082"},{"title":"感谢","date":"2015-07-18T13:08:45.000Z","slug":"thanks","_content":"\n博客程序: [hexo](https://hexo.io/)\n教程:\n [Zippera's blog](http://zipperary.com/categories/hexo/)  \n [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n主题: [hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)\n网站计数系统: [不蒜子](http://service.ibruce.info/)\n评论系统: [多说](http://duoshuo.com/)\n图床: [七牛](https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2)\n搜索功能: [swiftype](https://swiftype.com)\n\n以下hexo插件: \n  - [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n  - [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  - [hexo-tag-video](https://github.com/geekplux/hexo-tag-video)\n\n\n\n","source":"thanks/index.md","raw":"title: 感谢\ndate: 2015-07-18 21:08:45\nslug: thanks\n---\n\n博客程序: [hexo](https://hexo.io/)\n教程:\n [Zippera's blog](http://zipperary.com/categories/hexo/)  \n [hexo你的博客](http://ibruce.info/2013/11/22/hexo-your-blog/)\n主题: [hexo-theme-yilia](https://github.com/litten/hexo-theme-yilia)\n网站计数系统: [不蒜子](http://service.ibruce.info/)\n评论系统: [多说](http://duoshuo.com/)\n图床: [七牛](https://portal.qiniu.com/signup?code=3lqtwlg8lvxw2)\n搜索功能: [swiftype](https://swiftype.com)\n\n以下hexo插件: \n  - [hexo-qiniu-sync](https://github.com/gyk001/hexo-qiniu-sync)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-feed](https://github.com/hexojs/hexo-generator-feed)\n  - [hexo-deployer-git](https://github.com/hexojs/hexo-deployer-git)\n  - [hexo-generator-sitemap](https://github.com/hexojs/hexo-generator-sitemap)\n  - [hexo-generator-baidu-sitemap](https://github.com/coneycode/hexo-generator-baidu-sitemap)\n  - [hexo-tag-video](https://github.com/geekplux/hexo-tag-video)\n\n\n\n","updated":"2017-02-08T16:27:07.000Z","path":"thanks/index.html","comments":1,"layout":"page","_id":"ck9beg8bk000hn6yh2obppi24"}],"Post":[{"title":"Apache Rewrite","date":"2015-05-18T13:46:34.000Z","_content":"本文是对今天使用Apache的Rewrite技术做一个简单的记录。\n> Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。\n\n这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。\n<!--more-->\n\n## 更新历史\n2015年05月18日 - 初稿\n\n## 开启模块\n在`http.conf`中找到\n```\n# LoadModule rewrite_module modules/mod_rewrite.so\n```\n取消注释\n\n## 定义规则\n在`http.conf`中加入下列代码（如果启用了`httpd-vhosts.conf`，请在`httpd-vhosts.conf`里做配置）\n```\n<IfModule rewrite_module>\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST} ^www.a.com [NC]\n    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]\n<IfModule>\n```\n\n`RewriteCond`义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的\n`NC`：不区分大小写\n`RewriteRule`满足`^/(.*)`此规则的所有URL都重定向到`http://www.b.com/$1`，`$1`使用前面`(.*)`匹配后的字符填充\n\n所以前面的规则就是的最终效果是访问`www.a.com`的所以页面都会被重定向到`www.b.com`相应路径下的页面\n\n## 参考\n> [http://blog.chinaunix.net/uid-20639775-id-154471.html](http://blog.chinaunix.net/uid-20639775-id-154471.html)\n> [http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html](http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html)\n> [http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)","source":"_posts/Apache-Rewrite.md","raw":"title: Apache Rewrite\ncategories: [程序猿]\ntags: [Apache, 重定向]\ndate: 2015-05-18 21:46:34\n---\n本文是对今天使用Apache的Rewrite技术做一个简单的记录。\n> Apache的rewrite模块，提供了一个基于规则的重写(rewrite,也许译为重构更为合适)引擎，来实时重写发送到Apache的请求URL。因功能极其强大，被称为URL重写的“瑞士军刀”。\n\n这个模块使用一个基于正则表达式解析器开发的重写引擎，根据web管理员定义的规则来实时(on the fly)重写请求URL。它支持任意数目的重写规则，以及附加到一条规则上的任意数目的规则条件，从而提供了一套非常灵活和功能强大的URL处理机制。 URL处理操作的实施与否，依赖于各种各样的条件检查，如检查服务器变量、环境变量、HTTP头字段、时间戳的值，甚至外部数据库的检索结果。这个模块可 以在服务器范围内(http.conf)、目录范围内(.htaccess)或请求串(query-string)的一部分处理有关的URL。重写的结果 URL，可以指向一个站内的处理程序、指向站外的重定向或者一个站内的代理。与灵活和功能强大相随的是设置的复杂。\n<!--more-->\n\n## 更新历史\n2015年05月18日 - 初稿\n\n## 开启模块\n在`http.conf`中找到\n```\n# LoadModule rewrite_module modules/mod_rewrite.so\n```\n取消注释\n\n## 定义规则\n在`http.conf`中加入下列代码（如果启用了`httpd-vhosts.conf`，请在`httpd-vhosts.conf`里做配置）\n```\n<IfModule rewrite_module>\n    RewriteEngine on\n    RewriteCond %{HTTP_HOST} ^www.a.com [NC]\n    RewriteRule ^/(.*) http://www.b.com/$1 [R=301,l]\n<IfModule>\n```\n\n`RewriteCond`义重写发生的条件，在一条RewriteRule指令前面可能会有一条或多条RewriteCond指令，只有当自身的模板(pattern)匹配成功且这些条件也满足时规则才被应用于当前URL处理，上面代码的\n`NC`：不区分大小写\n`RewriteRule`满足`^/(.*)`此规则的所有URL都重定向到`http://www.b.com/$1`，`$1`使用前面`(.*)`匹配后的字符填充\n\n所以前面的规则就是的最终效果是访问`www.a.com`的所以页面都会被重定向到`www.b.com`相应路径下的页面\n\n## 参考\n> [http://blog.chinaunix.net/uid-20639775-id-154471.html](http://blog.chinaunix.net/uid-20639775-id-154471.html)\n> [http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html](http://man.lupaworld.com/content/manage/Apache2.2_chinese_manual/mod/mod_rewrite.html)\n> [http://httpd.apache.org/docs/current/mod/mod_rewrite.html](http://httpd.apache.org/docs/current/mod/mod_rewrite.html)","slug":"Apache-Rewrite","published":1,"updated":"2020-01-17T07:57:49.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg88x0004n6yh3eircrd9"},{"title":"GitHub Pages/GitCafe Pages绑定自定义域名","date":"2014-11-09T10:32:11.000Z","_content":"## 更新记录\n2015-01-01 更新 GitCafe-Page IP地址\n2014-11-09 初稿\n\n虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为`username.github.io`或`username.github.com`,GitCafe为`username.gitcafe.com`），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。\n<!--more-->\n## 准备工作\n+ 域名（例：iblogc.com）\n+ 一个GitHub Pages/GitCafe Pages\n\n---\n## GitHub\n+ 在repo目录下创建一个名为`CNAME`的文件（无后缀）\n+ 打开CNAME，在里面写入你要绑定的域名\n + ~~1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com~~\n + ~~2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133~~\n + 请在域名管理里添加一条CNAME记录，指向username.github.io\n+ 等待生效 \n\n---\n## GitCafe\n+ 打开你自己的gitcafe pages项目，\n+ 进入 项目管理>>自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）\n+ QQ截图20141109181543.png)\n+ 在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以[官方说明](https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki)为准)。\n+ 等待生效\n\n\n","source":"_posts/Github-Pages-Gitcafe-Pages绑定自定义域名.md","raw":"title: GitHub Pages/GitCafe Pages绑定自定义域名\ndate: 2014-11-09 18:32:11\ncategories: [网站]\ntags: [域名,GitHub,GitCafe]\n---\n## 更新记录\n2015-01-01 更新 GitCafe-Page IP地址\n2014-11-09 初稿\n\n虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为`username.github.io`或`username.github.com`,GitCafe为`username.gitcafe.com`），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。\n<!--more-->\n## 准备工作\n+ 域名（例：iblogc.com）\n+ 一个GitHub Pages/GitCafe Pages\n\n---\n## GitHub\n+ 在repo目录下创建一个名为`CNAME`的文件（无后缀）\n+ 打开CNAME，在里面写入你要绑定的域名\n + ~~1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com~~\n + ~~2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133~~\n + 请在域名管理里添加一条CNAME记录，指向username.github.io\n+ 等待生效 \n\n---\n## GitCafe\n+ 打开你自己的gitcafe pages项目，\n+ 进入 项目管理>>自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）\n+ QQ截图20141109181543.png)\n+ 在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以[官方说明](https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki)为准)。\n+ 等待生效\n\n\n","slug":"Github-Pages-Gitcafe-Pages绑定自定义域名","published":1,"updated":"2020-01-17T07:55:54.741Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8930006n6yh15qdt3d1"},{"title":"UC和QQ浏览器私有META","date":"2015-05-05T16:43:08.000Z","_content":"## 什么是META\n> META是HTML语言中的一个标签，也称作元标记。<META> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。\n<!--more-->\n## UC的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏\n```\n<meta name=\"screen-orientation\" content=\"landscape/portrait\">\n```\n\n### 全屏\n```\n<meta name=\"full-screen\" content=\"yes\">\n```\n\n### xhtml适应屏幕排版\n\n默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。\n\n```\n<meta name=\"viewport\" content=\"uc-fitscreen=yes\"/>\n\n```\n\n### 排版模式\nUc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。\n```\n<meta name=\"layoutmode\" content=\"fitscreen/standard\" />\n```\n\n### 夜间模式\n\n允许进入夜间模式/禁止进入夜间模式\n```\n<meta name=\"nightmode\" content=\"enable/disable\"/>\n```\n\n### 强制显示图片，不受浏览器无图设置影响\n```\n<meta name=\"imagemode\" content=\"force\"/>\n```\n\n### 应用模式\n默认将全屏，禁止长按菜单，禁止手势，标准排版\n```\n<meta name=\"browsermode\" content=\"application\"/>\n```\n\n\n## QQ浏览器的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏/自动（默认）\n```\n<meta name=\"x5-orientation\" content=\"landscape/portrait/auto\"/>\n\n```\n\n### 全屏\n\n强制全屏/跟随浏览器（默认）\n```html \n<meta name=\"x5-fullscreen\" content=\"true/auto\"/>\n```\n\n### 页面模式\n普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）\n```html\n<meta name=\"x5-page-mode\" content=\"default/app\"/>\n```\n\n## 参考资料\n> http://www.uc.cn/business/developer/\n> http://open.mb.qq.com/doc?id=1201#_1\n\n\n\n\n","source":"_posts/UC和QQ浏览器私有META.md","raw":"title: \"UC和QQ浏览器私有META\"\ndate: 2015-05-06 00:43:08\ncategories: [网站]\ntags: [meta, 浏览器, 前端]\n---\n## 什么是META\n> META是HTML语言中的一个标签，也称作元标记。<META> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。<meta> 标签位于文档的头部，不包含任何内容，<meta> 标签的属性定义了与文档相关联的名称/值对。\n<!--more-->\n## UC的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏\n```\n<meta name=\"screen-orientation\" content=\"landscape/portrait\">\n```\n\n### 全屏\n```\n<meta name=\"full-screen\" content=\"yes\">\n```\n\n### xhtml适应屏幕排版\n\n默认值为uc-fitscreen=no，即不启用此功能，此时浏览器的缩放行为与标准一致。当设置为uc-fitscreen=yes，则当进行缩放操作时，仅放大图片和文字等页面元素，但不放大屏幕宽度，从而避免了左右滚动条的产生。\n\n```\n<meta name=\"viewport\" content=\"uc-fitscreen=yes\"/>\n\n```\n\n### 排版模式\nUc浏览器提供两种排版模式，分别是适屏模式及标准模式，其中适屏模式简化了一些页面的处理，使得页面内容更适合进行页面阅读、节省流量及响应更快，而标准模式则能按照标准规范对页面进行排版及渲染。通过新定义的标签及js api接口，可以让网页设计者执行决定采用何种排版方式向用户展现页面。\n```\n<meta name=\"layoutmode\" content=\"fitscreen/standard\" />\n```\n\n### 夜间模式\n\n允许进入夜间模式/禁止进入夜间模式\n```\n<meta name=\"nightmode\" content=\"enable/disable\"/>\n```\n\n### 强制显示图片，不受浏览器无图设置影响\n```\n<meta name=\"imagemode\" content=\"force\"/>\n```\n\n### 应用模式\n默认将全屏，禁止长按菜单，禁止手势，标准排版\n```\n<meta name=\"browsermode\" content=\"application\"/>\n```\n\n\n## QQ浏览器的私有META\n\n### 屏幕方向\n\n强制横屏/强制竖屏/自动（默认）\n```\n<meta name=\"x5-orientation\" content=\"landscape/portrait/auto\"/>\n\n```\n\n### 全屏\n\n强制全屏/跟随浏览器（默认）\n```html \n<meta name=\"x5-fullscreen\" content=\"true/auto\"/>\n```\n\n### 页面模式\n普通浏览模式（默认）/网页应用模式（定制工具栏，全屏显示）\n```html\n<meta name=\"x5-page-mode\" content=\"default/app\"/>\n```\n\n## 参考资料\n> http://www.uc.cn/business/developer/\n> http://open.mb.qq.com/doc?id=1201#_1\n\n\n\n\n","slug":"UC和QQ浏览器私有META","published":1,"updated":"2020-03-24T03:28:58.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8ai0008n6yhzwqsklik"},{"title":"WebFlux中mongo操作-Aggregation","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-01-17T07:12:53.000Z","_content":"<br>\n<!--more-->\n\nswitch\n\n```java\nConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(\n                BooleanOperators.And.and(\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus1\").equalToValue(\"已结算\"),\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus2\").equalToValue(\"已结算\")\n                )\n        ).then(\"已结清\");\n\n        Aggregation aggregation = Aggregation.newAggregation(\n                Aggregation.project(\"channelBillStatus1\", \"channelBillStatus2\")\n                        .and(ConditionalOperators.switchCases(cond).defaultTo(\"未结清\")).as(\"channelBillStatus\")\n        );\n        \n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\nlookup及id类型转换\n\n```java\n//把_id转成String并赋值给id\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\")\n          \t\t\t//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()\n                .and(ConvertOperators.ToString.toString(\"$_id\")).as(\"id\");\n        //用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组\n        Aggregation.lookup(\"chn_section\", \"id\", \"sectionId\", \"chnSections\");\n        //如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组\n        //如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true\n        Aggregation.unwind(\"chnSection\", true);\n        //只输出这些字段\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\", \"chnSections\");\n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\n如果lookup时，如果要对匹配的数据进行筛选（参考链接：https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\n\n```java\n//原始mongo\n//{\n//   $lookup:\n//     {\n//       from: <collection to join>,\n//       let: { <var_1>: <expression>, …, <var_n>: <expression> },\n//       pipeline: [ <pipeline to execute on the collection to join> ],\n//       as: <output array field>\n//     }\n//}\n//自定义一个AggregationOperation类\npublic class CustomProjectAggregationOperation implements AggregationOperation {\n    private String jsonOperation;\n\n    public CustomProjectAggregationOperation(String jsonOperation) {\n        this.jsonOperation = jsonOperation;\n    }\n\n    @Override\n    public Document toDocument(AggregationOperationContext aggregationOperationContext) {\n        return aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));\n    }\n}\n\nprivate static String getJsonOperation() {\n        return \"{\" +\n                \"    $lookup: \" +\n                \"    {\" +\n                \"        from: 'chn_set_meal',\" +\n                \"        let: {\" +\n                \"            id: { $toString: '$_id' }\" +\n                \"        },\" +\n                \"        pipeline: [\" +\n                \"            {\" +\n                \"                $match: \" +\n                \"                {\" +\n                \"                    $expr: \" +\n                \"                    {\" +\n                \"                        $and: \" +\n                \"                        [\" +\n                \"                            {\" +\n                \"                                $eq: ['$setMealId', '$$id']\" +\n                \"                            },\" +\n                \"                            {\" +\n                \"                                $eq: ['$cooperationState', '合作中']\" +\n                \"                            }\" +\n                \"                        ]\" +\n                \"                    }\" +\n                \"                }\" +\n                \"            },\" +\n                \"            {\" +\n                \"                $project: {\" +\n                \"                    channelId: 1,\" +\n                \"                    channelName: 1\" +\n                \"                    cooperationState: 1\" +\n                \"                }\" +\n                \"            }\" +\n                \"        ],\" +\n                \"        as: 'channels'\" +\n                \"    }\" +\n                \"}}\";\n    }\n\nAggregationOperation aggregationOperation = new CustomProjectAggregationOperation(getJsonOperation());\n        return reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);\n```\n\ngroup\n\n```java\n//背景：查询交易表，订单和交易一对多\nAggregation.group(\"orderNo\")\n  //单一组的金额汇总\n  .sum(\"amount\").as(\"totalAmount\")\n  //组的最后一个订单号\n  .last(\"orderNo\").as(\"orderNo\")\n  //组里数据条数\n  .count().as(\"tradeCount\")\n  //把一组数据里每条数据的状态放到一个statuses数组里\n  .addToSet(\"status\").as(\"statuses\")\n  //把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里\n  .push(new BasicDBObject(\"tradeContent\", \"$tradeContent\")\n        .append(\"tradeNo\", \"$tradeNo\")\n        .append(\"amount\", \"$amount\")\n       ).as(\"billItems\");\n```","source":"_posts/WebFlux中mongo操作-Aggregation.md","raw":"---\ntitle: WebFlux中mongo操作-Aggregation\ncomments: true\ncategories: [程序猿]\ntags: [Java, Reactive, 事务, mongo, 数据库, Aggregation]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-01-17 15:12:53\n---\n<br>\n<!--more-->\n\nswitch\n\n```java\nConditionalOperators.Switch.CaseOperator cond = ConditionalOperators.Switch.CaseOperator.when(\n                BooleanOperators.And.and(\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus1\").equalToValue(\"已结算\"),\n                        ComparisonOperators.Eq.valueOf(\"channelBillStatus2\").equalToValue(\"已结算\")\n                )\n        ).then(\"已结清\");\n\n        Aggregation aggregation = Aggregation.newAggregation(\n                Aggregation.project(\"channelBillStatus1\", \"channelBillStatus2\")\n                        .and(ConditionalOperators.switchCases(cond).defaultTo(\"未结清\")).as(\"channelBillStatus\")\n        );\n        \n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\nlookup及id类型转换\n\n```java\n//把_id转成String并赋值给id\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\")\n          \t\t\t//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()\n                .and(ConvertOperators.ToString.toString(\"$_id\")).as(\"id\");\n        //用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组\n        Aggregation.lookup(\"chn_section\", \"id\", \"sectionId\", \"chnSections\");\n        //如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组\n        //如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true\n        Aggregation.unwind(\"chnSection\", true);\n        //只输出这些字段\n        Aggregation.project(\"internalId\", \"name\", \"isAvailable\", \"isCanAdd\", \"fitGender\", \"fitAge\", \"fitMaritalStatus\", \"price\", \"sortNo\", \"createdAt\", \"chnSections\");\n        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);\n```\n\n如果lookup时，如果要对匹配的数据进行筛选（参考链接：https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\n\n```java\n//原始mongo\n//{\n//   $lookup:\n//     {\n//       from: <collection to join>,\n//       let: { <var_1>: <expression>, …, <var_n>: <expression> },\n//       pipeline: [ <pipeline to execute on the collection to join> ],\n//       as: <output array field>\n//     }\n//}\n//自定义一个AggregationOperation类\npublic class CustomProjectAggregationOperation implements AggregationOperation {\n    private String jsonOperation;\n\n    public CustomProjectAggregationOperation(String jsonOperation) {\n        this.jsonOperation = jsonOperation;\n    }\n\n    @Override\n    public Document toDocument(AggregationOperationContext aggregationOperationContext) {\n        return aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));\n    }\n}\n\nprivate static String getJsonOperation() {\n        return \"{\" +\n                \"    $lookup: \" +\n                \"    {\" +\n                \"        from: 'chn_set_meal',\" +\n                \"        let: {\" +\n                \"            id: { $toString: '$_id' }\" +\n                \"        },\" +\n                \"        pipeline: [\" +\n                \"            {\" +\n                \"                $match: \" +\n                \"                {\" +\n                \"                    $expr: \" +\n                \"                    {\" +\n                \"                        $and: \" +\n                \"                        [\" +\n                \"                            {\" +\n                \"                                $eq: ['$setMealId', '$$id']\" +\n                \"                            },\" +\n                \"                            {\" +\n                \"                                $eq: ['$cooperationState', '合作中']\" +\n                \"                            }\" +\n                \"                        ]\" +\n                \"                    }\" +\n                \"                }\" +\n                \"            },\" +\n                \"            {\" +\n                \"                $project: {\" +\n                \"                    channelId: 1,\" +\n                \"                    channelName: 1\" +\n                \"                    cooperationState: 1\" +\n                \"                }\" +\n                \"            }\" +\n                \"        ],\" +\n                \"        as: 'channels'\" +\n                \"    }\" +\n                \"}}\";\n    }\n\nAggregationOperation aggregationOperation = new CustomProjectAggregationOperation(getJsonOperation());\n        return reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);\n```\n\ngroup\n\n```java\n//背景：查询交易表，订单和交易一对多\nAggregation.group(\"orderNo\")\n  //单一组的金额汇总\n  .sum(\"amount\").as(\"totalAmount\")\n  //组的最后一个订单号\n  .last(\"orderNo\").as(\"orderNo\")\n  //组里数据条数\n  .count().as(\"tradeCount\")\n  //把一组数据里每条数据的状态放到一个statuses数组里\n  .addToSet(\"status\").as(\"statuses\")\n  //把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里\n  .push(new BasicDBObject(\"tradeContent\", \"$tradeContent\")\n        .append(\"tradeNo\", \"$tradeNo\")\n        .append(\"amount\", \"$amount\")\n       ).as(\"billItems\");\n```","slug":"WebFlux中mongo操作-Aggregation","published":1,"updated":"2020-01-17T08:01:32.735Z","layout":"post","photos":[],"link":"","_id":"ck9beg8b8000an6yh97ojc65n"},{"title":"WebFlux中mongo操作-Transaction","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-01-17T07:16:46.000Z","_content":"<br>\n<!--more-->\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> action.insert(aDocument)\n             .flatMap(a -> {\n               cDocument.setName(a.getName() + \"copy\");\n               return action.insert(cDocument)\n                 .map(d -> {\n                   if (exception) {\n                     //测试跨文档的异常回滚\n                     throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                   }\n                   return d;\n                 });\n             })\n            )\n    //如果里面是个mono，则用next取出第一个元素就是里面的mono\n    .next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```\n\nflux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序\n\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> Flux.fromIterable(\"1\", \"2\", \"3\")\n             //如果是个flux此处要用concatMap保持有序不能用flatMap\n             .concatMap(i -> action.insert(aDocument)\n                        .flatMap(a -> {\n                          cDocument.setName(a.getName() + \"copy\");\n                          return action.insert(cDocument)\n                            .map(d -> {\n                              if (exception) {\n                                //测试跨文档的异常回滚\n                                throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                              }\n                              return d;\n                            });\n                        }));\n            )\n    //如果里面返回的就是一个flux则不需要使用next\n    //.next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```","source":"_posts/WebFlux中mongo操作-Transaction.md","raw":"---\ntitle: WebFlux中mongo操作-Transaction\ncomments: true\ncategories: [程序猿]\ntags: [Java, Reactive, 事务, mongo, 数据库, Flux, mongo]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-01-17 15:16:46\n---\n<br>\n<!--more-->\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> action.insert(aDocument)\n             .flatMap(a -> {\n               cDocument.setName(a.getName() + \"copy\");\n               return action.insert(cDocument)\n                 .map(d -> {\n                   if (exception) {\n                     //测试跨文档的异常回滚\n                     throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                   }\n                   return d;\n                 });\n             })\n            )\n    //如果里面是个mono，则用next取出第一个元素就是里面的mono\n    .next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```\n\nflux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序\n\n```java\n@PostMapping(\"/test\")\npublic Mono testA(@RequestParam boolean exception) {\n  return embedService.saveAC(new ADocument(\"张三\"), new CDocument(\"李四\"), exception);\n}\n\n@Override\npublic Mono<Boolean> saveAC(ADocument aDocument, CDocument cDocument, boolean exception) {\n  return reactiveMongoTemplate.inTransaction()\n    //所有文档的持久化操作都只能在单独一个execute函数中汇总实现\n    .execute(action -> Flux.fromIterable(\"1\", \"2\", \"3\")\n             //如果是个flux此处要用concatMap保持有序不能用flatMap\n             .concatMap(i -> action.insert(aDocument)\n                        .flatMap(a -> {\n                          cDocument.setName(a.getName() + \"copy\");\n                          return action.insert(cDocument)\n                            .map(d -> {\n                              if (exception) {\n                                //测试跨文档的异常回滚\n                                throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n                              }\n                              return d;\n                            });\n                        }));\n            )\n    //如果里面返回的就是一个flux则不需要使用next\n    //.next()\n    .map(list -> {\n      //需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。\n      //                    if (exception) {\n      //                        throw Exceptions.propagate(new RuntimeException(\"模拟异常的出现\"));\n      //                    }\n      return Boolean.TRUE;\n    });\n}\n```","slug":"WebFlux中mongo操作-Transaction","published":1,"updated":"2020-01-17T08:01:36.430Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bb000cn6yh5lxecdwv"},{"title":"SpringWebFlux使用笔记","date":"2019-02-28T05:32:59.000Z","_content":"记录使用SpringWebFlux的一些笔记。\n\n\n<!--more-->\n\n## groupBy\n\n对flux进行分组。\n```java\nchannelOnlineCityBoFlux.sort((s1, s2) -> Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))\n  .groupBy(city -> city.getInitial().substring(0, 1).toUpperCase())\n  .sort((s1, s2) -> Objects.requireNonNull(s1.key()).compareTo(s2.key()))\n  .flatMap(gf -> gf.collectList()\n          .map(cityList -> {\n              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = new ChannelOnlineCityGroupByPinYinBo();\n              cityGroupByPinYinBo.setLetter(gf.key());\n              cityGroupByPinYinBo.setCities(cityList);\n              return cityGroupByPinYinBo;\n          }));\n```\n\n## handle\n\nhandle作用相当于是filter和map的组合。\n\n<iframe\n  src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\"\n  style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>","source":"_posts/SpringWebFlux.md","raw":"title: SpringWebFlux使用笔记\ndate: 2019-02-28 13:32:59\ncategories: [程序猿]\ntags: [Java, Reactive]\n---\n记录使用SpringWebFlux的一些笔记。\n\n\n<!--more-->\n\n## groupBy\n\n对flux进行分组。\n```java\nchannelOnlineCityBoFlux.sort((s1, s2) -> Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))\n  .groupBy(city -> city.getInitial().substring(0, 1).toUpperCase())\n  .sort((s1, s2) -> Objects.requireNonNull(s1.key()).compareTo(s2.key()))\n  .flatMap(gf -> gf.collectList()\n          .map(cityList -> {\n              ChannelOnlineCityGroupByPinYinBo cityGroupByPinYinBo = new ChannelOnlineCityGroupByPinYinBo();\n              cityGroupByPinYinBo.setLetter(gf.key());\n              cityGroupByPinYinBo.setCities(cityList);\n              return cityGroupByPinYinBo;\n          }));\n```\n\n## handle\n\nhandle作用相当于是filter和map的组合。\n\n<iframe\n  src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\"\n  style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\">\n</iframe>","slug":"SpringWebFlux","published":1,"updated":"2020-01-17T07:15:06.398Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8bf000en6yhyp05b4wm"},{"title":"Android真机调试常用命令","comments":1,"date":"2019-04-28T12:39:32.000Z","_content":"\n使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。\n<!--more-->\n\n\n## 无线调试\n\n```\n# 前提条件：手机和电脑处理同一网段\n# 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态\nadb tcpip <port>\n\n# 在手机上查看ip地址或使用以下命令查看ip\nadb shell ifconfig \n# 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）\nadb connect <ip> :<port>\n# 查看连接的设备\nadb devices\n```\n\n## 截图\n\n```\n# 截图并保存到手机sd卡的下\nadb shell screencap -p /sdcard/screenshot.png\n```\n\n便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n`vi shot.sh`\n\n```\n#!/bin/bash\n# Android截图，定位和预览默认关闭，请取消注释\n\ndd=`date +%Y-%m-%d-%H-%M-%S`\npwd=`pwd`\nadb shell screencap -p /sdcard/screenshot.png\nadb pull /sdcard/screenshot.png\nadb shell rm /sdcard/screenshot.png\nmv screenshot.png $dd.png\necho \"截图已保存为当前目录下的\"$dd.png\n# 修改图片尺寸，长或宽最大不超过960，等比缩放\necho \"压缩图片...\"\nsips -Z 960 $pwd/$dd.png\n# 定位到文件\nopen ./$dd.png -R\n# 打开预览\nopen -a Preview $dd.png\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.png\necho \"截图已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x shot.sh\n```\n\n使用方法\n\n```\n./shot.sh\n```\n\n⌘+v试试\n\n*可把命令添加alias别名*\n\n## 录屏\n\n```\n# 执行录屏并保存到手机sd卡目录下（默认时长180s）\n# 可配置参数\n# --time-limit: 录制时长，单位秒\n# --size: 分辨率，如1280*720，不指定默认使用手机的分辨率\n# --bit-rate: 视频的比特率，如6Mbps为6000000\n# --verbose: 命令行显示log\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n\n`vi record.sh`\n\n```\n#!/bin/bash\n# Android录屏\ndd=`date +%Y-%m-%d-%H-%M-%S`\"-$1s\"\npwd=`pwd`\nadb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4\nadb pull /sdcard/screenrecord.mp4\nadb shell rm /sdcard/screenrecord.mp4\nmv screenrecord.mp4 $dd.mp4\necho \"$1秒视频已保存为当前目录下的\"$dd.mp4\n# 定位到文件\nopen ./$dd.mp4 -R\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.mp4\necho \"$1秒视频已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x record.sh\n```\n\n使用方法\n```\n# 3为录制秒数，可修改\n./record.sh 3\n```","source":"_posts/android真机调试常用命令.md","raw":"---\ntitle: Android真机调试常用命令\ncomments: true\ntags: [Android,macOS,命令,效率,无线,调试,adb,USB]\ncategories: [程序员]\ndate: 2019-04-28 20:39:32\n---\n\n使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。\n<!--more-->\n\n\n## 无线调试\n\n```\n# 前提条件：手机和电脑处理同一网段\n# 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态\nadb tcpip <port>\n\n# 在手机上查看ip地址或使用以下命令查看ip\nadb shell ifconfig \n# 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）\nadb connect <ip> :<port>\n# 查看连接的设备\nadb devices\n```\n\n## 截图\n\n```\n# 截图并保存到手机sd卡的下\nadb shell screencap -p /sdcard/screenshot.png\n```\n\n便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n`vi shot.sh`\n\n```\n#!/bin/bash\n# Android截图，定位和预览默认关闭，请取消注释\n\ndd=`date +%Y-%m-%d-%H-%M-%S`\npwd=`pwd`\nadb shell screencap -p /sdcard/screenshot.png\nadb pull /sdcard/screenshot.png\nadb shell rm /sdcard/screenshot.png\nmv screenshot.png $dd.png\necho \"截图已保存为当前目录下的\"$dd.png\n# 修改图片尺寸，长或宽最大不超过960，等比缩放\necho \"压缩图片...\"\nsips -Z 960 $pwd/$dd.png\n# 定位到文件\nopen ./$dd.png -R\n# 打开预览\nopen -a Preview $dd.png\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.png\necho \"截图已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x shot.sh\n```\n\n使用方法\n\n```\n./shot.sh\n```\n\n⌘+v试试\n\n*可把命令添加alias别名*\n\n## 录屏\n\n```\n# 执行录屏并保存到手机sd卡目录下（默认时长180s）\n# 可配置参数\n# --time-limit: 录制时长，单位秒\n# --size: 分辨率，如1280*720，不指定默认使用手机的分辨率\n# --bit-rate: 视频的比特率，如6Mbps为6000000\n# --verbose: 命令行显示log\nadb shell screenrecord /sdcard/demo.mp4\n```\n\n便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）\n\n> 因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。\n\n\n`vi record.sh`\n\n```\n#!/bin/bash\n# Android录屏\ndd=`date +%Y-%m-%d-%H-%M-%S`\"-$1s\"\npwd=`pwd`\nadb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4\nadb pull /sdcard/screenrecord.mp4\nadb shell rm /sdcard/screenrecord.mp4\nmv screenrecord.mp4 $dd.mp4\necho \"$1秒视频已保存为当前目录下的\"$dd.mp4\n# 定位到文件\nopen ./$dd.mp4 -R\n# 复制到剪切板\nosascript -e 'on run args' -e 'set the clipboard to POSIX file (first item of args)' -e end $pwd/$dd.mp4\necho \"$1秒视频已复制到剪切板\"\n```\n\n授予执行权限\n```\nchmod a+x record.sh\n```\n\n使用方法\n```\n# 3为录制秒数，可修改\n./record.sh 3\n```","slug":"android真机调试常用命令","published":1,"updated":"2019-07-16T05:50:48.949Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bj000gn6yh6k72vsqc"},{"title":"自用软件推荐","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2019-10-12T08:40:17.000Z","_content":"\n日用软件/效率提升/开发工具/Chorme插件扩展推荐\n<!--more-->\n\n#### 应用\n\n##### 日常\n\n1. **[Alfred](https://www.alfredapp.com/)**(macOS)\n\n      Mac上的效率启动神器\n\n2. **[uTools](https://u.tools/)**(macOS/Windows/Linux)\n\n     > 你的生产力工具集.\n     >\n     > uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。\n     >\n     > 当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n     除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈\n\n3. **[WGestures](http://www.yingdev.com/projects/wgestures)**(Windows)\n\n      系统鼠标手势 \n\n4. **[Snipaste](https://zh.snipaste.com/)**(macOS/Windows)\n\n      截图/贴图\n\n5. **[Everything](https://www.voidtools.com/)**(Windows)\n\n      Windows本地搜索，快如闪电，用过就回不去\n\n6. **[Rolan](http://www.irolan.com/)**(Windows)\n\n     Windows上的快速启动器 \n\n7. **[Rime](http://rime.im/)**(macOS/Windows/Linux)\n\n      输入法\n\n8. **[多台设备共用键鼠](https://symless.com/synergy/)**(macOS/Windows/Linux)\n\n      多台设备共用键鼠\n\n9. **[Shadowsocks/v2rayNG/v2ray]**(macOS/Windows/Linux/Android）\n\n      科学上网\n\n10. **[AppCleaner](https://freemacsoft.net/appcleaner/)**(macOS）\n\n      应用卸载器 \n\n11. **[Typora](https://www.typora.io/)**(macOS/Windows/Linux）\n\n      markdown笔记写作应用，配合坚果云或Dropbox同步，爽\n\n12. **[SumatraPDF](https://www.sumatrapdfreader.org/)**(Windows）\n\n      PDF阅读器\n\n13. **[EagleGet](http://www.eagleget.com/)**(Windows）\n\n     下载器\n\n14. **[Free Download Manager](https://www.freedownloadmanager.org/zh/)**(macOS/Windows）\n\n      下载器\n\n15. **[Bandizip](https://www.bandisoft.com/bandizip/cn/)**(macOS/Windows）\n\n      压缩/解压软件\n\n16. **[eZip](https://ezip.awehunt.com/)**(macOS/Windows）\n\n      压缩/解压软件\n\n17. **[reveal.js](https://github.com/hakimel/reveal.js)**(Web）\n\n      程序员的PPT工具\n\n18. **[Xnip](https://zh.xnipapp.com/)**(macOS）\n\n      截图应用\n\n19. **[pap.er](https://paper.meiyuan.in/)**(macOS）\n\n      壁纸应用\n\n20. **[aText](https://trankynam.com/atext/)**(macOS/Windows）\n\n      文字输入效率提升工具\n\n##### 开发\n\n22. **[Cmder](https://github.com/cmderdev/cmder)**(Windows)\n\n      Windows默认命令行替代品 \n\n23. **[Insomnia](https://insomnia.rest/)**(macOS/Windows/Linux)\n\n    跨平台的REST客户端\n\n24. **[postman](https://www.getpostman.com/)**(macOS/Windows/Linux/~~Chrome App~~)\n\n      跨平台的接口调试工具，有mocks服务和接口文档生成功能\n\n25. **[iTerm2](https://iterm2.com/)**(macOS)\n\n      终端应用\n\n26. **[hyper](https://hyper.is/)**(macOS/Windows/Linux)\n\n      漂亮的终端应用\n\n27. **[Fiddler](http://www.telerik.com/fiddler)**(macOS/Windows/Linux)\n\n      抓包工具\n\n28. **[Charles](https://www.charlesproxy.com/)**(macOS/Windows/Linux)\n\n      抓包工具\n\n29. **[frp](https://github.com/fatedier/frp)**(macOS/Windows/Linux)\n      内网穿透\n\n#### Chrome\n\n##### 扩展/应用\n\n1. **Adblock Plus**\n\n      广告拦截器，谁用谁知道\n\n2. **Checker Plus for Gmail™**\n\n      Gmail/Inbox插件，不用打开网页处理邮件\n\n3. **Dark Reader**\n\n      黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览\n\n4. **Extensity**\n\n      扩展管理工具，快速的启用/禁用\n\n5. **Wappalyzer**\n\n      探测当前网页正在使用的开源软件或者js类库\n\n6. **Ghostery**\n\n      了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n7. **Google翻译**\n\n   支付在网页中划词翻译\n\n8. **彩云小译**\n\n      网页翻译插件\n\n9. **LastPass**\n\n      密码管理\n\n10. **Tampermonkey**\n\n      给网站添加自定义脚本\n\n11. **Stylish**\n\n      给网站添加自定义样式表\n\n12. **Web Server for Chrome**\n\n      快速搭建本地Web服务器(当然，你也可以`python -m http.server`)\n\n13. **Octotree**\n\n      在浏览器左侧树形展示Github代码。\n\n14. **Prism Pretty**\n\n      美化代码（html、css、js、json……）\n\n15. **Proxy SwitchyOmega**\n\n      你懂的\n\n16. **v2ex plus**\n\n      优雅便捷的 V2EX 扩展\n\n17. **Toby for Chrome**\n\n      标签页管理/稍后阅读/资料归档分类...\n\n18. **Web Scraper**\n\n      图形化创建爬虫，爬取网站数据\n\n19. **惠惠购物助手/购物党自动比价工具**\n\n      在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n20. **Google Keep**\n\n      记事和清单","source":"_posts/awesome-software.md","raw":"---\ntitle: 自用软件推荐\ncomments: true\ntags: [软件, 推荐, 效率]\ncategories: [工具]\ntoc: true\nvisible: show\nindexing: true\ndate: 2019-10-12 16:40:17\n---\n\n日用软件/效率提升/开发工具/Chorme插件扩展推荐\n<!--more-->\n\n#### 应用\n\n##### 日常\n\n1. **[Alfred](https://www.alfredapp.com/)**(macOS)\n\n      Mac上的效率启动神器\n\n2. **[uTools](https://u.tools/)**(macOS/Windows/Linux)\n\n     > 你的生产力工具集.\n     >\n     > uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。\n     >\n     > 当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。\n\n     除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈\n\n3. **[WGestures](http://www.yingdev.com/projects/wgestures)**(Windows)\n\n      系统鼠标手势 \n\n4. **[Snipaste](https://zh.snipaste.com/)**(macOS/Windows)\n\n      截图/贴图\n\n5. **[Everything](https://www.voidtools.com/)**(Windows)\n\n      Windows本地搜索，快如闪电，用过就回不去\n\n6. **[Rolan](http://www.irolan.com/)**(Windows)\n\n     Windows上的快速启动器 \n\n7. **[Rime](http://rime.im/)**(macOS/Windows/Linux)\n\n      输入法\n\n8. **[多台设备共用键鼠](https://symless.com/synergy/)**(macOS/Windows/Linux)\n\n      多台设备共用键鼠\n\n9. **[Shadowsocks/v2rayNG/v2ray]**(macOS/Windows/Linux/Android）\n\n      科学上网\n\n10. **[AppCleaner](https://freemacsoft.net/appcleaner/)**(macOS）\n\n      应用卸载器 \n\n11. **[Typora](https://www.typora.io/)**(macOS/Windows/Linux）\n\n      markdown笔记写作应用，配合坚果云或Dropbox同步，爽\n\n12. **[SumatraPDF](https://www.sumatrapdfreader.org/)**(Windows）\n\n      PDF阅读器\n\n13. **[EagleGet](http://www.eagleget.com/)**(Windows）\n\n     下载器\n\n14. **[Free Download Manager](https://www.freedownloadmanager.org/zh/)**(macOS/Windows）\n\n      下载器\n\n15. **[Bandizip](https://www.bandisoft.com/bandizip/cn/)**(macOS/Windows）\n\n      压缩/解压软件\n\n16. **[eZip](https://ezip.awehunt.com/)**(macOS/Windows）\n\n      压缩/解压软件\n\n17. **[reveal.js](https://github.com/hakimel/reveal.js)**(Web）\n\n      程序员的PPT工具\n\n18. **[Xnip](https://zh.xnipapp.com/)**(macOS）\n\n      截图应用\n\n19. **[pap.er](https://paper.meiyuan.in/)**(macOS）\n\n      壁纸应用\n\n20. **[aText](https://trankynam.com/atext/)**(macOS/Windows）\n\n      文字输入效率提升工具\n\n##### 开发\n\n22. **[Cmder](https://github.com/cmderdev/cmder)**(Windows)\n\n      Windows默认命令行替代品 \n\n23. **[Insomnia](https://insomnia.rest/)**(macOS/Windows/Linux)\n\n    跨平台的REST客户端\n\n24. **[postman](https://www.getpostman.com/)**(macOS/Windows/Linux/~~Chrome App~~)\n\n      跨平台的接口调试工具，有mocks服务和接口文档生成功能\n\n25. **[iTerm2](https://iterm2.com/)**(macOS)\n\n      终端应用\n\n26. **[hyper](https://hyper.is/)**(macOS/Windows/Linux)\n\n      漂亮的终端应用\n\n27. **[Fiddler](http://www.telerik.com/fiddler)**(macOS/Windows/Linux)\n\n      抓包工具\n\n28. **[Charles](https://www.charlesproxy.com/)**(macOS/Windows/Linux)\n\n      抓包工具\n\n29. **[frp](https://github.com/fatedier/frp)**(macOS/Windows/Linux)\n      内网穿透\n\n#### Chrome\n\n##### 扩展/应用\n\n1. **Adblock Plus**\n\n      广告拦截器，谁用谁知道\n\n2. **Checker Plus for Gmail™**\n\n      Gmail/Inbox插件，不用打开网页处理邮件\n\n3. **Dark Reader**\n\n      黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览\n\n4. **Extensity**\n\n      扩展管理工具，快速的启用/禁用\n\n5. **Wappalyzer**\n\n      探测当前网页正在使用的开源软件或者js类库\n\n6. **Ghostery**\n\n      了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n7. **Google翻译**\n\n   支付在网页中划词翻译\n\n8. **彩云小译**\n\n      网页翻译插件\n\n9. **LastPass**\n\n      密码管理\n\n10. **Tampermonkey**\n\n      给网站添加自定义脚本\n\n11. **Stylish**\n\n      给网站添加自定义样式表\n\n12. **Web Server for Chrome**\n\n      快速搭建本地Web服务器(当然，你也可以`python -m http.server`)\n\n13. **Octotree**\n\n      在浏览器左侧树形展示Github代码。\n\n14. **Prism Pretty**\n\n      美化代码（html、css、js、json……）\n\n15. **Proxy SwitchyOmega**\n\n      你懂的\n\n16. **v2ex plus**\n\n      优雅便捷的 V2EX 扩展\n\n17. **Toby for Chrome**\n\n      标签页管理/稍后阅读/资料归档分类...\n\n18. **Web Scraper**\n\n      图形化创建爬虫，爬取网站数据\n\n19. **惠惠购物助手/购物党自动比价工具**\n\n      在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n20. **Google Keep**\n\n      记事和清单","slug":"awesome-software","published":1,"updated":"2020-04-02T09:04:45.988Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bl000in6yhkd19up2c"},{"title":"在Android Chrome以app形式打开网站","date":"2015-05-11T02:34:14.000Z","_content":"前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。\n<!--more-->\n\n## 添加配置文件\n在网站根目录添加`manifest.json`，并进行相应配置\n```json\n{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"launcher-icon-0-75x.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"launcher-icon-1-5x.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"launcher-icon-3x.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}\n\n```\n\n## 在网站公用头部引入配置文件\n```\n<link rel=\"manifest\" href=\"manifest.json\">\n```\n## 查看效果\n在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：\n![chrome-add-to-homescreen-01](/media/chrome-add-to-homescreen-01.png)\n![chrome-add-to-homescreen-02](/media/chrome-add-to-homescreen-02.png)\nPS:地址栏是不是不见了,看着像app而不是网页\n![chrome-add-to-homescreen-03](/media/chrome-add-to-homescreen-03.png)\n![chrome-add-to-homescreen-04](/media/chrome-add-to-homescreen-04.png)\n\n## 扩展\nios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章[http://www.prower.cn/technic/2314](http://www.prower.cn/technic/2314)\n\n## 参考资料\n> [https://developer.chrome.com/multidevice/android/installtohomescreen](https://developer.chrome.com/multidevice/android/installtohomescreen)\n\n\n","source":"_posts/chrome-add-to-homescreen.md","raw":"title: 在Android Chrome以app形式打开网站\ndate: 2015-05-11 10:34:14\ncategories: [网站]\ntags: [Android, Chrome]\n---\n前面一篇文章我讲到了在UC网站可以以app形式打开，其实在Android Chrome浏览器上也支持此功能。\n<!--more-->\n\n## 添加配置文件\n在网站根目录添加`manifest.json`，并进行相应配置\n```json\n{\n  \"name\": \"iblogc\",\n  \"icons\": [\n    {\n      \"src\": \"launcher-icon-0-75x.png\",\n      \"sizes\": \"36x36\",\n      \"type\": \"image/png\",\n      \"density\": \"0.75\"\n    },\n    {\n      \"src\": \"launcher-icon-1x.png\",\n      \"sizes\": \"48x48\",\n      \"type\": \"image/png\",\n      \"density\": \"1.0\"\n    },\n    {\n      \"src\": \"launcher-icon-1-5x.png\",\n      \"sizes\": \"72x72\",\n      \"type\": \"image/png\",\n      \"density\": \"1.5\"\n    },\n    {\n      \"src\": \"launcher-icon-2x.png\",\n      \"sizes\": \"96x96\",\n      \"type\": \"image/png\",\n      \"density\": \"2.0\"\n    },\n    {\n      \"src\": \"launcher-icon-3x.png\",\n      \"sizes\": \"144x144\",\n      \"type\": \"image/png\",\n      \"density\": \"3.0\"\n    },\n    {\n      \"src\": \"launcher-icon-4x.png\",\n      \"sizes\": \"192x192\",\n      \"type\": \"image/png\",\n      \"density\": \"4.0\"\n    }\n  ],\n  \"start_url\": \"index.html\",\n  \"display\": \"standalone\",\n  \"orientation\": \"portrait\"\n}\n\n```\n\n## 在网站公用头部引入配置文件\n```\n<link rel=\"manifest\" href=\"manifest.json\">\n```\n## 查看效果\n在Android使用Chrome打开网站，点击memu，选择“添加到主屏幕”选项，点击就可以添加到主屏幕了，步骤及显示效果截图如下：\n![chrome-add-to-homescreen-01](/media/chrome-add-to-homescreen-01.png)\n![chrome-add-to-homescreen-02](/media/chrome-add-to-homescreen-02.png)\nPS:地址栏是不是不见了,看着像app而不是网页\n![chrome-add-to-homescreen-03](/media/chrome-add-to-homescreen-03.png)\n![chrome-add-to-homescreen-04](/media/chrome-add-to-homescreen-04.png)\n\n## 扩展\nios的safari也有此功能，因手头无ios设备测试不了，所以内容不写了，大家可以参考此文章[http://www.prower.cn/technic/2314](http://www.prower.cn/technic/2314)\n\n## 参考资料\n> [https://developer.chrome.com/multidevice/android/installtohomescreen](https://developer.chrome.com/multidevice/android/installtohomescreen)\n\n\n","slug":"chrome-add-to-homescreen","published":1,"updated":"2020-01-17T07:57:41.851Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8bm000jn6yh4jd8c3i0"},{"title":"Chrome扩展/插件/应用推荐","comments":1,"date":"2016-06-01T15:22:35.000Z","sticky":null,"_content":"<br/>\n本文过期，请前行住[自用软件推荐](/2019/10/12/awesome-software/)查看最新内容\n<!--more-->\n## 插件/扩展\n1. **Adblock Plus**\n广告拦截器，谁用谁知道。\n\n2. **Checker Plus for Gmail™**\nGmail/Inbox插件，不用打开网页处理邮件。\n\n3. **Wappalyzer**\n探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。\n\n4. **crxMouse Chrome Gestures**\n鼠标手势。\n\n5. **Ghostery**\n了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n6. **Google Keep Chrome 扩展程序**\n将网页快速的保存到Google Keep中。\n\n7. **Google翻译**\n支付在网页中划词翻译。\n\n8. **划词翻译**\n划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。\n\n9. **LastPass**\n免费的密码管理管理器。\n\n10. **MindMap Tab**\n在新标签页中快速编辑思维导图。\n\n11. **Octotree**\n在浏览器左侧树形展示Github代码。\n\n12. **Prism Pretty**\n美化代码（html、css、js、json……）\n\n13. **Proxy SwitchyOmega**\n你懂的。\n\n14. **Pushbullet**\n快速的往其它设备发送消息。\n\n15. **Save to Pocket**\n快速保存网页到Pocket。\n\n16. **Search by Image (by Google)**\n浏览器右键增加Google的以图搜图功能。\n\n17. **v2ex plus**\n优雅便捷的 V2EX 扩展。\n\n18. **Web Timer**\n每个网站停留时间统计。\n\n19. **为知笔记网页剪辑器**\n配合为知笔记，快速保存网页内容到为知笔记。\n\n20. **二维码（生成及识别）**\n生成或识别二维码。\n\n21. **惠惠购物助手**\n在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n22. **新浪微博图床**\n微博是个好图床。\n\n23. **网页截图:注释&批注**\n捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。\n\n## 应用\n\n1. **Postman**\n功能强大的接口调试工具。\n\n2. **Google Keep - 记事和清单**\n不解释。\n\n3. **Pocket**\n不解释。\n\n4. **JSON Editor**\n图形化json编辑工具。","source":"_posts/chrome扩展-插件-应用推荐.md","raw":"title: Chrome扩展/插件/应用推荐\ncomments: true\ndate: 2016-06-01 23:22:35\ncategories: [优化辅助]\ntags: [工具, Chrome, 扩展, 插件]\nsticky:\n---\n<br/>\n本文过期，请前行住[自用软件推荐](/2019/10/12/awesome-software/)查看最新内容\n<!--more-->\n## 插件/扩展\n1. **Adblock Plus**\n广告拦截器，谁用谁知道。\n\n2. **Checker Plus for Gmail™**\nGmail/Inbox插件，不用打开网页处理邮件。\n\n3. **Wappalyzer**\n探测当前网页正在使用的开源软件或者js类库，web开发者必备神器。\n\n4. **crxMouse Chrome Gestures**\n鼠标手势。\n\n5. **Ghostery**\n了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。\n\n6. **Google Keep Chrome 扩展程序**\n将网页快速的保存到Google Keep中。\n\n7. **Google翻译**\n支付在网页中划词翻译。\n\n8. **划词翻译**\n划词翻译，支持谷歌、百度、有道、必应四大翻译和朗读引擎，访问Google比较因难的的可以用这个。\n\n9. **LastPass**\n免费的密码管理管理器。\n\n10. **MindMap Tab**\n在新标签页中快速编辑思维导图。\n\n11. **Octotree**\n在浏览器左侧树形展示Github代码。\n\n12. **Prism Pretty**\n美化代码（html、css、js、json……）\n\n13. **Proxy SwitchyOmega**\n你懂的。\n\n14. **Pushbullet**\n快速的往其它设备发送消息。\n\n15. **Save to Pocket**\n快速保存网页到Pocket。\n\n16. **Search by Image (by Google)**\n浏览器右键增加Google的以图搜图功能。\n\n17. **v2ex plus**\n优雅便捷的 V2EX 扩展。\n\n18. **Web Timer**\n每个网站停留时间统计。\n\n19. **为知笔记网页剪辑器**\n配合为知笔记，快速保存网页内容到为知笔记。\n\n20. **二维码（生成及识别）**\n生成或识别二维码。\n\n21. **惠惠购物助手**\n在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。\n\n22. **新浪微博图床**\n微博是个好图床。\n\n23. **网页截图:注释&批注**\n捕获整个页面或任何部分，矩形，圆形，箭头，线条和文字，模糊敏感信息，一键上传分享。\n\n## 应用\n\n1. **Postman**\n功能强大的接口调试工具。\n\n2. **Google Keep - 记事和清单**\n不解释。\n\n3. **Pocket**\n不解释。\n\n4. **JSON Editor**\n图形化json编辑工具。","slug":"chrome扩展-插件-应用推荐","published":1,"updated":"2020-01-17T07:57:33.175Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bn000kn6yhwef2vnt0"},{"title":"curl常用命令","comments":1,"date":"2015-12-17T13:29:29.000Z","_content":"curl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n<!--more-->\n### 访问url并输出结果\n```\ncurl http://www.example.com\n```\n\n### 传递参数\n默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据\n可以通过 --data/-d 方式指定使用POST方式传递数据\n```\n# GET\ncurl -u username https://api.github.com/user?access_token=XXXXXXXXXX\n\n# POST\ncurl -u username -d \"param1=value1&param2=value\" https://api.github.com\n\n# 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端\ncurl -d @filename https://github.api.com/authorizations\n```\n注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：\n```\ncurl -d \"value%201\" http://hostname.com\n```\n在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。\n```\ncurl --data-urlencode \"value 1\" http://hostname.com\n```\n\n### 指定请求方式\n除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：\n```\ncurl -I -X DELETE https://api.github.com\n```\n\n### 设置请求头信息\n``` \ncurl -H 'Accept-Language: zh' http://cnn.com\n```\n`-H`或被多次指定\n``` \ncurl -H 'Host: 157.166.226.25'-H 'Accept-Language: zh'-H 'Cookie: ID=1234' http://cnn.com\n```\n对于\"User-Agent\", \"Cookie\", \"Host\"这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：\n-A (or --user-agent): 设置 \"User-Agent\" 字段.\n-b (or --cookie): 设置 \"Cookie\" 字段.\n-e (or --referer): 设置 \"Referer\" 字段. \n```\ncurl -H \"User-Agent: my browser\" http://cnn.com\ncurl -A \"my browser\" http://cnn.com\n```\n\n### 查看响应头信息\n```\ncurl -I http://www.baidu.com\n```\n\n\n\n### 提交表单\n```\ncurl --form \"fileupload=@filename.txt\" http://hostname/resource\n```\n\n### 访问url并奖结果保存到本地文件中\n`-o`: 将文件保存为命令行中指定的文件名到本地\n`-O`: 使用url中默认的文件名保存文件到本地\n```\ncurl -o index.html http://www.example.com\n# 或\ncurl  http://www.baidu.com > index.html\n# 在windows上没成功\ncurl -O http://www.example.com\n```\n\n### 忽略证书错误\n工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。\n```\ncurl -k https://www.example.com\n```\n\n### 获取重定向后的页面\n如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用`-L`可进行强制重定向\n```\ncurl -L http://www.example.com\n```\n\n### 发送压缩的请求\n \ncURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。\n \n自己写一个 Accept-Encoding 字段在头信息中。\n```\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/\n```\n\n如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。\n```\n# 使用gunzip解压\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/ | gunzip\n```\n\n使用gunzip解压之后，信息又被还原了。\n\n### 断点续传\n通过使用-C选项可对大文件使用断点续传功能\n```\n# 未下载完成即中断该进程\ncurl -o a.zip http://www.example.com/bigfile.zip\n\n# 后面可以通过-C来继续下载\ncurl -C -o a.html http://www.example.com/bigfile.zip\n```\n\n### 下载限速\n使用-limit-rate进行限速\n```\n# 限速为100k/s\ncurl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip\n```\n\n### 根据文件修改时间来判断是否进行下载\n```\n# 若文件的修改时间在2011/12/11之后，则下载\ncurl -z 21-Dec-11 http://www.example.com/bigfile.zip\n```\n\n### 授权\n在访问需要授权的页面时，可通过`-u`来提供用户名和密码进行授权\n```\ncurl -u username:password http://www.example.com\n```\n\n### ftp操作\n```\n# 列出指定目录下的所有文件\ncurl -u ftpuser:ftppw -O ftp://ftp_server/public_html/\n\n# 下载文件\ncurl -u ftpuser:ftppw -O\nftp://ftp_server/public_hmtl/bigfile.zip\n\n# 上传文件\ncurl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/\n\n# 上传多个文件\ncurl -u ftpuser:ftppw -T \"{myfile1.txt, myfile2.txt}\" ftp://ftp_server/public_html/\n\n# 从标准输入获取内容保存到服务器的指定文件中\ncurl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt\n```\n\n### 设置代理\n```\ncurl -x proxyserver.com:1080 http://www.example.com\n```\n\n### 保存与使用网站的cookie信息\n```\n# 将网站的cookies信息保存到example_cookies文件中\ncurl -D example_cookies http://www.example.com\n\n# 使用cookies信息访问url\ncurl -b example_cookies http://www.example.com/user/\n```\n\n\n","source":"_posts/curl常用命令.md","raw":"title: curl常用命令\ncomments: true\ndate: 2015-12-17 21:29:29\ncategories: [程序猿]\ntags: [curl, 教程]\n---\ncurl是利用URL语法在命令行方式下工作的开源文件传输工具。它被广泛应用在Unix、多种Linux发行版中，并且有DOS和Win32、Win64下的移植版本。\n<!--more-->\n### 访问url并输出结果\n```\ncurl http://www.example.com\n```\n\n### 传递参数\n默认curl使用GET方式请求数据，这种方式下直接通过URL传递数据\n可以通过 --data/-d 方式指定使用POST方式传递数据\n```\n# GET\ncurl -u username https://api.github.com/user?access_token=XXXXXXXXXX\n\n# POST\ncurl -u username -d \"param1=value1&param2=value\" https://api.github.com\n\n# 也可以指定一个文件，将该文件中的内容当作数据传递给服务器端\ncurl -d @filename https://github.api.com/authorizations\n```\n注：默认情况下，通过POST方式传递过去的数据中若有特殊字符，首先需要将特殊字符转义在传递给服务器端，如value值中包含有空格，则需要先将空格转换成%20，如：\n```\ncurl -d \"value%201\" http://hostname.com\n```\n在新版本的CURL中，提供了新的选项 --data-urlencode，通过该选项提供的参数会自动转义特殊字符。\n```\ncurl --data-urlencode \"value 1\" http://hostname.com\n```\n\n### 指定请求方式\n除了使用GET和POST协议外，还可以通过 -X 选项指定其它协议，如：\n```\ncurl -I -X DELETE https://api.github.com\n```\n\n### 设置请求头信息\n``` \ncurl -H 'Accept-Language: zh' http://cnn.com\n```\n`-H`或被多次指定\n``` \ncurl -H 'Host: 157.166.226.25'-H 'Accept-Language: zh'-H 'Cookie: ID=1234' http://cnn.com\n```\n对于\"User-Agent\", \"Cookie\", \"Host\"这类标准的HTTP头部字段，通常会有另外一种设置方法。curl命令提供了特定的选项来对这些头部字段进行设置：\n-A (or --user-agent): 设置 \"User-Agent\" 字段.\n-b (or --cookie): 设置 \"Cookie\" 字段.\n-e (or --referer): 设置 \"Referer\" 字段. \n```\ncurl -H \"User-Agent: my browser\" http://cnn.com\ncurl -A \"my browser\" http://cnn.com\n```\n\n### 查看响应头信息\n```\ncurl -I http://www.baidu.com\n```\n\n\n\n### 提交表单\n```\ncurl --form \"fileupload=@filename.txt\" http://hostname/resource\n```\n\n### 访问url并奖结果保存到本地文件中\n`-o`: 将文件保存为命令行中指定的文件名到本地\n`-O`: 使用url中默认的文件名保存文件到本地\n```\ncurl -o index.html http://www.example.com\n# 或\ncurl  http://www.baidu.com > index.html\n# 在windows上没成功\ncurl -O http://www.example.com\n```\n\n### 忽略证书错误\n工作中，经常需要用自签的假证书搭建开发环境。cURL在遇到证书错误时罢工，使用 -k 参数就可以让它不做证书校验。\n```\ncurl -k https://www.example.com\n```\n\n### 获取重定向后的页面\n如果url重定向的话，curl默认是不会去获取重定向后的url页面的，使用`-L`可进行强制重定向\n```\ncurl -L http://www.example.com\n```\n\n### 发送压缩的请求\n \ncURL提供了一个 –compress 参数，可以用来发送支持压缩的请求。但使用了–compress之后，虽然传输过程是压缩的，cURL的输出还是解压之后的，难以看到效果。\n \n自己写一个 Accept-Encoding 字段在头信息中。\n```\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/\n```\n\n如果直接运行上面的命令，会得到一堆乱码，因为cURL输出的内容，是压缩后的数据。不妨在后面接一个gunzip试试。\n```\n# 使用gunzip解压\ncurl -H \"Accept-Encoding: gzip\" http://www.kuqin.com/ | gunzip\n```\n\n使用gunzip解压之后，信息又被还原了。\n\n### 断点续传\n通过使用-C选项可对大文件使用断点续传功能\n```\n# 未下载完成即中断该进程\ncurl -o a.zip http://www.example.com/bigfile.zip\n\n# 后面可以通过-C来继续下载\ncurl -C -o a.html http://www.example.com/bigfile.zip\n```\n\n### 下载限速\n使用-limit-rate进行限速\n```\n# 限速为100k/s\ncurl --limit-rate 1000k -o a.zip http://www.example.com/bigfile.zip\n```\n\n### 根据文件修改时间来判断是否进行下载\n```\n# 若文件的修改时间在2011/12/11之后，则下载\ncurl -z 21-Dec-11 http://www.example.com/bigfile.zip\n```\n\n### 授权\n在访问需要授权的页面时，可通过`-u`来提供用户名和密码进行授权\n```\ncurl -u username:password http://www.example.com\n```\n\n### ftp操作\n```\n# 列出指定目录下的所有文件\ncurl -u ftpuser:ftppw -O ftp://ftp_server/public_html/\n\n# 下载文件\ncurl -u ftpuser:ftppw -O\nftp://ftp_server/public_hmtl/bigfile.zip\n\n# 上传文件\ncurl -u ftpuser:ftppw -T myfile.txt ftp://ftp_server/public_html/\n\n# 上传多个文件\ncurl -u ftpuser:ftppw -T \"{myfile1.txt, myfile2.txt}\" ftp://ftp_server/public_html/\n\n# 从标准输入获取内容保存到服务器的指定文件中\ncurl -u ftpuser:ftppw -T - ftp://ftp_server/public_html/1.txt\n```\n\n### 设置代理\n```\ncurl -x proxyserver.com:1080 http://www.example.com\n```\n\n### 保存与使用网站的cookie信息\n```\n# 将网站的cookies信息保存到example_cookies文件中\ncurl -D example_cookies http://www.example.com\n\n# 使用cookies信息访问url\ncurl -b example_cookies http://www.example.com/user/\n```\n\n\n","slug":"curl常用命令","published":1,"updated":"2020-01-17T07:57:28.928Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bo000ln6yh9zxs54v1"},{"title":"Django REST framework之版本号version","comments":1,"date":"2016-01-28T15:29:58.000Z","_content":"<br />\n<!--more-->\ndrf支持以下形式传输版本号\n- header\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json; version=1.0\n  ```\n- URL Path \n  ```\n  GET /v1/bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(\n          r'^(?P<version>(v1|v2))/bookings/$',\n          bookings_list,\n          name='bookings-list'\n      ),\n  ]\n  ```\n- Namespace\n  ```\n  GET /v1/something/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n      url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n  ]\n  ```\n- Host Name\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: v1.example.com\n  Accept: application/json\n  ```\n- Query Parameter\n  ```\n  GET /something/?version=0.1 HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n\ndrf默认是关闭版本控制功能，如需要开启，可在`settings.py`里添加对应的设置\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',\n    ……\n}\n```\n当然，你也可以为每个视图单独添加，不过不建议这么做\n```python\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n```\n开启版本控制之后，就可以从`request`取得版本号`request.version`（当然你`settings.py`里配置的是什么方式，就用什么方式传版本号，这样就才可以从`request`里获取到版本号）\n```python\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n```\n\n启动版本控制后，url逆向解析方法需要传入`request`参数\n```python\nfrom rest_framework.reverse import reverse\n \nreverse('bookings-list', request=request)\n```\n\n如果是使用Namespace时的版本控制，因为配置了`DEFAULT_VERSIONING_CLASS`，所以设置view_name时不需要添加`v1:`前缀，见django rest framework入门笔记.md\n\n最后在设置里添加以下全局设置来控制能访问的版本\n```python\n'DEFAULT_VERSION': None, #默认版本，request里没有版本信息时，使用的版本，默认为None\n'ALLOWED_VERSIONS': [None, 'v1', 'v2'], #允许访问的版本，如果访问的版本不在列表中，则会抛出异常\n```\n也可以为每个视图单独设置\n```python\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n \nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n \nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n```\n","source":"_posts/django-rest-framework之版本号version.md","raw":"title: Django REST framework之版本号version\ncomments: true\ndate: 2016-01-28 23:29:58\ncategories: [程序猿]\ntags: [Django, restful, api, version]\n---\n<br />\n<!--more-->\ndrf支持以下形式传输版本号\n- header\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json; version=1.0\n  ```\n- URL Path \n  ```\n  GET /v1/bookings/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(\n          r'^(?P<version>(v1|v2))/bookings/$',\n          bookings_list,\n          name='bookings-list'\n      ),\n  ]\n  ```\n- Namespace\n  ```\n  GET /v1/something/ HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n  ```\n  urlpatterns = [\n      url(r'^v1/bookings/', include('bookings.urls', namespace='v1')),\n      url(r'^v2/bookings/', include('bookings.urls', namespace='v2'))\n  ]\n  ```\n- Host Name\n  ```\n  GET /bookings/ HTTP/1.1\n  Host: v1.example.com\n  Accept: application/json\n  ```\n- Query Parameter\n  ```\n  GET /something/?version=0.1 HTTP/1.1\n  Host: example.com\n  Accept: application/json\n  ```\n\ndrf默认是关闭版本控制功能，如需要开启，可在`settings.py`里添加对应的设置\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.HostNameVersioning',\n    # 'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.QueryParameterVersioning',\n    ……\n}\n```\n当然，你也可以为每个视图单独添加，不过不建议这么做\n```python\nclass ProfileList(APIView):\n    versioning_class = versioning.QueryParameterVersioning\n```\n开启版本控制之后，就可以从`request`取得版本号`request.version`（当然你`settings.py`里配置的是什么方式，就用什么方式传版本号，这样就才可以从`request`里获取到版本号）\n```python\ndef get_serializer_class(self):\n    if self.request.version == 'v1':\n        return AccountSerializerVersion1\n    return AccountSerializer\n```\n\n启动版本控制后，url逆向解析方法需要传入`request`参数\n```python\nfrom rest_framework.reverse import reverse\n \nreverse('bookings-list', request=request)\n```\n\n如果是使用Namespace时的版本控制，因为配置了`DEFAULT_VERSIONING_CLASS`，所以设置view_name时不需要添加`v1:`前缀，见django rest framework入门笔记.md\n\n最后在设置里添加以下全局设置来控制能访问的版本\n```python\n'DEFAULT_VERSION': None, #默认版本，request里没有版本信息时，使用的版本，默认为None\n'ALLOWED_VERSIONS': [None, 'v1', 'v2'], #允许访问的版本，如果访问的版本不在列表中，则会抛出异常\n```\n也可以为每个视图单独设置\n```python\nfrom rest_framework.versioning import URLPathVersioning\nfrom rest_framework.views import APIView\n \nclass ExampleVersioning(URLPathVersioning):\n    default_version = ...\n    allowed_versions = ...\n    version_param = ...\n \nclass ExampleView(APIVIew):\n    versioning_class = ExampleVersioning\n```\n","slug":"django-rest-framework之版本号version","published":1,"updated":"2020-01-17T07:57:03.785Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bp000mn6yhgfcz5uup"},{"title":"Django Rest framework使用问题及解决方法","comments":1,"date":"2016-12-17T06:58:04.000Z","sticky":null,"_content":"<br />\n<!--more-->\n\n## 更新记录\n2016-01-29 初稿\n\n## 问题1\n`ViewSet`没有写`serializer_class`属性，而是重写了`get_serializer_class()`方法，出现\n```\nCannot use OrderingFilter on a view which does not have either a 'serializer_class' or 'ordering_fields' attribute.\n```\n原因：因为启用了`rest_framework.filters.OrderingFilter`而没有设置`ordering_fields`\n解决方法：`ViewSet`里加`ordering_fields`属性，可是禁用`rest_framework.filters.OrderingFilter`\n\n## 问题2\n`ViewSet`没有写`queryset`属性，而是重写了`get_queryset()`方法，出现\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n解决方法：需要在`urls.py`里给`ViewSet`注册`Router`时添加`base_name`（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nurls.py\n```\nrouter.register(r'users', UserViewSet, base_name='user')\n```\n\n## 问题3\n给url设置了`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n访问部分接口出现\n```\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n解决方法1：给所有的`serializer`里包含的外键字段手动设置`view_name`值（注意，继承`HyperlinkedModelSerializer `，会隐式添加一个`HyperlinkedRelatedField`字段`url`，而所有的外键都会变成`HyperlinkedRelatedField`字段，所以需要对两种类型字段手动设置`view_name`值）\nserializers.py\n```python\nclass ContactSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Contact\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:contact-detail'},\n            'user':{'view_name':'api:user-detail'}\n        }  \n```\n解决方法2：启动drf基于`NameSpace`的版本控制\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```","source":"_posts/django-rest-framework使用问题及解决方法.md","raw":"title: Django Rest framework使用问题及解决方法\ncomments: true\ndate: 2016-12-17 14:58:04\ncategories:\ntags: [Django, restful, api, 问题]\nsticky:\n---\n<br />\n<!--more-->\n\n## 更新记录\n2016-01-29 初稿\n\n## 问题1\n`ViewSet`没有写`serializer_class`属性，而是重写了`get_serializer_class()`方法，出现\n```\nCannot use OrderingFilter on a view which does not have either a 'serializer_class' or 'ordering_fields' attribute.\n```\n原因：因为启用了`rest_framework.filters.OrderingFilter`而没有设置`ordering_fields`\n解决方法：`ViewSet`里加`ordering_fields`属性，可是禁用`rest_framework.filters.OrderingFilter`\n\n## 问题2\n`ViewSet`没有写`queryset`属性，而是重写了`get_queryset()`方法，出现\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n解决方法：需要在`urls.py`里给`ViewSet`注册`Router`时添加`base_name`（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nurls.py\n```\nrouter.register(r'users', UserViewSet, base_name='user')\n```\n\n## 问题3\n给url设置了`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n访问部分接口出现\n```\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n解决方法1：给所有的`serializer`里包含的外键字段手动设置`view_name`值（注意，继承`HyperlinkedModelSerializer `，会隐式添加一个`HyperlinkedRelatedField`字段`url`，而所有的外键都会变成`HyperlinkedRelatedField`字段，所以需要对两种类型字段手动设置`view_name`值）\nserializers.py\n```python\nclass ContactSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = Contact\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:contact-detail'},\n            'user':{'view_name':'api:user-detail'}\n        }  \n```\n解决方法2：启动drf基于`NameSpace`的版本控制\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```","slug":"django-rest-framework使用问题及解决方法","published":1,"updated":"2020-01-17T07:57:08.102Z","layout":"post","photos":[],"link":"","_id":"ck9beg8bs000nn6yhx383zua0"},{"title":"Django Rest framework里的API请求频率控制","comments":1,"date":"2016-12-17T06:48:19.000Z","sticky":null,"_content":"<br />\n<!--more-->\n\n## 更新记录\n2016-08-25 初稿\n\n`Django Rest framework`有自带的频率控制配置\n## 全局设置\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '100/day',\n        # 授权用户请求频率\n        'user': '1000/day'\n    }\n}\n```\n\n## 类视图单独配置\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n \n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n## 方法视图配置\n```python\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n## 自定义\n方法一：\n```python\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n \nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n...and the following settings.\n```\n\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n然后在视图里设置`throttle_classes`即可。\n\n方法二：\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n```\n然后在类视图中设置`throttle_scope `\n```python\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n```\n\n\n**1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。**\n**2. 频率限制是针对单个接口的频率，而不是所有接口的频率。**\n\n","source":"_posts/django-rest-framework里的api请求频率控制.md","raw":"title: Django Rest framework里的API请求频率控制\ncomments: true\ndate: 2016-12-17 14:48:19\ncategories:\ntags: [Django, restful, api， version]\nsticky:\n---\n<br />\n<!--more-->\n\n## 更新记录\n2016-08-25 初稿\n\n`Django Rest framework`有自带的频率控制配置\n## 全局设置\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        # 开启匿名用户接口请求频率限制\n        'rest_framework.throttling.AnonRateThrottle',\n        # 开启授权用户接口请求频率限制\n        'rest_framework.throttling.UserRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        # 频率限制有second, minute, hour, day\n        # 匿名用户请求频率\n        'anon': '100/day',\n        # 授权用户请求频率\n        'user': '1000/day'\n    }\n}\n```\n\n## 类视图单独配置\n```python\nfrom rest_framework.response import Response\nfrom rest_framework.throttling import UserRateThrottle\nfrom rest_framework.views import APIView\n \nclass ExampleView(APIView):\n    throttle_classes = (UserRateThrottle,)\n \n    def get(self, request, format=None):\n        content = {\n            'status': 'request was permitted'\n        }\n        return Response(content)\n```\n\n## 方法视图配置\n```python\n@api_view(['GET'])\n@throttle_classes([UserRateThrottle])\ndef example_view(request, format=None):\n    content = {\n        'status': 'request was permitted'\n    }\n    return Response(content)\n```\n\n## 自定义\n方法一：\n```python\nclass BurstRateThrottle(UserRateThrottle):\n    scope = 'burst'\n \nclass SustainedRateThrottle(UserRateThrottle):\n    scope = 'sustained'\n...and the following settings.\n```\n\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'example.throttles.BurstRateThrottle',\n        'example.throttles.SustainedRateThrottle'\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'burst': '60/min',\n        'sustained': '1000/day'\n    }\n}\n```\n然后在视图里设置`throttle_classes`即可。\n\n方法二：\n`settings.py`\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_THROTTLE_CLASSES': (\n        'rest_framework.throttling.ScopedRateThrottle',\n    ),\n    'DEFAULT_THROTTLE_RATES': {\n        'contacts': '1000/day',\n        'uploads': '20/day'\n    }\n}\n```\n然后在类视图中设置`throttle_scope `\n```python\nclass ContactListView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass ContactDetailView(APIView):\n    throttle_scope = 'contacts'\n    ...\n \nclass UploadView(APIView):\n    throttle_scope = 'uploads'\n    ...\n```\n\n\n**1. 匿名用户频率如果设置大于授权用户频率，则以授权用户频率为准。**\n**2. 频率限制是针对单个接口的频率，而不是所有接口的频率。**\n\n","slug":"django-rest-framework里的api请求频率控制","published":1,"updated":"2020-01-17T07:57:17.325Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cd000on6yh1tawvwjq"},{"title":"Django REST framework单元测试「Unit Testing」","comments":1,"date":"2017-09-05T15:23:41.000Z","_content":"<br />\n<!--more-->\n## `settings`\n`Django`运行单元测试时，会以`settings`里的数据库配置里的`NAME`新建一个以`test_`开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的`migrations`文件来创建数据表并进行迁移，但如果`migrations`文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前`Model`结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用`SQLite`数据库引擎，当使用`SQLite`数据库引擎时，测试将默认使用内存数据库。\n```python\nTESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'\nif TESTING:\n    # 当使用SQLite数据库引擎时，测试将默认使用内存数据库\n    DATABASES['default'] = {\n        'ENGINE': 'django.db.backends.sqlite3',\n    }\n    # 单元测试时, 跳过migrate, 极 的提升测试运 效率\n    # 具体可以查看\n    # https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html\n    # https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database\n\n    class DisableMigrations(object):\n        def __contains__(self, item):\n            return True\n    \n        def __getitem__(self, item):\n            return \"notmigrations\"\n    \n    \n    MIGRATION_MODULES = DisableMigrations()\n```\n\n## 示例代码\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nfrom apps.account.models import User\nfrom apps.account.tests.test_utils import TestCaseUtils\n\n__author__ = 'jeff'\n\n\nclass UserAPITests(APITestCase, TestCaseUtils):\n    # 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成\n    # xml/yaml/json格式的数据\n    # 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找\n    # 此测试类运行结束后，会自动从数据库里销毁这份数据\n    # fixtures = ['user.json']\n\n    def setUp(self):\n        # 在类里每个测试方法执行前会运行\n        # 在此方法执行前，django会运行以下操作\n        # 1. 重置数据库，数据库恢复到执行migrate后的状态\n        # 2. 加载fixtures数据\n        # 所以每个测试方法里对数据库的操作都是独立的，不会相互影响\n        kwargs = dict(mobile_phone='15999999999', password='111111')\n        self.user = User.app_user_objects.create(**kwargs)\n\n    def tearDown(self):\n        # 在类里每个方法结束执行后会运行\n        pass\n\n    @classmethod\n    def setUpClass(cls):\n        # 在类初始化时执行，必须调用super\n        super(UserAPITests, cls).setUpClass()\n        cls.token = ''\n\n    @classmethod\n    def tearDownClass(cls):\n        # 在整个测试类运行结束时执行，必须调用super\n        super(UserAPITests, cls).tearDownClass()\n\n    def test_app_user_login_success(self):\n        \"\"\"APP用户登录接口成功情况\"\"\"\n        # path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '111111'}\n        response = self.client.post(path, data)\n        # response.data是字典对象\n        # response.content是json字符串对象\n        self.assertEquals(response.status_code,\n                          status.HTTP_200_OK,\n                          '登录接口返回状态码错误: 错误信息: {}'.format(response.content))\n        self.assertIn('token', response.data, '登录成功后无token返回')\n\n    def test_app_user_login_with_error_pwd(self):\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '123456'}\n        response = self.client.post(path, data)\n        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertJSONEqual('{\"errors\":[\"用户名或密码错误。\"]}', response.content)\n\n    def test_get_app_user_profile_success(self):\n        \"\"\"成功获取app用户个人信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        headers = self.get_headers(user=self.user)\n        response = self.client.get(path, **headers)\n        # 校验一些关键数据即可\n        # 如果是创建新数据，不仅要校验返回的状态码和数据，\n        # 还需要到使用Django ORM去数据库查询数据是否创建成功\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(6, len(response.data))\n        self.assertIn('url', response.data)\n        self.assertIn('mobile_phone', response.data)\n        self.assertIn('avatar', response.data)\n        self.assertIn('company_name', response.data)\n        self.assertIn('username', response.data)\n        self.assertIn('is_inviter', response.data)\n\n    def test_get_app_user_profile_without_token(self):\n        \"\"\"不传token请求获取用户信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        response = self.client.get(path)\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n```\n\n## 断言\n```python\n# 来自unittest.case.TestCase\nassertFalse(expr, msg=None)\nassertTrue(expr, msg=None)\nassertEqual(first, second, msg=None)\nassertNotEqual(first, second, msg=None)\nassertAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertNotAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertSequenceEqual(seq1, seq2, msg=None, seq_type=None)\nassertListEqual(list1, list2, msg=None)\nassertTupleEqual(tuple1, tuple2, msg=None)\nassertSetEqual(set1, set2, msg=None)\nassertIn(member, container, msg=None)\nassertNotIn(member, container, msg=None)\nassertIs(expr1, expr2, msg=None)\nassertIsNot(expr1, expr2, msg=None)\nassertDictEqual(d1, d2, msg=None)\nassertDictContainsSubset(expected, actual, msg=None)\nassertItemsEqual(expected_seq, actual_seq, msg=None)\nassertMultiLineEqual(first, second, msg=None)\nassertLess(a, b, msg=None)\nassertLessEqual(a, b, msg=None)\nassertGreater(a, b, msg=None)\nassertGreaterEqual(a, b, msg=None)\nassertIsNone(obj, msg=None)\nassertIsInstance(obj, cls, msg=None)\nassertNotIsInstance(obj, cls, msg=None)\nassertRaisesRegexp(expected_exception, expected_regexp,\n                           callable_obj=None, *args, **kwargs)\nassertRegexpMatches(text, expected_regexp, msg=None)\nassertNotRegexpMatches(text, unexpected_regexp, msg=None)\n```\n\n\n## 测试接口地址\n测试接口地址建议使用硬编码，不要使用`reverse`反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。\n\n## 测试数据准备\n有如下两种方法准备测试数据\n1. 简单的数据可以在`setUp()`里来创建；\n2. 复杂数据可以使用fixtures来写，并在赋值给测试类的`fixtures`属性；\nfixtures数据示例\n```json\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n## 测试覆盖率（coverage）\n在`Pycharm`里可以通用右键项目，选择`Run 'Test:' with Coverage`来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。\n\n\n","source":"_posts/django-rest-framework接口单元测试.md","raw":"---\ntitle: Django REST framework单元测试「Unit Testing」\ncomments: true\ntags: [restful api, 接口, 单元测试, 测试, Django]\ncategories: [程序猿]\ndate: 2017-09-05 23:23:41\n---\n<br />\n<!--more-->\n## `settings`\n`Django`运行单元测试时，会以`settings`里的数据库配置里的`NAME`新建一个以`test_`开关的临时数据库，并在测试结束后删除，默认的测试数据库会以当前的`migrations`文件来创建数据表并进行迁移，但如果`migrations`文件很多，每次运行时间将很久，所以可以跳过迁移，直接以当前`Model`结果来创建表以提升测试效率，如果想进一步加快测试时创建数据库的速度，可以使用`SQLite`数据库引擎，当使用`SQLite`数据库引擎时，测试将默认使用内存数据库。\n```python\nTESTING = len(sys.argv) > 1 and sys.argv[1] == 'test'\nif TESTING:\n    # 当使用SQLite数据库引擎时，测试将默认使用内存数据库\n    DATABASES['default'] = {\n        'ENGINE': 'django.db.backends.sqlite3',\n    }\n    # 单元测试时, 跳过migrate, 极 的提升测试运 效率\n    # 具体可以查看\n    # https://simpleisbetterthancomplex.com/tips/2016/08/19/django-tip-12-disabl ing-migrations-to-speed-up-unit-tests.html\n    # https://stackoverflow.com/questions/36487961/django-unit-testing-taking-a- very-long-time-to-create-test-database\n\n    class DisableMigrations(object):\n        def __contains__(self, item):\n            return True\n    \n        def __getitem__(self, item):\n            return \"notmigrations\"\n    \n    \n    MIGRATION_MODULES = DisableMigrations()\n```\n\n## 示例代码\n```python\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import\nfrom __future__ import unicode_literals\n\nfrom rest_framework import status\nfrom rest_framework.test import APITestCase\n\nfrom apps.account.models import User\nfrom apps.account.tests.test_utils import TestCaseUtils\n\n__author__ = 'jeff'\n\n\nclass UserAPITests(APITestCase, TestCaseUtils):\n    # 初始数据加载，可使用manage.py dumpdata [app_label app_label app_label.Model]生成\n    # xml/yaml/json格式的数据\n    # 一般放在每个应用的fixtures目录下, 只需要填写json文件名即可，django会自动查找\n    # 此测试类运行结束后，会自动从数据库里销毁这份数据\n    # fixtures = ['user.json']\n\n    def setUp(self):\n        # 在类里每个测试方法执行前会运行\n        # 在此方法执行前，django会运行以下操作\n        # 1. 重置数据库，数据库恢复到执行migrate后的状态\n        # 2. 加载fixtures数据\n        # 所以每个测试方法里对数据库的操作都是独立的，不会相互影响\n        kwargs = dict(mobile_phone='15999999999', password='111111')\n        self.user = User.app_user_objects.create(**kwargs)\n\n    def tearDown(self):\n        # 在类里每个方法结束执行后会运行\n        pass\n\n    @classmethod\n    def setUpClass(cls):\n        # 在类初始化时执行，必须调用super\n        super(UserAPITests, cls).setUpClass()\n        cls.token = ''\n\n    @classmethod\n    def tearDownClass(cls):\n        # 在整个测试类运行结束时执行，必须调用super\n        super(UserAPITests, cls).tearDownClass()\n\n    def test_app_user_login_success(self):\n        \"\"\"APP用户登录接口成功情况\"\"\"\n        # path使用硬编码，不要使用reverse反解析url，以便在修改url之后能及时发现接口地址变化，并通知接口使用人员\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '111111'}\n        response = self.client.post(path, data)\n        # response.data是字典对象\n        # response.content是json字符串对象\n        self.assertEquals(response.status_code,\n                          status.HTTP_200_OK,\n                          '登录接口返回状态码错误: 错误信息: {}'.format(response.content))\n        self.assertIn('token', response.data, '登录成功后无token返回')\n\n    def test_app_user_login_with_error_pwd(self):\n        path = '/api/api-token-auth/'\n        data = {'mobile_phone': '15999999999', 'password': '123456'}\n        response = self.client.post(path, data)\n        self.assertEquals(response.status_code, status.HTTP_400_BAD_REQUEST)\n        self.assertJSONEqual('{\"errors\":[\"用户名或密码错误。\"]}', response.content)\n\n    def test_get_app_user_profile_success(self):\n        \"\"\"成功获取app用户个人信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        headers = self.get_headers(user=self.user)\n        response = self.client.get(path, **headers)\n        # 校验一些关键数据即可\n        # 如果是创建新数据，不仅要校验返回的状态码和数据，\n        # 还需要到使用Django ORM去数据库查询数据是否创建成功\n        self.assertEqual(response.status_code, status.HTTP_200_OK)\n        self.assertEqual(6, len(response.data))\n        self.assertIn('url', response.data)\n        self.assertIn('mobile_phone', response.data)\n        self.assertIn('avatar', response.data)\n        self.assertIn('company_name', response.data)\n        self.assertIn('username', response.data)\n        self.assertIn('is_inviter', response.data)\n\n    def test_get_app_user_profile_without_token(self):\n        \"\"\"不传token请求获取用户信息接口\"\"\"\n        path = '/api/account/user/profile/'\n        response = self.client.get(path)\n        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)\n```\n\n## 断言\n```python\n# 来自unittest.case.TestCase\nassertFalse(expr, msg=None)\nassertTrue(expr, msg=None)\nassertEqual(first, second, msg=None)\nassertNotEqual(first, second, msg=None)\nassertAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertNotAlmostEqual(first, second, places=None, msg=None, delta=None)\nassertSequenceEqual(seq1, seq2, msg=None, seq_type=None)\nassertListEqual(list1, list2, msg=None)\nassertTupleEqual(tuple1, tuple2, msg=None)\nassertSetEqual(set1, set2, msg=None)\nassertIn(member, container, msg=None)\nassertNotIn(member, container, msg=None)\nassertIs(expr1, expr2, msg=None)\nassertIsNot(expr1, expr2, msg=None)\nassertDictEqual(d1, d2, msg=None)\nassertDictContainsSubset(expected, actual, msg=None)\nassertItemsEqual(expected_seq, actual_seq, msg=None)\nassertMultiLineEqual(first, second, msg=None)\nassertLess(a, b, msg=None)\nassertLessEqual(a, b, msg=None)\nassertGreater(a, b, msg=None)\nassertGreaterEqual(a, b, msg=None)\nassertIsNone(obj, msg=None)\nassertIsInstance(obj, cls, msg=None)\nassertNotIsInstance(obj, cls, msg=None)\nassertRaisesRegexp(expected_exception, expected_regexp,\n                           callable_obj=None, *args, **kwargs)\nassertRegexpMatches(text, expected_regexp, msg=None)\nassertNotRegexpMatches(text, unexpected_regexp, msg=None)\n```\n\n\n## 测试接口地址\n测试接口地址建议使用硬编码，不要使用`reverse`反解析url，原因是接口地址尽量避免改变，如果必须修改，需要以很明显的方式来提醒开发人员以便开发人员通知接口使用人员。\n\n## 测试数据准备\n有如下两种方法准备测试数据\n1. 简单的数据可以在`setUp()`里来创建；\n2. 复杂数据可以使用fixtures来写，并在赋值给测试类的`fixtures`属性；\nfixtures数据示例\n```json\n[\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 1,\n    \"fields\": {\n      \"first_name\": \"John\",\n      \"last_name\": \"Lennon\"\n    }\n  },\n  {\n    \"model\": \"myapp.person\",\n    \"pk\": 2,\n    \"fields\": {\n      \"first_name\": \"Paul\",\n      \"last_name\": \"McCartney\"\n    }\n  }\n]\n```\n\n## 测试覆盖率（coverage）\n在`Pycharm`里可以通用右键项目，选择`Run 'Test:' with Coverage`来查看测试的覆盖率。也可以通过其它第三方包查看测试覆盖率，具体请自己查询。\n\n\n","slug":"django-rest-framework接口单元测试","published":1,"updated":"2020-01-17T07:57:22.316Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cj000pn6yhzhe5vbi8"},{"title":"Django字段选项related_name和related_query_name","comments":1,"date":"2015-10-20T14:22:06.000Z","_content":"`data`\n```sqlite3\nsqlite> select * from author;\nid      name    age\n1       jim     12\n2       tom     11\nsqlite> select * from book;\nid      name    author_id\n1       learn java      1\n2       learn python    1\n3       learn c++       2\n```\n<!--more-->\n`models.py`\n```python\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n# Create your models here.\n\nclass Author(models.Model):\n    name = models.CharField(verbose_name='姓名', max_length=50)\n    age = models.IntegerField(verbose_name='年龄')\n\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者')\n```\n执行语句\n```\n>>> Author.objects.filter(book__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.book_set.all()\n[<Book: learn java>, <Book: learn python>]\n```\n\n假如把类`Book`改成这样\n```\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者', related_name='bs', related_query_name='b')\n```\n那么上面查询代码就应该写成这样\n```\n>>> Author.objects.filter(b__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.bs.all()\n[<Book: learn java>, <Book: learn python>]\n```\n> 如果`book `表里有两个字段都外键关联`author `表，这时`related_name`就非常有用了。\n\n\n\n\n","source":"_posts/django字段选项related-name和related-query-name.md","raw":"title: Django字段选项related_name和related_query_name\ncomments: true\ndate: 2015-10-20 22:22:06\ncategories: [程序猿]\ntags: [Python, Django]\n---\n`data`\n```sqlite3\nsqlite> select * from author;\nid      name    age\n1       jim     12\n2       tom     11\nsqlite> select * from book;\nid      name    author_id\n1       learn java      1\n2       learn python    1\n3       learn c++       2\n```\n<!--more-->\n`models.py`\n```python\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\n\n# Create your models here.\n\nclass Author(models.Model):\n    name = models.CharField(verbose_name='姓名', max_length=50)\n    age = models.IntegerField(verbose_name='年龄')\n\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者')\n```\n执行语句\n```\n>>> Author.objects.filter(book__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.book_set.all()\n[<Book: learn java>, <Book: learn python>]\n```\n\n假如把类`Book`改成这样\n```\nclass Book(models.Model):\n    name = models.CharField(verbose_name='书名', max_length=100)\n    author = models.ForeignKey(Author, verbose_name='作者', related_name='bs', related_query_name='b')\n```\n那么上面查询代码就应该写成这样\n```\n>>> Author.objects.filter(b__name='learn java')\n[<Author: jim>]\n>>> author = Author.objects.get(pk=1)\n>>> author.bs.all()\n[<Book: learn java>, <Book: learn python>]\n```\n> 如果`book `表里有两个字段都外键关联`author `表，这时`related_name`就非常有用了。\n\n\n\n\n","slug":"django字段选项related-name和related-query-name","published":1,"updated":"2020-01-17T07:56:41.859Z","layout":"post","photos":[],"link":"","_id":"ck9beg8ck000qn6yhouiysqy9"},{"title":"多说评论UA显示测试","comments":1,"date":"2015-11-15T09:45:12.000Z","_content":"<br/>\n<!--more-->\n多说评论UA显示测试\n","source":"_posts/duoshuo-comments-ua.md","raw":"title: 多说评论UA显示测试\ncomments: true\ndate: 2015-11-15 17:45:12\ncategories:\ntags:\n---\n<br/>\n<!--more-->\n多说评论UA显示测试\n","slug":"duoshuo-comments-ua","published":1,"updated":"2016-12-08T15:29:44.000Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cn000rn6yhe5dziron"},{"title":"Django内置的flatpages应用","date":"2015-09-08T13:17:55.000Z","updated":"2015-09-08T13:17:55.000Z","excerpt":"true","_content":"不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：\n1. 页面数据简单（不会有很多动态数据展示）;\n2. 有更新但频率不高;\n\n如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用`flatpages `来解决这类问题了。\n<!--more-->\n\n`django.contrib.flatpages`是`Django `的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。\n\n## 安装\n首先确保`INSTALLED_APPS`中已经存在`django.contrib.sites`，因为`django.contrib.flatpages`依赖于此包。\n`settings.py`\n```python\nINSTALLED_APPS = (\n    # ...\n    'django.contrib.sites',\n    'django.contrib.flatpages',\n)\n# ...\n# 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1\nSITE_ID = 1\n```\n执行`python manage.py migrate`建表\n\n## 配置\n路由配置可先以有多种形式\n`urls.py`\n第一种（需放在最后，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns += [\n    url(r'^(?P<url>.*/)$', views.flatpage),\n]\n```\n第二种（每个页面都需要写一个url，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns = [\n    url(r'^about-us/$', views.flatpage, {'url': '/about-us/'}, name='about'),\n    url(r'^license/$', views.flatpage, {'url': '/license/'}, name='license'),\n]\n```\n或者，如果你不想配置路由，还有一种更简单的方法，直接在`settings.py`的里添加中间件\n```\nMIDDLEWARE_CLASSES = (\n    # ...\n    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',\n)\n```\n*为确保配置生效，保险的方法是把`django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`放在最后一行*\n\n## 管理`flatpages`\n\n默认的你可以登录超级管理员后台（如果开启），找到`Flat pages`，进去点击添加，可以看到可配置的选项有，`URL` `Title` `Content` `Site` `Enable comments` `Registration required` `Template name`\n\n### 数据项说明\n- `URL`:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )\n- `Title`: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它\n- `Content`: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示\n- `Site`: 页面放置的站点，该项设置集成了 Django 多站点框架\n- `Enable comments`: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体\n- `Registration required`: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。\n- `Template name`: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 `flatpages/default.html`（我在`Django1.8.4`里死活没找到，只好自己写好一个扔进去）\n\n当添加相应的数据后，剩下工作就交给`flatpages`吧，如果你是使用中间件形式的，则`flatpages `会在配置完所有`urls.py`后，没有找到配置到对应的`URL`，才会到`flatpages `中查找，如果还是找不到，则会引发`Http404`异常，即`FlatpageFallbackMiddleware `只在`404`时会被激活，而不会在`500`或其它错误响应时被激活。\n\n如果你需要自己定制，则可以针对`django/contrib/flatpages/models.py`自己写增删改方法就可以。\n`models.py`\n```python\nclass FlatPage(models.Model):\n    url = models.CharField(_('URL'), max_length=100, db_index=True)\n    title = models.CharField(_('title'), max_length=200)\n    content = models.TextField(_('content'), blank=True)\n    enable_comments = models.BooleanField(_('enable comments'), default=False)\n    template_name = models.CharField(_('template name'), max_length=70, blank=True,\n        help_text=_(\n            \"Example: 'flatpages/contact_page.html'. If this isn't provided, \"\n            \"the system will use 'flatpages/default.html'.\"\n        ),\n    )\n    registration_required = models.BooleanField(_('registration required'),\n        help_text=_(\"If this is checked, only logged-in users will be able to view the page.\"),\n        default=False)\n    sites = models.ManyToManyField(Site)\n \n    class Meta:\n        db_table = 'django_flatpage'\n        verbose_name = _('flat page')\n        verbose_name_plural = _('flat pages')\n        ordering = ('url',)\n \n    def __str__(self):\n        return \"%s -- %s\" % (self.url, self.title)\n \n    def get_absolute_url(self):\n        # Handle script prefix manually because we bypass reverse()\n        return iri_to_uri(get_script_prefix().rstrip('/') + self.url)\n```\n\n## 模板\n默认模板路径为`flatpages/default.html`\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>\n```\n> 在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加`requeset.user`显示用户信息等。\n\n## 高级应用\n\n获取`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages as flatpages %}\n```\n\n获取当前用户能打开的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages for request.user as about_pages %}\n```\n\n获取链接以`/about/`为开头的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages '/about/' as about_pages %}\n```\n\n上面两种也可以组合使用\n```\n{% load flatpages %}\n{% get_flatpages '/about/' for someuser as about_pages %}\n```\n\n## 生成`sitemaps.xml`\n```\nfrom django.conf.urls import url\nfrom django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\n \nurlpatterns = [\n    # ...\n \n    # the sitemap\n    url(r'^sitemap\\.xml$', sitemap,\n        {'sitemaps': {'flatpages': FlatPageSitemap}},\n        name='django.contrib.sitemaps.views.sitemap'),\n]\n```\n\n## 容易踩的坑\n最好把`settings.py`里的`APPEND_SLASH`设置为`Ture`， 这样不管是`/about-us`还是`/about-us/`都可以访问到。\n\n## 参考资料\n- https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\n- http://djangobook.py3k.cn/2.0/chapter16/\n","source":"_posts/django内置的flatpages应用.md","raw":"title: Django内置的flatpages应用\ndate: 2015-09-08 21:17:55\nupdated: 2015-09-08 21:17:55\ncategories: [程序猿]\ntags: [Python, Django]\nexcerpt: true\n---\n不知道大家平时写网站时类似「关于页面」，「用户协议」这类页面是如何处理的。这里列出了这类页面的两个特点：\n1. 页面数据简单（不会有很多动态数据展示）;\n2. 有更新但频率不高;\n\n如果要为这类页面展示建立多个数据表，显然是很浪费的行为，但如果直接写成静态页面文件，更新又比较很麻烦，这时候就可以使用`flatpages `来解决这类问题了。\n<!--more-->\n\n`django.contrib.flatpages`是`Django `的内置app，用于添加更新的一些简单的页面，具体设置，请继续查看以下步骤。\n\n## 安装\n首先确保`INSTALLED_APPS`中已经存在`django.contrib.sites`，因为`django.contrib.flatpages`依赖于此包。\n`settings.py`\n```python\nINSTALLED_APPS = (\n    # ...\n    'django.contrib.sites',\n    'django.contrib.flatpages',\n)\n# ...\n# 如果没有设置`SITE_ID`值，则需要设置，这里直接设置为1\nSITE_ID = 1\n```\n执行`python manage.py migrate`建表\n\n## 配置\n路由配置可先以有多种形式\n`urls.py`\n第一种（需放在最后，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns += [\n    url(r'^(?P<url>.*/)$', views.flatpage),\n]\n```\n第二种（每个页面都需要写一个url，推荐）\n```\nfrom django.contrib.flatpages import views\nurlpatterns = [\n    url(r'^about-us/$', views.flatpage, {'url': '/about-us/'}, name='about'),\n    url(r'^license/$', views.flatpage, {'url': '/license/'}, name='license'),\n]\n```\n或者，如果你不想配置路由，还有一种更简单的方法，直接在`settings.py`的里添加中间件\n```\nMIDDLEWARE_CLASSES = (\n    # ...\n    'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',\n)\n```\n*为确保配置生效，保险的方法是把`django.contrib.flatpages.middleware.FlatpageFallbackMiddleware`放在最后一行*\n\n## 管理`flatpages`\n\n默认的你可以登录超级管理员后台（如果开启），找到`Flat pages`，进去点击添加，可以看到可配置的选项有，`URL` `Title` `Content` `Site` `Enable comments` `Registration required` `Template name`\n\n### 数据项说明\n- `URL`:  页面所处的 URL，不包括域名，但是包含前导斜杠 (例如 /about/contact/ )\n- `Title`: 页面的标题，框架不对它作任何特殊处理。由你通过模板来显示它\n- `Content`: 页面的内容 (即 HTML 页面)，框架不会对它作任何特别处理。由你负责使用模板来显示\n- `Site`: 页面放置的站点，该项设置集成了 Django 多站点框架\n- `Enable comments`: 是否允许该简单页面使用评论，框架不对此做任何特别处理。你可在模板中检查该值并根据需要显示评论窗体\n- `Registration required`: 是否注册用户才能查看此简单页面，该设置项集成了 Djangos 验证/用户框架，该框架于第十二章详述。\n- `Template name`: 用来解析该简单页面的模板名称，这是一个可选项，如果未指定模板或该模板不存在，系统会退而使用默认模板 `flatpages/default.html`（我在`Django1.8.4`里死活没找到，只好自己写好一个扔进去）\n\n当添加相应的数据后，剩下工作就交给`flatpages`吧，如果你是使用中间件形式的，则`flatpages `会在配置完所有`urls.py`后，没有找到配置到对应的`URL`，才会到`flatpages `中查找，如果还是找不到，则会引发`Http404`异常，即`FlatpageFallbackMiddleware `只在`404`时会被激活，而不会在`500`或其它错误响应时被激活。\n\n如果你需要自己定制，则可以针对`django/contrib/flatpages/models.py`自己写增删改方法就可以。\n`models.py`\n```python\nclass FlatPage(models.Model):\n    url = models.CharField(_('URL'), max_length=100, db_index=True)\n    title = models.CharField(_('title'), max_length=200)\n    content = models.TextField(_('content'), blank=True)\n    enable_comments = models.BooleanField(_('enable comments'), default=False)\n    template_name = models.CharField(_('template name'), max_length=70, blank=True,\n        help_text=_(\n            \"Example: 'flatpages/contact_page.html'. If this isn't provided, \"\n            \"the system will use 'flatpages/default.html'.\"\n        ),\n    )\n    registration_required = models.BooleanField(_('registration required'),\n        help_text=_(\"If this is checked, only logged-in users will be able to view the page.\"),\n        default=False)\n    sites = models.ManyToManyField(Site)\n \n    class Meta:\n        db_table = 'django_flatpage'\n        verbose_name = _('flat page')\n        verbose_name_plural = _('flat pages')\n        ordering = ('url',)\n \n    def __str__(self):\n        return \"%s -- %s\" % (self.url, self.title)\n \n    def get_absolute_url(self):\n        # Handle script prefix manually because we bypass reverse()\n        return iri_to_uri(get_script_prefix().rstrip('/') + self.url)\n```\n\n## 模板\n默认模板路径为`flatpages/default.html`\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>{{ flatpage.title }}</title>\n</head>\n<body>\n{{ flatpage.content }}\n</body>\n</html>\n```\n> 在实际应用中，我们不太可能会使用默认的模板，你可能需要自己写一个漂亮模板，比如有一个头部和底部，头部可能还需要添加`requeset.user`显示用户信息等。\n\n## 高级应用\n\n获取`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages as flatpages %}\n```\n\n获取当前用户能打开的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages for request.user as about_pages %}\n```\n\n获取链接以`/about/`为开头的`flatpages`实例列表\n```\n{% load flatpages %}\n{% get_flatpages '/about/' as about_pages %}\n```\n\n上面两种也可以组合使用\n```\n{% load flatpages %}\n{% get_flatpages '/about/' for someuser as about_pages %}\n```\n\n## 生成`sitemaps.xml`\n```\nfrom django.conf.urls import url\nfrom django.contrib.flatpages.sitemaps import FlatPageSitemap\nfrom django.contrib.sitemaps.views import sitemap\n \nurlpatterns = [\n    # ...\n \n    # the sitemap\n    url(r'^sitemap\\.xml$', sitemap,\n        {'sitemaps': {'flatpages': FlatPageSitemap}},\n        name='django.contrib.sitemaps.views.sitemap'),\n]\n```\n\n## 容易踩的坑\n最好把`settings.py`里的`APPEND_SLASH`设置为`Ture`， 这样不管是`/about-us`还是`/about-us/`都可以访问到。\n\n## 参考资料\n- https://docs.djangoproject.com/en/1.8/ref/contrib/flatpages/\n- http://djangobook.py3k.cn/2.0/chapter16/\n","slug":"django内置的flatpages应用","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8co000sn6yhr3ej4jz5"},{"title":"Git patch的简单运用","date":"2015-10-15T12:49:40.000Z","_content":"\n## 生成PATCH\n\n往前n个提前内容的patch\n```\ngit format-patch -n\n```\n\n某个commit（含）的及之前的n-1次提交的patch\n```\ngit format-patch -n SHA\n```\n<!--more-->\n某个commit的patch\n```\ngit format-patch -1 SHA\n```\n\n当前分支所有超前master提交的patch\n```\ngit format-patch -M master\n```\n\n两个commit之间的所有patch（不包含较早SHA1提交的内容）\n```\ngit format-patch SHA1...SHA1\n```\n\n某个commit之后的所有patch\n```\ngit format-patch -s SHA\n```\n\n## 应用PATCH\n检查patch\n```\ngit apply --stat xxx.patch\n```\n\n检查能否应用成功\n```\ngit apply --check xxx.patch\n```\n\n打补丁\n```\ngit am -s xxx.patch\n```\n\n如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题\n```\n# 把没有冲突的文件先合并了，剩下有冲突的作了标记\ngit apply PATCH --reject\n# 这里手动解决冲突\n# 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index\ngit add FIXED_FILES\ngit am --resolved\n```\n\n## 参考\nhttp://blog.csdn.net/daydring/article/details/42676987\n","source":"_posts/git-patch的简单运用.md","raw":"title: Git patch的简单运用\ndate: 2015-10-15 20:49:40\ncategories: [程序猿]\ntags: [Git]\n---\n\n## 生成PATCH\n\n往前n个提前内容的patch\n```\ngit format-patch -n\n```\n\n某个commit（含）的及之前的n-1次提交的patch\n```\ngit format-patch -n SHA\n```\n<!--more-->\n某个commit的patch\n```\ngit format-patch -1 SHA\n```\n\n当前分支所有超前master提交的patch\n```\ngit format-patch -M master\n```\n\n两个commit之间的所有patch（不包含较早SHA1提交的内容）\n```\ngit format-patch SHA1...SHA1\n```\n\n某个commit之后的所有patch\n```\ngit format-patch -s SHA\n```\n\n## 应用PATCH\n检查patch\n```\ngit apply --stat xxx.patch\n```\n\n检查能否应用成功\n```\ngit apply --check xxx.patch\n```\n\n打补丁\n```\ngit am -s xxx.patch\n```\n\n如果有冲突，整个PATCH都不会被集成，接来来解决冲突问题\n```\n# 把没有冲突的文件先合并了，剩下有冲突的作了标记\ngit apply PATCH --reject\n# 这里手动解决冲突\n# 把解决冲突的和PATCH里新加的文件全部add进来，因为git am并不会改变index\ngit add FIXED_FILES\ngit am --resolved\n```\n\n## 参考\nhttp://blog.csdn.net/daydring/article/details/42676987\n","slug":"git-patch的简单运用","published":1,"updated":"2020-01-17T07:56:19.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8cr000tn6yh9abs76eo"},{"title":"Git stash的简单运用","comments":1,"date":"2015-10-20T14:16:18.000Z","_content":"\n当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用`git stash`命令。\n<!--more-->\n`git stash`命令可将工作区的改动存储git栈，运行`git stash`之后，可以再运行`git status -s`验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用`git stash pop`可以从Git栈中读取最近一次保存的内容，恢复到工作区。\n\n```\ngit stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\ngit stash save \"message\": 备份当前的工作区的内容，并添加备注信息\ngit stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\ngit stash pop stash@{0}: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@{0}为最新）\ngit stash apply stash@{0}: 同git stash pop，但不会删除对应的记录\ngit stash drop: 删除最新的一个备份\ngit stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。\n```\n\n## 参考\nhttp://www.tuicool.com/articles/rUBNBvI\n及`git stash --help`\n\n\n","source":"_posts/git-stash的简单运用.md","raw":"title: Git stash的简单运用\ncomments: true\ndate: 2015-10-20 22:16:18\ncategories: [程序猿]\ntags: [Git]\n---\n\n当我们在分支上改代码改到一半时，突然项目发现了一个bug需要修复，这时需要切换到另一个分支进行修改，以前的做法可能是把工作区改到一半的代码先commit，然后切换分支修复bug，再切换回来继续写代码，但这样会生成很多不必要的提交，这时你就需要使用`git stash`命令。\n<!--more-->\n`git stash`命令可将工作区的改动存储git栈，运行`git stash`之后，可以再运行`git status -s`验证下发现目录和上交commit时是一致的，没有任何修改，这时你就可以切换到其它分支进行工作，当你完成工作后，再切换回来，使用`git stash pop`可以从Git栈中读取最近一次保存的内容，恢复到工作区。\n\n```\ngit stash: 备份当前的工作区的内容，从最近的一次提交中读取相关内容，让工作区保证和上次提交的内容一致。同时，将当前的工作区内容保存到Git栈中。\ngit stash save \"message\": 备份当前的工作区的内容，并添加备注信息\ngit stash list: 显示git栈内的所有备份，可以利用这个列表来决定从那个地方恢复。\ngit stash pop stash@{0}: 从git栈中读取并恢复工作区，然后删除对应的记录，默认恢复最新的（stash@{0}为最新）\ngit stash apply stash@{0}: 同git stash pop，但不会删除对应的记录\ngit stash drop: 删除最新的一个备份\ngit stash clear: 清空git栈。此时使用gitg等图形化工具会发现，原来stash的哪些节点都消失了。\n```\n\n## 参考\nhttp://www.tuicool.com/articles/rUBNBvI\n及`git stash --help`\n\n\n","slug":"git-stash的简单运用","published":1,"updated":"2020-01-17T07:56:06.503Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cs000un6yhmjfw2sis"},{"title":"Git常用命令别名设置","comments":1,"date":"2019-06-28T09:17:06.000Z","_content":"如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置\n\n<!--more-->\nGit别名设置\n\n```bash\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.cp cherry-pick\ngit config --global alias.unstage 'reset HEAD'\n# 可用git pull -r代替\ngit config --global alias.fr '!f() { git fetch && git rebase $@; }; f'; \n# git提交日志\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"\n```\n\n删除别名\n\n```bash\ngit config --global --unset alias.xxx\n```\n\n以下两个命令设置git alias和zsh alias都失败，暂没找到方法可以设置别名\n\n```bash\n# 查看仓库提交者排名前 5\ngit log --pretty='%aN' | sort | uniq -c | sort -k1 -n -r | head -n 5\n```\n\n```bash\n# 统计每个人增删行数\ngit log --format='%aN' | sort -u | while read name; do echo -en \"$name\\t\"; git log --author=\"$name\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' -; done\n```\n\n\n\ngit lg命令效果图\n![git lg命令效果图](/media/git-lg效果图.png)","source":"_posts/git-alias.md","raw":"---\ntitle: Git常用命令别名设置\ncomments: true\ncategories: [程序猿]\ntags: [Git, 教程]\ndate: 2019-06-28 17:17:06\n---\n如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置\n\n<!--more-->\nGit别名设置\n\n```bash\ngit config --global alias.co checkout\ngit config --global alias.ci commit\ngit config --global alias.br branch\ngit config --global alias.cp cherry-pick\ngit config --global alias.unstage 'reset HEAD'\n# 可用git pull -r代替\ngit config --global alias.fr '!f() { git fetch && git rebase $@; }; f'; \n# git提交日志\ngit config --global alias.lg \"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"\n```\n\n删除别名\n\n```bash\ngit config --global --unset alias.xxx\n```\n\n以下两个命令设置git alias和zsh alias都失败，暂没找到方法可以设置别名\n\n```bash\n# 查看仓库提交者排名前 5\ngit log --pretty='%aN' | sort | uniq -c | sort -k1 -n -r | head -n 5\n```\n\n```bash\n# 统计每个人增删行数\ngit log --format='%aN' | sort -u | while read name; do echo -en \"$name\\t\"; git log --author=\"$name\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' -; done\n```\n\n\n\ngit lg命令效果图\n![git lg命令效果图](/media/git-lg效果图.png)","slug":"git-alias","published":1,"updated":"2020-04-10T10:56:54.384Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cv000vn6yh390ngmzu"},{"title":"Git常用命令","date":"2015-09-11T12:05:13.000Z","_content":"![Git工作流图示](/media/Git工作流图示.jpg)\n\n之前写过一篇[Git命令使用指南](/2015/01/16/Git命令使用指南/)，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。\n<!--more-->\n\n## 提交\n\n```shell\n# 把所有已跟踪的文件添加到暂存区\ngit add -u\n# 把暂存区的文件提交到本地仓库\ngit commit -am \"update message\"\n```\n\n## 列出分支\n```\n# 列出本地分支\ngit branch\n或\ngit branch -v\n\n# 列出本地和远程所有分支\ngit branch -a\n或\ngit branch -va\n```\n\n## 删除分支\n```\n# 删除本地分支\ngit branck -D/-d <branch>\n\n# 删除远程分支，注意冒号前有空格\ngit push origin :<分支名>\n# 等价于\ngit push origin -d <branch>\n```\n\n## 推送分支\n```\n# 推送当前分支到默认remote上，remote上没有对应分支则自动创建\ngit push\n\n# 推送当前分支到指定remote，remote上没有对应分支则自动创建\ngit push <remote>\n\n# 推送到指定分支到remote的指定分支上\ngit push <remote> <remote_branch>:<loclal_branch>\n```\n\n## 拉取远程分支到本地\n```\ngit checkout -b <branch> <remote>/<branch>\n```\n或\n```\ngit checkout --track <remote>/<branch>\n```\n\n## 撤消提交（未`push`情况下）\n```\ngit reset --mixed <SHA1> # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略\ngit reset --soft <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index不变\ngit reset --hard <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回\n```\n\n## 查看`commit`记录\n```\ngit log --oneline -n # 单行显示最后n个commit的记录\n```\n\n## 本地分支和远程分支做关联\n```\ngit branch --set-upstream-to=<remote>/<remote_branch> <loclal_branch>\n```\n\n## 推送本地当前新分支到远程\n```\ngit push -u origin <branch_name>\n```\n\n## 查看日志\n```\n# 当前分支日志\ngit log\n# 所有本地分支日志\ngit log --all\n# 指定本地分支日志\ngit log <branch_name>\n# 指定远程分支日志\ngit log origin/<branch_name>\n# 所有远程分支日志\ngit log --all origin\n```\n\n## 重命名分支\n```\ngit branch (-m | -M) [<old-branch>] <new-branch>\n```","source":"_posts/git常用命令.md","raw":"title: Git常用命令\ndate: 2015-09-11 20:05:13\ncategories: [程序猿]\ntags: [Git]\n---\n![Git工作流图示](/media/Git工作流图示.jpg)\n\n之前写过一篇[Git命令使用指南](/2015/01/16/Git命令使用指南/)，但感觉那个写的太乱，不接地气，有时我自己找一个命令都难找，所以今天写一篇文章整理一些比较基础的，但又不常用的一些命令，后面会慢慢更新。\n<!--more-->\n\n## 提交\n\n```shell\n# 把所有已跟踪的文件添加到暂存区\ngit add -u\n# 把暂存区的文件提交到本地仓库\ngit commit -am \"update message\"\n```\n\n## 列出分支\n```\n# 列出本地分支\ngit branch\n或\ngit branch -v\n\n# 列出本地和远程所有分支\ngit branch -a\n或\ngit branch -va\n```\n\n## 删除分支\n```\n# 删除本地分支\ngit branck -D/-d <branch>\n\n# 删除远程分支，注意冒号前有空格\ngit push origin :<分支名>\n# 等价于\ngit push origin -d <branch>\n```\n\n## 推送分支\n```\n# 推送当前分支到默认remote上，remote上没有对应分支则自动创建\ngit push\n\n# 推送当前分支到指定remote，remote上没有对应分支则自动创建\ngit push <remote>\n\n# 推送到指定分支到remote的指定分支上\ngit push <remote> <remote_branch>:<loclal_branch>\n```\n\n## 拉取远程分支到本地\n```\ngit checkout -b <branch> <remote>/<branch>\n```\n或\n```\ngit checkout --track <remote>/<branch>\n```\n\n## 撤消提交（未`push`情况下）\n```\ngit reset --mixed <SHA1> # 此SHA1之后的commit全部撤消，并回退index，工作空间代码不变，--mixed可省略\ngit reset --soft <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index不变\ngit reset --hard <SHA1> # 此SHA1之后的commit全部撤消，工作空间代码和index全部退回\n```\n\n## 查看`commit`记录\n```\ngit log --oneline -n # 单行显示最后n个commit的记录\n```\n\n## 本地分支和远程分支做关联\n```\ngit branch --set-upstream-to=<remote>/<remote_branch> <loclal_branch>\n```\n\n## 推送本地当前新分支到远程\n```\ngit push -u origin <branch_name>\n```\n\n## 查看日志\n```\n# 当前分支日志\ngit log\n# 所有本地分支日志\ngit log --all\n# 指定本地分支日志\ngit log <branch_name>\n# 指定远程分支日志\ngit log origin/<branch_name>\n# 所有远程分支日志\ngit log --all origin\n```\n\n## 重命名分支\n```\ngit branch (-m | -M) [<old-branch>] <new-branch>\n```","slug":"git常用命令","published":1,"updated":"2020-04-22T13:54:43.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8cz000wn6yh7v20wovo"},{"title":"Git后悔药","comments":1,"toc":true,"date":"2019-07-25T10:33:09.000Z","_content":"使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。\n\n<!--more-->\n\n```sequence\ntitle: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push\n```\n\n### 差异（diff）\n\n工作区vs暂存区: `git diff`\n\n暂存区vs本地仓库: `git diff —cached`\n\n本地仓库vs远程仓库: `git diff <分支名> origin/<分支名>`\n\n\n\n### 撤消（reset）\n\n撤消工作区修改: `git reset —hard`\n\n撤消(1)`git add`: `git reset && git checkout .`或`git reset —hard`(会还原所有修改)\n\n撤消(2) `git commit`: `git reset --hard origin/master`(使用远端的master分支恢复到本地)\n\n撤消(3) `git push`: `git reset --hard HEAD^ && git push -f`(先在本地回到上一个版本，然后强推到远端)","source":"_posts/git-reset.md","raw":"---\ntitle: Git后悔药\ncomments: true\ntags: [Git,reset,恢复,后悔]\ncategories: [程序猿]\ntoc: true\ndate: 2019-07-25 18:33:09\n---\n使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。\n\n<!--more-->\n\n```sequence\ntitle: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push\n```\n\n### 差异（diff）\n\n工作区vs暂存区: `git diff`\n\n暂存区vs本地仓库: `git diff —cached`\n\n本地仓库vs远程仓库: `git diff <分支名> origin/<分支名>`\n\n\n\n### 撤消（reset）\n\n撤消工作区修改: `git reset —hard`\n\n撤消(1)`git add`: `git reset && git checkout .`或`git reset —hard`(会还原所有修改)\n\n撤消(2) `git commit`: `git reset --hard origin/master`(使用远端的master分支恢复到本地)\n\n撤消(3) `git push`: `git reset --hard HEAD^ && git push -f`(先在本地回到上一个版本，然后强推到远端)","slug":"git-reset","published":1,"updated":"2020-01-19T07:41:07.687Z","layout":"post","photos":[],"link":"","_id":"ck9beg8cz000xn6yh4yfrhn9b"},{"title":"Hello World","date":"2014-09-15T06:04:40.000Z","_content":"Welcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","source":"_posts/hello-world.md","raw":"title: Hello World\ndate: 2014-09-15 14:04:40\n---\nWelcome to [Hexo](http://hexo.io/)! This is your very first post. Check [documentation](http://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [trobuleshooting](http://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n<!-- more -->\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](http://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](http://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](http://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](http://hexo.io/docs/deployment.html)","slug":"hello-world","published":1,"updated":"2014-11-09T13:01:40.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d0000yn6yh2qlnr8i1"},{"title":"MacOS远程连接Windows","date":"2017-08-08T01:40:28.000Z","_content":"<br />\n<!--more-->\nMacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。\n\n1. 开始-运行-gpedit.msc，进入组策略编辑器。\n2. 在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。\n    - 远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。\n    - 要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。\n3. 关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。\n\n","source":"_posts/mac远程连接windows.md","raw":"---\ntitle: MacOS远程连接Windows\ndate: 2017-08-08 09:40:28\ntags: ['远程']\ncategories: [程序猿]\n---\n<br />\n<!--more-->\nMacOS连接Windows时，除了在Windows上打开远程桌面功能外，还需要修改Windows的组策略才能成功连接。\n\n1. 开始-运行-gpedit.msc，进入组策略编辑器。\n2. 在左侧边栏中展开，计算机配置-管理模板-Windows组件-远程桌面服务-远程桌面会话主机-安全，修改以下两项。\n    - 远程（RDP）连接要求使用指定的安全层，改为启用，安全层选择RDP。\n    - 要求使用网络级别的身份验证对远程连接的用户进行身份验证，改为禁用。\n3. 关闭组策略编辑器，重试远程，如果不行重启Windows再重试远程即可。\n\n","slug":"mac远程连接windows","published":1,"updated":"2017-08-16T08:58:43.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d3000zn6yhi40r0fn9"},{"title":"Material Design资源","date":"2015-10-15T12:19:42.000Z","_content":"![materialdesign-goals-landingimage_large_mdpi](/media/materialdesign-goals-landingimage_large_mdpi.png)\n\nMaterial Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。\n<!--more-->\n\n## 更新记录\n2015-10-15 初稿\n\n## 演示视频\n<iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=0 allowfullscreen></iframe>\n\n## Material Design 文档\n官方\n> http://www.google.com/design/spec/material-design/introduction.html\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://wiki.jikexueyuan.com/project/material-design/ \n> GitHub: https://github.com/1sters/material_design_zh_2\n> PDF: http://pan.baidu.com/s/1fr1gi \n\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://design.1sters.com/ （已关停）\n> GitHub: https://github.com/1sters/material_design_zh\n \nGoogle Material Design 正體中文版（官网翻译而来）\n> 阅读: https://www.gitbook.com/book/wcc723/google_design_translate/details\n> GitHub: https://github.com/Wcc723/google_design_translate\n> PDF: http://pan.baidu.com/s/1dD8X1Zj\n\nMaterial Design非官方中文指导手册\n\nPDF: http://pan.baidu.com/s/1mg3P45i\n\n## Android资源\n\n资源大合集\nhttps://github.com/lightSky/Awesome-MaterialDesign \n\n十大Material Design开源项目\nhttp://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\n\n## 图标\nMaterial icons guide\n> 主页: http://google.github.io/material-design-icons/\n> GitHub: https://github.com/google/material-design-icons\n\n## 网页框架\nAngular Material（控件最全，样式不错，交互动态效果多）\n> 主页: https://material.angularjs.org/\n> GitHub: https://material.angularjs.org/\n\nmaterial ui（控件较多，样式不错，交互动态效果多）\n> 主页: http://material-ui.com/\n> GitHub: https://github.com/callemall/material-ui\n\nbootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）\n> 主页: http://fezvrasta.github.io/bootstrap-material-design/\n> GitHub: http://fezvrasta.github.io/bootstrap-material-design/\n\nmuicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）\n> 主页: https://www.muicss.com/\n> GitHub: https://github.com/muicss/mui\n\nMaterializeCss（控件数量还行，样式较好，交互动态效果还行）\n> 主页: http://materializecss.com/\n> GitHub: https://github.com/Dogfalo/materialize\n\nbootswatch里的parper主题\n> 主页: http://bootswatch.com/paper/\n> GitHub: https://github.com/thomaspark/bootswatch\n\njQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）\n> 主页: http://store.ququplay.com/\n\n\n\n\n\n\n","source":"_posts/material-design资源.md","raw":"title: Material Design资源\ndate: 2015-10-15 20:19:42\ncategories: [程序猿]\ntags: [Android, Material Design, 网页框架]\n---\n![materialdesign-goals-landingimage_large_mdpi](/media/materialdesign-goals-landingimage_large_mdpi.png)\n\nMaterial Design是谷歌在Google I/O 2014推出了全新的设计语言，并荣获2014年的用户体验最佳贡献金奖。\n<!--more-->\n\n## 更新记录\n2015-10-15 初稿\n\n## 演示视频\n<iframe src=\"http://player.youku.com/embed/XNzMxNzUyNzQ0\" frameborder=0 allowfullscreen></iframe>\n\n## Material Design 文档\n官方\n> http://www.google.com/design/spec/material-design/introduction.html\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://wiki.jikexueyuan.com/project/material-design/ \n> GitHub: https://github.com/1sters/material_design_zh_2\n> PDF: http://pan.baidu.com/s/1fr1gi \n\n\nMaterial Design 中文版（官网翻译而来）\n> 阅读: http://design.1sters.com/ （已关停）\n> GitHub: https://github.com/1sters/material_design_zh\n \nGoogle Material Design 正體中文版（官网翻译而来）\n> 阅读: https://www.gitbook.com/book/wcc723/google_design_translate/details\n> GitHub: https://github.com/Wcc723/google_design_translate\n> PDF: http://pan.baidu.com/s/1dD8X1Zj\n\nMaterial Design非官方中文指导手册\n\nPDF: http://pan.baidu.com/s/1mg3P45i\n\n## Android资源\n\n资源大合集\nhttps://github.com/lightSky/Awesome-MaterialDesign \n\n十大Material Design开源项目\nhttp://www.csdn.net/article/2014-11-21/2822753-material-design-libs/1\n\n## 图标\nMaterial icons guide\n> 主页: http://google.github.io/material-design-icons/\n> GitHub: https://github.com/google/material-design-icons\n\n## 网页框架\nAngular Material（控件最全，样式不错，交互动态效果多）\n> 主页: https://material.angularjs.org/\n> GitHub: https://material.angularjs.org/\n\nmaterial ui（控件较多，样式不错，交互动态效果多）\n> 主页: http://material-ui.com/\n> GitHub: https://github.com/callemall/material-ui\n\nbootstrap-material-design（控件数量还行，样式较好，交互动态效果还行，Demo里部分样式有错位问题）\n> 主页: http://fezvrasta.github.io/bootstrap-material-design/\n> GitHub: http://fezvrasta.github.io/bootstrap-material-design/\n\nmuicss（控件较少，样式普通，交互动态效果少）（体积小，css+js 11.4k）\n> 主页: https://www.muicss.com/\n> GitHub: https://github.com/muicss/mui\n\nMaterializeCss（控件数量还行，样式较好，交互动态效果还行）\n> 主页: http://materializecss.com/\n> GitHub: https://github.com/Dogfalo/materialize\n\nbootswatch里的parper主题\n> 主页: http://bootswatch.com/paper/\n> GitHub: https://github.com/thomaspark/bootswatch\n\njQuery Mobile Material Theme（控件较少，样式普通，无交互动态效果）\n> 主页: http://store.ququplay.com/\n\n\n\n\n\n\n","slug":"material-design资源","published":1,"updated":"2020-01-17T07:55:01.986Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d40010n6yhe6lwybak"},{"title":"pip常用命令","date":"2015-01-01T15:38:56.000Z","_content":"## 列出已安装的包\n \n`pip freeze` or `pip list`\n \n<!--more-->\n \n### 导出requirements.txt\n \n`pip freeze > <目录>/requirements.txt`\n \n## 安装包\n \n### 在线安装\n \n`pip install <包名>` 或 `pip install -r requirements.txt`\n \n```\n# 安装1.9版本的django\npip install django==1.9\n# 安装版本号大于1.9的django，注意有引号\npip install \"django>1.9\"\npip install \"django>=1.9\"\npip install \"django<1.9\"\npip install \"django<=1.9\"\npip install \"django><1.9\"\n```\n \nrequirements.txt内容格式为：\n \n    APScheduler==2.1.2\n    Django==1.5.4\n    MySQL-Connector-Python==2.0.1\n    MySQL-python==1.2.3\n    PIL==1.1.7\n    South==1.0.2\n    django-grappelli==2.6.3\n    django-pagination==1.0.7\n \n### 安装本地安装包\n \n`pip install <目录>/<文件名>` 或 `pip install --use-wheel --no-index --find-links=wheelhouse/ <包名>`\n \n*<包名>前有空格*\n \n可简写为\n \n`pip install --no-index -f=<目录>/ <包名>`\n \n### 卸载包\n \n`pip uninstall <包名>` 或 `pip uninstall -r requirements.txt`\n \n### 升级包\n \n`pip install -U <包名>`\n \n### 升级pip\n \n`pip install -U pip`\n \n \n## 显示包所在的目录\n \n`pip show -f <包名>`\n \n## 搜索包\n \n`pip search <搜索关键字>`\n \n## 查询可升级的包\n \n`pip list -o`\n \n## 下载包而不安装\n \n `pip install <包名> -d  <目录> ` 或 `pip install -d <目录> -r requirements.txt`\n \n## 打包\n \n`pip wheel <包名>`\n \n## 更换国内pypi镜像\n \n### 国内pypi镜像\n \n- 豆瓣：[https://pypi.douban.com/simple](https://pypi.douban.com/simple)\n- 中国科学技术大学：[https://mirrors.ustc.edu.cn/pypi/web/simple/](https://mirrors.ustc.edu.cn/pypi/web/simple/)\n- 清华大学TUNA：[https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)\n[https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/](https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/)\n \n### 指定单次安装源\n \n`pip install <包名> -i http://pypi.v2ex.com/simple`\n \n### 指定全局安装源\n \n在unix和macos，配置文件为：$HOME/.pip/pip.conf \n在windows上，配置文件为：%HOME%\\pip\\pip.ini \n \n    [global]\n    timeout = 6000\n    index-url = http://pypi.douban.com/simple\n \n---\n \n## 参考资料\n> [pip documentation](https://pip.pypa.io/en/latest/)\n\n","source":"_posts/pip常用命令.md","raw":"title: pip常用命令\ndate: 2015-01-01 23:38:56\ncategories: [程序猿]\ntags: [Python, pip, 命令, 教程]\n---\n## 列出已安装的包\n \n`pip freeze` or `pip list`\n \n<!--more-->\n \n### 导出requirements.txt\n \n`pip freeze > <目录>/requirements.txt`\n \n## 安装包\n \n### 在线安装\n \n`pip install <包名>` 或 `pip install -r requirements.txt`\n \n```\n# 安装1.9版本的django\npip install django==1.9\n# 安装版本号大于1.9的django，注意有引号\npip install \"django>1.9\"\npip install \"django>=1.9\"\npip install \"django<1.9\"\npip install \"django<=1.9\"\npip install \"django><1.9\"\n```\n \nrequirements.txt内容格式为：\n \n    APScheduler==2.1.2\n    Django==1.5.4\n    MySQL-Connector-Python==2.0.1\n    MySQL-python==1.2.3\n    PIL==1.1.7\n    South==1.0.2\n    django-grappelli==2.6.3\n    django-pagination==1.0.7\n \n### 安装本地安装包\n \n`pip install <目录>/<文件名>` 或 `pip install --use-wheel --no-index --find-links=wheelhouse/ <包名>`\n \n*<包名>前有空格*\n \n可简写为\n \n`pip install --no-index -f=<目录>/ <包名>`\n \n### 卸载包\n \n`pip uninstall <包名>` 或 `pip uninstall -r requirements.txt`\n \n### 升级包\n \n`pip install -U <包名>`\n \n### 升级pip\n \n`pip install -U pip`\n \n \n## 显示包所在的目录\n \n`pip show -f <包名>`\n \n## 搜索包\n \n`pip search <搜索关键字>`\n \n## 查询可升级的包\n \n`pip list -o`\n \n## 下载包而不安装\n \n `pip install <包名> -d  <目录> ` 或 `pip install -d <目录> -r requirements.txt`\n \n## 打包\n \n`pip wheel <包名>`\n \n## 更换国内pypi镜像\n \n### 国内pypi镜像\n \n- 豆瓣：[https://pypi.douban.com/simple](https://pypi.douban.com/simple)\n- 中国科学技术大学：[https://mirrors.ustc.edu.cn/pypi/web/simple/](https://mirrors.ustc.edu.cn/pypi/web/simple/)\n- 清华大学TUNA：[https://pypi.tuna.tsinghua.edu.cn/simple](https://pypi.tuna.tsinghua.edu.cn/simple)\n[https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/](https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/)\n \n### 指定单次安装源\n \n`pip install <包名> -i http://pypi.v2ex.com/simple`\n \n### 指定全局安装源\n \n在unix和macos，配置文件为：$HOME/.pip/pip.conf \n在windows上，配置文件为：%HOME%\\pip\\pip.ini \n \n    [global]\n    timeout = 6000\n    index-url = http://pypi.douban.com/simple\n \n---\n \n## 参考资料\n> [pip documentation](https://pip.pypa.io/en/latest/)\n\n","slug":"pip常用命令","published":1,"updated":"2020-01-17T07:16:27.113Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d50011n6yh0xb4q15f"},{"title":"npm入门命令","comments":1,"date":"2016-07-06T15:46:37.000Z","sticky":null,"_content":"<br/>\n<!--more-->\n\n## 更新记录\n2016-07-06 初稿\n\n## 基础命令\n\n显示npm版号\n```\nnpm -v\n# 或\nnpm version\n```\n\n安装模块\n```\n# 带-g为全局安装\n# 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。\n# 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。\nnpm install <package> -g\n# 简写\nnpm i <package> -g\n```\n\n升级全局安装的指定模块\n```\nnpm update <package> -g\n```\n\n升级当前目录下的指定模块\n```\nnpm update <package>\n```\n\n升级当前目录下全部模块\n```\nnpm update\n```\n\n升级node自身\n```\n# 安装一个叫n的模块\nnpm install -g n\n# 升级到最新稳定版\nn stable\n# 升级到指定版本\nn v0.10.26\n```\n\n卸载移除指定模块\n```\nnpm uninstall <package>\n# 别名：remove, rm, r, un, unlink\n```\n\n显示已安装模块\n```\nnpm list\n```\n\n显示模块详细信息\n```\nnpm show <package>\n```\n\n查看全局包安装路径\n```\nnpm root -g\n```\n\n查看当前包安装路径\n```\nnpm root\n```\n\n查看npm配置\n```\nnpm config list\n```\n查看帮助\n```\nnpm help\n```\n\n查看相关命令的帮助文档\n```\nnpm help <command>\n```\n","source":"_posts/npm入门命令.md","raw":"title: npm入门命令\ncomments: true\ndate: 2016-07-06 23:46:37\ncategories: 程序猿\ntags: [npm, Nodejs]\nsticky:\n---\n<br/>\n<!--more-->\n\n## 更新记录\n2016-07-06 初稿\n\n## 基础命令\n\n显示npm版号\n```\nnpm -v\n# 或\nnpm version\n```\n\n安装模块\n```\n# 带-g为全局安装\n# 本地安装：package会被下载到当前所在目录，也只能在当前目录下使用。\n# 全局安装：package会被下载到到特定的系统目录下，安装的package能够在所有目录下使用。\nnpm install <package> -g\n# 简写\nnpm i <package> -g\n```\n\n升级全局安装的指定模块\n```\nnpm update <package> -g\n```\n\n升级当前目录下的指定模块\n```\nnpm update <package>\n```\n\n升级当前目录下全部模块\n```\nnpm update\n```\n\n升级node自身\n```\n# 安装一个叫n的模块\nnpm install -g n\n# 升级到最新稳定版\nn stable\n# 升级到指定版本\nn v0.10.26\n```\n\n卸载移除指定模块\n```\nnpm uninstall <package>\n# 别名：remove, rm, r, un, unlink\n```\n\n显示已安装模块\n```\nnpm list\n```\n\n显示模块详细信息\n```\nnpm show <package>\n```\n\n查看全局包安装路径\n```\nnpm root -g\n```\n\n查看当前包安装路径\n```\nnpm root\n```\n\n查看npm配置\n```\nnpm config list\n```\n查看帮助\n```\nnpm help\n```\n\n查看相关命令的帮助文档\n```\nnpm help <command>\n```\n","slug":"npm入门命令","published":1,"updated":"2020-01-17T07:54:42.950Z","layout":"post","photos":[],"link":"","_id":"ck9beg8d60012n6yheyrkj0f5"},{"title":"python中的UUID","date":"2015-06-02T15:32:59.000Z","_content":"## 简介（维基百科）\n> 通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。  \nUUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[[3]][1]\n\n<!--more-->\n\n## 定义 :\nUUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考[随机UUID的重复机率](http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81)）。\n\n## 算法\n1. uuid1()——基于时间戳\n由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，\n但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。\n2. uuid2()——基于分布式计算环境DCE（Python中没有这个函数）\n算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。\n实际中很少用到该方法。\n3. uuid3()——基于名字的MD5散列值\n通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，\n和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。\n4. uuid4()——基于随机数\n由伪随机数得到，有一定的重复概率，该概率可以计算出来。\n5. uuid5()——基于名字的SHA-1散列值\n算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法\n\n## 在`python`中在生成UUID\n`import uuid`后即可使用\n示例代码\n```python\nimport uuid\nuuid.uuid1()\nuuid.uuid3(namespace, name)\nuuid.uuid4()\nuuid.uuid5(namespace, name)\n```\n\n## 参考\n> http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\n> https://docs.python.org/2/library/uuid.html\n\n[1]: http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81 \"通用唯一识别码\"","source":"_posts/python中的UUID.md","raw":"title: python中的UUID\ndate: 2015-06-02 23:32:59\ncategories: [程序猿]\ntags: [Python, UUID]\n---\n## 简介（维基百科）\n> 通用唯一识别码（英语：Universally Unique Identifier，简称UUID）是一种软件建构的标准，亦为开放软件基金会组织在分散式计算环境领域的一部份。  \nUUID的目的，是让分散式系统中的所有元素，都能有唯一的辨识资讯，而不需要透过中央控制端来做辨识资讯的指定。如此一来，每个人都可以建立不与其它人冲突的UUID。在这样的情况下，就不需考虑资料库建立时的名称重复问题。目前最广泛应用的UUID，是微软公司的全局唯一标识符（GUID），而其他重要的应用，则有Linux ext2/ext3档案系统、LUKS加密分区、GNOME、KDE、Mac OS X等等。另外我们也可以在e2fsprogs套件中的UUID函式库找到实现。[[3]][1]\n\n<!--more-->\n\n## 定义 :\nUUID是由一组32位数的16进位数字所构成，是故UUID理论上的总数为1632=2128，约等于3.4 x 1038。也就是说若每纳秒产生1兆个UUID，要花100亿年才会将所有UUID用完，，它保证对在同一时空中的所有机器都是唯一的（重复机率请参考[随机UUID的重复机率](http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81)）。\n\n## 算法\n1. uuid1()——基于时间戳\n由MAC地址、当前时间戳、随机数生成。可以保证全球范围内的唯一性，\n但MAC的使用同时带来安全性问题，局域网中可以使用IP来代替MAC。\n2. uuid2()——基于分布式计算环境DCE（Python中没有这个函数）\n算法与uuid1相同，不同的是把时间戳的前4位置换为POSIX的UID。\n实际中很少用到该方法。\n3. uuid3()——基于名字的MD5散列值\n通过计算名字和命名空间的MD5散列值得到，保证了同一命名空间中不同名字的唯一性，\n和不同命名空间的唯一性，但同一命名空间的同一名字生成相同的uuid。\n4. uuid4()——基于随机数\n由伪随机数得到，有一定的重复概率，该概率可以计算出来。\n5. uuid5()——基于名字的SHA-1散列值\n算法与uuid3相同，不同的是使用 Secure Hash Algorithm 1 算法\n\n## 在`python`中在生成UUID\n`import uuid`后即可使用\n示例代码\n```python\nimport uuid\nuuid.uuid1()\nuuid.uuid3(namespace, name)\nuuid.uuid4()\nuuid.uuid5(namespace, name)\n```\n\n## 参考\n> http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81\n> https://docs.python.org/2/library/uuid.html\n\n[1]: http://zh.wikipedia.org/zh-hans/%E9%80%9A%E7%94%A8%E5%94%AF%E4%B8%80%E8%AF%86%E5%88%AB%E7%A0%81 \"通用唯一识别码\"","slug":"python中的UUID","published":1,"updated":"2020-01-17T07:54:27.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d70013n6yhs5nvp627"},{"title":"JS笔记","date":"2019-04-24T08:35:13.000Z","_content":"js中要用变量作为key的话使用方括号括住\n例：`this.searchKeyword`\n```javascript\nthis.$http({\n    url: this.searchUrl,\n    method: this.remoteRequestMethod,\n    params: Object.assign({}, this.searchParams, this.pager),\n    data: Object.assign({ [this.searchKeyword]: query }, this.searchBody, this.pager)\n    })\n```\n<!--more-->\n全文完🙈","source":"_posts/js笔记.md","raw":"title: JS笔记\ndate: 2019-04-24 16:35:13\ncategories: [程序猿]\ntags: [js]\n---\njs中要用变量作为key的话使用方括号括住\n例：`this.searchKeyword`\n```javascript\nthis.$http({\n    url: this.searchUrl,\n    method: this.remoteRequestMethod,\n    params: Object.assign({}, this.searchParams, this.pager),\n    data: Object.assign({ [this.searchKeyword]: query }, this.searchBody, this.pager)\n    })\n```\n<!--more-->\n全文完🙈","slug":"js笔记","published":1,"updated":"2020-01-17T07:55:25.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8d80014n6yhw2d4empr"},{"title":"ubuntu安装JDK8","date":"2015-03-28T09:29:42.000Z","_content":"\n## 下载JDK8\n到[oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)网站下载JDK8\n<!--more-->\n## 解压安装\n```\nsudo tar xzvf jdk-8u40-linux-x64.tar.gz\nmkdir -p /usr/lib/jvm\nsudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm\ncd /usr/lib/jvm\nsudo ln -s jdk1.8.0_40 java-8\n```\n\n## 配置环境变量\n添加PATH,CLASSPATH,JAVA_HOME环境变量\n`gedit ~/.bashrc`\n在打开的窗口里添加以下内容\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n保存退出，执行命令使配置生效\n`source ~/.bashrc`\n\n## 配置默认JDK版本\n在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。\n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300\nsudo update-alternatives --config java\nsudo update-alternatives --config javac\n```\n\n## 验证是否成功\n`java -version`","source":"_posts/ubuntu安装JDK8.md","raw":"title: ubuntu安装JDK8\ndate: 2015-03-28 17:29:42\ncategories: [程序猿]\ntags: [Ubuntu, JDK]\n---\n\n## 下载JDK8\n到[oracle](http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html)网站下载JDK8\n<!--more-->\n## 解压安装\n```\nsudo tar xzvf jdk-8u40-linux-x64.tar.gz\nmkdir -p /usr/lib/jvm\nsudo mv  /usr/lib/jvm jdk1.8.0_40 /usr/lib/jvm\ncd /usr/lib/jvm\nsudo ln -s jdk1.8.0_40 java-8\n```\n\n## 配置环境变量\n添加PATH,CLASSPATH,JAVA_HOME环境变量\n`gedit ~/.bashrc`\n在打开的窗口里添加以下内容\n```\nexport JAVA_HOME=/usr/lib/jvm/java-8\nexport JRE_HOME=${JAVA_HOME}/jre\nexport CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib\nexport PATH=${JAVA_HOME}/bin:$PATH\n```\n保存退出，执行命令使配置生效\n`source ~/.bashrc`\n\n## 配置默认JDK版本\n在有的系统中会预装OpenJDK，系统默认使用的是这个，而不是刚才装的。所以这一步是通知系统使用Oracle的JDK，非OpenJDK。\n```\nsudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-8/bin/java 300\nsudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-8/bin/javac 300\nsudo update-alternatives --config java\nsudo update-alternatives --config javac\n```\n\n## 验证是否成功\n`java -version`","slug":"ubuntu安装JDK8","published":1,"updated":"2020-01-17T07:54:07.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dc0015n6yhcl5459ib"},{"title":"ubuntu从14.10升级到15.04","date":"2015-08-29T10:23:11.000Z","_content":"ubuntu-15.04-logo.jpg)\n\nubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。\n<!--more-->\n\n先检查系统更新，如果有则进行更新，在终端中输入以下命令\n```\nsudo apt-get update && sudo apt-get dist-upgrade\n```\n然后检查是否有可用的版本\n```\nsudo update-manager -d\n```\n回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。\n\n最后点击开始升级，然后就等着更新自动下载更新吧。\nubuntu-14.10-15.04-01.png)\n\n\n更新完后重启系统即可完成升级。\nubuntu-15.04-info.png)\n\n","source":"_posts/ubuntu从14-10升级到15-04.md","raw":"title: ubuntu从14.10升级到15.04\ndate: 2015-08-29 18:23:11\ncategories: [其它]\ntags: [Ubuntu]\n---\nubuntu-15.04-logo.jpg)\n\nubuntu15.04已经发布几个月了，今天准备把家里的笔记本升级下，在这记录下，因为笔记本是14.10的所以下面内容只适用于从14.10升级到15.04的，如果你的系统是14.04，则需要先升级到14.10然后再升级到15.04。\n<!--more-->\n\n先检查系统更新，如果有则进行更新，在终端中输入以下命令\n```\nsudo apt-get update && sudo apt-get dist-upgrade\n```\n然后检查是否有可用的版本\n```\nsudo update-manager -d\n```\n回车后会弹出软件更新器，等检查完成后点击升级，后面还会出来很多个确认对话框，一路确定下去就好。\n\n最后点击开始升级，然后就等着更新自动下载更新吧。\nubuntu-14.10-15.04-01.png)\n\n\n更新完后重启系统即可完成升级。\nubuntu-15.04-info.png)\n\n","slug":"ubuntu从14-10升级到15-04","published":1,"updated":"2020-01-17T07:53:58.888Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dh0016n6yh3uyttauh"},{"title":"Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool","date":"2015-03-28T09:54:03.000Z","_content":"错误信息：\n`unable to run mksdcard sdk tool`\n原因：缺少库文件\n解决方法：\n`sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6`","source":"_posts/ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool.md","raw":"title: Ubuntu安装Android Studio出现错unable to run mksdcard sdk tool\ndate: 2015-03-28 17:54:03\ncategories: [程序猿]\ntags: [Ubuntu, Android]\n---\n错误信息：\n`unable to run mksdcard sdk tool`\n原因：缺少库文件\n解决方法：\n`sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6`","slug":"ubuntu安装android-studio出现错unable-to-run-mksdcard-sdk-tool","published":1,"updated":"2020-01-17T07:54:15.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dk0017n6yh2ym5hhxh"},{"title":"XY-Problem","date":"2015-07-04T15:51:40.000Z","_content":"\nXY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。\n\n \n对于“XY问题”，不同的人有不同的解释：\n \n> 你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。\n \n> — 来自 Re: sequencial file naming by Abigail<!--more-->\n\n---\n\n> 你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。\n> — 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo\n \n---\n\n> 有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。\n> — 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region\n \n---\n\n> 在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。\n> — 来自 <m18zt5muq9.fsf_-_@halfdome.holdit.com> by merlyn\n \n---\n\n> 也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。\n> — from <Pine.GHP.4.21.0009061210570.8800-100000@hpplus03.cern.ch> by Alan J. Flavell\n \n---\n\n> XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。\n> — 来自 <slrn89um8j.5g9.tadmc@magna.metronet.com> by Tad McClellan\n \n---\n\n> 当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..\n \n> 但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)\n \n> . . .\n \n> 另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）\n \n> . . .\n \n> 我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。\n> — 来自 <6lnb70$lct$1@monet.op.net> by MJD\n\n---\n\n部分内容引用自[外刊IT评论](http://www.vaikan.com/xy-problem/)","source":"_posts/xy-problem.md","raw":"title: \"XY-Problem\"\ndate: 2015-07-04 23:51:40\ncategories: [随笔]\ntags: [杂谈]\n---\n\nXY问题，一个对我来说比较新的词汇，但可能我们大家平时都遇到过这种问题。\n\n \n对于“XY问题”，不同的人有不同的解释：\n \n> 你想做X，但你认为Y是实现X最好的方法。你不问关于X的事，反而问起Y的事。\n \n> — 来自 Re: sequencial file naming by Abigail<!--more-->\n\n---\n\n> 你尝试去做X，但你想起了Y方案。于是，你开始问关于Y方案的事，完全不提X。问题是，也许会有更好的方案，但如果你不描述X是什么，我们根本无法出谋划策。\n> — 来自 Re: How do I keep the command line from eating the backslashes? by revdiablo\n \n---\n\n> 有些人问如何去做Y，但他们实际是想做X。他们之所以问如何做Y，因为他们相信Y是实现X最好的方法。人们用各种的“试试这个”来给予帮助，而结果往往是“这不行，因为….”。这给我们提示，依赖环境的不同，你的问题可能会有其它更好的方案。\n> — 来自 Re: Re: Re: Re: regex to validate e-mail addresses and phone numbers by Limbic~Region\n \n---\n\n> 在不理解更大的问题(上下文)X的情况下，去回答问题Y，往往完全无助于解决问题X。\n> — 来自 <m18zt5muq9.fsf_-_@halfdome.holdit.com> by merlyn\n \n---\n\n> 也叫做“过早下结论”：有疑问的人希望能解决一些阐述的并不清楚的问题X，他们断定Y是解决方案的一个要素，于是他们就询问如何实现Y。\n> — from <Pine.GHP.4.21.0009061210570.8800-100000@hpplus03.cern.ch> by Alan J. Flavell\n \n---\n\n> XY问题是指，当你需要做X时，你认为可以用Y来实现X，于是你问如何做Y，而你实际应该做的是说明你的X问题是什么。也许会有一个比Y更好的Z解决方案，但如果X没有被说出来，没有人能提出更好的建议。\n> — 来自 <slrn89um8j.5g9.tadmc@magna.metronet.com> by Tad McClellan\n \n---\n\n> 当有人来问如何做一些傻事时，我真的不知道如何去做。我只能照实回答，说我可不要告诉别人如何做傻事…..\n \n> 但是，一旦我这样做了，人们就会蹦到我面前自作聪明。这种事情经常发生。(“别呀，帮帮这个可怜的人吧，如果你知道他们真的需要知道如何做，你干嘛不告诉他们呢？”)\n \n> . . .\n \n> 另一方面，我可以从另一个层面上回答他们，给他们一个更好的方案，但这种执教也许会让他们脸上不好看。如果他们接受倒好，如果不接受，你会很伤心看到自己的努力和好建议被忽略。同样，人们会蹦到你面前指责你没有直接回答他们的问题。（“谁要你告诉他该怎么做了，你只要回答他的问题就行了。”）\n \n> . . .\n \n> 我想这种两种回答方式生活中都经常会有。但也许没有一种回答会得到好结果。\n> — 来自 <6lnb70$lct$1@monet.op.net> by MJD\n\n---\n\n部分内容引用自[外刊IT评论](http://www.vaikan.com/xy-problem/)","slug":"xy-problem","published":1,"updated":"2015-09-22T12:41:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dl0018n6yhajf63afc"},{"title":"ubuntu更新NV显卡驱动","date":"2015-03-27T12:26:27.000Z","_content":"\n昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<!--more-->\n\n## 下载驱动\n首页在[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers)选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run\n\n## 关闭X server\n输入`sudo /etc/init.d/gdm stop`或`sudo /etc/init.d/lightdm stop`停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式\n\n### 安装驱动\n进入驱动所在文件夹，执行`sudo sh NVIDIA.run`，安装驱动过程中会有几次对话框需要确认。\n\n## 启动GDM\n`sudo /etc/init.d/gdm start`或`sudo /etc/init.d/lightdm start`\n\n## 重启电脑\nsudo reboot\n\n这样NV的驱动就安装好了。\n\n","source":"_posts/ubuntu更新NV显卡驱动.md","raw":"title: ubuntu更新NV显卡驱动\ndate: 2015-03-27 20:26:27\ncategories: [其它]\ntags: [Ubuntu, 驱动]\n---\n\n昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<!--more-->\n\n## 下载驱动\n首页在[http://www.geforce.cn/drivers](http://www.geforce.cn/drivers)选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run\n\n## 关闭X server\n输入`sudo /etc/init.d/gdm stop`或`sudo /etc/init.d/lightdm stop`停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式\n\n### 安装驱动\n进入驱动所在文件夹，执行`sudo sh NVIDIA.run`，安装驱动过程中会有几次对话框需要确认。\n\n## 启动GDM\n`sudo /etc/init.d/gdm start`或`sudo /etc/init.d/lightdm start`\n\n## 重启电脑\nsudo reboot\n\n这样NV的驱动就安装好了。\n\n","slug":"ubuntu更新NV显卡驱动","published":1,"updated":"2020-01-17T07:53:29.601Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dm0019n6yheeb6tuhq"},{"title":"ubuntu下运行shadowsocks客户端","date":"2015-03-28T08:54:44.000Z","_content":"Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,[项目地址](https://github.com/shadowsocks/shadowsocks)。<!--more-->\n\n## 下载\n```\nsudo apt-get install python-pip python-m2crypto\nsudo pip install shadowsocks\n```\n## 配置\n`sudo gedit /etc/shadowsocks/config.json`\n```\n{\n    \"server\":\"remote-shadowsocks-server-ip-addr\",\n    \"server_port\":8883,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"abcdef\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false,\n    \"workers\":1\n}\n```\n> 请根据实际情况配置\n\n## 启动客户端\n`sslocal -c /etc/shadowsocks.json`\n\n## 浏览器扩展\nFirefox可使用FoxyProxy Standard\nChrome可使用Proxy SwitchOmega\n配置请自行Google/百度","source":"_posts/ubuntu运行shadowsocks客户端.md","raw":"title: ubuntu下运行shadowsocks客户端\ndate: 2015-03-28 16:54:44\ncategories: [优化辅助]\ntags: [Ubuntu, Shadowsocks]\n---\nShadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,[项目地址](https://github.com/shadowsocks/shadowsocks)。<!--more-->\n\n## 下载\n```\nsudo apt-get install python-pip python-m2crypto\nsudo pip install shadowsocks\n```\n## 配置\n`sudo gedit /etc/shadowsocks/config.json`\n```\n{\n    \"server\":\"remote-shadowsocks-server-ip-addr\",\n    \"server_port\":8883,\n    \"local_address\":\"127.0.0.1\",\n    \"local_port\":1080,\n    \"password\":\"abcdef\",\n    \"timeout\":300,\n    \"method\":\"aes-256-cfb\",\n    \"fast_open\":false,\n    \"workers\":1\n}\n```\n> 请根据实际情况配置\n\n## 启动客户端\n`sslocal -c /etc/shadowsocks.json`\n\n## 浏览器扩展\nFirefox可使用FoxyProxy Standard\nChrome可使用Proxy SwitchOmega\n配置请自行Google/百度","slug":"ubuntu运行shadowsocks客户端","published":1,"updated":"2020-01-17T07:53:21.486Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dq001an6yhuq1sxg7g"},{"title":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","date":"2015-02-04T15:35:40.000Z","_content":"## 更新记录\n2016-03-04 更新教程\n2015-09-16 添加旧版软件下载\n2015-02-04 初稿\n\n鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<!--more-->\n\n## 配置步骤\n \n### 1. [注册ngrok账号](https://dashboard.ngrok.com/user/signup)\n注册成功后拿到授权码`auth token`，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；\n \n### 2. [下载ngrok](https://ngrok.com/download)，解压；\n\n### 3. 启动\n##### 方式一:\n让本地的‘http://127.0.0.1:80’ 可以让外网访问\n```yml\nngrok http 80\n```\nngrok会随机分配一个二级域名，可直接通过外网可通过`http://xxxx.tunnel.mobi`来访问本机的`http://127.0.0.1:80`网站\n\n##### 方式二：使用配置文件启动:\n在`ngrok.exe`目录下执行命令（不带尖括号），生成配置文件（配置文件会在`C:\\Users\\用户名/.ngrok2/ngrok.yml`下「windows」）\n```\nngrok authtoken <you authtoken>\n```\n修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）\n```\nauthtoken:<you authtoken>\ntunnels:\n  # 自定义隧道名 \n  iblogc:\n    #本地服务端口 \n    addr: 4000\n    # 用于http/https里的身份认证\n    #auth: \"username:password\"\n    proto: http\n    # 二级域名，如果运行提示重复，换一个就行\n    subdomain: iblogc\n  django:\n    addr: 8000\n    auth: \"abc:123456\"\n    proto: http\n    subdomain: django\n  weixin:\n    addr: 80\n    proto: http\n    subdomain: weixin\n```\n\n现在执行\n```\nngrok start iblogc\n```\n\n试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。\n`http://iblogc.ngrok.io` `https://iblogc.ngrok.io` 协议均可以访问。\nngrok-start-iblogc.png)\n\n你也可以同时启动两个tunnel\n```\nngrok start iblogc django weixin\n```\nngrok-start-iblogc-django-weixin.png)\n\n因为我的django tunnel配置文件里添加了`auth`配置所以访问`http://django.ngrok.io`需要输入用户名密码。\nngrok-auth.png)\n\n假设`weixin`就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用`weixin.ngrok.com`进行配置了，所有发向此域名的请求都会转发到你的本地`127.0.0.1:80`上。\n\n### 4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开`http://127.0.0.1:4040`查看详细信息\nnrok-web-interface.png)\n\n### 5. 参考文档\n官方文档：https://ngrok.com/docs\n\n","source":"_posts/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.md","raw":"title: 使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）\ndate: 2015-02-04 23:35:40\ncategories: [程序猿]\ntags: [微信公众号, 端口, ngrok, 内网穿透]\n---\n## 更新记录\n2016-03-04 更新教程\n2015-09-16 添加旧版软件下载\n2015-02-04 初稿\n\n鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<!--more-->\n\n## 配置步骤\n \n### 1. [注册ngrok账号](https://dashboard.ngrok.com/user/signup)\n注册成功后拿到授权码`auth token`，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；\n \n### 2. [下载ngrok](https://ngrok.com/download)，解压；\n\n### 3. 启动\n##### 方式一:\n让本地的‘http://127.0.0.1:80’ 可以让外网访问\n```yml\nngrok http 80\n```\nngrok会随机分配一个二级域名，可直接通过外网可通过`http://xxxx.tunnel.mobi`来访问本机的`http://127.0.0.1:80`网站\n\n##### 方式二：使用配置文件启动:\n在`ngrok.exe`目录下执行命令（不带尖括号），生成配置文件（配置文件会在`C:\\Users\\用户名/.ngrok2/ngrok.yml`下「windows」）\n```\nngrok authtoken <you authtoken>\n```\n修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）\n```\nauthtoken:<you authtoken>\ntunnels:\n  # 自定义隧道名 \n  iblogc:\n    #本地服务端口 \n    addr: 4000\n    # 用于http/https里的身份认证\n    #auth: \"username:password\"\n    proto: http\n    # 二级域名，如果运行提示重复，换一个就行\n    subdomain: iblogc\n  django:\n    addr: 8000\n    auth: \"abc:123456\"\n    proto: http\n    subdomain: django\n  weixin:\n    addr: 80\n    proto: http\n    subdomain: weixin\n```\n\n现在执行\n```\nngrok start iblogc\n```\n\n试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。\n`http://iblogc.ngrok.io` `https://iblogc.ngrok.io` 协议均可以访问。\nngrok-start-iblogc.png)\n\n你也可以同时启动两个tunnel\n```\nngrok start iblogc django weixin\n```\nngrok-start-iblogc-django-weixin.png)\n\n因为我的django tunnel配置文件里添加了`auth`配置所以访问`http://django.ngrok.io`需要输入用户名密码。\nngrok-auth.png)\n\n假设`weixin`就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用`weixin.ngrok.com`进行配置了，所有发向此域名的请求都会转发到你的本地`127.0.0.1:80`上。\n\n### 4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开`http://127.0.0.1:4040`查看详细信息\nnrok-web-interface.png)\n\n### 5. 参考文档\n官方文档：https://ngrok.com/docs\n\n","slug":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","published":1,"updated":"2019-01-31T06:27:41.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8ds001bn6yhsqybxnne"},{"title":"使用alembic进行数据库版本管理","comments":1,"date":"2018-09-13T10:53:14.000Z","_content":"\n转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\n\n## 前言\n\n随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。\n\nAlembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。\n<!--more-->\n\n## 安装\n\n```bash\npip install alembic\n```\n\n通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令\n\n同时需要安装的还有 SQLAlchemy 和 PyMysql\n\n```bash\npip install sqlalchemy\npip install pymysql\n```\n\n## 初始化\n\n在使用 alembic 之前，需要进行初始化操作。\n\n```bash\nalembic init <YOUR_ALEMBIC_DIR>\n```\n\nYOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如\n\n```bash\nalembic init alembic\n```\n\n**此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。**\n\n**同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。**\n\n显示类似结果即初始化成功。\n\n```bash\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... done\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... done\nPlease edit configuration/connection/logging settings in 'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini' befor\ne proceeding.\n```\n\n初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。\n\n## 修改配置文件\n\n接下来对 alembic.ini 的信息进行修改。\n\n主要修改的是配置文件中的数据库连接部分。\n\n```python\nsqlalchemy.url = driver://user:pass@localhost:port/dbname\n```\n\n将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。\n\n如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下\n\n```python\nmysql+pymysql://demo_user:demo123456@127.0.0.1:3306/demo_db\n```\n\n## 修改 env.py\n\n除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。\n\n在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。\n\n将原先的\n\n```python\ntarget_metadata = None\n```\n\n修改成项目中的 model\n```python\nimport os\nimport sys\n\nsys.path.append(dirname(dirname(abspath(__file__))))\nfrom app import db\ntarget_metadata = db.metadata\n```\n\n## 创建新版本\n\n用 alembic revision -m + 注释 创建数据库版本\n\n```bash\nalembic revision --autogenerate -m \"init db\"\n```\n\n运行后，类似如下结果，即创建版本成功\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected removed table 'user'\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... done\n```\n\n每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。\n\n执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。\n\n## 变更数据库\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本\n\n**将数据库升级到最新版本**\n\n```bash\nalembic upgrade head\n```\n\n运行结果类似\n\n```bash\n(venv_win) D:\\Project\\py_sqlalchemy_demo>alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -> b034414f04cd, create tables02\n```\n\n其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。\n\n**将数据库降级到最初版本**\n\n```bash\nalembic downgrade base\n```\n\n**将数据库降级到执行版本**，使用 alembic downgrade + 版本号，不包含注释部分\n\n```bash\nalembic downgrade <version>\n```\n\n如\n\n```bash\nalembic downgrade 7b55b3d83158\n```\n\n运行结果\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running downgrade b034414f04cd -> 7b55b3d83158, create tables02\n```\n\n升级也是同样的道理，alembic upgrade + 版本号\n\n## 离线更新（生成 sql 脚本）\n\n在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：\n\n```bash\nalembic upgrade <version> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade ae1027a6acf --sql > migration.sql\n```\n\n从特定起始版本生成 sql 脚本：\n\n```bash\nalembic upgrade <vsersion>:<vsersion> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade 1975ea83b712:ae1027a6acf --sql > migration.sql\n```\n\n如果是数据库降级操作，把 upgrade 替换为 downgrade。\n\n## 查询当前数据库版本号\n\n在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。\n\n表中的 version_num 字段记录了当前的数据库版本号。\n\n## 清除所有版本\n\n如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。\n\n## 参考资料\n\n[http://alembic.zzzcomputing.com/en/latest/tutorial.html](http://alembic.zzzcomputing.com/en/latest/tutorial.html)\n\n[http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/](http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/)\n\n[http://blog.csdn.net/wenxuansoft/article/details/50242957](http://blog.csdn.net/wenxuansoft/article/details/50242957)","source":"_posts/使用alembic进行数据库版本管理.md","raw":"---\ntitle: 使用alembic进行数据库版本管理\ncomments: true\ntags: [Python, 教程]\ncategories: [程序猿]\ndate: 2018-09-13 18:53:14\n---\n\n转自：https://www.cnblogs.com/blackmatrix/p/6236573.html，做了部分修改\n\n## 前言\n\n随着项目业务需求的不断变更，数据库的表结构修改难以避免，此时就需要对数据库的修改加以记录和控制，便于项目的版本管理和随意的升级和降级。\n\nAlembic 就可以很好的解决这个问题。Alembic 是 SQLAlchemy 作者开发的 Python 数据库版本管理工具。\n<!--more-->\n\n## 安装\n\n```bash\npip install alembic\n```\n\n通过 pip 命令安装，如果使用虚拟环境，记得激活虚拟环境后再执行 pip 命令\n\n同时需要安装的还有 SQLAlchemy 和 PyMysql\n\n```bash\npip install sqlalchemy\npip install pymysql\n```\n\n## 初始化\n\n在使用 alembic 之前，需要进行初始化操作。\n\n```bash\nalembic init <YOUR_ALEMBIC_DIR>\n```\n\nYOUR_ALEMBIC_DIR，可以取一个符合项目名称规范的目录名，如\n\n```bash\nalembic init alembic\n```\n\n**此时需要注意，如果之前是在虚拟环境中安装的 alembic，需要激活虚拟环境后，在执行上述命令。**\n\n**同时，建议 cd 到项目根目录再执行初始化操作，因为 YOUR_ALEMBIC_DIR 会在当前目录下创建。**\n\n显示类似结果即初始化成功。\n\n```bash\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic ... done\nCreating directory D:\\Project\\py_sqlalchemy_demo\\alembic\\versions ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic.ini ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\env.py ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\README ... done\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\script.py.mako ... done\nPlease edit configuration/connection/logging settings in 'D:\\\\Project\\\\py_sqlalchemy_demo\\\\alembic.ini' befor\ne proceeding.\n```\n\n初始化成功后，会在执行初始化命令的目录下，生成一个 alembic.ini 的配置文件，及一个 alembic 目录，目录名就是之前设置的 YOUR_ALEMBIC_DIR。\n\n## 修改配置文件\n\n接下来对 alembic.ini 的信息进行修改。\n\n主要修改的是配置文件中的数据库连接部分。\n\n```python\nsqlalchemy.url = driver://user:pass@localhost:port/dbname\n```\n\n将配置文件中，此部分替换成对应的数据库连接，这个数据库连接的写法是与 SQLAlchemy 创建 engine 时是一样的。\n\n如我在 demo 中使用的是 SQLAlchemy 与 PyMysql，那数据库连接就是类似如下\n\n```python\nmysql+pymysql://demo_user:demo123456@127.0.0.1:3306/demo_db\n```\n\n## 修改 env.py\n\n除修改配置文件外，还需要对 YOUR_ALEMBIC_DIR 目录下的 env.py 文件进行修改。\n\n在 env.py 中，将 target_metadata 设置成项目的 model，使 alembic 能获取到项目中 model 定义的信息。\n\n将原先的\n\n```python\ntarget_metadata = None\n```\n\n修改成项目中的 model\n```python\nimport os\nimport sys\n\nsys.path.append(dirname(dirname(abspath(__file__))))\nfrom app import db\ntarget_metadata = db.metadata\n```\n\n## 创建新版本\n\n用 alembic revision -m + 注释 创建数据库版本\n\n```bash\nalembic revision --autogenerate -m \"init db\"\n```\n\n运行后，类似如下结果，即创建版本成功\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected removed table 'user'\nGenerating D:\\Project\\py_sqlalchemy_demo\\alembic\\versions\\7b55b3d83158_create_tables.py ... done\n```\n\n每次修改过 SQLAlchemy 的 model，执行此命令即可创建对应的版本。\n\n执行成功后，会在项目根目录下的 alembic/versions / 下生成的对应版本的 py 文件。命令规则是版本号 + 注释。(这个命名规则是在配置文件中定义的)\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本。\n\n## 变更数据库\n\n在每次创建新版本后，需要执行将数据库升级到新版本的命令，才能继续更新版本\n\n**将数据库升级到最新版本**\n\n```bash\nalembic upgrade head\n```\n\n运行结果类似\n\n```bash\n(venv_win) D:\\Project\\py_sqlalchemy_demo>alembic upgrade head\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade 7b55b3d83158 -> b034414f04cd, create tables02\n```\n\n其中，命令中的 head 和 base 特指最新版本和最初版本。当需要对数据库进行升级时，使用 upgrade，降级使用 downgrade。\n\n**将数据库降级到最初版本**\n\n```bash\nalembic downgrade base\n```\n\n**将数据库降级到执行版本**，使用 alembic downgrade + 版本号，不包含注释部分\n\n```bash\nalembic downgrade <version>\n```\n\n如\n\n```bash\nalembic downgrade 7b55b3d83158\n```\n\n运行结果\n\n```bash\nINFO  [alembic.runtime.migration] Context impl MySQLImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running downgrade b034414f04cd -> 7b55b3d83158, create tables02\n```\n\n升级也是同样的道理，alembic upgrade + 版本号\n\n## 离线更新（生成 sql 脚本）\n\n在某些不适合在线更新的情况，可以采用生成 sql 脚本的形式，进行离线更新：\n\n```bash\nalembic upgrade <version> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade ae1027a6acf --sql > migration.sql\n```\n\n从特定起始版本生成 sql 脚本：\n\n```bash\nalembic upgrade <vsersion>:<vsersion> --sql > migration.sql\n```\n\n如：\n\n```bash\nalembic upgrade 1975ea83b712:ae1027a6acf --sql > migration.sql\n```\n\n如果是数据库降级操作，把 upgrade 替换为 downgrade。\n\n## 查询当前数据库版本号\n\n在对数据库进行升级或降级后，会在当前操作的数据库中新增一个表；alembic_version。\n\n表中的 version_num 字段记录了当前的数据库版本号。\n\n## 清除所有版本\n\n如果需要清除所有的版本，将 versions 删除掉，同时删除数据库的 alembic_version 表。\n\n## 参考资料\n\n[http://alembic.zzzcomputing.com/en/latest/tutorial.html](http://alembic.zzzcomputing.com/en/latest/tutorial.html)\n\n[http://www.codeweblog.com/%E5%B8%B8%E8%A7%81%E7%9A%84sqlalchemy%E5%88%97%E7%B1%BB%E5%9E%8B-%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9%E5%92%8C%E5%85%B3%E7%B3%BB%E9%80%89%E9%A1%B9/](http://www.codeweblog.com/%25E5%25B8%25B8%25E8%25A7%2581%25E7%259A%2584sqlalchemy%25E5%2588%2597%25E7%25B1%25BB%25E5%259E%258B-%25E9%2585%258D%25E7%25BD%25AE%25E9%2580%2589%25E9%25A1%25B9%25E5%2592%258C%25E5%2585%25B3%25E7%25B3%25BB%25E9%2580%2589%25E9%25A1%25B9/)\n\n[http://blog.csdn.net/wenxuansoft/article/details/50242957](http://blog.csdn.net/wenxuansoft/article/details/50242957)","slug":"使用alembic进行数据库版本管理","published":1,"updated":"2020-03-04T05:22:29.004Z","layout":"post","photos":[],"link":"","_id":"ck9beg8dv001cn6yh1xen7qyn"},{"title":"使用Synergy实现多台电脑共享一套键鼠","date":"2015-08-29T15:52:41.000Z","_content":"![Synery-log.png](/media/Synergy-logo.png)\n\n因为家里有一台台式和一台笔记本，台式`Windows10`为日常使用，笔记本`Ubuntu&Windows7`，以前一直在`Windows`上敲代码，现在正转向`Ubuntu`，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫`Synergy`的软件，支持`Windows`, `Mac OS X`, `Linux `三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。\n<!--more-->\n## 安装\n在`Ubuntu`里打开终端，输入以下命令进行安装\n```\nsudo apt-get install synergy\n```\n在`Windwos`上双击安装。\n\n*`Ubuntu`我安装的是1.6.2，`Windwos`上是1.7.4 x64*\n\n## 配置\n\n### 服务器设置\n> `synergy`需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。\n> 本来是我想选择`Ubuntu`做为服务端的，但设置好后链接失败提示为`WARNING: failed to connect to server: incompatible client 1.5`，似乎是不兼容，但我的客户端版本是`1.6.2`不是`1.5`啊，所以作罢，只得选用`Windwos`来做服务端。\n\n1. 我们选用`Windwos`来做服务端，在`Windwos`打开软件，选择「server」；\nSynergy-Windows服务端配置首页.png)\n\n2. 点击「设置服务端」进行添加客户端操作；\nSynergy-Windows服务端添加客户端-01.png)\n\n3. 从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；\nSynergy-Windows服务端添加客户端-02.png)\n\n4. 双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；\nSynergy-Windows服务端添加客户端-03.png)\n\n5. 设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；\nSynergy-Windows服务端启动.png)\n\n### 客户端设置\n1. 客户端比较简单，在`Ubuntu`上打开`Synergy`，选择「Client」，在`Server IP`里输入服务端的IP，点击「Start」即可；\nSynergy-Ubuntu客户端配置首页.png)\n\n### 开机自启\n要在`Ubuntu`开机在登录界面前启动`synergy`，编辑`/etc/lightdm/lightdm.conf`文件添加`display-setup-script=/usr/bin/synergyc 192.168.9.102`，把`192.168.9.102`换成你自己的`synergy`服务端IP。\n\n## 完成\n到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在`Windows`左侧添加了`Ubuntu`，所以当我在`Windows`上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在`Ubuntu`屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。\n> 网上说`Synergy`支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。\n\n## 相关\n项目主页：https://github.com/synergy/synergy\n\n## 更新记录\n2015-08-29 初稿\n2015-09-03 补充`Ubuntu`客户端自启明说\n\n\n","source":"_posts/使用synergy实现多台电脑共享一套键鼠.md","raw":"title: 使用Synergy实现多台电脑共享一套键鼠\ndate: 2015-08-29 23:52:41\ncategories: [优化辅助]\ntags: [Synergy, 共享, 键盘]\n---\n![Synery-log.png](/media/Synergy-logo.png)\n\n因为家里有一台台式和一台笔记本，台式`Windows10`为日常使用，笔记本`Ubuntu&Windows7`，以前一直在`Windows`上敲代码，现在正转向`Ubuntu`，但家里桌子上摆放两台电脑已经有点挤了，如果再来两套键鼠那就成二手电脑配件甩卖铺了，所以上网查了下看看有没有软件能实现两台电脑共享一套键盘的，还真找到了一款叫`Synergy`的软件，支持`Windows`, `Mac OS X`, `Linux `三大系统，软件是下载收费，使用使用免费，官网上标明基础版$10，高级版$29。下面我说说我自己的配置过程。\n<!--more-->\n## 安装\n在`Ubuntu`里打开终端，输入以下命令进行安装\n```\nsudo apt-get install synergy\n```\n在`Windwos`上双击安装。\n\n*`Ubuntu`我安装的是1.6.2，`Windwos`上是1.7.4 x64*\n\n## 配置\n\n### 服务器设置\n> `synergy`需要一台电脑做为服务端，其它电脑做为客户端来连接服务端。\n> 本来是我想选择`Ubuntu`做为服务端的，但设置好后链接失败提示为`WARNING: failed to connect to server: incompatible client 1.5`，似乎是不兼容，但我的客户端版本是`1.6.2`不是`1.5`啊，所以作罢，只得选用`Windwos`来做服务端。\n\n1. 我们选用`Windwos`来做服务端，在`Windwos`打开软件，选择「server」；\nSynergy-Windows服务端配置首页.png)\n\n2. 点击「设置服务端」进行添加客户端操作；\nSynergy-Windows服务端添加客户端-01.png)\n\n3. 从右上角手动电脑图标到下方的格子里，这里的格式位置对应你当前几台电脑的实际的以我把电脑图标拖到中间左侧的格子里；\nSynergy-Windows服务端添加客户端-02.png)\n\n4. 双击电脑图标进行编辑，这里我们只需要输入客户端电脑的计算机名，其它都默认；\nSynergy-Windows服务端添加客户端-03.png)\n\n5. 设置好后点击再次ok，回到设置首页，点击「开始」启动服务端；\nSynergy-Windows服务端启动.png)\n\n### 客户端设置\n1. 客户端比较简单，在`Ubuntu`上打开`Synergy`，选择「Client」，在`Server IP`里输入服务端的IP，点击「Start」即可；\nSynergy-Ubuntu客户端配置首页.png)\n\n### 开机自启\n要在`Ubuntu`开机在登录界面前启动`synergy`，编辑`/etc/lightdm/lightdm.conf`文件添加`display-setup-script=/usr/bin/synergyc 192.168.9.102`，把`192.168.9.102`换成你自己的`synergy`服务端IP。\n\n## 完成\n到这里你就会发现你可鼠标可以在两个电脑屏幕上移动了，像我刚才配置的是在`Windows`左侧添加了`Ubuntu`，所以当我在`Windows`上把鼠标向左移动，并移到边界，再继续左移时，鼠标就会出现在`Ubuntu`屏幕上，键盘的行为跟随鼠标的，即鼠标在哪个屏幕，键盘输入就对应哪个屏幕的系统。\n> 网上说`Synergy`支持在不同电脑间复制粘贴，目前我自己没有试成功，有知道朋友可以和说。\n\n## 相关\n项目主页：https://github.com/synergy/synergy\n\n## 更新记录\n2015-08-29 初稿\n2015-09-03 补充`Ubuntu`客户端自启明说\n\n\n","slug":"使用synergy实现多台电脑共享一套键鼠","published":1,"updated":"2020-01-17T08:00:02.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8dw001dn6yhmnczs5io"},{"title":"使用Virtualenv创建独立的Python运行环境","date":"2015-01-01T12:39:14.000Z","_content":"\n## 准备工作\n\n- python环境\n- pip\n\n## 安装\n\n```\npip install virtualenv\n```\n或\n```\npip install https://github.com/pypa/virtualenv/tarball/develop\n```\n\n<!--more-->\n\n## 创建虚拟环境\n\n```\nvirtualenv myVE\n```\n\n指定python解释器\n\n```\n -p PYTHON_EXE, --python=PYTHON_EXE\n```\n\n*创建虚拟环境时默认会自动安装setuptools和pip*\n\n不安装setuptool\n\n```\n--no--setuptools\n```\n\n不安装pip\n\n```\n--no--pip\n```\n\n*更多Options请参考[官方文档](https://virtualenv.pypa.io/en/latest/reference.html)* \n\n## 启动虚拟环境\n\n Mac OS\n\n```\ncd myVE\nsource ./bin/activate\n```\n        \nWindows\n\n```\ncd myVE\nscripts\\activate\n```\n\n启动成功后可以在开头显示\"(myVE)\"，说明已经进入刚刚创建的虚拟环境了\n\n## 退出\n\n```\ndeactivate\n```\n\n## virtualenvwrapper \n\n### 安装\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n> 1. 将所有虚拟环境整合在一个目录下\n> 2. 管理（新增，删除，复制）虚拟环境\n> 3. 切换虚拟环境\n\n```\npip install virtualenvwrapper\n```\nWindows下还需额外安装virtualenvwrapper-win\n```\npip install virtualenvwrapper-win\n```\nubuntu需要将下面这句加入到`~/.bashrc`里面\n```\nif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then\n    source /usr/local/bin/virtualenvwrapper.sh\nfi\n```\n加入后需要重启才能生效，如果想要立即生效，输入命令\n```\nsource ~/.bashrc\n```\n\n\n### 常用命令\n*部分命令在windows下无效*\n\n- `workon myEnv`: 切换虚拟环境\n- `mkvirtualenv`: 新建工作环境\n- `rmvirtualenv`: 删除工作环境\n- `cdproject`: 切换到工程目录\n- `workon`/`lsvirtualenv`: 列出所有虚拟环境\n- `deactivate`: 退出虚拟环境\n- `cpvirtualenv [source] [dest]` 复制一份虚拟环境。\n- `cdvirtualenv [subdir]` 把当前工作目录设置为所在的环境目录。\n- `cdsitepackages [subdir]` 把当前工作目录设置为所在环境的sitepackages路径。\n- `add2virtualenv [dir] [dir]` 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。\n- `toggleglobalsitepackages -q` 控制当前的环境是否使用全局的sitepackages目录。\n\n---\n## 参考资料\n\nhttps://virtualenv.pypa.io/en/latest/\n\nhttp://virtualenvwrapper.readthedocs.org/en/latest/\n\nhttps://github.com/davidmarble/virtualenvwrapper-win","source":"_posts/使用virtualenv创建独立的python运行环境.md","raw":"title: 使用Virtualenv创建独立的Python运行环境\ndate: 2015-01-01 20:39:14\ncategories: [程序猿]\ntags: [Virtualenv,virtualenvwrapper,独立,虚拟环境,Python,requirements]\n---\n\n## 准备工作\n\n- python环境\n- pip\n\n## 安装\n\n```\npip install virtualenv\n```\n或\n```\npip install https://github.com/pypa/virtualenv/tarball/develop\n```\n\n<!--more-->\n\n## 创建虚拟环境\n\n```\nvirtualenv myVE\n```\n\n指定python解释器\n\n```\n -p PYTHON_EXE, --python=PYTHON_EXE\n```\n\n*创建虚拟环境时默认会自动安装setuptools和pip*\n\n不安装setuptool\n\n```\n--no--setuptools\n```\n\n不安装pip\n\n```\n--no--pip\n```\n\n*更多Options请参考[官方文档](https://virtualenv.pypa.io/en/latest/reference.html)* \n\n## 启动虚拟环境\n\n Mac OS\n\n```\ncd myVE\nsource ./bin/activate\n```\n        \nWindows\n\n```\ncd myVE\nscripts\\activate\n```\n\n启动成功后可以在开头显示\"(myVE)\"，说明已经进入刚刚创建的虚拟环境了\n\n## 退出\n\n```\ndeactivate\n```\n\n## virtualenvwrapper \n\n### 安装\n\n> Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：\n> 1. 将所有虚拟环境整合在一个目录下\n> 2. 管理（新增，删除，复制）虚拟环境\n> 3. 切换虚拟环境\n\n```\npip install virtualenvwrapper\n```\nWindows下还需额外安装virtualenvwrapper-win\n```\npip install virtualenvwrapper-win\n```\nubuntu需要将下面这句加入到`~/.bashrc`里面\n```\nif [ -f /usr/local/bin/virtualenvwrapper.sh ]; then\n    source /usr/local/bin/virtualenvwrapper.sh\nfi\n```\n加入后需要重启才能生效，如果想要立即生效，输入命令\n```\nsource ~/.bashrc\n```\n\n\n### 常用命令\n*部分命令在windows下无效*\n\n- `workon myEnv`: 切换虚拟环境\n- `mkvirtualenv`: 新建工作环境\n- `rmvirtualenv`: 删除工作环境\n- `cdproject`: 切换到工程目录\n- `workon`/`lsvirtualenv`: 列出所有虚拟环境\n- `deactivate`: 退出虚拟环境\n- `cpvirtualenv [source] [dest]` 复制一份虚拟环境。\n- `cdvirtualenv [subdir]` 把当前工作目录设置为所在的环境目录。\n- `cdsitepackages [subdir]` 把当前工作目录设置为所在环境的sitepackages路径。\n- `add2virtualenv [dir] [dir]` 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。\n- `toggleglobalsitepackages -q` 控制当前的环境是否使用全局的sitepackages目录。\n\n---\n## 参考资料\n\nhttps://virtualenv.pypa.io/en/latest/\n\nhttp://virtualenvwrapper.readthedocs.org/en/latest/\n\nhttps://github.com/davidmarble/virtualenvwrapper-win","slug":"使用virtualenv创建独立的python运行环境","published":1,"updated":"2020-01-17T07:59:58.300Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8h4001en6yh2ykremmt"},{"title":"内网穿透工具frp客户端自定义子域名访问配置","date":"2017-08-16T08:36:56.000Z","_content":"<br />\n<!--more-->\n## 前提\nA: 公网电脑\nB: 内网电脑\n\n## 下载\n从[releases]([Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases))下载系统对应的压缩包，Mac可使用`darwin amd64`的包，在公网电脑和本地电脑各放一份。\n\n## 配置\n公网电脑上`frps.ini`\n```\n[common]\n# 用于接收 frpc 连接的端口\nbind_port = 7000\n# 通过此端口访问http服务\nvhost_http_port = 8080\n# 日志文件输出位置\nlog_file = ./frps.log\n# 日志等级\nlog_level = info\n# 域名\nsubdomain_host = example.com\n# frp管理后台端口\ndashboard_port = 7500\n# frp管理后台用户名\ndashboard_user = admin\n# frp管理后台密码\ndashboard_pwd = admin\n```\n\n本地电脑上`frpc.ini`\n```\n[common]\n# 公网电脑IP\nserver_addr = 111.111.111.111\n# frp连接的端口\nserver_port = 7000\n\n[web]\ntype = http\n# 本地http服务端口\nlocal_port = 8080\n# 子域名前缀, 子域名前缀里不要使用下划线\"_\"，不然可能会出现莫名其妙的400错误可以用\"-\"代替。\nsubdomain = iblogc\n```\n\n配置域名`example.com`的A记录的泛解析\n`*.example.com`指向公网电脑IP`111.111.111.111`\n\n## 运行\n1. 在内网电脑B上`8080`端口运行`http`服务\n2. 在公网电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frps -c ./frps.ini\n```\n3. 在本地电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frpc -c ./frpc.ini\n```\n\n## 成功\n在任何一台能联网的机器上访问 `http://iblogc.example.com:8080` 即可访问内网电脑B上的http服务。\n在任务一台能联网的机器上访问`111.111.111.111:7500`即可访问frp的管理后台。\n\n## frps服务端与nginx可共用80端口\n\n```\nserver {\n       listen 80;\n       server_name *.example.com;\n       location / {\n           proxy_pass http://127.0.0.1:8080;\n           proxy_redirect http://$host/ http://$http_host/;\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header Host $host;\n       }\n}\n```","source":"_posts/内网穿透工具frp客户端自定义子域名访问配置.md","raw":"---\ntitle: 内网穿透工具frp客户端自定义子域名访问配置\ndate: 2017-08-16 16:36:56\ntags: [教程, 内网穿透]\ncategories: [程序猿]\n---\n<br />\n<!--more-->\n## 前提\nA: 公网电脑\nB: 内网电脑\n\n## 下载\n从[releases]([Releases · fatedier/frp · GitHub](https://github.com/fatedier/frp/releases))下载系统对应的压缩包，Mac可使用`darwin amd64`的包，在公网电脑和本地电脑各放一份。\n\n## 配置\n公网电脑上`frps.ini`\n```\n[common]\n# 用于接收 frpc 连接的端口\nbind_port = 7000\n# 通过此端口访问http服务\nvhost_http_port = 8080\n# 日志文件输出位置\nlog_file = ./frps.log\n# 日志等级\nlog_level = info\n# 域名\nsubdomain_host = example.com\n# frp管理后台端口\ndashboard_port = 7500\n# frp管理后台用户名\ndashboard_user = admin\n# frp管理后台密码\ndashboard_pwd = admin\n```\n\n本地电脑上`frpc.ini`\n```\n[common]\n# 公网电脑IP\nserver_addr = 111.111.111.111\n# frp连接的端口\nserver_port = 7000\n\n[web]\ntype = http\n# 本地http服务端口\nlocal_port = 8080\n# 子域名前缀, 子域名前缀里不要使用下划线\"_\"，不然可能会出现莫名其妙的400错误可以用\"-\"代替。\nsubdomain = iblogc\n```\n\n配置域名`example.com`的A记录的泛解析\n`*.example.com`指向公网电脑IP`111.111.111.111`\n\n## 运行\n1. 在内网电脑B上`8080`端口运行`http`服务\n2. 在公网电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frps -c ./frps.ini\n```\n3. 在本地电脑上运行（Windows电脑上运行请去掉`./`）\n```\n./frpc -c ./frpc.ini\n```\n\n## 成功\n在任何一台能联网的机器上访问 `http://iblogc.example.com:8080` 即可访问内网电脑B上的http服务。\n在任务一台能联网的机器上访问`111.111.111.111:7500`即可访问frp的管理后台。\n\n## frps服务端与nginx可共用80端口\n\n```\nserver {\n       listen 80;\n       server_name *.example.com;\n       location / {\n           proxy_pass http://127.0.0.1:8080;\n           proxy_redirect http://$host/ http://$http_host/;\n           proxy_set_header X-Real-IP $remote_addr;\n           proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n           proxy_set_header Host $host;\n       }\n}\n```","slug":"内网穿透工具frp客户端自定义子域名访问配置","published":1,"updated":"2019-04-09T03:26:20.218Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8h5001fn6yh0q7npqrx"},{"title":"在macOS上更改Jenkins的默认用户，解决权限问题","comments":1,"date":"2017-08-24T06:29:14.000Z","_content":"<br />\n<!--more-->\n在MacOS上使用`dmg`安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为`jenkins`的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。\n\n```shell\n#停止Jenkins\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n# 修改Group和User\n# <用户名>填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号\n$ sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/<用户名> +wq org.jenkins-ci.plist\n\n# 可能相应文件夹的权限\nsudo chown -R <用户名>:staff /Users/Shared/Jenkins/\nsudo chown -R <用户名>:staff /var/log/jenkins/\n\n# 启动Jenkins\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```","source":"_posts/在macos上更改jenkins默认用户解决权限问题.md","raw":"---\ntitle: 在macOS上更改Jenkins的默认用户，解决权限问题\ncomments: true\ndate: 2017-08-24 14:29:14\ntags: [Jenkins,macOS,权限,用户]\ncategories: [程序猿]\n---\n<br />\n<!--more-->\n在MacOS上使用`dmg`安装包安装完Jenkins之后，发了Jenkins自动在系统里新建了一个名为`jenkins`的用户。默认的，Jenkins程序里的自动化构建操作都是以这个用户身份来进行的，所以有时会出现一些权限问题，解决方法就是修改Jenkins配置文件，把Jenkins运行的默认账户改成平时用的账户。\n\n```shell\n#停止Jenkins\nsudo launchctl unload /Library/LaunchDaemons/org.jenkins-ci.plist\n\n# 修改Group和User\n# <用户名>填写你的MacOS用户名，不知道的可以在命令行使用whoami查看，不需要尖括号\n$ sudo vim +1 +/daemon +’s/daemon/staff/’ +/daemon +’s/daemon/<用户名> +wq org.jenkins-ci.plist\n\n# 可能相应文件夹的权限\nsudo chown -R <用户名>:staff /Users/Shared/Jenkins/\nsudo chown -R <用户名>:staff /var/log/jenkins/\n\n# 启动Jenkins\nsudo launchctl load /Library/LaunchDaemons/org.jenkins-ci.plist\n```","slug":"在macos上更改jenkins默认用户解决权限问题","published":1,"updated":"2020-01-17T07:58:33.377Z","layout":"post","photos":[],"link":"","_id":"ck9beg8hb001gn6yh7slu3a1m"},{"title":"电影《小黄人》中文预告片","date":"2014-11-09T14:04:05.000Z","_content":"<!--more-->\n导演: 凯尔·巴尔达 / 皮埃尔·科芬\n编剧: 布莱恩·林奇\n主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum\n类型: 喜剧 / 动画 / 家庭\n制片国家/地区: 美国\n语言: 英语\n上映日期: 2015-07-10(美国)\n又名: 小黄人大电影\n豆瓣链接: [小黄人](http://movie.douban.com/subject/11624706/)\n预告版:\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=0 allowfullscreen></iframe>","source":"_posts/电影《小黄人》中文预告片.md","raw":"title: 电影《小黄人》中文预告片\ndate: 2014-11-09 22:04:05\ncategories: [影视]\ntags: [电影,小黄人,预告片]\n---\n<!--more-->\n导演: 凯尔·巴尔达 / 皮埃尔·科芬\n编剧: 布莱恩·林奇\n主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum\n类型: 喜剧 / 动画 / 家庭\n制片国家/地区: 美国\n语言: 英语\n上映日期: 2015-07-10(美国)\n又名: 小黄人大电影\n豆瓣链接: [小黄人](http://movie.douban.com/subject/11624706/)\n预告版:\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=0 allowfullscreen></iframe>","slug":"电影《小黄人》中文预告片","published":1,"updated":"2020-01-17T08:00:19.665Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg8hc001hn6yhnbyg989x"},{"title":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","_content":"\n![Git工作流图示](/media/Git工作流图示.jpg)\n\nGit是软件开发人员在开发中常用的一种工具,是开发之利器。\n> Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。\n<!--more-->\n\n## 工作流图示\n\n![工作流图示](/media/git-reset_drbfhd.png)\n\n\n## 命令\n\n### 配置\n\n- `git config --global user.name 'Your Name'` 设置git提交显示的名字\n\n- `git config --global user.email your_email@example.com` 设置git提交显示的邮箱\n\n- `git config --global alias.unstage \"reset HEAD\"` 替换命令 `git reset HEAD`命令改为 `git unstage`\n\n- `ssh-keygen -t rsa -C your_email@example.com` 生成SSH Key\n\n- `git config --global core.editor emacs` 设置文件编辑器\n\n- `git config --global merge.tool vimdiff` 设置差异分析工具\n\n- `git config --list` 查看配置信息\n\n\n\n### 简洁版\n\n初始化仓库\n`git init`\n\n添加远程仓库\n`git remote add <自定义名字> <远程仓库url> `\n\n给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）\n`git remote set-url --add <自定义名字> <远程仓库url>`    \n\n更新项目\n`git pull`\n\n合并分支到当前分支\n`git merge <分支名>`\n\n创建标签\n`git tag <标签名字> <提交id前10位字符>` *可通过`git log`获取*\n\n获取log\n`git log`\n\n切换分支\n`git checkout <分支名>`\n\n创建分支并切换过去\n`git checkout -b <分支名>`\n\n删除分支\n`git branch -D <分支名>`\n\n推送\n`git push origin <分支名/标签名>`\n\n强制推送更新\n`git push -f origin <分支名/标签名>`\n\n推送所有分支\n`git push origin --all`\n\n推送所有标签\n`git push origin --tags`\n\n撤消本地改动（新文件和提交到缓存区的改动，不受影响）\n`git checkout -- <目录><文件名>`\n\n撤消本地所有提交与改动\n***假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它***\n`git fetch origin`\n`git reset --hard origin/master`\n\n其它命令\n- `gitk ` 获取当前分支图形个界面\n  - 参数`<分支名>`: 获取某分支图形界面\n  - 参数`=--all`: 获取所有分支图形个界面\n  - `cat <目录><文件名> ` 查看文件内容\n\n---\n\n### 详细版\n\n初始\n\n- `git init` 初始化仓库\n\n- `ls` 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）\n\n  - 参数`-a`显示目录下所有文件及文件夹\n\n- `git clone <url>` 克隆项目\n\n提交\n\n- `git add <目录><文件名>` 添加文件到版本库，*可以多个文件一起添加，中间用空格隔开*\n\n- `git add *` 或 `git add .` 添加所有文件到版本库\n\n![status示例图](http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png)\n\n- `git status` 查看项目当前状态，详细信息\n\n  - 参数`-s`: 显示简洁版\n\n  > 绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的\n  > A新增  M修改  D删除 U冲突 R重命名？\n  > push会把绿色部分提交，红色部分不提交\n  > 已有记录文件做过改动和新文件，需要`git add`\n\n- `git diff ` 查看整个项目里的文件改动情况（工作区和缓存区比较）\n\n  - 参数`<目录><文件名>`: 查看单个文件改动情况（工作区和缓存区比较）\n  -参数`<标签名>`: 查看自当前标签发布之后项目的改动情况\n  - 参数`--cached`: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）\n  - 参数 `HEAD`: 查看整个项目里的文件改动情况（工作区和本地仓库比较）\n  - 参数`--stat`: 显示摘要，而非完整diff\n\n- `git commit`: 提交到缓存\n\n  - 参数`-m`: 后面空格接提交信息\n  - 参数`-a`: 为所有已有记录文件执行`git add`（新添加文件还是需要手动`git add`）\n\n- `git reset HEAD` 取消缓存已缓存的内容\n  - 参数`<目录><文件名>`: 单个文件取消缓存已缓存内容\n\n- `git rm <目录><文件名>`:  将文件从缓存区和硬盘上移除\n\n  - 参数`--cached`: 删除缓存中的文件，保留硬盘上的文件\n\n- `git mv` 不推荐用\n\n- `git log` 显示当前分支提交记录\n\n  - 参数`--author=<authorname>`: 只寻找某个特定作者的提交\n  - 参数`--oneline`: 显示简洁版\n    - 参数`--oneline -<数字N>`: 显示简洁版，显示最近N次提交的记录\n  - 参数`--graph`: 显示拓扑图（查看历史中什么时候出现了分支、合并）\n  - 参数`--grep=<关键字>`: 根据提交注释关键字过滤提交记录\n  > Git 会对所有的 --grep 和 --author 参数作逻辑或。 如果你用 --grep 和 --author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 --all-match 选项。 在这些例子中，我会用上 --format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)\n  - 参数`<分支名>`:显示指定分支“可及”的提交记录\n  - 参数`<分支名1> ^<分支名1>`: 查看在分支1不在分支2中的提交记录\n  > 分支可以是本地的也可以是远端的\n  - 参数`--decorate`: 显示带tag的记录\n  - 参数`-p`: 显示每个提交引入的补丁\n  - 参数`--stat`: 显示每个提交引入的差值统计\n  - 其它参数 `--since` `--before` `--until` `--after`\n  > git log --since --before 根据日期过滤提交记录\n如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 --since 和 --before，但是你也可以用 --until 和 --after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)：\n\n  \n      $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n      5469e2d Git 1.7.1-rc2\n      d43427d Documentation/remote-helpers: Fix typos and improve language\n      272a36b Fixup: Second argument may be any arbitrary string\n      b6c8d2d Documentation/remote-helpers: Add invocation section\n      5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n      00b84e9 Documentation/remote-helpers: Rewrite description\n      03aa87e Documentation: Describe other situations where -z affects git diff\n      77bc694 rebase-interactive: silence warning when no commits rewritten\n      636db2c t3301: add tests to use --format=\"%N\"\n\n分支\n\n- `git branch`列出当前项目的可用分支，并显示当前工作目录当前分支\n\n- 参数`<分支名>`: 创建分支\n\n- `git checkout <分支名>` 切换到对应分支\n\n  - 参数`-b` 创建分支并立即切换到新分支\n\n- `git merge <分支名>` 合并指定分支到当前分支\n\n标签\n\n- `git tag` 显示当前项目的标签\n\n  - 参数`<标签名>` 给某个历史记录打标签\n  - 参数`-a`: 添加注解\n  - 参数`<SHA>`: 提交id前n位字符，可通过`git log`获取，n位基于SHA唯一就行（建议5~7位）\n\n远程\n\n- `git remote` 列出远端别名\n  -参数`-v`: 列出远端别名及链接\n  > 一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接\n  -`add <仓库别名> <仓库链接>`: 为项目添加一个新的远端仓库\n  - `rm <仓库别名>`: 为项目删除一个远端仓库\n  > 只是本地删掉和远端仓库的链接，不会对远端仓库造成影响\n\n- `git fetch` 从远端仓库下载最新的分支与数据\n\n- `git pull` 从远端仓库下载最新数据，并尝试合并到当前分支\n  - 参数`<仓库别名>`: 从哪个仓库拉取更新，默认为origin\n> `git pull`实际是先`git fetch`后`git merge`\n\n- `git push` 推送更新\n  - 参数`<仓库别名> <分支名>`: 推送新分支与数据到某个远端仓库\n  - 参数`<仓库别名> --all`: 推送所有分支\n  - 参数`<仓库别名> --tagsl`: 推送所有标签\n\n\n\n## 参考资料\n> [Git 参考手册](http://gitref.org/zh)\n> [git - 简易指南](http://www.bootcss.com/p/git-guide/)\n\n\n\n","source":"_posts/Git命令使用指南.md","raw":"---\ntitle: Git命令使用指南\ndate: 2015-01-16 22:33:30\ncategories: [程序猿]\ntags: [Git, 教程]\n---\n\n![Git工作流图示](/media/Git工作流图示.jpg)\n\nGit是软件开发人员在开发中常用的一种工具,是开发之利器。\n> Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。\n<!--more-->\n\n## 工作流图示\n\n![工作流图示](/media/git-reset_drbfhd.png)\n\n\n## 命令\n\n### 配置\n\n- `git config --global user.name 'Your Name'` 设置git提交显示的名字\n\n- `git config --global user.email your_email@example.com` 设置git提交显示的邮箱\n\n- `git config --global alias.unstage \"reset HEAD\"` 替换命令 `git reset HEAD`命令改为 `git unstage`\n\n- `ssh-keygen -t rsa -C your_email@example.com` 生成SSH Key\n\n- `git config --global core.editor emacs` 设置文件编辑器\n\n- `git config --global merge.tool vimdiff` 设置差异分析工具\n\n- `git config --list` 查看配置信息\n\n\n\n### 简洁版\n\n初始化仓库\n`git init`\n\n添加远程仓库\n`git remote add <自定义名字> <远程仓库url> `\n\n给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）\n`git remote set-url --add <自定义名字> <远程仓库url>`    \n\n更新项目\n`git pull`\n\n合并分支到当前分支\n`git merge <分支名>`\n\n创建标签\n`git tag <标签名字> <提交id前10位字符>` *可通过`git log`获取*\n\n获取log\n`git log`\n\n切换分支\n`git checkout <分支名>`\n\n创建分支并切换过去\n`git checkout -b <分支名>`\n\n删除分支\n`git branch -D <分支名>`\n\n推送\n`git push origin <分支名/标签名>`\n\n强制推送更新\n`git push -f origin <分支名/标签名>`\n\n推送所有分支\n`git push origin --all`\n\n推送所有标签\n`git push origin --tags`\n\n撤消本地改动（新文件和提交到缓存区的改动，不受影响）\n`git checkout -- <目录><文件名>`\n\n撤消本地所有提交与改动\n***假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它***\n`git fetch origin`\n`git reset --hard origin/master`\n\n其它命令\n- `gitk ` 获取当前分支图形个界面\n  - 参数`<分支名>`: 获取某分支图形界面\n  - 参数`=--all`: 获取所有分支图形个界面\n  - `cat <目录><文件名> ` 查看文件内容\n\n---\n\n### 详细版\n\n初始\n\n- `git init` 初始化仓库\n\n- `ls` 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）\n\n  - 参数`-a`显示目录下所有文件及文件夹\n\n- `git clone <url>` 克隆项目\n\n提交\n\n- `git add <目录><文件名>` 添加文件到版本库，*可以多个文件一起添加，中间用空格隔开*\n\n- `git add *` 或 `git add .` 添加所有文件到版本库\n\n![status示例图](http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png)\n\n- `git status` 查看项目当前状态，详细信息\n\n  - 参数`-s`: 显示简洁版\n\n  > 绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的\n  > A新增  M修改  D删除 U冲突 R重命名？\n  > push会把绿色部分提交，红色部分不提交\n  > 已有记录文件做过改动和新文件，需要`git add`\n\n- `git diff ` 查看整个项目里的文件改动情况（工作区和缓存区比较）\n\n  - 参数`<目录><文件名>`: 查看单个文件改动情况（工作区和缓存区比较）\n  -参数`<标签名>`: 查看自当前标签发布之后项目的改动情况\n  - 参数`--cached`: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）\n  - 参数 `HEAD`: 查看整个项目里的文件改动情况（工作区和本地仓库比较）\n  - 参数`--stat`: 显示摘要，而非完整diff\n\n- `git commit`: 提交到缓存\n\n  - 参数`-m`: 后面空格接提交信息\n  - 参数`-a`: 为所有已有记录文件执行`git add`（新添加文件还是需要手动`git add`）\n\n- `git reset HEAD` 取消缓存已缓存的内容\n  - 参数`<目录><文件名>`: 单个文件取消缓存已缓存内容\n\n- `git rm <目录><文件名>`:  将文件从缓存区和硬盘上移除\n\n  - 参数`--cached`: 删除缓存中的文件，保留硬盘上的文件\n\n- `git mv` 不推荐用\n\n- `git log` 显示当前分支提交记录\n\n  - 参数`--author=<authorname>`: 只寻找某个特定作者的提交\n  - 参数`--oneline`: 显示简洁版\n    - 参数`--oneline -<数字N>`: 显示简洁版，显示最近N次提交的记录\n  - 参数`--graph`: 显示拓扑图（查看历史中什么时候出现了分支、合并）\n  - 参数`--grep=<关键字>`: 根据提交注释关键字过滤提交记录\n  > Git 会对所有的 --grep 和 --author 参数作逻辑或。 如果你用 --grep 和 --author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 --all-match 选项。 在这些例子中，我会用上 --format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)\n  - 参数`<分支名>`:显示指定分支“可及”的提交记录\n  - 参数`<分支名1> ^<分支名1>`: 查看在分支1不在分支2中的提交记录\n  > 分支可以是本地的也可以是远端的\n  - 参数`--decorate`: 显示带tag的记录\n  - 参数`-p`: 显示每个提交引入的补丁\n  - 参数`--stat`: 显示每个提交引入的差值统计\n  - 其它参数 `--since` `--before` `--until` `--after`\n  > git log --since --before 根据日期过滤提交记录\n如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 --since 和 --before，但是你也可以用 --until 和 --after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 --no-merges 选项以隐藏合并提交）[Git参考手册:检查与比较](http://gitref.org/zh/inspect/)：\n\n  \n      $ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n      5469e2d Git 1.7.1-rc2\n      d43427d Documentation/remote-helpers: Fix typos and improve language\n      272a36b Fixup: Second argument may be any arbitrary string\n      b6c8d2d Documentation/remote-helpers: Add invocation section\n      5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n      00b84e9 Documentation/remote-helpers: Rewrite description\n      03aa87e Documentation: Describe other situations where -z affects git diff\n      77bc694 rebase-interactive: silence warning when no commits rewritten\n      636db2c t3301: add tests to use --format=\"%N\"\n\n分支\n\n- `git branch`列出当前项目的可用分支，并显示当前工作目录当前分支\n\n- 参数`<分支名>`: 创建分支\n\n- `git checkout <分支名>` 切换到对应分支\n\n  - 参数`-b` 创建分支并立即切换到新分支\n\n- `git merge <分支名>` 合并指定分支到当前分支\n\n标签\n\n- `git tag` 显示当前项目的标签\n\n  - 参数`<标签名>` 给某个历史记录打标签\n  - 参数`-a`: 添加注解\n  - 参数`<SHA>`: 提交id前n位字符，可通过`git log`获取，n位基于SHA唯一就行（建议5~7位）\n\n远程\n\n- `git remote` 列出远端别名\n  -参数`-v`: 列出远端别名及链接\n  > 一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接\n  -`add <仓库别名> <仓库链接>`: 为项目添加一个新的远端仓库\n  - `rm <仓库别名>`: 为项目删除一个远端仓库\n  > 只是本地删掉和远端仓库的链接，不会对远端仓库造成影响\n\n- `git fetch` 从远端仓库下载最新的分支与数据\n\n- `git pull` 从远端仓库下载最新数据，并尝试合并到当前分支\n  - 参数`<仓库别名>`: 从哪个仓库拉取更新，默认为origin\n> `git pull`实际是先`git fetch`后`git merge`\n\n- `git push` 推送更新\n  - 参数`<仓库别名> <分支名>`: 推送新分支与数据到某个远端仓库\n  - 参数`<仓库别名> --all`: 推送所有分支\n  - 参数`<仓库别名> --tagsl`: 推送所有标签\n\n\n\n## 参考资料\n> [Git 参考手册](http://gitref.org/zh)\n> [git - 简易指南](http://www.bootcss.com/p/git-guide/)\n\n\n\n","slug":"Git命令使用指南","published":1,"updated":"2020-01-17T07:55:59.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9beg969001kn6yheg7zdkxh"},{"title":"代码托管平台码云(Gitee)到Gitea迁移记","comments":1,"toc":true,"visible":"show","indexing":true,"date":"2020-03-01T11:42:34.000Z","_content":"团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。\n\n<!--more-->\n\n### 安装Gitea\n\n因为服务器上刚好装有docker，按照[官方文档](https://docs.gitea.io/zh-cn/install-with-docker/)选择了最简单的docker安装。\n\n```shell\ndocker pull gitea/gitea:latest\nsudo mkdir -p /data/gitea\ndocker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest\n// 重启gitea\ndocker restart gitea\n```\n\n安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章\n\n[Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH](https://github.com/xhlwill/blog/issues/17)，按照此方法解决。\n\n\n\n### 配置Nginx\n\n在服务器Nginx上配置反向代理\n\nvi /etc/nginx/conf.d/gitea.conf\n\n```ini\nupstream gitea {\n    server 127.0.0.1:10080;\n    keepalive 2000;\n}\nserver {\n    listen       80;\n    server_name  git.i.example.com;\n    client_max_body_size 1024M;\n\n    location / {\n        proxy_pass http://gitea/;\n        proxy_set_header Host $host:$server_port;\n    }\n}\n```\n\n重新加载配置\n\n```shell\nsudo nginx -s reload\n```\n\n\n\n### 域名解析\n\ngit.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。\n\n\n\n### Gitea初始化\n\n打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件[配置说明](https://docs.gitea.io/zh-cn/config-cheat-sheet/)，修改完成后重启下gitea即可生效。\n\n\n\n### 仓库迁移\n\n因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来**[操作1]**，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码**[操作2]**，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作**[操作3]**\n\n\n\n**[操作1]**：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是\n\n```\nPOST /repos/migrate?access_token=<your gitea admin access token>\n\nRequest body\n{\n    description: MigrateRepoForm form for migrating repository\n    auth_password: string\n    auth_username: string\n    clone_addr*: string\n    description: string\n    issues: boolean\n    labels: boolean\n    milestones: boolean\n    mirror: boolean\n    private: boolean\n    pull_requests: boolean\n    releases: boolean\n    repo_name*: string\n    uid*: integer($int64)\n    wiki: boolean\n}\n```\n\n***注：***\n\n1. access_token 请在有管理员权限的账号的设置>应用中创建；\n\n2. Request body 中的uid即管理后台>账户管理/组织管理中的ID列值；\n\n   \n\n找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似\n\nvi gitee-url.txt\n\n```\nhttps://gitee.com/example/project_a.git\nhttps://gitee.com/example/project_b.git\n```\n\n使用shell脚本逐行读取url，并调用Gitea api迁移仓库。\n\n```shell\n#!/bin/bash\n\nfor line in $(<gitee-url.txt);\ndo\n\t\t# Windows注释下面这行\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=<your gitea admin access token>\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"auth_password\\\": \\\"NDY2&F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true}\";\ndone\n```\n\n\n\n**[操作2]**：从Gitee上同步最新代码\n\n```shell\nfor line in $(<gitee-url.txt);\ndo\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/{owner}/$project_name/mirror-sync?access_token=<your gitea admin access token>\" -H \"accept: application/json\"\ndone\n```\n\n***注：***owner为项目拥有者用户名/组织名\n\n\n\n**[操作3]**：原本地仓库Git远程仓库地址替换\n\n```shell\n// http地址\n// 原代码仓库http地址：https://gitee.com/example/project_a.git\n// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git\n// https://gitee.com/example > http://git.i.example.com/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config\n\n// ssh地址\n// 原代码仓库ssh地址：git@gitee.com:example/project_a.git\n// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git\n// git@gitee.com:example > ssh://git@git.i.example.com:10022/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config\n```\n\n1. 如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；\n\n2. 如果以前是用ssh克隆的仓库的话，现在在Gitea的设置>SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；\n\n\n### 仓库备份\n\nGitea有自己的备份与恢复功能[备份与恢复](https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D)，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：\n\nbackup.py\n\n> 如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。\n\n** python\n```python\n#!/usr/bin/python3\nimport os\nimport platform\nimport requests\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\naccess_token = \"<your access token>\"\nrepos_url = 'http://git.i.example.com/api/v1/repos/search?access_token={}&page={}&limit={}'\nbranches_url = 'http://git.i.example.com/api/v1/repos/{}/branches?access_token={}'\nrepo_key_url = 'http://git.i.example.com/api/v1/repos/{}/{}/keys?access_token={}'\n\n\ndef repos():\n    page = 1\n    limit = 50\n    has_next = True\n    while has_next:\n        r = requests.get(repos_url.format(access_token, page, limit))\n        for repo in r.json()['data']:\n            yield repo\n        page += 1\n        has_next = len(r.json()['data']) == limit\n\n\n\"\"\"拉取项目所有分支代码到本地\"\"\"\n\n\ndef sync_repo():\n    repo_index = 0\n    for repo in repos():\n        repo_index += 1\n        # 克隆仓库\n        os.chdir(current_dir)\n        print('克隆第 {} 个仓库 {} '.format(repo_index, repo['name']))\n        os.system(\"git clone {}\".format(repo['ssh_url']))\n        os.chdir(os.path.join(current_dir, repo['name']))\n        # 更新仓库\n        print('同步 {} 仓库所有分支'.format(repo['name']))\n        os.system('git fetch --all')\n        # if platform.system() == 'Windows':\n        # Windows\n        branches = requests.get(branches_url.format(\n            repo['full_name'], access_token)).json()\n        for branch in branches:\n            branch_name = branch['name']\n            os.system('git branch --track {} origin/{}'.format(branch_name, branch_name))\n            # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n            os.system('git checkout {} && git reset --hard origin/{}'.format(branch_name, branch_name))\n        # else:\n        #     # Linux/macOS\n        #     # git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\n        #     # os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\")\n        #     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n        #     os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; git checkout ${remote#origin/}; git reset --hard $remote; done\")\n\n\n\"\"\"设置项目部署公钥\"\"\"\n\n\ndef set_pub_key():\n    repo_index = 0\n    body = {\n        \"key\": \"ssh-rsa aabbcc\",\n        \"read_only\": True,\n        \"title\": \"SandBox\"\n    }\n    for repo in repos():\n        repo_index += 1\n        print('==={}. {}==='.format(repo_index, repo['name']))\n        r = requests.post(repo_key_url.format(\n            repo['owner']['username'], repo['name'], access_token), data=body)\n        print(r.json())\n\n\nif __name__ == '__main__':\n    sync_repo()\n    # set_pub_key()\n```\n\n可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行`python backup.py`\n\n*[Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。](https://blog.csdn.net/flydragon0815/article/details/46006473)*","source":"_posts/Gitee2Gitea.md","raw":"---\ntitle: 代码托管平台码云(Gitee)到Gitea迁移记\ncomments: true\ntags: [Git, Gitee, GitLab, Gite, Gogs, 迁移, 代码, Python]\ncategories: [程序猿]\ntoc: true\nvisible: show\nindexing: true\ndate: 2020-03-01 19:42:34\n---\n团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。\n\n<!--more-->\n\n### 安装Gitea\n\n因为服务器上刚好装有docker，按照[官方文档](https://docs.gitea.io/zh-cn/install-with-docker/)选择了最简单的docker安装。\n\n```shell\ndocker pull gitea/gitea:latest\nsudo mkdir -p /data/gitea\ndocker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest\n// 重启gitea\ndocker restart gitea\n```\n\n安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章\n\n[Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH](https://github.com/xhlwill/blog/issues/17)，按照此方法解决。\n\n\n\n### 配置Nginx\n\n在服务器Nginx上配置反向代理\n\nvi /etc/nginx/conf.d/gitea.conf\n\n```ini\nupstream gitea {\n    server 127.0.0.1:10080;\n    keepalive 2000;\n}\nserver {\n    listen       80;\n    server_name  git.i.example.com;\n    client_max_body_size 1024M;\n\n    location / {\n        proxy_pass http://gitea/;\n        proxy_set_header Host $host:$server_port;\n    }\n}\n```\n\n重新加载配置\n\n```shell\nsudo nginx -s reload\n```\n\n\n\n### 域名解析\n\ngit.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。\n\n\n\n### Gitea初始化\n\n打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件[配置说明](https://docs.gitea.io/zh-cn/config-cheat-sheet/)，修改完成后重启下gitea即可生效。\n\n\n\n### 仓库迁移\n\n因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来**[操作1]**，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码**[操作2]**，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作**[操作3]**\n\n\n\n**[操作1]**：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是\n\n```\nPOST /repos/migrate?access_token=<your gitea admin access token>\n\nRequest body\n{\n    description: MigrateRepoForm form for migrating repository\n    auth_password: string\n    auth_username: string\n    clone_addr*: string\n    description: string\n    issues: boolean\n    labels: boolean\n    milestones: boolean\n    mirror: boolean\n    private: boolean\n    pull_requests: boolean\n    releases: boolean\n    repo_name*: string\n    uid*: integer($int64)\n    wiki: boolean\n}\n```\n\n***注：***\n\n1. access_token 请在有管理员权限的账号的设置>应用中创建；\n\n2. Request body 中的uid即管理后台>账户管理/组织管理中的ID列值；\n\n   \n\n找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似\n\nvi gitee-url.txt\n\n```\nhttps://gitee.com/example/project_a.git\nhttps://gitee.com/example/project_b.git\n```\n\n使用shell脚本逐行读取url，并调用Gitea api迁移仓库。\n\n```shell\n#!/bin/bash\n\nfor line in $(<gitee-url.txt);\ndo\n\t\t# Windows注释下面这行\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/migrate?access_token=<your gitea admin access token>\" -H \"accept: application/json\" -H \"Content-Type: application/json\" -d \"{ \\\"auth_password\\\": \\\"NDY2&F*K!hL75y*z\\\", \\\"auth_username\\\": \\\"korvin101@gmail.com\\\", \\\"clone_addr\\\": \\\"$line\\\", \\\"issues\\\": true, \\\"labels\\\": true, \\\"milestones\\\": true, \\\"mirror\\\": true, \\\"private\\\": true, \\\"pull_requests\\\": true, \\\"releases\\\": true, \\\"repo_name\\\": \\\"$project_name\\\", \\\"uid\\\": 2, \\\"wiki\\\": true}\";\ndone\n```\n\n\n\n**[操作2]**：从Gitee上同步最新代码\n\n```shell\nfor line in $(<gitee-url.txt);\ndo\n    line=$(echo $line | sed -e 's/\\r//g');\n    tmp=${line#https://gitee.com/xxx/};\n    project_name=${tmp%.git};\n    curl -X POST \"http://git.i.example.com/api/v1/repos/{owner}/$project_name/mirror-sync?access_token=<your gitea admin access token>\" -H \"accept: application/json\"\ndone\n```\n\n***注：***owner为项目拥有者用户名/组织名\n\n\n\n**[操作3]**：原本地仓库Git远程仓库地址替换\n\n```shell\n// http地址\n// 原代码仓库http地址：https://gitee.com/example/project_a.git\n// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git\n// https://gitee.com/example > http://git.i.example.com/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g' */.git/config\n\n// ssh地址\n// 原代码仓库ssh地址：git@gitee.com:example/project_a.git\n// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git\n// git@gitee.com:example > ssh://git@git.i.example.com:10022/JIANSU\n// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换\n// Windows删除'.bak'\nsed -i '.bak' 's/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g' */.git/config\n```\n\n1. 如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；\n\n2. 如果以前是用ssh克隆的仓库的话，现在在Gitea的设置>SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；\n\n\n### 仓库备份\n\nGitea有自己的备份与恢复功能[备份与恢复](https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D)，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：\n\nbackup.py\n\n> 如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。\n\n** python\n```python\n#!/usr/bin/python3\nimport os\nimport platform\nimport requests\n\n\ncurrent_dir = os.path.abspath(os.path.dirname(__file__))\naccess_token = \"<your access token>\"\nrepos_url = 'http://git.i.example.com/api/v1/repos/search?access_token={}&page={}&limit={}'\nbranches_url = 'http://git.i.example.com/api/v1/repos/{}/branches?access_token={}'\nrepo_key_url = 'http://git.i.example.com/api/v1/repos/{}/{}/keys?access_token={}'\n\n\ndef repos():\n    page = 1\n    limit = 50\n    has_next = True\n    while has_next:\n        r = requests.get(repos_url.format(access_token, page, limit))\n        for repo in r.json()['data']:\n            yield repo\n        page += 1\n        has_next = len(r.json()['data']) == limit\n\n\n\"\"\"拉取项目所有分支代码到本地\"\"\"\n\n\ndef sync_repo():\n    repo_index = 0\n    for repo in repos():\n        repo_index += 1\n        # 克隆仓库\n        os.chdir(current_dir)\n        print('克隆第 {} 个仓库 {} '.format(repo_index, repo['name']))\n        os.system(\"git clone {}\".format(repo['ssh_url']))\n        os.chdir(os.path.join(current_dir, repo['name']))\n        # 更新仓库\n        print('同步 {} 仓库所有分支'.format(repo['name']))\n        os.system('git fetch --all')\n        # if platform.system() == 'Windows':\n        # Windows\n        branches = requests.get(branches_url.format(\n            repo['full_name'], access_token)).json()\n        for branch in branches:\n            branch_name = branch['name']\n            os.system('git branch --track {} origin/{}'.format(branch_name, branch_name))\n            # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n            os.system('git checkout {} && git reset --hard origin/{}'.format(branch_name, branch_name))\n        # else:\n        #     # Linux/macOS\n        #     # git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\n        #     # os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; done && git fetch --all && git pull --all\")\n        #     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题\n        #     os.system(\"git branch -r | grep -v '\\->' | while read remote; do git branch --track ${remote#origin/} $remote; git checkout ${remote#origin/}; git reset --hard $remote; done\")\n\n\n\"\"\"设置项目部署公钥\"\"\"\n\n\ndef set_pub_key():\n    repo_index = 0\n    body = {\n        \"key\": \"ssh-rsa aabbcc\",\n        \"read_only\": True,\n        \"title\": \"SandBox\"\n    }\n    for repo in repos():\n        repo_index += 1\n        print('==={}. {}==='.format(repo_index, repo['name']))\n        r = requests.post(repo_key_url.format(\n            repo['owner']['username'], repo['name'], access_token), data=body)\n        print(r.json())\n\n\nif __name__ == '__main__':\n    sync_repo()\n    # set_pub_key()\n```\n\n可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行`python backup.py`\n\n*[Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。](https://blog.csdn.net/flydragon0815/article/details/46006473)*","slug":"Gitee2Gitea","published":1,"updated":"2020-03-24T06:15:27.492Z","layout":"post","photos":[],"link":"","_id":"ck9beg974001ln6yhvgxalraf"},{"title":"(猫)花木兰领养注意事项","comments":1,"toc":false,"date":"2019-09-17T03:22:04.000Z","visible":"hide","_content":"![](/media/花木兰/15.jpg)\n<!--more-->\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>{% note warning %} 领养前请确认能否接受以下几点，如果否，不建议领养 {% endnote %}<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p>\n<h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p>\n</section>\n\n{% gp 14-0 %}\n![](/media/花木兰/1.jpg)\n![](/media/花木兰/2.jpg)\n![](/media/花木兰/3.jpg)\n![](/media/花木兰/4.jpg)\n![](/media/花木兰/5.jpg)\n![](/media/花木兰/6.jpg)\n![](/media/花木兰/7.jpg)\n![](/media/花木兰/8.jpg)\n![](/media/花木兰/9.jpg)\n![](/media/花木兰/10.jpg)\n![](/media/花木兰/11.jpg)\n![](/media/花木兰/12.jpg)\n![](/media/花木兰/13.jpg)\n![](/media/花木兰/14.jpg)\n{% endgp %}","source":"_posts/adoption-cat-Hua-Mulan.md","raw":"---\ntitle: (猫)花木兰领养注意事项\ncomments: true\ntags: [猫, Cat]\ncategories: [猫]\ntoc: false\ndate: 2019-09-17 11:22:04\nvisible: hide\n---\n![](/media/花木兰/15.jpg)\n<!--more-->\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>{% note warning %} 领养前请确认能否接受以下几点，如果否，不建议领养 {% endnote %}<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p>\n<h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\">\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li>\n<li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li>\n</ol>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p>\n<h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2>\n<p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p>\n</section>\n\n{% gp 14-0 %}\n![](/media/花木兰/1.jpg)\n![](/media/花木兰/2.jpg)\n![](/media/花木兰/3.jpg)\n![](/media/花木兰/4.jpg)\n![](/media/花木兰/5.jpg)\n![](/media/花木兰/6.jpg)\n![](/media/花木兰/7.jpg)\n![](/media/花木兰/8.jpg)\n![](/media/花木兰/9.jpg)\n![](/media/花木兰/10.jpg)\n![](/media/花木兰/11.jpg)\n![](/media/花木兰/12.jpg)\n![](/media/花木兰/13.jpg)\n![](/media/花木兰/14.jpg)\n{% endgp %}","slug":"adoption-cat-Hua-Mulan","published":1,"updated":"2020-01-17T07:58:10.992Z","layout":"post","photos":[],"link":"","_id":"ck9beg977001mn6yhogpgrsc2"},{"title":"Django Rest framework入门笔记及跳坑记录","comments":1,"date":"2016-12-17T07:03:10.000Z","sticky":null,"_content":"<br />\n<!--more-->\n## 更新记录\n2016-01-26 初稿\n\n## 序列化时嵌套显示外键关联字段\n- 自动\n使用`depth`参数指定外键深度\n\n- 手动指定\n使用外键对应`model`的小写为属性，外键对应的`model`序列化程序为值\n以下例子在`HospitalPic`序列化结果里嵌套显示`Hospital`\nmodels.py\n  ```python\n  from django.db import models\n\n  class Hospital(models.Model):\n      name = models.CharField()\n \n  class HospitalPic(models.Model):\n      hospital = models.ForeignKey(Hospital)\n  ```\nserializers.py\n  ```python\n  from rest_framework import serializers\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      class Meta:\n          model = Hospital \n          fields = '__all__'\n \n \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n      hospital = HospitalSerializer()\n \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n  ```\n***反向关系嵌套***\n在`Hospital`序列化结果里嵌套显示`HospitalPic`\nserializers.py\n  ```python\n  from rest_framework import serializers\n  \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      hospitalpic_set = HospitalPicSerializer(many=Ture)\n      class Meta:\n          model = Hospital\n          fields = '__all__'\n  ```\n\n## 在序列化对象里添加关联表的字段内容\n定义一个`serializer Field`，并添加参数`source`指向外键对对应的字段（`source`值其实是从当前序列化的实例的属性）\n```python\nmy_address= serializers.ReadOnlyField(source='address.full_address')\n```\n\n## 在序列化对象里添加自定义内容\n```python\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n \nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n \n    class Meta:\n        model = User\n \n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n```\n\n## 使用`ViewSet`，并不有设置`queryset`，而是重写了`get_queryset`时，需要在`router`里增加`base_name`参数（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nviews.py\n```python\nclass ContactViewSet(viewsets.ModelViewSet):\n    serializer_class = ContactSerializer\n    permission_classes = (permissions.IsAuthenticated,)\n \n    def get_queryset(self):\n        return self.request.user.contact_set.all()\n```\n\nurls.py\n```python\nrouter.register(r'contact', ContactViewSet, base_name='contact')\n```\n未设置`base_name`会报下面错误\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n\n## 给api接口的url添加了命名空间`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n需要对`HyperlinkedRelatedField`字段的参数进行修改\nserializers.py\n```python\nclass HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = HospitalPic\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:hospitalpic-detail'},\n            'hospital': {'view_name': 'api:hospital-detail'}\n        }\n```\n\n不然会出现以下错误\n```python\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n不过话说我们全api的url加`namespace`一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于`namespace`的版本控制，这样就不需要修改`HyperlinkedRelatedField`字段的`view_name`了\nurls.py\n```python\nurl(r'^api/v1/', include(router.urls, namespace='v1')),\nurl(r'^api/v2/', include(router.urls, namespace='v2')),\n```\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```\n\n## 要drf的错误提示为中文，需要设置\n```python\nLANGUAGE_CODE = 'zh-CN'\n```\n如果设置为\n```python\nLANGUAGE_CODE = 'zh-Hans'\n```\n虽然django默认表单错误会输出中文，但drf还是输出英文\n\n## django的`validators`可以直接在drf中使用，不需要做任何修改\n\n## 当字段里的属性`editable=False`时，`ModelSerializer`里该字段会抛弃`model`里显式和隐式（unique）的所有`validators`\n\n## `Serializer`里`write_only`写在`field`里和写在`extra_kwargs`里是有区别的，\n```python\nclass UserRegisterSerializer(serializers.ModelSerializer):\n    \"\"\"用户注册Serializer\"\"\"\n \n    code = serializers.CharField(min_length=4, max_length=6, label=_('验证码'),\n                                 help_text=_('验证码'), write_only=True)\n    re_password = serializers.CharField(label=_('重复密码'), help_text=_('重复密码'),\n                                        validators=validators.password_validators(),\n                                        write_only=True)\n \n    class Meta:\n        model = User\n        fields = ('mobile_phone', 'code', 'password', 're_password')\n        extra_kwargs = {'password':\n                            {'write_only': True}\n                        }\n \n    def validate(self, attrs):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if attrs['password'] != attrs['re_password']:\n            raise serializers.ValidationError(_('密码不一致'))\n \n        # 校验验证码\n        verify_result = Sms(attrs['mobile_phone']).verify_sms_code(\n            attrs.pop('code'))\n        if not verify_result:\n            error = verify_result.get('error')\n            raise ParseError(error)\n        return attrs\n \n    def create(self, validated_data):\n        user = User(\n            username=validated_data['mobile_phone'],\n            mobile_phone=validated_data['mobile_phone'],\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n```\n因为`create()`这个方法return了一个`user`实例，`User`里没有的字段`code`和`re_password`需要将`write_only `写在`field`参数里，不然会报以下错误\n```\nAttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.\nThe serializer field might be named incorrectly and not match any attribute or key on the `User` instance.\nOriginal exception text was: 'User' object has no attribute 'code'.\n```\n\n## 如果使用`django-rest-swagger`报以下错误\n```\nCan't read from server. It may not have the appropriate access-control-origin settings.\n```\n注释掉设置里的\n```python\n    # 'base_path': '127.0.0.1:8000/docs',\n```\n\n## `serializer.data`和`serializer.validated_data`\n在`serializer`只使用`data`参数实例化的时：\n- `serializer.data`是原始数据（字符串），`serializer.validated_data`是进行数据验证并转换成对应数据类型的数据。\n- 两者者必须在`serializer`调用`is_valid`方法后才能调用\n在`serializer`只使用`instance`参数实例化时：\n- 只有`serializer.data`没有`serializer.validated_data`，并且`serializer.data`里的数据也是字符串；\n- 没有方法`is_valid`；\n- 即`is_valid`和`validated_data`只在有data参数实例化时才可调用；\n\n## 在`serializer`里获取原始请求信息\n默认的，上下文信息会被传递到`serializer`里，所以在`serializer`可以直接使用`self.context['request']`来获取请求信息。（在要继承自`viewsets.GenericViewSet`的类里使用的`serializer`才能取到，如果是继承`APIView`的，自己传入即可`serializer = self.serializer_class(data=request.data, context={'request': request})`）\n\n## 自定义`serializer`字段\n自定义字段继承`serializers.Field`，`to_representation`方法处理出来的数据用来序列化显示，`to_internal_value`处理接收到的数据，`get_attribute`方法指定这个字段访问的实例属性，`get_value`方法指定\n```python\nclass QiNiuField(serializers.Field):\n    def get_attribute(self, instance):\n        # （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定\n        return instance.key\n    \n    def get_value(self, dictionary):\n        # （反序列化时）从传入数据中提取一个值给这个字段处理\n        return super(QiNiuField, self).get_value(dictionary)\n\n    def to_representation(self, value):\n        # （序列化时）处理出来的数据用来序列化显示\n        return value.url\n\n    def to_internal_value(self, data):\n        # （反序列化时）处理接收到的数据\n        return data['key']\n```\n\n## 嵌套序列化，传参问题\n官方文档中有这么一个例子[Dealing with nested objects](http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects)\n如果是以`Content-Type:application/json`形式传数据格式传数据，直接嵌套传就可以了`{'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}`，但如果是以,\n但是如果以`Content-Type:form-data`或`Content-Type:x-www-form-urlencoded`上传，则上传`user`信息进不是嵌套，而是就`.`连接了，`\"user.email\":\"foobar\"`.\n\n","source":"_posts/django-rest-framework入门笔记及跳坑记录.md","raw":"title: Django Rest framework入门笔记及跳坑记录\ncomments: true\ndate: 2016-12-17 15:03:10\ncategories:\ntags: [Django, restful, api, 问题]\nsticky:\n---\n<br />\n<!--more-->\n## 更新记录\n2016-01-26 初稿\n\n## 序列化时嵌套显示外键关联字段\n- 自动\n使用`depth`参数指定外键深度\n\n- 手动指定\n使用外键对应`model`的小写为属性，外键对应的`model`序列化程序为值\n以下例子在`HospitalPic`序列化结果里嵌套显示`Hospital`\nmodels.py\n  ```python\n  from django.db import models\n\n  class Hospital(models.Model):\n      name = models.CharField()\n \n  class HospitalPic(models.Model):\n      hospital = models.ForeignKey(Hospital)\n  ```\nserializers.py\n  ```python\n  from rest_framework import serializers\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      class Meta:\n          model = Hospital \n          fields = '__all__'\n \n \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n      hospital = HospitalSerializer()\n \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n  ```\n***反向关系嵌套***\n在`Hospital`序列化结果里嵌套显示`HospitalPic`\nserializers.py\n  ```python\n  from rest_framework import serializers\n  \n  class HospitalPicSerializer(serializers.HyperlinkedModelSerializer): \n      class Meta:\n          model = HospitalPic\n          fields = '__all__'\n\n\n  class HospitalSerializer(serializers.HyperlinkedModelSerializer):\n      hospitalpic_set = HospitalPicSerializer(many=Ture)\n      class Meta:\n          model = Hospital\n          fields = '__all__'\n  ```\n\n## 在序列化对象里添加关联表的字段内容\n定义一个`serializer Field`，并添加参数`source`指向外键对对应的字段（`source`值其实是从当前序列化的实例的属性）\n```python\nmy_address= serializers.ReadOnlyField(source='address.full_address')\n```\n\n## 在序列化对象里添加自定义内容\n```python\nfrom django.contrib.auth.models import User\nfrom django.utils.timezone import now\nfrom rest_framework import serializers\n \nclass UserSerializer(serializers.ModelSerializer):\n    days_since_joined = serializers.SerializerMethodField()\n \n    class Meta:\n        model = User\n \n    def get_days_since_joined(self, obj):\n        return (now() - obj.date_joined).days\n```\n\n## 使用`ViewSet`，并不有设置`queryset`，而是重写了`get_queryset`时，需要在`router`里增加`base_name`参数（`base_name`为`router`为`ViewSet`注册url时自动添加的name前缀，如果未设置则从`ViewSet`的`queryset`里取，使用`ViewSet`自动生成的url name为<base_name>-list <base_name>-detail 等）\nviews.py\n```python\nclass ContactViewSet(viewsets.ModelViewSet):\n    serializer_class = ContactSerializer\n    permission_classes = (permissions.IsAuthenticated,)\n \n    def get_queryset(self):\n        return self.request.user.contact_set.all()\n```\n\nurls.py\n```python\nrouter.register(r'contact', ContactViewSet, base_name='contact')\n```\n未设置`base_name`会报下面错误\n```\n'base_name' argument not specified, and could not automatically determine the name from the viewset, as it does not have a '.queryset' attribute.\n```\n\n## 给api接口的url添加了命名空间`namespace`\nurls.py\n```python\nurl(r'^api/', include(router.urls, namespace='api')),\n```\n需要对`HyperlinkedRelatedField`字段的参数进行修改\nserializers.py\n```python\nclass HospitalPicSerializer(serializers.HyperlinkedModelSerializer):\n    class Meta:\n        model = HospitalPic\n        fields = '__all__'\n        extra_kwargs = {\n            'url': {'view_name': 'api:hospitalpic-detail'},\n            'hospital': {'view_name': 'api:hospital-detail'}\n        }\n```\n\n不然会出现以下错误\n```python\nCould not resolve URL for hyperlinked relationship using view name \"user-detail\". You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.\n```\n不过话说我们全api的url加`namespace`一般是为了版本控制，所以有一种简单的方法,只要在settings.py添加基于`namespace`的版本控制，这样就不需要修改`HyperlinkedRelatedField`字段的`view_name`了\nurls.py\n```python\nurl(r'^api/v1/', include(router.urls, namespace='v1')),\nurl(r'^api/v2/', include(router.urls, namespace='v2')),\n```\nsettings.py\n```python\nREST_FRAMEWORK = {\n    ……\n    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',\n    ……\n}\n```\n\n## 要drf的错误提示为中文，需要设置\n```python\nLANGUAGE_CODE = 'zh-CN'\n```\n如果设置为\n```python\nLANGUAGE_CODE = 'zh-Hans'\n```\n虽然django默认表单错误会输出中文，但drf还是输出英文\n\n## django的`validators`可以直接在drf中使用，不需要做任何修改\n\n## 当字段里的属性`editable=False`时，`ModelSerializer`里该字段会抛弃`model`里显式和隐式（unique）的所有`validators`\n\n## `Serializer`里`write_only`写在`field`里和写在`extra_kwargs`里是有区别的，\n```python\nclass UserRegisterSerializer(serializers.ModelSerializer):\n    \"\"\"用户注册Serializer\"\"\"\n \n    code = serializers.CharField(min_length=4, max_length=6, label=_('验证码'),\n                                 help_text=_('验证码'), write_only=True)\n    re_password = serializers.CharField(label=_('重复密码'), help_text=_('重复密码'),\n                                        validators=validators.password_validators(),\n                                        write_only=True)\n \n    class Meta:\n        model = User\n        fields = ('mobile_phone', 'code', 'password', 're_password')\n        extra_kwargs = {'password':\n                            {'write_only': True}\n                        }\n \n    def validate(self, attrs):\n        \"\"\"\n        Check that the start is before the stop.\n        \"\"\"\n        if attrs['password'] != attrs['re_password']:\n            raise serializers.ValidationError(_('密码不一致'))\n \n        # 校验验证码\n        verify_result = Sms(attrs['mobile_phone']).verify_sms_code(\n            attrs.pop('code'))\n        if not verify_result:\n            error = verify_result.get('error')\n            raise ParseError(error)\n        return attrs\n \n    def create(self, validated_data):\n        user = User(\n            username=validated_data['mobile_phone'],\n            mobile_phone=validated_data['mobile_phone'],\n        )\n        user.set_password(validated_data['password'])\n        user.save()\n        return user\n```\n因为`create()`这个方法return了一个`user`实例，`User`里没有的字段`code`和`re_password`需要将`write_only `写在`field`参数里，不然会报以下错误\n```\nAttributeError: Got AttributeError when attempting to get a value for field `code` on serializer `UserRegisterSerializer`.\nThe serializer field might be named incorrectly and not match any attribute or key on the `User` instance.\nOriginal exception text was: 'User' object has no attribute 'code'.\n```\n\n## 如果使用`django-rest-swagger`报以下错误\n```\nCan't read from server. It may not have the appropriate access-control-origin settings.\n```\n注释掉设置里的\n```python\n    # 'base_path': '127.0.0.1:8000/docs',\n```\n\n## `serializer.data`和`serializer.validated_data`\n在`serializer`只使用`data`参数实例化的时：\n- `serializer.data`是原始数据（字符串），`serializer.validated_data`是进行数据验证并转换成对应数据类型的数据。\n- 两者者必须在`serializer`调用`is_valid`方法后才能调用\n在`serializer`只使用`instance`参数实例化时：\n- 只有`serializer.data`没有`serializer.validated_data`，并且`serializer.data`里的数据也是字符串；\n- 没有方法`is_valid`；\n- 即`is_valid`和`validated_data`只在有data参数实例化时才可调用；\n\n## 在`serializer`里获取原始请求信息\n默认的，上下文信息会被传递到`serializer`里，所以在`serializer`可以直接使用`self.context['request']`来获取请求信息。（在要继承自`viewsets.GenericViewSet`的类里使用的`serializer`才能取到，如果是继承`APIView`的，自己传入即可`serializer = self.serializer_class(data=request.data, context={'request': request})`）\n\n## 自定义`serializer`字段\n自定义字段继承`serializers.Field`，`to_representation`方法处理出来的数据用来序列化显示，`to_internal_value`处理接收到的数据，`get_attribute`方法指定这个字段访问的实例属性，`get_value`方法指定\n```python\nclass QiNiuField(serializers.Field):\n    def get_attribute(self, instance):\n        # （序列化时）从模型实例中取一个值给这个字段处理,也可以使用`source`参数指定\n        return instance.key\n    \n    def get_value(self, dictionary):\n        # （反序列化时）从传入数据中提取一个值给这个字段处理\n        return super(QiNiuField, self).get_value(dictionary)\n\n    def to_representation(self, value):\n        # （序列化时）处理出来的数据用来序列化显示\n        return value.url\n\n    def to_internal_value(self, data):\n        # （反序列化时）处理接收到的数据\n        return data['key']\n```\n\n## 嵌套序列化，传参问题\n官方文档中有这么一个例子[Dealing with nested objects](http://www.django-rest-framework.org/api-guide/serializers/#dealing-with-nested-objects)\n如果是以`Content-Type:application/json`形式传数据格式传数据，直接嵌套传就可以了`{'user': {'email': 'foobar', 'username': 'doe'}, 'content': 'baz'}`，但如果是以,\n但是如果以`Content-Type:form-data`或`Content-Type:x-www-form-urlencoded`上传，则上传`user`信息进不是嵌套，而是就`.`连接了，`\"user.email\":\"foobar\"`.\n\n","slug":"django-rest-framework入门笔记及跳坑记录","published":1,"updated":"2020-01-17T07:57:11.568Z","layout":"post","photos":[],"link":"","_id":"ck9beg979001pn6yhue0ou2wz"},{"title":"在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django","comments":1,"date":"2016-12-08T15:19:59.000Z","sticky":null,"_content":"本文记录下在CentOS下部署Django项目的步骤。\n<!--more-->\n\n## MySQL\n \n### 安装mysql和mysql-devel\n```\nyum install mysql\nyum install mysql-devel\n```\n \n### 安装mysql-server\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n```\n \n### 重启mysql服务\n```\nservice mysqld restart\n```\n \n### 设置root密码\n初次安装mysql需要设置root密码\n```\nmysql -uroot\nset password for 'root'@'localhost' =password('password');\n```\n \n### 配置mysql\n在`/etc/my.cnf`文件中[mysql]和[mysql]中添加以下内容\n```\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ncharacter-set-server=utf8\n```\n字符编码保持和`/usr/share/mysql/charsets/Index.xml`中的一致。\n \n### 远程连接设置\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n```\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n如果是新用户而不是root，则要先新建用户\n```\nmysql>create user 'username'@'%' identified by 'password';\n```\n此时就可以进行远程连接了。\n \n## Virtualenv\n安装epel扩展源\n```\nyum install epel-release\n```\n安装pip\n```\nyum install python-pip\n```\n安装virtualenv和virtualenvwrapper\n```\npip install virtualenv virtualenvwrapper\n```\n编辑`~/.bashrc`文件，结尾添加以下内容\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n然后执行以下命令使配置生效\n```\nsource ~/.bashrc\n```\n创建env\n```\nmkvirtualenv explame\n```\n使用pip安装项目需要的包\n \n## WSGI\n在项目目录下新建`nginx_wsgi.py`文件\n```\ntouch nginx_wsgi.py\n```\n添加如下内容\n```\nimport sys\nimport site\nimport os\n \n# site-packages\nsite.addsitedir('/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages')\n# Add the  project  directory\n# sys.path.append('/home/nginxuser/nginxuser')\nPROJECT_DIR = '/home/nginxuser/projects/example'\nsys.path.insert(0, PROJECT_DIR)\nos.environ['DJANGO_SETTINGS_MODULE'] = 'example.settings.prod'\n# Activate your virtual env\nactivate_env = os.path.expanduser(\"/home/nginxuser/.virtualenvs/example/bin/activate_this.py\")\nexecfile(activate_env, dict(__file__=activate_env))\n \n# after activite env\nfrom django.core.wsgi import get_wsgi_application\n \napplication = get_wsgi_application()\n```\n \n## Nginx\n \n### 安装\n```\nyum install nginx\n```\n### 检查配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n \n### 启动nginx\n```\nservice nginx start\n```\n \n### 设置开机自启\n```\nsystemctl enable nginx\n```\n \n### 创建用户\n```\nuseradd nginxuser\npasswd nginxuser\n```\n### 修改nginx主配置\n```\nvim /etc/nginx/nginx.conf\n```\n非注释首行\n```\nuser nginx\n```\n改为\n```\nuser nginxuser\n```\n不然可能会出现网站静态文件访问报403问题。\n### 新建网站运行配置\n```\nvim /etc/nginx/conf.d/example.conf\n```\n```\nserver {                                                               \n    listen      80;                                                    \n    server_name example.com;                            \n    charset     utf-8;                                                 \n    client_max_body_size 75M;                                          \n    access_log /home/nginxuser/projects/example/nginxlogs/access.log;\n    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          \n \n    location /static {                                                 \n        alias /home/nginxuser/projects/explame/static;                \n    }                                                                  \n \n    location / {                                                       \n        proxy_pass http://127.0.0.1:8000;                              \n        proxy_set_header Host $host;                                   \n        proxy_set_header X-Real-IP $remote_addr;                       \n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   \n    }                                                                  \n}                                                                       jk\n```\n \n## Gunicorn\n### 安装\n```\npip install gunicorn\n```\n项目根目录下添加gunicorn运行配置文件gunicorn.conf.py\n```\nimport multiprocessing\nbind = \"127.0.0.1:8000\"\nworkers = 2\nerrorlog = \"/home/nginxuser/example/gunicorn.error.log\"\n#loglevel = \"debug\"\nproc_name = \"gunicorn_example\"\n```\n### 启动\n```\nsudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py\n```\n后台运行\n```\nsudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&\n```\n如果运行报错先使用以下命令检查下nginx配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n## Supervisor\n### 安装\n```\npip install supervisor\n```\n### 创建管理进程配置文件\n```\nvim /etc/supervisord.d/example.ini\n```\n（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）\n```\n[program:example]\ndirectory = /home/nginxuser/projects/example ; 程序的启动目录\ncommand = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = nginx         ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n**冒号后面要有空格**\n\n### 启动\n使用`-c`指定配置文件。\n```\nsupervisord -c /etc/supervisord.conf\n```\n如果启动时遇到以下报错信息\n```\nError: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.\nFor help, use /use/bin/supervisord -h\n```\n可以使用以下命令解决\n```\nsudo unlink /var/run/supervisor/supervisor.sock\n```\n\n### 命令行客户端工具supervisorctl\n启动时需要使用和`supervisorctl`使用一样的配置文件。\n```\nsupervisorctl -c /etc/supervisord.conf\n```\n启动后进入`supervisorctl`的shell，在此shell里可以执行以下命令\n```\nstatus # 查看程序状态\nstart example # 启动example程序\nstop example # 关闭example程序\nrestart example # 重启example程序\nreread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nupdate # 重启配置文件修改过的程序\n```\n也可以不进shell执行以上命令\n```\nsupervisorctl status # 查看程序状态\nsupervisorctl start example # 启动example程序\nsupervisorctl stop example # 关闭example程序\nsupervisorctl restart example # 重启example程序\nsupervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nsupervisorctl update # 重启配置文件修改过的程序\n```\n\n### 开启web管理界面\n如果要开启web管理界面，打开`/etc/supervisord.conf`把下面几行取消注释即可\n```\n:[inet_http_server]         ; inet (TCP) server disabled by default\n:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\n:username=user              ; (default is no username (open server))\n:password=123               ; (default is no password (open server))\n```\n\n\n","source":"_posts/在centos7使用mysql-nginx-gunicorn+supervisor部署django.md","raw":"title: 在CentOS7上用MySQL+Nginx+Gunicorn+Supervisor部署Django\ncomments: true\ndate: 2016-12-08 23:19:59\ncategories: [程序猿]\ntags: [centOS, Django, Nginx, Gunicorn, MySQL, Supervisor]\nsticky: \n---\n本文记录下在CentOS下部署Django项目的步骤。\n<!--more-->\n\n## MySQL\n \n### 安装mysql和mysql-devel\n```\nyum install mysql\nyum install mysql-devel\n```\n \n### 安装mysql-server\n```\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n```\n \n### 重启mysql服务\n```\nservice mysqld restart\n```\n \n### 设置root密码\n初次安装mysql需要设置root密码\n```\nmysql -uroot\nset password for 'root'@'localhost' =password('password');\n```\n \n### 配置mysql\n在`/etc/my.cnf`文件中[mysql]和[mysql]中添加以下内容\n```\n[mysql]\ndefault-character-set=utf8\n\n[mysqld]\ncharacter-set-server=utf8\n```\n字符编码保持和`/usr/share/mysql/charsets/Index.xml`中的一致。\n \n### 远程连接设置\n把在所有数据库的所有表的所有权限赋值给位于所有IP地址的root用户。\n```\nmysql> grant all privileges on *.* to root@'%'identified by 'password';\n```\n如果是新用户而不是root，则要先新建用户\n```\nmysql>create user 'username'@'%' identified by 'password';\n```\n此时就可以进行远程连接了。\n \n## Virtualenv\n安装epel扩展源\n```\nyum install epel-release\n```\n安装pip\n```\nyum install python-pip\n```\n安装virtualenv和virtualenvwrapper\n```\npip install virtualenv virtualenvwrapper\n```\n编辑`~/.bashrc`文件，结尾添加以下内容\n```\nexport WORKON_HOME=~/.virtualenvs\nsource /usr/bin/virtualenvwrapper.sh\n```\n然后执行以下命令使配置生效\n```\nsource ~/.bashrc\n```\n创建env\n```\nmkvirtualenv explame\n```\n使用pip安装项目需要的包\n \n## WSGI\n在项目目录下新建`nginx_wsgi.py`文件\n```\ntouch nginx_wsgi.py\n```\n添加如下内容\n```\nimport sys\nimport site\nimport os\n \n# site-packages\nsite.addsitedir('/home/nginxuser/.virtualenvs/example/lib/python2.7/site-packages')\n# Add the  project  directory\n# sys.path.append('/home/nginxuser/nginxuser')\nPROJECT_DIR = '/home/nginxuser/projects/example'\nsys.path.insert(0, PROJECT_DIR)\nos.environ['DJANGO_SETTINGS_MODULE'] = 'example.settings.prod'\n# Activate your virtual env\nactivate_env = os.path.expanduser(\"/home/nginxuser/.virtualenvs/example/bin/activate_this.py\")\nexecfile(activate_env, dict(__file__=activate_env))\n \n# after activite env\nfrom django.core.wsgi import get_wsgi_application\n \napplication = get_wsgi_application()\n```\n \n## Nginx\n \n### 安装\n```\nyum install nginx\n```\n### 检查配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n \n### 启动nginx\n```\nservice nginx start\n```\n \n### 设置开机自启\n```\nsystemctl enable nginx\n```\n \n### 创建用户\n```\nuseradd nginxuser\npasswd nginxuser\n```\n### 修改nginx主配置\n```\nvim /etc/nginx/nginx.conf\n```\n非注释首行\n```\nuser nginx\n```\n改为\n```\nuser nginxuser\n```\n不然可能会出现网站静态文件访问报403问题。\n### 新建网站运行配置\n```\nvim /etc/nginx/conf.d/example.conf\n```\n```\nserver {                                                               \n    listen      80;                                                    \n    server_name example.com;                            \n    charset     utf-8;                                                 \n    client_max_body_size 75M;                                          \n    access_log /home/nginxuser/projects/example/nginxlogs/access.log;\n    error_log /home/nginxuser/projects/example/nginxlogs/error.log;          \n \n    location /static {                                                 \n        alias /home/nginxuser/projects/explame/static;                \n    }                                                                  \n \n    location / {                                                       \n        proxy_pass http://127.0.0.1:8000;                              \n        proxy_set_header Host $host;                                   \n        proxy_set_header X-Real-IP $remote_addr;                       \n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;   \n    }                                                                  \n}                                                                       jk\n```\n \n## Gunicorn\n### 安装\n```\npip install gunicorn\n```\n项目根目录下添加gunicorn运行配置文件gunicorn.conf.py\n```\nimport multiprocessing\nbind = \"127.0.0.1:8000\"\nworkers = 2\nerrorlog = \"/home/nginxuser/example/gunicorn.error.log\"\n#loglevel = \"debug\"\nproc_name = \"gunicorn_example\"\n```\n### 启动\n```\nsudo gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py\n```\n后台运行\n```\nsudo nohup gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py&\n```\n如果运行报错先使用以下命令检查下nginx配置是否有错\n```\nnginx -t -c /etc/nginx/nginx.conf\n```\n## Supervisor\n### 安装\n```\npip install supervisor\n```\n### 创建管理进程配置文件\n```\nvim /etc/supervisord.d/example.ini\n```\n（需要注意：用 supervisord 管理时，gunicorn 的 daemon 选项需要设置为 False）\n```\n[program:example]\ndirectory = /home/nginxuser/projects/example ; 程序的启动目录\ncommand = gunicorn example.nginx_wsgi:application -c /home/nginxuser/projects/example/gunicorn.conf.py  ; 启动命令，可以看出与手动在命令行启动的命令是一样的\nautostart = true     ; 在 supervisord 启动的时候也自动启动\nstartsecs = 5        ; 启动 5 秒后没有异常退出，就当作已经正常启动了\nautorestart = true   ; 程序异常退出后自动重启\nstartretries = 3     ; 启动失败自动重试次数，默认是 3\nuser = nginx         ; 用哪个用户启动\nredirect_stderr = true  ; 把 stderr 重定向到 stdout，默认 false\nstdout_logfile_maxbytes = 20MB  ; stdout 日志文件大小，默认 50MB\nstdout_logfile_backups = 20     ; stdout 日志文件备份数\n; stdout 日志文件，需要注意当指定目录不存在时无法正常启动，所以需要手动创建目录（supervisord 会自动创建日志文件）\nstdout_logfile = /data/logs/usercenter_stdout.log\n\n; 可以通过 environment 来添加需要的环境变量，一种常见的用法是修改 PYTHONPATH\n; environment=PYTHONPATH=$PYTHONPATH:/path/to/somewhere\n```\n**冒号后面要有空格**\n\n### 启动\n使用`-c`指定配置文件。\n```\nsupervisord -c /etc/supervisord.conf\n```\n如果启动时遇到以下报错信息\n```\nError: Another program is already listening on a port that one of our HTTP servers is configured to use. Shut this program down first before starting supervisord.\nFor help, use /use/bin/supervisord -h\n```\n可以使用以下命令解决\n```\nsudo unlink /var/run/supervisor/supervisor.sock\n```\n\n### 命令行客户端工具supervisorctl\n启动时需要使用和`supervisorctl`使用一样的配置文件。\n```\nsupervisorctl -c /etc/supervisord.conf\n```\n启动后进入`supervisorctl`的shell，在此shell里可以执行以下命令\n```\nstatus # 查看程序状态\nstart example # 启动example程序\nstop example # 关闭example程序\nrestart example # 重启example程序\nreread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nupdate # 重启配置文件修改过的程序\n```\n也可以不进shell执行以上命令\n```\nsupervisorctl status # 查看程序状态\nsupervisorctl start example # 启动example程序\nsupervisorctl stop example # 关闭example程序\nsupervisorctl restart example # 重启example程序\nsupervisorctl reread # 读取有更新（增加）的配置文件，不会启动新添加的程序\nsupervisorctl update # 重启配置文件修改过的程序\n```\n\n### 开启web管理界面\n如果要开启web管理界面，打开`/etc/supervisord.conf`把下面几行取消注释即可\n```\n:[inet_http_server]         ; inet (TCP) server disabled by default\n:port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for all iface)\n:username=user              ; (default is no username (open server))\n:password=123               ; (default is no password (open server))\n```\n\n\n","slug":"在centos7使用mysql-nginx-gunicorn+supervisor部署django","published":1,"updated":"2020-01-17T07:59:15.669Z","layout":"post","photos":[],"link":"","_id":"ck9beg97c001qn6yhiokiyxx8"}],"PostAsset":[],"PostCategory":[{"post_id":"ck9beg88x0004n6yh3eircrd9","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9bega8t0063n6yhmc8uyk8g"},{"post_id":"ck9beg8930006n6yh15qdt3d1","category_id":"ck9beg978001nn6yh9z6ytd7h","_id":"ck9bega8t0065n6yhft3mj91b"},{"post_id":"ck9beg8ai0008n6yhzwqsklik","category_id":"ck9beg978001nn6yh9z6ytd7h","_id":"ck9bega8t0067n6yhy6r08d5y"},{"post_id":"ck9beg8b8000an6yh97ojc65n","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9bega8u006an6yhwt8r83rb"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9bega8v006cn6yhoq1n4wi7"},{"post_id":"ck9beg8bf000en6yhyp05b4wm","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacj006fn6yhx7yxgzul"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","category_id":"ck9beg980001zn6yhwhixf9ji","_id":"ck9begack006hn6yhjomm6wf9"},{"post_id":"ck9beg8bl000in6yhkd19up2c","category_id":"ck9beg9810021n6yh1qim7n6o","_id":"ck9begacl006kn6yh0txbjekv"},{"post_id":"ck9beg8bm000jn6yh4jd8c3i0","category_id":"ck9beg978001nn6yh9z6ytd7h","_id":"ck9begacl006mn6yhg60x6r0j"},{"post_id":"ck9beg8bn000kn6yhwef2vnt0","category_id":"ck9beg99l0025n6yhezaxtqeb","_id":"ck9begacm006pn6yhnlewb5up"},{"post_id":"ck9beg8bo000ln6yh9zxs54v1","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacm006rn6yh1vyk34t1"},{"post_id":"ck9beg8bp000mn6yhgfcz5uup","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacm006tn6yhd0rg10av"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacn006wn6yhaokl61sh"},{"post_id":"ck9beg8ck000qn6yhouiysqy9","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacn006yn6yh758lsd9e"},{"post_id":"ck9beg8co000sn6yhr3ej4jz5","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begaco0071n6yh8ewpm0qx"},{"post_id":"ck9beg8cr000tn6yh9abs76eo","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacp0073n6yh2jddizdw"},{"post_id":"ck9beg8cs000un6yhmjfw2sis","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacs0076n6yh0l0gbk4z"},{"post_id":"ck9beg8cv000vn6yh390ngmzu","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacs0078n6yh3gjyfky4"},{"post_id":"ck9beg8cz000wn6yh7v20wovo","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begact007bn6yhnt1nib5f"},{"post_id":"ck9beg8cz000xn6yh4yfrhn9b","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begact007dn6yhaob020qq"},{"post_id":"ck9beg8d3000zn6yhi40r0fn9","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacu007fn6yhlm2ev8dv"},{"post_id":"ck9beg8d40010n6yhe6lwybak","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacu007in6yh120aw9yw"},{"post_id":"ck9beg8d50011n6yh0xb4q15f","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacv007kn6yh5mwowyrj"},{"post_id":"ck9beg8d60012n6yheyrkj0f5","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacv007nn6yhrb8op57m"},{"post_id":"ck9beg8d70013n6yhs5nvp627","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacw007pn6yhmnuvpv91"},{"post_id":"ck9beg8d80014n6yhw2d4empr","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacw007sn6yhddwr1v6f"},{"post_id":"ck9beg8dc0015n6yhcl5459ib","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacw007un6yhd5746tol"},{"post_id":"ck9beg8dh0016n6yh3uyttauh","category_id":"ck9beg9bv0034n6yhbkncil9g","_id":"ck9begacx007xn6yhny13iwoa"},{"post_id":"ck9beg8dk0017n6yh2ym5hhxh","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacx007zn6yhyksttv33"},{"post_id":"ck9beg8dl0018n6yhajf63afc","category_id":"ck9beg9ez0038n6yh22gcdn9n","_id":"ck9begacx0081n6yhn3q9uzag"},{"post_id":"ck9beg8dm0019n6yheeb6tuhq","category_id":"ck9beg9bv0034n6yhbkncil9g","_id":"ck9begacx0083n6yh8h8mobws"},{"post_id":"ck9beg8dq001an6yhuq1sxg7g","category_id":"ck9beg99l0025n6yhezaxtqeb","_id":"ck9begacy0085n6yh4j424uyd"},{"post_id":"ck9beg8ds001bn6yhsqybxnne","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacy0087n6yh175rjhy0"},{"post_id":"ck9beg8dv001cn6yh1xen7qyn","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacy0089n6yhnaw95h24"},{"post_id":"ck9beg8dw001dn6yhmnczs5io","category_id":"ck9beg99l0025n6yhezaxtqeb","_id":"ck9begacy008bn6yhrbhc6tgr"},{"post_id":"ck9beg8h4001en6yh2ykremmt","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begacy008dn6yh1xon593o"},{"post_id":"ck9beg8h5001fn6yh0q7npqrx","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begad0008fn6yhywh7firf"},{"post_id":"ck9beg8hb001gn6yh7slu3a1m","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begad1008hn6yhy5jwe9qq"},{"post_id":"ck9beg8hc001hn6yhnbyg989x","category_id":"ck9beg9kt003pn6yhn1bkg6or","_id":"ck9begad2008jn6yh0n5ga178"},{"post_id":"ck9beg969001kn6yheg7zdkxh","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begad2008ln6yhganl3equ"},{"post_id":"ck9beg974001ln6yhvgxalraf","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begad2008nn6yhhc01yn7h"},{"post_id":"ck9beg97c001qn6yhiokiyxx8","category_id":"ck9beg8yw001in6yhl862uqe6","_id":"ck9begad2008pn6yho5btrnpb"}],"PostTag":[{"post_id":"ck9beg88x0004n6yh3eircrd9","tag_id":"ck9beg93m001jn6yh4otzb5zo","_id":"ck9bega8i0060n6yhmgy63u3v"},{"post_id":"ck9beg88x0004n6yh3eircrd9","tag_id":"ck9beg978001on6yhdhbw53dq","_id":"ck9bega8t0064n6yheth64jvz"},{"post_id":"ck9beg8930006n6yh15qdt3d1","tag_id":"ck9beg97d001sn6yhag2a2h9p","_id":"ck9bega8t0066n6yhe9auedzq"},{"post_id":"ck9beg8930006n6yh15qdt3d1","tag_id":"ck9beg97u001un6yhgp2tgj1c","_id":"ck9bega8u0069n6yh2orlizf2"},{"post_id":"ck9beg8930006n6yh15qdt3d1","tag_id":"ck9beg97w001wn6yhqbnz2mcg","_id":"ck9bega8v006bn6yhaoc7hj7j"},{"post_id":"ck9beg8ai0008n6yhzwqsklik","tag_id":"ck9beg97z001yn6yh34k4itzl","_id":"ck9begacj006en6yh8s09fd7q"},{"post_id":"ck9beg8ai0008n6yhzwqsklik","tag_id":"ck9beg9800020n6yhte2mdt7n","_id":"ck9begack006gn6yhbogvnmyd"},{"post_id":"ck9beg8ai0008n6yhzwqsklik","tag_id":"ck9beg9810022n6yhwaie1b5j","_id":"ck9begacl006jn6yhytusrwna"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99k0024n6yhs8ztgbr8","_id":"ck9begacl006ln6yhjxrylnxt"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99l0026n6yhk14kmqnm","_id":"ck9begacl006nn6yhvj8xugu4"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99n0028n6yhmrl2irpg","_id":"ck9begacm006qn6yhs3rcitj0"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99o002an6yhs77w4hpx","_id":"ck9begacm006sn6yhawt4zhlr"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99t002cn6yhumbf3hoh","_id":"ck9begacn006vn6yhoxvb5q70"},{"post_id":"ck9beg8b8000an6yh97ojc65n","tag_id":"ck9beg99u002fn6yhp3nv35d6","_id":"ck9begacn006xn6yh5ghwvqov"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99k0024n6yhs8ztgbr8","_id":"ck9begaco0070n6yhyazka4ht"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99l0026n6yhk14kmqnm","_id":"ck9begacp0072n6yhmg6mwftw"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99n0028n6yhmrl2irpg","_id":"ck9begacr0075n6yhcuge6gk9"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99o002an6yhs77w4hpx","_id":"ck9begacs0077n6yhwq2dlljf"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99t002cn6yhumbf3hoh","_id":"ck9begacs0079n6yhs9vovnri"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg9b4002rn6yh60fomu3z","_id":"ck9begact007cn6yhe2vm4pjq"},{"post_id":"ck9beg8bb000cn6yh5lxecdwv","tag_id":"ck9beg99o002an6yhs77w4hpx","_id":"ck9begacu007en6yhddi5b1ue"},{"post_id":"ck9beg8bf000en6yhyp05b4wm","tag_id":"ck9beg99k0024n6yhs8ztgbr8","_id":"ck9begacu007hn6yhztnar8en"},{"post_id":"ck9beg8bf000en6yhyp05b4wm","tag_id":"ck9beg99l0026n6yhk14kmqnm","_id":"ck9begacv007jn6yh7ybi4zqd"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9br002zn6yh1x880hda","_id":"ck9begacv007mn6yhql2of9hz"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9bt0031n6yhhv7yoyl8","_id":"ck9begacv007on6yhwdnkpugq"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9bu0033n6yh1b1gfw4z","_id":"ck9begacw007rn6yh3jpjfoia"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9ew0035n6yhp4fzq3pr","_id":"ck9begacw007tn6yhy96af9md"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9ey0037n6yhr9eq0t4l","_id":"ck9begacw007vn6yh7ebvcpsi"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9ez0039n6yh305ls34z","_id":"ck9begacx007yn6yh9onm5ndf"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9f0003bn6yhiu8gs46r","_id":"ck9begacx0080n6yhdrpk7fka"},{"post_id":"ck9beg8bj000gn6yh6k72vsqc","tag_id":"ck9beg9f1003dn6yhcp1njj6z","_id":"ck9begacx0082n6yhqkb89am8"},{"post_id":"ck9beg8bl000in6yhkd19up2c","tag_id":"ck9beg9f2003gn6yhxyg9prke","_id":"ck9begacx0084n6yh9x0fuyf6"},{"post_id":"ck9beg8bl000in6yhkd19up2c","tag_id":"ck9beg9f5003in6yh5x79yrnz","_id":"ck9begacy0086n6yhosc7mljn"},{"post_id":"ck9beg8bl000in6yhkd19up2c","tag_id":"ck9beg9ew0035n6yhp4fzq3pr","_id":"ck9begacy0088n6yhwf4eop1h"},{"post_id":"ck9beg8bm000jn6yh4jd8c3i0","tag_id":"ck9beg9br002zn6yh1x880hda","_id":"ck9begacy008an6yha4n26ojh"},{"post_id":"ck9beg8bm000jn6yh4jd8c3i0","tag_id":"ck9beg9ks003on6yh50cbu0an","_id":"ck9begacy008cn6yhlpi3zx48"},{"post_id":"ck9beg8bn000kn6yhwef2vnt0","tag_id":"ck9beg9kw003qn6yh83sg5or4","_id":"ck9begad0008en6yh8g2z12ca"},{"post_id":"ck9beg8bn000kn6yhwef2vnt0","tag_id":"ck9beg9ks003on6yh50cbu0an","_id":"ck9begad1008gn6yh5a46sj23"},{"post_id":"ck9beg8bn000kn6yhwef2vnt0","tag_id":"ck9beg9ky003sn6yh1r6wc5zf","_id":"ck9begad2008in6yhwcm7qlgk"},{"post_id":"ck9beg8bn000kn6yhwef2vnt0","tag_id":"ck9beg9kz003tn6yhn43vwwn9","_id":"ck9begad2008kn6yho4hxfatu"},{"post_id":"ck9beg8bo000ln6yh9zxs54v1","tag_id":"ck9beg9kz003un6yhbghe3g17","_id":"ck9begad2008mn6yheeo1884r"},{"post_id":"ck9beg8bo000ln6yh9zxs54v1","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begad2008on6yholhcim3a"},{"post_id":"ck9beg8bp000mn6yhgfcz5uup","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad2008qn6yh6mtwa8jf"},{"post_id":"ck9beg8bp000mn6yhgfcz5uup","tag_id":"ck9beg9l1003xn6yhbxtsfb8g","_id":"ck9begad2008rn6yhve3pxq9i"},{"post_id":"ck9beg8bp000mn6yhgfcz5uup","tag_id":"ck9beg9l1003yn6yhiyp4f8um","_id":"ck9begad3008sn6yhdag9m1xp"},{"post_id":"ck9beg8bp000mn6yhgfcz5uup","tag_id":"ck9beg9l3003zn6yhpuqap3e0","_id":"ck9begad3008tn6yhi0jtyz25"},{"post_id":"ck9beg8bs000nn6yhx383zua0","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad3008un6yh2sqpypd1"},{"post_id":"ck9beg8bs000nn6yhx383zua0","tag_id":"ck9beg9l1003xn6yhbxtsfb8g","_id":"ck9begad3008vn6yhf20miqa1"},{"post_id":"ck9beg8bs000nn6yhx383zua0","tag_id":"ck9beg9l1003yn6yhiyp4f8um","_id":"ck9begad3008wn6yhvtxttezb"},{"post_id":"ck9beg8bs000nn6yhx383zua0","tag_id":"ck9beg9lh0043n6yh9jkijw4o","_id":"ck9begad3008xn6yhbxu27gxe"},{"post_id":"ck9beg8cd000on6yh1tawvwjq","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad4008yn6yhrey3cxhc"},{"post_id":"ck9beg8cd000on6yh1tawvwjq","tag_id":"ck9beg9l1003xn6yhbxtsfb8g","_id":"ck9begad6008zn6yh1fi3n5o8"},{"post_id":"ck9beg8cd000on6yh1tawvwjq","tag_id":"ck9beg9lk0046n6yhgnslwibj","_id":"ck9begad70090n6yhlrspriw5"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","tag_id":"ck9beg9ll0047n6yhye1ttqrw","_id":"ck9begad80091n6yhyz0d1bt4"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","tag_id":"ck9beg9lm0048n6yhn6a5rs1p","_id":"ck9begad80092n6yh80lhftrn"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","tag_id":"ck9beg9ln0049n6yhfnt2uoxs","_id":"ck9begad80093n6yhn8hzpbgm"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","tag_id":"ck9beg9ln004an6yh1yzr0kav","_id":"ck9begad80094n6yhvws4syzx"},{"post_id":"ck9beg8cj000pn6yhzhe5vbi8","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad80095n6yhvuvgia86"},{"post_id":"ck9beg8ck000qn6yhouiysqy9","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begad80096n6yh5ibzfkjo"},{"post_id":"ck9beg8ck000qn6yhouiysqy9","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad90097n6yhs1qboaeq"},{"post_id":"ck9beg8co000sn6yhr3ej4jz5","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begad90098n6yhscvt3zhn"},{"post_id":"ck9beg8co000sn6yhr3ej4jz5","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begad90099n6yhpk5w2e2b"},{"post_id":"ck9beg8cr000tn6yh9abs76eo","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begad9009an6yhnd1v7sd9"},{"post_id":"ck9beg8cs000un6yhmjfw2sis","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begad9009bn6yhcbrdoqgm"},{"post_id":"ck9beg8cv000vn6yh390ngmzu","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begad9009cn6yhbj48mi9y"},{"post_id":"ck9beg8cv000vn6yh390ngmzu","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begad9009dn6yh1kvmbdoq"},{"post_id":"ck9beg8cz000wn6yh7v20wovo","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begadb009en6yh7ltzxwth"},{"post_id":"ck9beg8cz000xn6yh4yfrhn9b","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begadb009fn6yhkclh62xi"},{"post_id":"ck9beg8cz000xn6yh4yfrhn9b","tag_id":"ck9beg9n0004mn6yh6uqqw1ga","_id":"ck9begadb009gn6yhbnmuxhhp"},{"post_id":"ck9beg8cz000xn6yh4yfrhn9b","tag_id":"ck9beg9n1004nn6yhg8itrlg9","_id":"ck9begadb009hn6yhh14zj846"},{"post_id":"ck9beg8cz000xn6yh4yfrhn9b","tag_id":"ck9beg9n1004on6yhx2eqw8om","_id":"ck9begadb009in6yhijypru7z"},{"post_id":"ck9beg8d3000zn6yhi40r0fn9","tag_id":"ck9beg9n1004pn6yhk0hgd7wi","_id":"ck9begadb009jn6yhp8xaoeof"},{"post_id":"ck9beg8d40010n6yhe6lwybak","tag_id":"ck9beg9br002zn6yh1x880hda","_id":"ck9begadc009kn6yh9k2nfrwe"},{"post_id":"ck9beg8d40010n6yhe6lwybak","tag_id":"ck9beg9og004rn6yhok2f8oh0","_id":"ck9begadc009ln6yhtg811h3y"},{"post_id":"ck9beg8d40010n6yhe6lwybak","tag_id":"ck9beg9oh004sn6yh1qn0172o","_id":"ck9begadc009mn6yhwfpuo5ot"},{"post_id":"ck9beg8d50011n6yh0xb4q15f","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begadc009nn6yh6bumx4on"},{"post_id":"ck9beg8d50011n6yh0xb4q15f","tag_id":"ck9beg9oj004un6yhv0ye7kku","_id":"ck9begadc009on6yhzn2r419t"},{"post_id":"ck9beg8d50011n6yh0xb4q15f","tag_id":"ck9beg9bu0033n6yh1b1gfw4z","_id":"ck9begadc009pn6yhizcsgxno"},{"post_id":"ck9beg8d50011n6yh0xb4q15f","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begadd009qn6yhculfbvkn"},{"post_id":"ck9beg8d60012n6yheyrkj0f5","tag_id":"ck9beg9ol004xn6yhyj6sj0ip","_id":"ck9begadd009rn6yh7lqf8p0c"},{"post_id":"ck9beg8d60012n6yheyrkj0f5","tag_id":"ck9beg9om004yn6yh39ja1kta","_id":"ck9begadd009sn6yhxdsqdocw"},{"post_id":"ck9beg8d70013n6yhs5nvp627","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begadd009tn6yh93mwwqyl"},{"post_id":"ck9beg8d70013n6yhs5nvp627","tag_id":"ck9beg9om0050n6yhm3izwr85","_id":"ck9begadk009un6yhm41rzdar"},{"post_id":"ck9beg8d80014n6yhw2d4empr","tag_id":"ck9beg9on0051n6yh61ap0sxw","_id":"ck9begadk009vn6yhy0dka0m1"},{"post_id":"ck9beg8dc0015n6yhcl5459ib","tag_id":"ck9beg9on0052n6yh7miptqqj","_id":"ck9begadk009wn6yhqrzhrzkp"},{"post_id":"ck9beg8dc0015n6yhcl5459ib","tag_id":"ck9beg9on0053n6yhb7wdtkza","_id":"ck9begadk009xn6yhnmp6k81b"},{"post_id":"ck9beg8dh0016n6yh3uyttauh","tag_id":"ck9beg9on0052n6yh7miptqqj","_id":"ck9begadk009yn6yh7xc7wm2t"},{"post_id":"ck9beg8dk0017n6yh2ym5hhxh","tag_id":"ck9beg9on0052n6yh7miptqqj","_id":"ck9begadk009zn6yhnqj1kmca"},{"post_id":"ck9beg8dk0017n6yh2ym5hhxh","tag_id":"ck9beg9br002zn6yh1x880hda","_id":"ck9begadk00a0n6yhtcqjofor"},{"post_id":"ck9beg8dl0018n6yhajf63afc","tag_id":"ck9beg9os0057n6yhgr4hryn4","_id":"ck9begadl00a1n6yhj1p9n2sg"},{"post_id":"ck9beg8dm0019n6yheeb6tuhq","tag_id":"ck9beg9on0052n6yh7miptqqj","_id":"ck9begadm00a2n6yhpp0jmw8l"},{"post_id":"ck9beg8dm0019n6yheeb6tuhq","tag_id":"ck9beg9ot0059n6yhobu36syq","_id":"ck9begadm00a3n6yhv7zl6chi"},{"post_id":"ck9beg8dq001an6yhuq1sxg7g","tag_id":"ck9beg9on0052n6yh7miptqqj","_id":"ck9begadm00a4n6yh685s7d4b"},{"post_id":"ck9beg8dq001an6yhuq1sxg7g","tag_id":"ck9beg9ow005bn6yhi9jq0ovf","_id":"ck9begadn00a5n6yhtkgjli2u"},{"post_id":"ck9beg8ds001bn6yhsqybxnne","tag_id":"ck9beg9ow005cn6yhdpmw3vrt","_id":"ck9begadn00a6n6yha6wt82l2"},{"post_id":"ck9beg8ds001bn6yhsqybxnne","tag_id":"ck9beg9ox005dn6yhpnk2yyo6","_id":"ck9begadn00a7n6yhhu298ycc"},{"post_id":"ck9beg8ds001bn6yhsqybxnne","tag_id":"ck9beg9ox005en6yhgf5okbz0","_id":"ck9begadn00a8n6yhkain40ft"},{"post_id":"ck9beg8ds001bn6yhsqybxnne","tag_id":"ck9beg9ox005fn6yhtmqrhpen","_id":"ck9begadn00a9n6yh429vi08r"},{"post_id":"ck9beg8dv001cn6yh1xen7qyn","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begadn00aan6yhcrz7u99j"},{"post_id":"ck9beg8dv001cn6yh1xen7qyn","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begadn00abn6yhywy8hxks"},{"post_id":"ck9beg8dw001dn6yhmnczs5io","tag_id":"ck9beg9oz005in6yhqsbhf53s","_id":"ck9begado00acn6yh87rihyu4"},{"post_id":"ck9beg8dw001dn6yhmnczs5io","tag_id":"ck9beg9p0005jn6yh6qcn4jdp","_id":"ck9begado00adn6yhq783r3an"},{"post_id":"ck9beg8dw001dn6yhmnczs5io","tag_id":"ck9beg9p1005kn6yh3fjul579","_id":"ck9begado00aen6yhw2uy996f"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9p2005ln6yhwcf3eodn","_id":"ck9begado00afn6yhpb89mg2w"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9p3005mn6yh2w1cwv9q","_id":"ck9begado00agn6yhvk3lunb5"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9p3005nn6yhz7gcc74q","_id":"ck9begado00ahn6yh10yex2w8"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9p3005on6yhovce1ar2","_id":"ck9begado00ain6yhwp06oiww"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9mi004cn6yhkjischqk","_id":"ck9begado00ajn6yhqtghszhi"},{"post_id":"ck9beg8h4001en6yh2ykremmt","tag_id":"ck9beg9p4005qn6yhfuyun792","_id":"ck9begado00akn6yh56o9mdvx"},{"post_id":"ck9beg8h5001fn6yh0q7npqrx","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begado00aln6yht74d1j1n"},{"post_id":"ck9beg8h5001fn6yh0q7npqrx","tag_id":"ck9beg9ox005fn6yhtmqrhpen","_id":"ck9begado00amn6yhxzcuuzuh"},{"post_id":"ck9beg8hb001gn6yh7slu3a1m","tag_id":"ck9beg9p6005tn6yhq5lq69wy","_id":"ck9begadp00ann6yhevw6ybda"},{"post_id":"ck9beg8hb001gn6yh7slu3a1m","tag_id":"ck9beg9bt0031n6yhhv7yoyl8","_id":"ck9begadp00aon6yhdnicpg36"},{"post_id":"ck9beg8hb001gn6yh7slu3a1m","tag_id":"ck9beg9r4005vn6yhev8kydcl","_id":"ck9begadp00apn6yhg2ucc3au"},{"post_id":"ck9beg8hb001gn6yh7slu3a1m","tag_id":"ck9beg9r5005wn6yhtrhhv029","_id":"ck9begadp00aqn6yhycov2gi6"},{"post_id":"ck9beg8hc001hn6yhnbyg989x","tag_id":"ck9beg9r6005xn6yhdu0xrwy4","_id":"ck9begadp00arn6yhuyp18i31"},{"post_id":"ck9beg8hc001hn6yhnbyg989x","tag_id":"ck9beg9r8005yn6yhpzekf4t3","_id":"ck9begadp00asn6yhs2i9odvf"},{"post_id":"ck9beg8hc001hn6yhnbyg989x","tag_id":"ck9beg9ra005zn6yhsjjx4wii","_id":"ck9begadp00atn6yhzvzfoatn"},{"post_id":"ck9beg969001kn6yheg7zdkxh","tag_id":"ck9beg9mq004gn6yh8d46fywi","_id":"ck9begadp00aun6yh3ylb5acx"},{"post_id":"ck9beg969001kn6yheg7zdkxh","tag_id":"ck9beg9l0003vn6yh6qp45f9l","_id":"ck9begadp00avn6yh0a9w0vwu"},{"post_id":"ck9beg979001pn6yhue0ou2wz","tag_id":"ck9beg9l1003wn6yhcufs8d69","_id":"ck9begah800awn6yhyzfrinnd"},{"post_id":"ck9beg979001pn6yhue0ou2wz","tag_id":"ck9beg9l1003xn6yhbxtsfb8g","_id":"ck9begah800axn6yhex6ih946"},{"post_id":"ck9beg979001pn6yhue0ou2wz","tag_id":"ck9beg9l1003yn6yhiyp4f8um","_id":"ck9begah800ayn6yhgwazyvr8"},{"post_id":"ck9beg979001pn6yhue0ou2wz","tag_id":"ck9beg9lh0043n6yh9jkijw4o","_id":"ck9begah800azn6yhh6jh44n0"}],"Tag":[{"name":"Apache","_id":"ck9beg93m001jn6yh4otzb5zo"},{"name":"重定向","_id":"ck9beg978001on6yhdhbw53dq"},{"name":"域名","_id":"ck9beg97d001sn6yhag2a2h9p"},{"name":"GitHub","_id":"ck9beg97u001un6yhgp2tgj1c"},{"name":"GitCafe","_id":"ck9beg97w001wn6yhqbnz2mcg"},{"name":"meta","_id":"ck9beg97z001yn6yh34k4itzl"},{"name":"浏览器","_id":"ck9beg9800020n6yhte2mdt7n"},{"name":"前端","_id":"ck9beg9810022n6yhwaie1b5j"},{"name":"Java","_id":"ck9beg99k0024n6yhs8ztgbr8"},{"name":"Reactive","_id":"ck9beg99l0026n6yhk14kmqnm"},{"name":"事务","_id":"ck9beg99n0028n6yhmrl2irpg"},{"name":"mongo","_id":"ck9beg99o002an6yhs77w4hpx"},{"name":"数据库","_id":"ck9beg99t002cn6yhumbf3hoh"},{"name":"Aggregation","_id":"ck9beg99u002fn6yhp3nv35d6"},{"name":"Flux","_id":"ck9beg9b4002rn6yh60fomu3z"},{"name":"Android","_id":"ck9beg9br002zn6yh1x880hda"},{"name":"macOS","_id":"ck9beg9bt0031n6yhhv7yoyl8"},{"name":"命令","_id":"ck9beg9bu0033n6yh1b1gfw4z"},{"name":"效率","_id":"ck9beg9ew0035n6yhp4fzq3pr"},{"name":"无线","_id":"ck9beg9ey0037n6yhr9eq0t4l"},{"name":"调试","_id":"ck9beg9ez0039n6yh305ls34z"},{"name":"adb","_id":"ck9beg9f0003bn6yhiu8gs46r"},{"name":"USB","_id":"ck9beg9f1003dn6yhcp1njj6z"},{"name":"软件","_id":"ck9beg9f2003gn6yhxyg9prke"},{"name":"推荐","_id":"ck9beg9f5003in6yh5x79yrnz"},{"name":"Chrome","_id":"ck9beg9ks003on6yh50cbu0an"},{"name":"工具","_id":"ck9beg9kw003qn6yh83sg5or4"},{"name":"扩展","_id":"ck9beg9ky003sn6yh1r6wc5zf"},{"name":"插件","_id":"ck9beg9kz003tn6yhn43vwwn9"},{"name":"curl","_id":"ck9beg9kz003un6yhbghe3g17"},{"name":"教程","_id":"ck9beg9l0003vn6yh6qp45f9l"},{"name":"Django","_id":"ck9beg9l1003wn6yhcufs8d69"},{"name":"restful","_id":"ck9beg9l1003xn6yhbxtsfb8g"},{"name":"api","_id":"ck9beg9l1003yn6yhiyp4f8um"},{"name":"version","_id":"ck9beg9l3003zn6yhpuqap3e0"},{"name":"问题","_id":"ck9beg9lh0043n6yh9jkijw4o"},{"name":"api， version","_id":"ck9beg9lk0046n6yhgnslwibj"},{"name":"restful api","_id":"ck9beg9ll0047n6yhye1ttqrw"},{"name":"接口","_id":"ck9beg9lm0048n6yhn6a5rs1p"},{"name":"单元测试","_id":"ck9beg9ln0049n6yhfnt2uoxs"},{"name":"测试","_id":"ck9beg9ln004an6yh1yzr0kav"},{"name":"Python","_id":"ck9beg9mi004cn6yhkjischqk"},{"name":"Git","_id":"ck9beg9mq004gn6yh8d46fywi"},{"name":"reset","_id":"ck9beg9n0004mn6yh6uqqw1ga"},{"name":"恢复","_id":"ck9beg9n1004nn6yhg8itrlg9"},{"name":"后悔","_id":"ck9beg9n1004on6yhx2eqw8om"},{"name":"远程","_id":"ck9beg9n1004pn6yhk0hgd7wi"},{"name":"Material Design","_id":"ck9beg9og004rn6yhok2f8oh0"},{"name":"网页框架","_id":"ck9beg9oh004sn6yh1qn0172o"},{"name":"pip","_id":"ck9beg9oj004un6yhv0ye7kku"},{"name":"npm","_id":"ck9beg9ol004xn6yhyj6sj0ip"},{"name":"Nodejs","_id":"ck9beg9om004yn6yh39ja1kta"},{"name":"UUID","_id":"ck9beg9om0050n6yhm3izwr85"},{"name":"js","_id":"ck9beg9on0051n6yh61ap0sxw"},{"name":"Ubuntu","_id":"ck9beg9on0052n6yh7miptqqj"},{"name":"JDK","_id":"ck9beg9on0053n6yhb7wdtkza"},{"name":"杂谈","_id":"ck9beg9os0057n6yhgr4hryn4"},{"name":"驱动","_id":"ck9beg9ot0059n6yhobu36syq"},{"name":"Shadowsocks","_id":"ck9beg9ow005bn6yhi9jq0ovf"},{"name":"微信公众号","_id":"ck9beg9ow005cn6yhdpmw3vrt"},{"name":"端口","_id":"ck9beg9ox005dn6yhpnk2yyo6"},{"name":"ngrok","_id":"ck9beg9ox005en6yhgf5okbz0"},{"name":"内网穿透","_id":"ck9beg9ox005fn6yhtmqrhpen"},{"name":"Synergy","_id":"ck9beg9oz005in6yhqsbhf53s"},{"name":"共享","_id":"ck9beg9p0005jn6yh6qcn4jdp"},{"name":"键盘","_id":"ck9beg9p1005kn6yh3fjul579"},{"name":"Virtualenv","_id":"ck9beg9p2005ln6yhwcf3eodn"},{"name":"virtualenvwrapper","_id":"ck9beg9p3005mn6yh2w1cwv9q"},{"name":"独立","_id":"ck9beg9p3005nn6yhz7gcc74q"},{"name":"虚拟环境","_id":"ck9beg9p3005on6yhovce1ar2"},{"name":"requirements","_id":"ck9beg9p4005qn6yhfuyun792"},{"name":"Jenkins","_id":"ck9beg9p6005tn6yhq5lq69wy"},{"name":"权限","_id":"ck9beg9r4005vn6yhev8kydcl"},{"name":"用户","_id":"ck9beg9r5005wn6yhtrhhv029"},{"name":"电影","_id":"ck9beg9r6005xn6yhdu0xrwy4"},{"name":"小黄人","_id":"ck9beg9r8005yn6yhpzekf4t3"},{"name":"预告片","_id":"ck9beg9ra005zn6yhsjjx4wii"},{"name":"Gitee","_id":"ck9bega8p0061n6yhp2vrnxg1"},{"name":"GitLab","_id":"ck9bega8u0068n6yh8viadvob"},{"name":"Gite","_id":"ck9bega8v006dn6yhwjguacgu"},{"name":"Gogs","_id":"ck9begack006in6yhey84ic3i"},{"name":"迁移","_id":"ck9begacl006on6yhsmalmidm"},{"name":"代码","_id":"ck9begacn006un6yho0rawspv"},{"name":"猫","_id":"ck9begacn006zn6yhs21es7ck"},{"name":"Cat","_id":"ck9begacq0074n6yhodxzlob4"},{"name":"centOS","_id":"ck9begact007an6yh7v9c8bv8"},{"name":"Nginx","_id":"ck9begacu007gn6yh5h6ycd5v"},{"name":"Gunicorn","_id":"ck9begacv007ln6yh972884hn"},{"name":"MySQL","_id":"ck9begacw007qn6yhno9pn54v"},{"name":"Supervisor","_id":"ck9begacx007wn6yhepgno1ik"}]}}