{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"ubuntu下运行shadowsocks客户端","slug":"ubuntu运行shadowsocks客户端","date":"2015-03-28T08:54:44.000Z","updated":"2020-08-15T03:07:48.000Z","comments":true,"path":"api/articles/ubuntu运行shadowsocks客户端.json","excerpt":"Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,项目地址。","cover":null,"content":"<p>Shadowsocks 是一个安全的socks5代理,用于保护网络流量,是一个开源项目,<a href=\"https://github.com/shadowsocks/shadowsocks\">项目地址</a>。<span id=\"more\"></span></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install python-pip python-m2crypto</span><br><span class=\"line\">sudo pip install shadowsocks</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><code>sudo gedit /etc/shadowsocks/config.json</code><br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;server&quot;:&quot;remote-shadowsocks-server-ip-addr&quot;,</span><br><span class=\"line\">    &quot;server_port&quot;:8883,</span><br><span class=\"line\">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class=\"line\">    &quot;local_port&quot;:1080,</span><br><span class=\"line\">    &quot;password&quot;:&quot;abcdef&quot;,</span><br><span class=\"line\">    &quot;timeout&quot;:300,</span><br><span class=\"line\">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class=\"line\">    &quot;fast_open&quot;:false,</span><br><span class=\"line\">    &quot;workers&quot;:1</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>请根据实际情况配置</p>\n</blockquote>\n<h2 id=\"启动客户端\"><a href=\"#启动客户端\" class=\"headerlink\" title=\"启动客户端\"></a>启动客户端</h2><p><code>sslocal -c /etc/shadowsocks.json</code></p>\n<h2 id=\"浏览器扩展\"><a href=\"#浏览器扩展\" class=\"headerlink\" title=\"浏览器扩展\"></a>浏览器扩展</h2><p>Firefox可使用FoxyProxy Standard<br>Chrome可使用Proxy SwitchOmega<br>配置请自行Google/百度</p>\n","raw":null,"categories":[{"name":"优化辅助","path":"api/categories/优化辅助.json"}],"tags":[{"name":"ubuntu","path":"api/tags/ubuntu.json"},{"name":"shadowsocks","path":"api/tags/shadowsocks.json"}]},{"title":"ubuntu更新NV显卡驱动","slug":"ubuntu更新NV显卡驱动","date":"2015-03-27T12:26:27.000Z","updated":"2020-08-15T03:07:40.000Z","comments":true,"path":"api/articles/ubuntu更新NV显卡驱动.json","excerpt":"昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。","cover":null,"content":"<p>昨天在笔记本上新安装了ubuntu14.04LTS，顺便更新了下NV驱动，这里做下记录。<span id=\"more\"></span></p>\n<h2 id=\"下载驱动\"><a href=\"#下载驱动\" class=\"headerlink\" title=\"下载驱动\"></a>下载驱动</h2><p>首页在<a href=\"http://www.geforce.cn/drivers\">http://www.geforce.cn/drivers</a>选择相应的显卡型号下载对应的驱动，下载完成后重命令为NVIDIA.run</p>\n<h2 id=\"关闭X-server\"><a href=\"#关闭X-server\" class=\"headerlink\" title=\"关闭X server\"></a>关闭X server</h2><p>输入<code>sudo /etc/init.d/gdm stop</code>或<code>sudo /etc/init.d/lightdm stop</code>停止X server，这时桌面会消失，按Ctrl+Alt+F1进入文本模式</p>\n<h3 id=\"安装驱动\"><a href=\"#安装驱动\" class=\"headerlink\" title=\"安装驱动\"></a>安装驱动</h3><p>进入驱动所在文件夹，执行<code>sudo sh NVIDIA.run</code>，安装驱动过程中会有几次对话框需要确认。</p>\n<h2 id=\"启动GDM\"><a href=\"#启动GDM\" class=\"headerlink\" title=\"启动GDM\"></a>启动GDM</h2><p><code>sudo /etc/init.d/gdm start</code>或<code>sudo /etc/init.d/lightdm start</code></p>\n<h2 id=\"重启电脑\"><a href=\"#重启电脑\" class=\"headerlink\" title=\"重启电脑\"></a>重启电脑</h2><p>sudo reboot</p>\n<p>这样NV的驱动就安装好了。</p>\n","raw":null,"categories":[{"name":"其它","path":"api/categories/其它.json"}],"tags":[{"name":"ubuntu","path":"api/tags/ubuntu.json"},{"name":"驱动","path":"api/tags/驱动.json"}]},{"title":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","slug":"使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）","date":"2015-02-04T15:35:40.000Z","updated":"2020-08-15T02:59:39.000Z","comments":true,"path":"api/articles/使用ngrok配置微信公众号本地开发环境（ADSL屏蔽80端口问题）.json","excerpt":"更新记录2016-03-04 更新教程<br>2015-    09-16 添加旧版软件下载<br>2015-02-04 初稿鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。","cover":null,"content":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-03-04 更新教程<br>2015-    09-16 添加旧版软件下载<br>2015-02-04 初稿</p>\n<p>鉴于国内大部分ADSL屏蔽80端口，而微信公众号开发只支持80端口，所以在本地开发测试微信公众号就是一个问题了，这里我们可以使用软件ngrok来解决这个问题。<span id=\"more\"></span></p>\n<h2 id=\"配置步骤\"><a href=\"#配置步骤\" class=\"headerlink\" title=\"配置步骤\"></a>配置步骤</h2><h3 id=\"1-注册ngrok账号\"><a href=\"#1-注册ngrok账号\" class=\"headerlink\" title=\"1. 注册ngrok账号\"></a>1. <a href=\"https://dashboard.ngrok.com/user/signup\">注册ngrok账号</a></h3><p>注册成功后拿到授权码<code>auth token</code>，使用ngrok时并不强制用户注册，但注册后会附加更多功能(如自定义二级域名)；</p>\n<h3 id=\"2-下载ngrok，解压；\"><a href=\"#2-下载ngrok，解压；\" class=\"headerlink\" title=\"2. 下载ngrok，解压；\"></a>2. <a href=\"https://ngrok.com/download\">下载ngrok</a>，解压；</h3><h3 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h3><h5 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一:\"></a>方式一:</h5><p>让本地的‘<a href=\"http://127.0.0.1:80’\">http://127.0.0.1:80’</a> 可以让外网访问<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">ngrok</span> <span class=\"string\">http</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure><br>ngrok会随机分配一个二级域名，可直接通过外网可通过<code>http://xxxx.tunnel.mobi</code>来访问本机的<code>http://127.0.0.1:80</code>网站</p>\n<h5 id=\"方式二：使用配置文件启动\"><a href=\"#方式二：使用配置文件启动\" class=\"headerlink\" title=\"方式二：使用配置文件启动:\"></a>方式二：使用配置文件启动:</h5><p>在<code>ngrok.exe</code>目录下执行命令（不带尖括号），生成配置文件（配置文件会在<code>C:\\Users\\用户名/.ngrok2/ngrok.yml</code>下「windows」）<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok authtoken &lt;you authtoken&gt;</span><br></pre></td></tr></table></figure><br>修改配置文件，可配置多个tunnel（注意，配置文件是yaml格式，冒号后面如果还有内容需要加空格）<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">authtoken:&lt;you authtoken&gt;</span><br><span class=\"line\">tunnels:</span><br><span class=\"line\">  # 自定义隧道名 </span><br><span class=\"line\">  iblogc:</span><br><span class=\"line\">    #本地服务端口 </span><br><span class=\"line\">    addr: 4000</span><br><span class=\"line\">    # 用于http/https里的身份认证</span><br><span class=\"line\">    #auth: &quot;username:password&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    # 二级域名，如果运行提示重复，换一个就行</span><br><span class=\"line\">    subdomain: iblogc</span><br><span class=\"line\">  django:</span><br><span class=\"line\">    addr: 8000</span><br><span class=\"line\">    auth: &quot;abc:123456&quot;</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: django</span><br><span class=\"line\">  weixin:</span><br><span class=\"line\">    addr: 80</span><br><span class=\"line\">    proto: http</span><br><span class=\"line\">    subdomain: weixin</span><br></pre></td></tr></table></figure></p>\n<p>现在执行<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc</span><br></pre></td></tr></table></figure></p>\n<p>试试，如果你设置的的二级域名没有被占用的话，那么就会启动成功，否则请更换一个二级域重试。<br><code>http://iblogc.ngrok.io</code> <code>https://iblogc.ngrok.io</code> 协议均可以访问。<br>ngrok-start-iblogc.png)</p>\n<p>你也可以同时启动两个tunnel<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ngrok start iblogc django weixin</span><br></pre></td></tr></table></figure><br>ngrok-start-iblogc-django-weixin.png)</p>\n<p>因为我的django tunnel配置文件里添加了<code>auth</code>配置所以访问<code>http://django.ngrok.io</code>需要输入用户名密码。<br>ngrok-auth.png)</p>\n<p>假设<code>weixin</code>就是我本地跑在80端口的微信项目，现在就可以在微信公众平台「开发者中心」可以使用<code>weixin.ngrok.com</code>进行配置了，所有发向此域名的请求都会转发到你的本地<code>127.0.0.1:80</code>上。</p>\n<h3 id=\"4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\"><a href=\"#4-查看详细信息如果想查看详细的请求信息可以在浏览器里打开http-127-0-0-1-4040查看详细信息\" class=\"headerlink\" title=\"4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开http://127.0.0.1:4040查看详细信息\"></a>4. 查看详细信息如果想查看详细的请求信息可以在浏览器里打开<code>http://127.0.0.1:4040</code>查看详细信息</h3><p>nrok-web-interface.png)</p>\n<h3 id=\"5-参考文档\"><a href=\"#5-参考文档\" class=\"headerlink\" title=\"5. 参考文档\"></a>5. 参考文档</h3><p>官方文档：<a href=\"https://ngrok.com/docs\">https://ngrok.com/docs</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"微信公众号","path":"api/tags/微信公众号.json"},{"name":"端口","path":"api/tags/端口.json"},{"name":"ngrok","path":"api/tags/ngrok.json"},{"name":"内网穿透","path":"api/tags/内网穿透.json"}]},{"title":"Git命令使用指南","slug":"Git命令使用指南","date":"2015-01-16T14:33:30.000Z","updated":"2020-01-17T07:55:59.000Z","comments":true,"path":"api/articles/Git命令使用指南.json","excerpt":" [Figure] ","cover":"/media/Git工作流图示.jpg","content":"<html><head></head><body><p><img alt=\"Git工作流图示\" data-src=\"/media/Git工作流图示.jpg\"></p>\n<p>Git是软件开发人员在开发中常用的一种工具,是开发之利器。</p>\n<blockquote>\n<p>Git是一个开源的分布式版本控制系统，用以有效、高速的处理从很小到非常大的项目版本管理。<br><span id=\"more\"></span></p>\n</blockquote>\n<h2 id=\"工作流图示\"><a href=\"#工作流图示\" class=\"headerlink\" title=\"工作流图示\"></a>工作流图示</h2><p><img alt=\"工作流图示\" data-src=\"/media/git-reset_drbfhd.png\"></p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><ul>\n<li><p><code>git config --global user.name 'Your Name'</code> 设置git提交显示的名字</p>\n</li>\n<li><p><code>git config --global user.email your_email@example.com</code> 设置git提交显示的邮箱</p>\n</li>\n<li><p><code>git config --global alias.unstage \"reset HEAD\"</code> 替换命令 <code>git reset HEAD</code>命令改为 <code>git unstage</code></p>\n</li>\n<li><p><code>ssh-keygen -t rsa -C your_email@example.com</code> 生成SSH Key</p>\n</li>\n<li><p><code>git config --global core.editor emacs</code> 设置文件编辑器</p>\n</li>\n<li><p><code>git config --global merge.tool vimdiff</code> 设置差异分析工具</p>\n</li>\n<li><p><code>git config --list</code> 查看配置信息</p>\n</li>\n</ul>\n<h3 id=\"简洁版\"><a href=\"#简洁版\" class=\"headerlink\" title=\"简洁版\"></a>简洁版</h3><p>初始化仓库<br><code>git init</code></p>\n<p>添加远程仓库<br><code>git remote add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code></p>\n<p>给某个仓库名再添加另一个远程仓库url（可实现一次提交到两个远程仓库）<br><code>git remote set-url --add &lt;自定义名字&gt; &lt;远程仓库url&gt;</code>    </p>\n<p>更新项目<br><code>git pull</code></p>\n<p>合并分支到当前分支<br><code>git merge &lt;分支名&gt;</code></p>\n<p>创建标签<br><code>git tag &lt;标签名字&gt; &lt;提交id前10位字符&gt;</code> <em>可通过<code>git log</code>获取</em></p>\n<p>获取log<br><code>git log</code></p>\n<p>切换分支<br><code>git checkout &lt;分支名&gt;</code></p>\n<p>创建分支并切换过去<br><code>git checkout -b &lt;分支名&gt;</code></p>\n<p>删除分支<br><code>git branch -D &lt;分支名&gt;</code></p>\n<p>推送<br><code>git push origin &lt;分支名/标签名&gt;</code></p>\n<p>强制推送更新<br><code>git push -f origin &lt;分支名/标签名&gt;</code></p>\n<p>推送所有分支<br><code>git push origin --all</code></p>\n<p>推送所有标签<br><code>git push origin --tags</code></p>\n<p>撤消本地改动（新文件和提交到缓存区的改动，不受影响）<br><code>git checkout -- &lt;目录&gt;&lt;文件名&gt;</code></p>\n<p>撤消本地所有提交与改动<br><strong><em>假如你想要丢弃你所有的本地改动与提交，可以到服务器上获取最新的版本并将你本地主分支指向到它</em></strong><br><code>git fetch origin</code><br><code>git reset --hard origin/master</code></p>\n<p>其它命令</p>\n<ul>\n<li><code>gitk</code> 获取当前分支图形个界面<ul>\n<li>参数<code>&lt;分支名&gt;</code>: 获取某分支图形界面</li>\n<li>参数<code>=--all</code>: 获取所有分支图形个界面</li>\n<li><code>cat &lt;目录&gt;&lt;文件名&gt;</code> 查看文件内容</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"详细版\"><a href=\"#详细版\" class=\"headerlink\" title=\"详细版\"></a>详细版</h3><p>初始</p>\n<ul>\n<li><p><code>git init</code> 初始化仓库</p>\n</li>\n<li><p><code>ls</code> 显示目录下文件及文件夹（不包含隐藏文件即名字前带点的）</p>\n<ul>\n<li>参数<code>-a</code>显示目录下所有文件及文件夹</li>\n</ul>\n</li>\n<li><p><code>git clone &lt;url&gt;</code> 克隆项目</p>\n</li>\n</ul>\n<p>提交</p>\n<ul>\n<li><p><code>git add &lt;目录&gt;&lt;文件名&gt;</code> 添加文件到版本库，<em>可以多个文件一起添加，中间用空格隔开</em></p>\n</li>\n<li><p><code>git add *</code> 或 <code>git add .</code> 添加所有文件到版本库</p>\n</li>\n</ul>\n<p><img alt=\"status示例图\" data-src=\"http://iblogc.qiniudn.com/iblogcd60500d5-addf-4022-ae4f-c1a57d1f5dd1112.png\"></p>\n<ul>\n<li><p><code>git status</code> 查看项目当前状态，详细信息</p>\n<ul>\n<li>参数<code>-s</code>: 显示简洁版</li>\n</ul>\n<blockquote>\n<p>绿色表示已经提交的缓存区，红色表示在工作区未提交到缓存区的<br>A新增  M修改  D删除 U冲突 R重命名？<br>push会把绿色部分提交，红色部分不提交<br>已有记录文件做过改动和新文件，需要<code>git add</code></p>\n</blockquote>\n</li>\n<li><p><code>git diff</code> 查看整个项目里的文件改动情况（工作区和缓存区比较）</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 查看单个文件改动情况（工作区和缓存区比较）<br>-参数<code>&lt;标签名&gt;</code>: 查看自当前标签发布之后项目的改动情况</li>\n<li>参数<code>--cached</code>: 查看整个项目里的文件改动情况（缓存区和本地仓库比较）</li>\n<li>参数 <code>HEAD</code>: 查看整个项目里的文件改动情况（工作区和本地仓库比较）</li>\n<li>参数<code>--stat</code>: 显示摘要，而非完整diff</li>\n</ul>\n</li>\n<li><p><code>git commit</code>: 提交到缓存</p>\n<ul>\n<li>参数<code>-m</code>: 后面空格接提交信息</li>\n<li>参数<code>-a</code>: 为所有已有记录文件执行<code>git add</code>（新添加文件还是需要手动<code>git add</code>）</li>\n</ul>\n</li>\n<li><p><code>git reset HEAD</code> 取消缓存已缓存的内容</p>\n<ul>\n<li>参数<code>&lt;目录&gt;&lt;文件名&gt;</code>: 单个文件取消缓存已缓存内容</li>\n</ul>\n</li>\n<li><p><code>git rm &lt;目录&gt;&lt;文件名&gt;</code>:  将文件从缓存区和硬盘上移除</p>\n<ul>\n<li>参数<code>--cached</code>: 删除缓存中的文件，保留硬盘上的文件</li>\n</ul>\n</li>\n<li><p><code>git mv</code> 不推荐用</p>\n</li>\n<li><p><code>git log</code> 显示当前分支提交记录</p>\n<ul>\n<li>参数<code>--author=&lt;authorname&gt;</code>: 只寻找某个特定作者的提交</li>\n<li>参数<code>--oneline</code>: 显示简洁版<ul>\n<li>参数<code>--oneline -&lt;数字N&gt;</code>: 显示简洁版，显示最近N次提交的记录</li>\n</ul>\n</li>\n<li>参数<code>--graph</code>: 显示拓扑图（查看历史中什么时候出现了分支、合并）</li>\n<li>参数<code>--grep=&lt;关键字&gt;</code>: 根据提交注释关键字过滤提交记录<blockquote>\n<p>Git 会对所有的 –grep 和 –author 参数作逻辑或。 如果你用 –grep 和 –author 时，想看的是某人写作的并且有某个特殊的注释内容的提交记录， 你需要加上 –all-match 选项。 在这些例子中，我会用上 –format 选项，这样我们就可以看到每个提交的作者是谁了。详细参考：<a href=\"http://gitref.org/zh/inspect/\">Git参考手册:检查与比较</a></p>\n</blockquote>\n</li>\n<li>参数<code>&lt;分支名&gt;</code>:显示指定分支“可及”的提交记录</li>\n<li>参数<code>&lt;分支名1&gt; ^&lt;分支名1&gt;</code>: 查看在分支1不在分支2中的提交记录<blockquote>\n<p>分支可以是本地的也可以是远端的</p>\n</blockquote>\n</li>\n<li>参数<code>--decorate</code>: 显示带tag的记录</li>\n<li>参数<code>-p</code>: 显示每个提交引入的补丁</li>\n<li>参数<code>--stat</code>: 显示每个提交引入的差值统计</li>\n<li>其它参数 <code>--since</code> <code>--before</code> <code>--until</code> <code>--after</code><blockquote>\n<p>git log –since –before 根据日期过滤提交记录<br>如果你要指定一个你感兴趣的日期范围以过滤你的提交，可以执行几个选项 —— 我用 –since 和 –before，但是你也可以用 –until 和 –after。 例如，如果我要看 Git 项目中三周前且在四月十八日之后的所有提交，我可以执行这个（我还用了 –no-merges 选项以隐藏合并提交）<a href=\"http://gitref.org/zh/inspect/\">Git参考手册:检查与比较</a>：</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<pre><code>$ git log --oneline --before={3.weeks.ago} --after={2010-04-18} --no-merges\n5469e2d Git 1.7.1-rc2\nd43427d Documentation/remote-helpers: Fix typos and improve language\n272a36b Fixup: Second argument may be any arbitrary string\nb6c8d2d Documentation/remote-helpers: Add invocation section\n5ce4f4e Documentation/urls: Rewrite to accomodate transport::address\n00b84e9 Documentation/remote-helpers: Rewrite description\n03aa87e Documentation: Describe other situations where -z affects git diff\n77bc694 rebase-interactive: silence warning when no commits rewritten\n636db2c t3301: add tests to use --format=\"%N\"\n</code></pre><p>分支</p>\n<ul>\n<li><p><code>git branch</code>列出当前项目的可用分支，并显示当前工作目录当前分支</p>\n</li>\n<li><p>参数<code>&lt;分支名&gt;</code>: 创建分支</p>\n</li>\n<li><p><code>git checkout &lt;分支名&gt;</code> 切换到对应分支</p>\n<ul>\n<li>参数<code>-b</code> 创建分支并立即切换到新分支</li>\n</ul>\n</li>\n<li><p><code>git merge &lt;分支名&gt;</code> 合并指定分支到当前分支</p>\n</li>\n</ul>\n<p>标签</p>\n<ul>\n<li><p><code>git tag</code> 显示当前项目的标签</p>\n<ul>\n<li>参数<code>&lt;标签名&gt;</code> 给某个历史记录打标签</li>\n<li>参数<code>-a</code>: 添加注解</li>\n<li>参数<code>&lt;SHA&gt;</code>: 提交id前n位字符，可通过<code>git log</code>获取，n位基于SHA唯一就行（建议5~7位）</li>\n</ul>\n</li>\n</ul>\n<p>远程</p>\n<ul>\n<li><p><code>git remote</code> 列出远端别名<br>-参数<code>-v</code>: 列出远端别名及链接</p>\n<blockquote>\n<p>一般一个别名会看到两个相同的链接（fetch和push）分别是获取和推送的链接<br>-<code>add &lt;仓库别名&gt; &lt;仓库链接&gt;</code>: 为项目添加一个新的远端仓库</p>\n<ul>\n<li><code>rm &lt;仓库别名&gt;</code>: 为项目删除一个远端仓库<br>只是本地删掉和远端仓库的链接，不会对远端仓库造成影响</li>\n</ul>\n</blockquote>\n</li>\n<li><p><code>git fetch</code> 从远端仓库下载最新的分支与数据</p>\n</li>\n<li><p><code>git pull</code> 从远端仓库下载最新数据，并尝试合并到当前分支</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt;</code>: 从哪个仓库拉取更新，默认为origin<blockquote>\n<p><code>git pull</code>实际是先<code>git fetch</code>后<code>git merge</code></p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li><p><code>git push</code> 推送更新</p>\n<ul>\n<li>参数<code>&lt;仓库别名&gt; &lt;分支名&gt;</code>: 推送新分支与数据到某个远端仓库</li>\n<li>参数<code>&lt;仓库别名&gt; --all</code>: 推送所有分支</li>\n<li>参数<code>&lt;仓库别名&gt; --tagsl</code>: 推送所有标签</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"http://gitref.org/zh\">Git 参考手册</a><br><a href=\"http://www.bootcss.com/p/git-guide/\">git - 简易指南</a></p>\n</blockquote>\n</body></html>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"pip常用命令","slug":"pip常用命令","date":"2015-01-01T15:38:56.000Z","updated":"2020-12-16T13:14:20.000Z","comments":true,"path":"api/articles/pip常用命令.json","excerpt":"列出已安装的包pip freeze or pip list","cover":null,"content":"<h2 id=\"列出已安装的包\"><a href=\"#列出已安装的包\" class=\"headerlink\" title=\"列出已安装的包\"></a>列出已安装的包</h2><p><code>pip freeze</code> or <code>pip list</code></p>\n<span id=\"more\"></span>\n<h3 id=\"导出requirements-txt\"><a href=\"#导出requirements-txt\" class=\"headerlink\" title=\"导出requirements.txt\"></a>导出requirements.txt</h3><p><code>pip freeze &gt; &lt;目录&gt;/requirements.txt</code></p>\n<h2 id=\"安装包\"><a href=\"#安装包\" class=\"headerlink\" title=\"安装包\"></a>安装包</h2><h3 id=\"在线安装\"><a href=\"#在线安装\" class=\"headerlink\" title=\"在线安装\"></a>在线安装</h3><p><code>pip install &lt;包名&gt;</code> 或 <code>pip install -r requirements.txt</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装1.9版本的django</span><br><span class=\"line\">pip install django==1.9</span><br><span class=\"line\"># 安装版本号大于1.9的django，注意有引号</span><br><span class=\"line\">pip install &quot;django&gt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;1.9&quot;</span><br><span class=\"line\">pip install &quot;django&lt;=1.9&quot;</span><br><span class=\"line\">pip install &quot;django&gt;&lt;1.9&quot;</span><br></pre></td></tr></table></figure>\n<p>requirements.txt内容格式为：</p>\n<pre><code>APScheduler==2.1.2\nDjango==1.5.4\nMySQL-Connector-Python==2.0.1\nMySQL-python==1.2.3\nPIL==1.1.7\nSouth==1.0.2\ndjango-grappelli==2.6.3\ndjango-pagination==1.0.7\n</code></pre><h3 id=\"安装本地安装包\"><a href=\"#安装本地安装包\" class=\"headerlink\" title=\"安装本地安装包\"></a>安装本地安装包</h3><p><code>pip install &lt;目录&gt;/&lt;文件名&gt;</code> 或 <code>pip install --use-wheel --no-index --find-links=wheelhouse/ &lt;包名&gt;</code></p>\n<p><em>&lt;包名&gt;前有空格</em></p>\n<p>可简写为</p>\n<p><code>pip install --no-index -f=&lt;目录&gt;/ &lt;包名&gt;</code></p>\n<h3 id=\"卸载包\"><a href=\"#卸载包\" class=\"headerlink\" title=\"卸载包\"></a>卸载包</h3><p><code>pip uninstall &lt;包名&gt;</code> 或 <code>pip uninstall -r requirements.txt</code></p>\n<h3 id=\"升级包\"><a href=\"#升级包\" class=\"headerlink\" title=\"升级包\"></a>升级包</h3><p><code>pip install -U &lt;包名&gt;</code></p>\n<h3 id=\"升级pip\"><a href=\"#升级pip\" class=\"headerlink\" title=\"升级pip\"></a>升级pip</h3><p><code>pip install -U pip</code></p>\n<h2 id=\"显示包所在的目录\"><a href=\"#显示包所在的目录\" class=\"headerlink\" title=\"显示包所在的目录\"></a>显示包所在的目录</h2><p><code>pip show -f &lt;包名&gt;</code></p>\n<h2 id=\"搜索包\"><a href=\"#搜索包\" class=\"headerlink\" title=\"搜索包\"></a>搜索包</h2><p><code>pip search &lt;搜索关键字&gt;</code></p>\n<h2 id=\"查询可升级的包\"><a href=\"#查询可升级的包\" class=\"headerlink\" title=\"查询可升级的包\"></a>查询可升级的包</h2><p><code>pip list -o</code></p>\n<h2 id=\"下载包而不安装\"><a href=\"#下载包而不安装\" class=\"headerlink\" title=\"下载包而不安装\"></a>下载包而不安装</h2><p> <code>pip install &lt;包名&gt; -d  &lt;目录&gt;</code> 或 <code>pip install -d &lt;目录&gt; -r requirements.txt</code></p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><code>pip wheel &lt;包名&gt;</code></p>\n<h2 id=\"更换国内pypi镜像\"><a href=\"#更换国内pypi镜像\" class=\"headerlink\" title=\"更换国内pypi镜像\"></a>更换国内pypi镜像</h2><h3 id=\"国内pypi镜像\"><a href=\"#国内pypi镜像\" class=\"headerlink\" title=\"国内pypi镜像\"></a>国内pypi镜像</h3><ul>\n<li>阿里云 <a href=\"https://mirrors.aliyun.com/pypi/simple/\">https://mirrors.aliyun.com/pypi/simple/</a></li>\n<li>豆瓣：<a href=\"https://pypi.douban.com/simple\">https://pypi.douban.com/simple</a></li>\n<li>中国科学技术大学：<a href=\"https://mirrors.ustc.edu.cn/pypi/web/simple/\">https://mirrors.ustc.edu.cn/pypi/web/simple/</a></li>\n<li>清华大学TUNA：<a href=\"https://pypi.tuna.tsinghua.edu.cn/simple\">https://pypi.tuna.tsinghua.edu.cn/simple</a><br><a href=\"https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/\">https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple/</a></li>\n</ul>\n<h3 id=\"指定单次安装源\"><a href=\"#指定单次安装源\" class=\"headerlink\" title=\"指定单次安装源\"></a>指定单次安装源</h3><p><code>pip install &lt;包名&gt; -i http://pypi.v2ex.com/simple</code></p>\n<h3 id=\"指定全局安装源\"><a href=\"#指定全局安装源\" class=\"headerlink\" title=\"指定全局安装源\"></a>指定全局安装源</h3><p>在unix和macos，配置文件为：$HOME/.pip/pip.conf<br>在windows上，配置文件为：%HOME%\\pip\\pip.ini </p>\n<pre><code>[global]\ntimeout = 6000\nindex-url = http://pypi.douban.com/simple\n</code></pre><hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><blockquote>\n<p><a href=\"https://pip.pypa.io/en/latest/\">pip documentation</a></p>\n</blockquote>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"教程","path":"api/tags/教程.json"},{"name":"命令","path":"api/tags/命令.json"},{"name":"pip","path":"api/tags/pip.json"}]},{"title":"使用Virtualenv创建独立的Python运行环境","slug":"使用virtualenv创建独立的python运行环境","date":"2015-01-01T12:39:14.000Z","updated":"2020-08-15T03:02:19.000Z","comments":true,"path":"api/articles/使用virtualenv创建独立的python运行环境.json","excerpt":"准备工作python环境pip安装1<br>pip install virtualenv<br>或<br>1<br>pip install https://github.com/pypa/virtualenv/tarball/develop<br>","cover":null,"content":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>python环境</li>\n<li>pip</li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenv</span><br></pre></td></tr></table></figure>\n<p>或<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install https://github.com/pypa/virtualenv/tarball/develop</span><br></pre></td></tr></table></figure></p>\n<span id=\"more\"></span>\n<h2 id=\"创建虚拟环境\"><a href=\"#创建虚拟环境\" class=\"headerlink\" title=\"创建虚拟环境\"></a>创建虚拟环境</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">virtualenv myVE</span><br></pre></td></tr></table></figure>\n<p>指定python解释器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-p PYTHON_EXE, --python=PYTHON_EXE</span><br></pre></td></tr></table></figure>\n<p><em>创建虚拟环境时默认会自动安装setuptools和pip</em></p>\n<p>不安装setuptool</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--setuptools</span><br></pre></td></tr></table></figure>\n<p>不安装pip</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--no--pip</span><br></pre></td></tr></table></figure>\n<p><em>更多Options请参考<a href=\"https://virtualenv.pypa.io/en/latest/reference.html\">官方文档</a></em> </p>\n<h2 id=\"启动虚拟环境\"><a href=\"#启动虚拟环境\" class=\"headerlink\" title=\"启动虚拟环境\"></a>启动虚拟环境</h2><p> Mac OS</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">source ./bin/activate</span><br></pre></td></tr></table></figure>\n<p>Windows</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myVE</span><br><span class=\"line\">scripts\\activate</span><br></pre></td></tr></table></figure>\n<p>启动成功后可以在开头显示”(myVE)”，说明已经进入刚刚创建的虚拟环境了</p>\n<h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deactivate</span><br></pre></td></tr></table></figure>\n<h2 id=\"virtualenvwrapper\"><a href=\"#virtualenvwrapper\" class=\"headerlink\" title=\"virtualenvwrapper\"></a>virtualenvwrapper</h2><h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><blockquote>\n<p>Virtaulenvwrapper是virtualenv的扩展包，用于更方便管理虚拟环境，它可以做：</p>\n<ol>\n<li>将所有虚拟环境整合在一个目录下</li>\n<li>管理（新增，删除，复制）虚拟环境</li>\n<li>切换虚拟环境</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>\n<p>Windows下还需额外安装virtualenvwrapper-win<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install virtualenvwrapper-win</span><br></pre></td></tr></table></figure><br>ubuntu需要将下面这句加入到<code>~/.bashrc</code>里面<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if [ -f /usr/local/bin/virtualenvwrapper.sh ]; then</span><br><span class=\"line\">    source /usr/local/bin/virtualenvwrapper.sh</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure><br>加入后需要重启才能生效，如果想要立即生效，输入命令<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><em>部分命令在windows下无效</em></p>\n<ul>\n<li><code>workon myEnv</code>: 切换虚拟环境</li>\n<li><code>mkvirtualenv</code>: 新建工作环境</li>\n<li><code>rmvirtualenv</code>: 删除工作环境</li>\n<li><code>cdproject</code>: 切换到工程目录</li>\n<li><code>workon</code>/<code>lsvirtualenv</code>: 列出所有虚拟环境</li>\n<li><code>deactivate</code>: 退出虚拟环境</li>\n<li><code>cpvirtualenv [source] [dest]</code> 复制一份虚拟环境。</li>\n<li><code>cdvirtualenv [subdir]</code> 把当前工作目录设置为所在的环境目录。</li>\n<li><code>cdsitepackages [subdir]</code> 把当前工作目录设置为所在环境的sitepackages路径。</li>\n<li><code>add2virtualenv [dir] [dir]</code> 把指定的目录加入当前使用的环境的path中，这常使用于在多个project里面同时使用一个较大的库的情况。</li>\n<li><code>toggleglobalsitepackages -q</code> 控制当前的环境是否使用全局的sitepackages目录。</li>\n</ul>\n<hr>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><p><a href=\"https://virtualenv.pypa.io/en/latest/\">https://virtualenv.pypa.io/en/latest/</a></p>\n<p><a href=\"http://virtualenvwrapper.readthedocs.org/en/latest/\">http://virtualenvwrapper.readthedocs.org/en/latest/</a></p>\n<p><a href=\"https://github.com/davidmarble/virtualenvwrapper-win\">https://github.com/davidmarble/virtualenvwrapper-win</a></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"python","path":"api/tags/python.json"},{"name":"virtualenv","path":"api/tags/virtualenv.json"},{"name":"virtualenvwrapper","path":"api/tags/virtualenvwrapper.json"},{"name":"独立","path":"api/tags/独立.json"},{"name":"虚拟环境","path":"api/tags/虚拟环境.json"},{"name":"requirements","path":"api/tags/requirements.json"}]},{"title":"电影《小黄人》中文预告片","slug":"电影《小黄人》中文预告片","date":"2014-11-09T14:04:05.000Z","updated":"2020-08-15T03:08:07.000Z","comments":true,"path":"api/articles/电影《小黄人》中文预告片.json","excerpt":null,"cover":null,"content":"<span id=\"more\"></span>\n<p>导演: 凯尔·巴尔达 / 皮埃尔·科芬<br>编剧: 布莱恩·林奇<br>主演: 迈克尔·基顿 / 桑德拉·布洛克 / 乔恩·哈姆 / 凯蒂·米克松 / 真田广之 / 珍妮弗·桑德斯 / 皮埃尔·科芬 / 克里斯·雷纳德 / Dave Rosenbaum<br>类型: 喜剧 / 动画 / 家庭<br>制片国家/地区: 美国<br>语言: 英语<br>上映日期: 2015-07-10(美国)<br>又名: 小黄人大电影<br>豆瓣链接: <a href=\"http://movie.douban.com/subject/11624706/\">小黄人</a><br>预告版:</p>\n<iframe height=498 width=510 src=\"http://player.youku.com/embed/XODE4MzY3MDYw\" frameborder=0 allowfullscreen></iframe>","raw":null,"categories":[{"name":"影视","path":"api/categories/影视.json"}],"tags":[{"name":"电影","path":"api/tags/电影.json"},{"name":"小黄人","path":"api/tags/小黄人.json"},{"name":"预告片","path":"api/tags/预告片.json"}]},{"title":"GitHub Pages/GitCafe Pages绑定自定义域名","slug":"Github-Pages-Gitcafe-Pages绑定自定义域名","date":"2014-11-09T10:32:11.000Z","updated":"2020-08-15T03:06:36.000Z","comments":true,"path":"api/articles/Github-Pages-Gitcafe-Pages绑定自定义域名.json","excerpt":"更新记录2015-01-01 更新 GitCafe-Page IP地址<br>2014-11-09 初稿虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为username.github.io或username.github.com,GitCafe为username.gitcafe.com），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。<br>","cover":null,"content":"<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2015-01-01 更新 GitCafe-Page IP地址<br>2014-11-09 初稿</p>\n<p>虽然GitHub Pages和GitCafe Pages默认为每个用户分配了一个二级域名（GitHub为<code>username.github.io</code>或<code>username.github.com</code>,GitCafe为<code>username.gitcafe.com</code>），但如果你对这个二级域名不满意也可以申请一个自己的域名进行绑定。下面就说说GitHub和GitCafe的绑定过程。<br><span id=\"more\"></span></p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><ul>\n<li>域名（例：iblogc.com）</li>\n<li>一个GitHub Pages/GitCafe Pages</li>\n</ul>\n<hr>\n<h2 id=\"GitHub\"><a href=\"#GitHub\" class=\"headerlink\" title=\"GitHub\"></a>GitHub</h2><ul>\n<li>在repo目录下创建一个名为<code>CNAME</code>的文件（无后缀）</li>\n<li>打开CNAME，在里面写入你要绑定的域名<ul>\n<li><del>1)如果你绑定的是二级域名，请在域名管理里添加一条CNAME记录，指向username.github.io或username.github.com</del></li>\n<li><del>2)如果你绑定的是顶级域名，请在域名管理里添加一条A记录，指向103.245.222.133</del></li>\n<li>请在域名管理里添加一条CNAME记录，指向username.github.io</li>\n</ul>\n</li>\n<li>等待生效 </li>\n</ul>\n<hr>\n<h2 id=\"GitCafe\"><a href=\"#GitCafe\" class=\"headerlink\" title=\"GitCafe\"></a>GitCafe</h2><ul>\n<li>打开你自己的gitcafe pages项目，</li>\n<li>进入 项目管理&gt;&gt;自定义域名，在这里添加你要绑定的域名就可以，比如我配置了顶级域名iblogc.com（当然也可以设置二级域名）</li>\n<li>QQ截图20141109181543.png)</li>\n<li>在域名管理里添加一条CNAME记录，记录值为gitcafe.io，如果您的域名注册商不提供CNAME记录选项，请将A记录值修改为 207.226.141.135(IP地址截止2015-01-01有效，如失效，请以<a href=\"https://gitcafe.com/GitCafe/Help/wiki/Pages-%E7%9B%B8%E5%85%B3%E5%B8%AE%E5%8A%A9#wiki\">官方说明</a>为准)。</li>\n<li>等待生效</li>\n</ul>\n","raw":null,"categories":[{"name":"网站","path":"api/categories/网站.json"}],"tags":[{"name":"域名","path":"api/tags/域名.json"},{"name":"github","path":"api/tags/github.json"},{"name":"gitcafe","path":"api/tags/gitcafe.json"}]},{"title":"Hello World","slug":"hello-world","date":"2014-09-15T06:04:40.000Z","updated":"2020-08-15T03:06:43.000Z","comments":true,"path":"api/articles/hello-world.json","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in trobuleshooting or you can ask me on GitHub.","cover":null,"content":"<p>Welcome to <a href=\"http://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"http://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"http://hexo.io/docs/troubleshooting.html\">trobuleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<span id=\"more\"></span>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"http://hexo.io/docs/deployment.html\">Deployment</a></p>\n","raw":null,"categories":[],"tags":[]}]}