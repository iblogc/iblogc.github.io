{"total":49,"pageSize":10,"pageCount":5,"data":[{"title":"代码托管平台码云(Gitee)到Gitea迁移记","slug":"Gitee2Gitea","date":"2020-03-01T11:42:34.000Z","updated":"2020-03-24T06:15:27.000Z","comments":true,"path":"api/articles/Gitee2Gitea.json","excerpt":"团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。","cover":null,"content":"<p>团队的代码托管管理平台之前一直用Gitee的企业版本，但除了代码pull/push操作外，基本不用平台上其它功能，除了要新建一个仓库要打开下网页版，其它时间基本不会访问网页版本，所以经过半天的调研，从GitLab/Gogs/Gitea中选择了Gitea，把迁移过程记录如下。</p>\n<span id=\"more\"></span>\n<h3 id=\"安装Gitea\"><a href=\"#安装Gitea\" class=\"headerlink\" title=\"安装Gitea\"></a>安装Gitea</h3><p>因为服务器上刚好装有docker，按照<a href=\"https://docs.gitea.io/zh-cn/install-with-docker/\">官方文档</a>选择了最简单的docker安装。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull gitea/gitea:latest</span><br><span class=\"line\">sudo mkdir -p /data/gitea</span><br><span class=\"line\">docker run -d --name=gitea -p 10022:22 -p 10080:3000 -v /data/gitea:/data gitea/gitea:latest</span><br><span class=\"line\">// 重启gitea</span><br><span class=\"line\">docker restart gitea</span><br></pre></td></tr></table></figure>\n<p>安装完成后遇到了页面有三个静态文件（css/js）加载不成功，导致页面排版混乱，F12查看控制台报错net::ERR_CONTENT_LENGTH_MISMATCH，google之，找到这篇文章</p>\n<p><a href=\"https://github.com/xhlwill/blog/issues/17\">Nginx 做代理时浏览器报错 net::ERR_CONTENT_LENGTH_MISMATCH</a>，按照此方法解决。</p>\n<h3 id=\"配置Nginx\"><a href=\"#配置Nginx\" class=\"headerlink\" title=\"配置Nginx\"></a>配置Nginx</h3><p>在服务器Nginx上配置反向代理</p>\n<p>vi /etc/nginx/conf.d/gitea.conf</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">upstream gitea &#123;</span><br><span class=\"line\">    server 127.0.0.1:10080<span class=\"comment\">;</span></span><br><span class=\"line\">    keepalive 2000<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       80<span class=\"comment\">;</span></span><br><span class=\"line\">    server_name  git.i.example.com<span class=\"comment\">;</span></span><br><span class=\"line\">    client_max_body_size 1024M<span class=\"comment\">;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        proxy_pass http://gitea/<span class=\"comment\">;</span></span><br><span class=\"line\">        proxy_set_header Host $host:$server_port<span class=\"comment\">;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新加载配置</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nginx -s reload</span><br></pre></td></tr></table></figure>\n<h3 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>git.i.example.com解析到当前服务器ip，并把服务器防火墙入方向的10022 tcp端口打开，以便使用ssh方式clone仓库时使用。</p>\n<h3 id=\"Gitea初始化\"><a href=\"#Gitea初始化\" class=\"headerlink\" title=\"Gitea初始化\"></a>Gitea初始化</h3><p>打开http://.i.example.com，进入初始化界面（如果没进随便点注册或登录就会进），除了数据库根据需要配置，几个域名和网址要修改下，邮箱和其它选项按需配置。以后如果想修改配置，可以直接修改/data/gitea/gitea/conf/app.ini文件<a href=\"https://docs.gitea.io/zh-cn/config-cheat-sheet/\">配置说明</a>，修改完成后重启下gitea即可生效。</p>\n<h3 id=\"仓库迁移\"><a href=\"#仓库迁移\" class=\"headerlink\" title=\"仓库迁移\"></a>仓库迁移</h3><p>因为我迁移的是团队项目，所以先通过Gitea提供的API把所有仓库以镜像方式（镜像方式同步过来仓库对成员为只读，并且可以设置间隔时间，默认8小时，定时从原始地址Gitee同步最新代码）同步过来<strong>[操作1]</strong>，然后为每个项目配置好协作者/团队/权限等设置，在这期间，团队成员还是往Gitee上提交代码，待全部设置完成后取消告知团队成员不要往Gitee提交代码，并调用Giea api把所有仓库从Gitee上同步一下最新代码<strong>[操作2]</strong>，然后每个仓库从镜像仓库转为普通仓库，并让团队的所有在自己仓库根目录执行修改本地仓库Git远程仓库地址替换操作<strong>[操作3]</strong></p>\n<p><strong>[操作1]</strong>：登录Gitea后，界面右上角有一个加号，点开了后有一个迁移外部仓库的功能，只要填入外部仓库URL，授权验证信息等信息就可以一键把外部仓库的所有代码（包括所有branch和commit）迁移到Gitea，如果要迁移的仓库比较多，可以使用Gitea提供的Api来操作。对应此迁移操作的api是</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">POST /repos/migrate?access_token=&lt;your gitea admin access token&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Request body</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    description: MigrateRepoForm form for migrating repository</span><br><span class=\"line\">    auth_password: string</span><br><span class=\"line\">    auth_username: string</span><br><span class=\"line\">    clone_addr*: string</span><br><span class=\"line\">    description: string</span><br><span class=\"line\">    issues: boolean</span><br><span class=\"line\">    labels: boolean</span><br><span class=\"line\">    milestones: boolean</span><br><span class=\"line\">    mirror: boolean</span><br><span class=\"line\">    private: boolean</span><br><span class=\"line\">    pull_requests: boolean</span><br><span class=\"line\">    releases: boolean</span><br><span class=\"line\">    repo_name*: string</span><br><span class=\"line\">    uid*: integer($int64)</span><br><span class=\"line\">    wiki: boolean</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong></p>\n<ol>\n<li><p>access_token 请在有管理员权限的账号的设置&gt;应用中创建；</p>\n</li>\n<li><p>Request body 中的uid即管理后台&gt;账户管理/组织管理中的ID列值；</p>\n</li>\n</ol>\n<p>找了Gitee没找到可以获取账户下所有仓库信息的API，所以只好手写了一个Gitee仓库地址的文件，类似</p>\n<p>vi gitee-url.txt</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://gitee.com/example/project_a.git</span><br><span class=\"line\">https://gitee.com/example/project_b.git</span><br></pre></td></tr></table></figure>\n<p>使用shell脚本逐行读取url，并调用Gitea api迁移仓库。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\"><span class=\"meta prompt_\">tureture# </span><span class=\"language-bash\">Windows注释下面这行</span></span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/migrate?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot; -H &quot;Content-Type: application/json&quot; -d &quot;&#123; \\&quot;auth_password\\&quot;: \\&quot;NDY2&amp;F*K!hL75y*z\\&quot;, \\&quot;auth_username\\&quot;: \\&quot;korvin101@gmail.com\\&quot;, \\&quot;clone_addr\\&quot;: \\&quot;$line\\&quot;, \\&quot;issues\\&quot;: true, \\&quot;labels\\&quot;: true, \\&quot;milestones\\&quot;: true, \\&quot;mirror\\&quot;: true, \\&quot;private\\&quot;: true, \\&quot;pull_requests\\&quot;: true, \\&quot;releases\\&quot;: true, \\&quot;repo_name\\&quot;: \\&quot;$project_name\\&quot;, \\&quot;uid\\&quot;: 2, \\&quot;wiki\\&quot;: true&#125;&quot;;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong>[操作2]</strong>：从Gitee上同步最新代码</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for line in $(&lt;gitee-url.txt);</span><br><span class=\"line\">do</span><br><span class=\"line\">    line=$(echo $line | sed -e &#x27;s/\\r//g&#x27;);</span><br><span class=\"line\">    tmp=$&#123;line#https://gitee.com/xxx/&#125;;</span><br><span class=\"line\">    project_name=$&#123;tmp%.git&#125;;</span><br><span class=\"line\">    curl -X POST &quot;http://git.i.example.com/api/v1/repos/&#123;owner&#125;/$project_name/mirror-sync?access_token=&lt;your gitea admin access token&gt;&quot; -H &quot;accept: application/json&quot;</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n<p><strong><em>注：</em></strong>owner为项目拥有者用户名/组织名</p>\n<p><strong>[操作3]</strong>：原本地仓库Git远程仓库地址替换</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// http地址</span><br><span class=\"line\">// 原代码仓库http地址：https://gitee.com/example/project_a.git</span><br><span class=\"line\">// 新代码仓库http地址：http://git.i.example.com/JIANSU/project_a.git</span><br><span class=\"line\">// https://gitee.com/example &gt; http://git.i.example.com/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/https:\\/\\/gitee\\.com\\/example/http:\\/\\/git\\.i\\.example.com\\/JIANSU/g&#x27; */.git/config</span><br><span class=\"line\"></span><br><span class=\"line\">// ssh地址</span><br><span class=\"line\">// 原代码仓库ssh地址：git@gitee.com:example/project_a.git</span><br><span class=\"line\">// 新代码仓库地址：ssh://git@git.i.example.com:10022/JIANSU/project_a.git</span><br><span class=\"line\">// git@gitee.com:example &gt; ssh://git@git.i.example.com:10022/JIANSU</span><br><span class=\"line\">// 本地仓库使用此命令替换，可在包含所有项目的外层文件夹路径下执行批量替换</span><br><span class=\"line\">// Windows删除&#x27;.bak&#x27;</span><br><span class=\"line\">sed -i &#x27;.bak&#x27; &#x27;s/git@gitee\\.com:example/ssh:\\/\\/git@git\\.i\\.example\\.com:10022\\/JIANSU/g&#x27; */.git/config</span><br></pre></td></tr></table></figure>\n<ol>\n<li><p>如果之前是用http地址进行克隆的仓库的话，现在就是在进行pull和push操作时，把账户密码换成Gitea的就可以了；</p>\n</li>\n<li><p>如果以前是用ssh克隆的仓库的话，现在在Gitea的设置&gt;SSH / GPG 密钥里添加一下公钥就可以进行git pull/git push等操作了；</p>\n</li>\n</ol>\n<h3 id=\"仓库备份\"><a href=\"#仓库备份\" class=\"headerlink\" title=\"仓库备份\"></a>仓库备份</h3><p>Gitea有自己的备份与恢复功能<a href=\"https://docs.gitea.io/zh-cn/backup-and-restore/#%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D\">备份与恢复</a>，这个备份比较全面，数据/代码/日志都可以备份，正是因为这样，如果仓库比较多这个备份的文件肯定会有点大，而且每次都是全量备份，所以频率肯定不能太高，而我只是想对仓库代码做一个高频率备份，所以写了一个Python3脚本调用Gitea api和 Git命令来进行所有仓库的所有分支代码备份，因为这个备份基于Git机制，所以虽然频率高，但备份始终只有一份。脚本如下：</p>\n<p>backup.py</p>\n<blockquote>\n<p>如果使用python2运行，分支名里有中文的话，请自行处理字符编码问题。</p>\n</blockquote>\n<p>** python<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/python3</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> platform</span><br><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">current_dir = os.path.abspath(os.path.dirname(__file__))</span><br><span class=\"line\">access_token = <span class=\"string\">&quot;&lt;your access token&gt;&quot;</span></span><br><span class=\"line\">repos_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/search?access_token=&#123;&#125;&amp;page=&#123;&#125;&amp;limit=&#123;&#125;&#x27;</span></span><br><span class=\"line\">branches_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/branches?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\">repo_key_url = <span class=\"string\">&#x27;http://git.i.example.com/api/v1/repos/&#123;&#125;/&#123;&#125;/keys?access_token=&#123;&#125;&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">repos</span>():</span><br><span class=\"line\">    page = <span class=\"number\">1</span></span><br><span class=\"line\">    limit = <span class=\"number\">50</span></span><br><span class=\"line\">    has_next = <span class=\"literal\">True</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> has_next:</span><br><span class=\"line\">        r = requests.get(repos_url.<span class=\"built_in\">format</span>(access_token, page, limit))</span><br><span class=\"line\">        <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> r.json()[<span class=\"string\">&#x27;data&#x27;</span>]:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> repo</span><br><span class=\"line\">        page += <span class=\"number\">1</span></span><br><span class=\"line\">        has_next = <span class=\"built_in\">len</span>(r.json()[<span class=\"string\">&#x27;data&#x27;</span>]) == limit</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;拉取项目所有分支代码到本地&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">sync_repo</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"comment\"># 克隆仓库</span></span><br><span class=\"line\">        os.chdir(current_dir)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;克隆第 &#123;&#125; 个仓库 &#123;&#125; &#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&quot;git clone &#123;&#125;&quot;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;ssh_url&#x27;</span>]))</span><br><span class=\"line\">        os.chdir(os.path.join(current_dir, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        <span class=\"comment\"># 更新仓库</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;同步 &#123;&#125; 仓库所有分支&#x27;</span>.<span class=\"built_in\">format</span>(repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        os.system(<span class=\"string\">&#x27;git fetch --all&#x27;</span>)</span><br><span class=\"line\">        <span class=\"comment\"># if platform.system() == &#x27;Windows&#x27;:</span></span><br><span class=\"line\">        <span class=\"comment\"># Windows</span></span><br><span class=\"line\">        branches = requests.get(branches_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;full_name&#x27;</span>], access_token)).json()</span><br><span class=\"line\">        <span class=\"keyword\">for</span> branch <span class=\"keyword\">in</span> branches:</span><br><span class=\"line\">            branch_name = branch[<span class=\"string\">&#x27;name&#x27;</span>]</span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git branch --track &#123;&#125; origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">            <span class=\"comment\"># 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">            os.system(<span class=\"string\">&#x27;git checkout &#123;&#125; &amp;&amp; git reset --hard origin/&#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(branch_name, branch_name))</span><br><span class=\"line\">        <span class=\"comment\"># else:</span></span><br><span class=\"line\">        <span class=\"comment\">#     # Linux/macOS</span></span><br><span class=\"line\">        <span class=\"comment\">#     # git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all</span></span><br><span class=\"line\">        <span class=\"comment\">#     # os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; done &amp;&amp; git fetch --all &amp;&amp; git pull --all&quot;)</span></span><br><span class=\"line\">        <span class=\"comment\">#     # # 用reset而不用pull是因为如果分支被强推了pull下来会有合并冲突，用rest就不会有冲突问题</span></span><br><span class=\"line\">        <span class=\"comment\">#     os.system(&quot;git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track $&#123;remote#origin/&#125; $remote; git checkout $&#123;remote#origin/&#125;; git reset --hard $remote; done&quot;)</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;设置项目部署公钥&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_pub_key</span>():</span><br><span class=\"line\">    repo_index = <span class=\"number\">0</span></span><br><span class=\"line\">    body = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;key&quot;</span>: <span class=\"string\">&quot;ssh-rsa aabbcc&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;read_only&quot;</span>: <span class=\"literal\">True</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;title&quot;</span>: <span class=\"string\">&quot;SandBox&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> repo <span class=\"keyword\">in</span> repos():</span><br><span class=\"line\">        repo_index += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;===&#123;&#125;. &#123;&#125;===&#x27;</span>.<span class=\"built_in\">format</span>(repo_index, repo[<span class=\"string\">&#x27;name&#x27;</span>]))</span><br><span class=\"line\">        r = requests.post(repo_key_url.<span class=\"built_in\">format</span>(</span><br><span class=\"line\">            repo[<span class=\"string\">&#x27;owner&#x27;</span>][<span class=\"string\">&#x27;username&#x27;</span>], repo[<span class=\"string\">&#x27;name&#x27;</span>], access_token), data=body)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(r.json())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    sync_repo()</span><br><span class=\"line\">    <span class=\"comment\"># set_pub_key()</span></span><br></pre></td></tr></table></figure></p>\n<p>可以把脚本放在本地，使用cron(Linux/macOS)/计划任务(Windows)定时运行<code>python backup.py</code></p>\n<p><em><a href=\"https://blog.csdn.net/flydragon0815/article/details/46006473\">Windows计划任务运行cmd命令时，可使用非当前登录用户运行，这样就不会弹出小黑窗。</a></em></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"gitee","path":"api/tags/gitee.json"},{"name":"gitlab","path":"api/tags/gitlab.json"},{"name":"gite","path":"api/tags/gite.json"},{"name":"gogs","path":"api/tags/gogs.json"},{"name":"迁移","path":"api/tags/迁移.json"},{"name":"代码","path":"api/tags/代码.json"},{"name":"python","path":"api/tags/python.json"}]},{"title":"WebFlux中mongo操作-Transaction","slug":"WebFlux中mongo操作-Transaction","date":"2020-01-17T07:16:46.000Z","updated":"2020-01-17T08:01:36.000Z","comments":true,"path":"api/articles/WebFlux中mongo操作-Transaction.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><span id=\"more\"></span><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono <span class=\"title function_\">testA</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"type\">boolean</span> exception)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> <span class=\"title class_\">ADocument</span>(<span class=\"string\">&quot;张三&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">CDocument</span>(<span class=\"string\">&quot;李四&quot;</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title function_\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"type\">boolean</span> exception)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; action.insert(aDocument)</span><br><span class=\"line\">             .flatMap(a -&gt; &#123;</span><br><span class=\"line\">               cDocument.setName(a.getName() + <span class=\"string\">&quot;copy&quot;</span>);</span><br><span class=\"line\">               <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                 .map(d -&gt; &#123;</span><br><span class=\"line\">                   <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                     <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                     <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟异常的出现&quot;</span>));</span><br><span class=\"line\">                   &#125;</span><br><span class=\"line\">                   <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                 &#125;);</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面是个mono，则用next取出第一个元素就是里面的mono</span></span><br><span class=\"line\">    .next()</span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(&quot;模拟异常的出现&quot;));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>flux的数据库操作，在有事务的前提下不能用flatMap，要用事务不能用flatMap要用concatMap保持有序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@PostMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono <span class=\"title function_\">testA</span><span class=\"params\">(<span class=\"meta\">@RequestParam</span> <span class=\"type\">boolean</span> exception)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> embedService.saveAC(<span class=\"keyword\">new</span> <span class=\"title class_\">ADocument</span>(<span class=\"string\">&quot;张三&quot;</span>), <span class=\"keyword\">new</span> <span class=\"title class_\">CDocument</span>(<span class=\"string\">&quot;李四&quot;</span>), exception);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Mono&lt;Boolean&gt; <span class=\"title function_\">saveAC</span><span class=\"params\">(ADocument aDocument, CDocument cDocument, <span class=\"type\">boolean</span> exception)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> reactiveMongoTemplate.inTransaction()</span><br><span class=\"line\">    <span class=\"comment\">//所有文档的持久化操作都只能在单独一个execute函数中汇总实现</span></span><br><span class=\"line\">    .execute(action -&gt; Flux.fromIterable(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">             <span class=\"comment\">//如果是个flux此处要用concatMap保持有序不能用flatMap</span></span><br><span class=\"line\">             .concatMap(i -&gt; action.insert(aDocument)</span><br><span class=\"line\">                        .flatMap(a -&gt; &#123;</span><br><span class=\"line\">                          cDocument.setName(a.getName() + <span class=\"string\">&quot;copy&quot;</span>);</span><br><span class=\"line\">                          <span class=\"keyword\">return</span> action.insert(cDocument)</span><br><span class=\"line\">                            .map(d -&gt; &#123;</span><br><span class=\"line\">                              <span class=\"keyword\">if</span> (exception) &#123;</span><br><span class=\"line\">                                <span class=\"comment\">//测试跨文档的异常回滚</span></span><br><span class=\"line\">                                <span class=\"keyword\">throw</span> Exceptions.propagate(<span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;模拟异常的出现&quot;</span>));</span><br><span class=\"line\">                              &#125;</span><br><span class=\"line\">                              <span class=\"keyword\">return</span> d;</span><br><span class=\"line\">                            &#125;);</span><br><span class=\"line\">                        &#125;));</span><br><span class=\"line\">            )</span><br><span class=\"line\">    <span class=\"comment\">//如果里面返回的就是一个flux则不需要使用next</span></span><br><span class=\"line\">    <span class=\"comment\">//.next()</span></span><br><span class=\"line\">    .map(list -&gt; &#123;</span><br><span class=\"line\">      <span class=\"comment\">//需要注意，在execute之外的函数中产生的异常，不会触发事务的回滚。</span></span><br><span class=\"line\">      <span class=\"comment\">//                    if (exception) &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//                        throw Exceptions.propagate(new RuntimeException(&quot;模拟异常的出现&quot;));</span></span><br><span class=\"line\">      <span class=\"comment\">//                    &#125;</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Boolean.TRUE;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"reactive","path":"api/tags/reactive.json"},{"name":"事务","path":"api/tags/事务.json"},{"name":"mongo","path":"api/tags/mongo.json"},{"name":"数据库","path":"api/tags/数据库.json"},{"name":"flux","path":"api/tags/flux.json"}]},{"title":"WebFlux中mongo操作-Aggregation","slug":"WebFlux中mongo操作-Aggregation","date":"2020-01-17T07:12:53.000Z","updated":"2020-01-17T08:01:32.000Z","comments":true,"path":"api/articles/WebFlux中mongo操作-Aggregation.json","excerpt":"<br><br>","cover":null,"content":"<p><br><br><span id=\"more\"></span></p>\n<p>switch</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ConditionalOperators.Switch.<span class=\"type\">CaseOperator</span> <span class=\"variable\">cond</span> <span class=\"operator\">=</span> ConditionalOperators.Switch.CaseOperator.when(</span><br><span class=\"line\">                BooleanOperators.And.and(</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">&quot;channelBillStatus1&quot;</span>).equalToValue(<span class=\"string\">&quot;已结算&quot;</span>),</span><br><span class=\"line\">                        ComparisonOperators.Eq.valueOf(<span class=\"string\">&quot;channelBillStatus2&quot;</span>).equalToValue(<span class=\"string\">&quot;已结算&quot;</span>)</span><br><span class=\"line\">                )</span><br><span class=\"line\">        ).then(<span class=\"string\">&quot;已结清&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Aggregation</span> <span class=\"variable\">aggregation</span> <span class=\"operator\">=</span> Aggregation.newAggregation(</span><br><span class=\"line\">                Aggregation.project(<span class=\"string\">&quot;channelBillStatus1&quot;</span>, <span class=\"string\">&quot;channelBillStatus2&quot;</span>)</span><br><span class=\"line\">                        .and(ConditionalOperators.switchCases(cond).defaultTo(<span class=\"string\">&quot;未结清&quot;</span>)).as(<span class=\"string\">&quot;channelBillStatus&quot;</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">        </span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>lookup及id类型转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//把_id转成String并赋值给id</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">&quot;internalId&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;isAvailable&quot;</span>, <span class=\"string\">&quot;isCanAdd&quot;</span>, <span class=\"string\">&quot;fitGender&quot;</span>, <span class=\"string\">&quot;fitAge&quot;</span>, <span class=\"string\">&quot;fitMaritalStatus&quot;</span>, <span class=\"string\">&quot;price&quot;</span>, <span class=\"string\">&quot;sortNo&quot;</span>, <span class=\"string\">&quot;createdAt&quot;</span>)</span><br><span class=\"line\">          turetureture<span class=\"comment\">//如果需要把String转Object使用ConvertOperators.ToObjectId.toObjectId()</span></span><br><span class=\"line\">                .and(ConvertOperators.ToString.toString(<span class=\"string\">&quot;$_id&quot;</span>)).as(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//用当前表的id值去匹配chn_section表的sectionId字段值，并把结果存入chnSections数组</span></span><br><span class=\"line\">        Aggregation.lookup(<span class=\"string\">&quot;chn_section&quot;</span>, <span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;sectionId&quot;</span>, <span class=\"string\">&quot;chnSections&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//如有需要，把chnSections数组拆出来，chnSections数组有几个元素，当前这条数据就会被拆成多少条，chnSections值会变成元素值而不再是原来的数组</span></span><br><span class=\"line\">        <span class=\"comment\">//如果chnSections数组无值，默认会丢弃这条数据，如果要保留设置preserveNullAndEmptyArrays=true</span></span><br><span class=\"line\">        Aggregation.unwind(<span class=\"string\">&quot;chnSection&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只输出这些字段</span></span><br><span class=\"line\">        Aggregation.project(<span class=\"string\">&quot;internalId&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;isAvailable&quot;</span>, <span class=\"string\">&quot;isCanAdd&quot;</span>, <span class=\"string\">&quot;fitGender&quot;</span>, <span class=\"string\">&quot;fitAge&quot;</span>, <span class=\"string\">&quot;fitMaritalStatus&quot;</span>, <span class=\"string\">&quot;price&quot;</span>, <span class=\"string\">&quot;sortNo&quot;</span>, <span class=\"string\">&quot;createdAt&quot;</span>, <span class=\"string\">&quot;chnSections&quot;</span>);</span><br><span class=\"line\">        reactiveMongoTemplate.aggregate(aggregation, PlatformBillItem.class, PlatformBillBo.class);</span><br></pre></td></tr></table></figure>\n<p>如果lookup时，如果要对匹配的数据进行筛选（参考链接：<a href=\"https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）\">https://stackoverflow.com/questions/51107626/spring-data-mongodb-lookup-with-pipeline-aggregation）</a></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//原始mongo</span></span><br><span class=\"line\"><span class=\"comment\">//&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   $lookup:</span></span><br><span class=\"line\"><span class=\"comment\">//     &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//       from: &lt;collection to join&gt;,</span></span><br><span class=\"line\"><span class=\"comment\">//       let: &#123; &lt;var_1&gt;: &lt;expression&gt;, …, &lt;var_n&gt;: &lt;expression&gt; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">//       pipeline: [ &lt;pipeline to execute on the collection to join&gt; ],</span></span><br><span class=\"line\"><span class=\"comment\">//       as: &lt;output array field&gt;</span></span><br><span class=\"line\"><span class=\"comment\">//     &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//自定义一个AggregationOperation类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CustomProjectAggregationOperation</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">AggregationOperation</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String jsonOperation;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CustomProjectAggregationOperation</span><span class=\"params\">(String jsonOperation)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.jsonOperation = jsonOperation;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Document <span class=\"title function_\">toDocument</span><span class=\"params\">(AggregationOperationContext aggregationOperationContext)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> aggregationOperationContext.getMappedObject(Document.parse(jsonOperation));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> String <span class=\"title function_\">getJsonOperation</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    $lookup: &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        from: &#x27;chn_set_meal&#x27;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        let: &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;            id: &#123; $toString: &#x27;$_id&#x27; &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        &#125;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        pipeline: [&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;            &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                $match: &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    $expr: &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                        $and: &quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                        [&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                            &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                                $eq: [&#x27;$setMealId&#x27;, &#x27;$$id&#x27;]&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                            &#125;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                            &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                                $eq: [&#x27;$cooperationState&#x27;, &#x27;合作中&#x27;]&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                            &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                        ]&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;            &#125;,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;            &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                $project: &#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    channelId: 1,&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    channelName: 1&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                    cooperationState: 1&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;                &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;            &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        ],&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;        as: &#x27;channels&#x27;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;    &#125;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;&#125;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">AggregationOperation</span> <span class=\"variable\">aggregationOperation</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CustomProjectAggregationOperation</span>(getJsonOperation());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> reactiveMongoTemplate.aggregate(Aggregation.newAggregation(aggregationOperation), SetMeal.class, SetMealListBo.class);</span><br></pre></td></tr></table></figure>\n<p>group</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//背景：查询交易表，订单和交易一对多</span></span><br><span class=\"line\">Aggregation.group(<span class=\"string\">&quot;orderNo&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//单一组的金额汇总</span></span><br><span class=\"line\">  .sum(<span class=\"string\">&quot;amount&quot;</span>).as(<span class=\"string\">&quot;totalAmount&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组的最后一个订单号</span></span><br><span class=\"line\">  .last(<span class=\"string\">&quot;orderNo&quot;</span>).as(<span class=\"string\">&quot;orderNo&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//组里数据条数</span></span><br><span class=\"line\">  .count().as(<span class=\"string\">&quot;tradeCount&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里每条数据的状态放到一个statuses数组里</span></span><br><span class=\"line\">  .addToSet(<span class=\"string\">&quot;status&quot;</span>).as(<span class=\"string\">&quot;statuses&quot;</span>)</span><br><span class=\"line\">  <span class=\"comment\">//把一组数据里的一些字段信息重新组装成一个对象放到billItems的对象数组里</span></span><br><span class=\"line\">  .push(<span class=\"keyword\">new</span> <span class=\"title class_\">BasicDBObject</span>(<span class=\"string\">&quot;tradeContent&quot;</span>, <span class=\"string\">&quot;$tradeContent&quot;</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">&quot;tradeNo&quot;</span>, <span class=\"string\">&quot;$tradeNo&quot;</span>)</span><br><span class=\"line\">        .append(<span class=\"string\">&quot;amount&quot;</span>, <span class=\"string\">&quot;$amount&quot;</span>)</span><br><span class=\"line\">       ).as(<span class=\"string\">&quot;billItems&quot;</span>);</span><br></pre></td></tr></table></figure>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"reactive","path":"api/tags/reactive.json"},{"name":"事务","path":"api/tags/事务.json"},{"name":"mongo","path":"api/tags/mongo.json"},{"name":"数据库","path":"api/tags/数据库.json"},{"name":"aggregation","path":"api/tags/aggregation.json"}]},{"title":"自用软件推荐","slug":"awesome-software","date":"2019-10-12T08:40:17.000Z","updated":"2021-05-06T07:24:05.081Z","comments":true,"path":"api/articles/awesome-software.json","excerpt":"日用软件/效率提升/开发工具/Chorme插件扩展推荐<br>","cover":null,"content":"<p>日用软件/效率提升/开发工具/Chorme插件扩展推荐<br><span id=\"more\"></span></p>\n<h4 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h4><h5 id=\"日常\"><a href=\"#日常\" class=\"headerlink\" title=\"日常\"></a>日常</h5><ol>\n<li><p><a href=\"https://www.alfredapp.com/\"><strong>Alfred</strong></a>(macOS)</p>\n<p>  Mac上的效率启动神器</p>\n</li>\n<li><p><a href=\"https://u.tools/\"><strong>uTools</strong></a>(macOS/Windows/Linux)</p>\n<blockquote>\n<p>你的生产力工具集.</p>\n<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p>\n<p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>\n</blockquote>\n<p>  除了插件中心提供的工具，随手就可以用自己熟悉的语言写一个简单的小工具放上面，感觉比Alfred还好用，哈哈</p>\n</li>\n<li><p><a href=\"http://www.yingdev.com/projects/wgestures\"><strong>WGestures</strong></a>(Windows)</p>\n<p>  系统鼠标手势 </p>\n</li>\n<li><p><a href=\"https://zh.snipaste.com/\"><strong>Snipaste</strong></a>(macOS/Windows)</p>\n<p>  截图/贴图</p>\n</li>\n<li><p><a href=\"https://zh.xnipapp.com/\"><strong>Xnip</strong></a>(macOS）</p>\n<p>  截图应用</p>\n</li>\n<li><p><a href=\"https://better365.yswebportal.cc/ishot.html\">iShot</a>(macOS)</p>\n<p>  截图/长截图/贴图/录屏</p>\n</li>\n<li><p><a href=\"https://www.voidtools.com/\"><strong>Everything</strong></a>(Windows)</p>\n<p>  Windows本地搜索，快如闪电，用过就回不去</p>\n</li>\n<li><p><a href=\"http://www.irolan.com/\"><strong>Rolan</strong></a>(Windows)</p>\n<p>  Windows上的快速启动器 </p>\n</li>\n<li><p><a href=\"http://rime.im/\"><strong>Rime</strong></a>(macOS/Windows/Linux)</p>\n<p>  输入法</p>\n</li>\n<li><p><a href=\"https://symless.com/synergy/\"><strong>Synergy</strong></a>(macOS/Windows/Linux)</p>\n<p> 多台设备共用键鼠</p>\n</li>\n<li><p><strong>[Shadowsocks/v2rayNG/v2ray/V2rayU]</strong>(macOS/Windows/Linux/Android）</p>\n<p> 科学上网</p>\n</li>\n<li><p><a href=\"https://freemacsoft.net/appcleaner/\"><strong>AppCleaner</strong></a>(macOS）</p>\n<p> 应用卸载器 </p>\n</li>\n<li><p><a href=\"https://www.typora.io/\"><strong>Typora</strong></a>(macOS/Windows/Linux）</p>\n<p> markdown笔记写作应用，配合坚果云或Dropbox同步，爽</p>\n</li>\n<li><p><a href=\"https://www.sumatrapdfreader.org/\"><strong>SumatraPDF</strong></a>(Windows）</p>\n<p> PDF阅读器</p>\n</li>\n<li><p><a href=\"http://www.eagleget.com/\"><strong>EagleGet</strong></a>(Windows）</p>\n<p> 下载器</p>\n</li>\n<li><p><a href=\"https://www.freedownloadmanager.org/zh/\"><strong>Free Download Manager</strong></a>(macOS/Windows）</p>\n<p> 下载器</p>\n</li>\n<li><p><a href=\"https://www.bandisoft.com/bandizip/cn/\"><strong>Bandizip</strong></a>(macOS/Windows）</p>\n<p> 压缩/解压软件</p>\n</li>\n<li><p><a href=\"https://ezip.awehunt.com/\"><strong>MacZip</strong></a>(macOS）</p>\n<p> 压缩/解压软件</p>\n</li>\n<li><p><a href=\"https://github.com/hakimel/reveal.js\"><strong>reveal.js</strong></a>(Web）</p>\n<p> 程序员的PPT工具</p>\n</li>\n<li><p><a href=\"https://paper.meiyuan.in/\"><strong>pap.er</strong></a>(macOS）</p>\n<p> 壁纸应用</p>\n</li>\n<li><p><a href=\"https://trankynam.com/atext/\"><strong>aText</strong></a>(macOS/Windows）</p>\n<p> 文字输入效率提升工具</p>\n</li>\n<li><p><a href=\"https://www.mowglii.com/itsycal/\"><strong>Itsycal</strong></a>(macOS)</p>\n<p>  macOS 菜单栏上自定义显示日历与时间</p>\n</li>\n</ol>\n<h5 id=\"开发\"><a href=\"#开发\" class=\"headerlink\" title=\"开发\"></a>开发</h5><ol start=\"22\">\n<li><p><a href=\"https://github.com/cmderdev/cmder\"><strong>Cmder</strong></a>(Windows)</p>\n<p> Windows默认命令行替代品 </p>\n</li>\n<li><p><a href=\"https://insomnia.rest/\"><strong>Insomnia</strong></a>(macOS/Windows/Linux)</p>\n<p> 跨平台的REST客户端</p>\n</li>\n<li><p><a href=\"https://www.getpostman.com/\"><strong>Postman</strong></a>(macOS/Windows/Linux/<del>Chrome App</del>)</p>\n<p> 跨平台的接口调试工具，有mocks服务和接口文档生成功能</p>\n</li>\n<li><p><a href=\"https://iterm2.com/\"><strong>iTerm2</strong></a>(macOS)</p>\n<p> 终端应用</p>\n</li>\n<li><p><a href=\"https://hyper.is/\"><strong>hyper</strong></a>(macOS/Windows/Linux)</p>\n<p> 漂亮的终端应用</p>\n</li>\n<li><p><a href=\"http://www.telerik.com/fiddler\"><strong>Fiddler</strong></a>(macOS/Windows/Linux)</p>\n<p> 抓包工具</p>\n</li>\n<li><p><a href=\"https://www.charlesproxy.com/\"><strong>Charles</strong></a>(macOS/Windows/Linux)</p>\n<p> 抓包工具</p>\n</li>\n<li><p><a href=\"https://github.com/fatedier/frp\"><strong>frp</strong></a>(macOS/Windows/Linux)<br> 内网穿透</p>\n</li>\n<li><p><a href=\"https://www.royalapps.com/ts/mac/features\"><strong>MobaXterm</strong></a></p>\n<p>全能终端神器</p>\n</li>\n<li><p><a href=\"https://www.royalapps.com/ts/mac/features\"><strong>Royal TSX</strong></a></p>\n<p>远程管理工具</p>\n</li>\n</ol>\n<h4 id=\"Chrome\"><a href=\"#Chrome\" class=\"headerlink\" title=\"Chrome\"></a>Chrome</h4><h5 id=\"扩展-应用\"><a href=\"#扩展-应用\" class=\"headerlink\" title=\"扩展/应用\"></a>扩展/应用</h5><ol>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/adblock-plus-free-ad-bloc/cfhdojbkjhnklbpkdaibdccddilifddb\"><strong>Adblock Plus</strong></a></p>\n<p>  广告拦截器，谁用谁知道</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/checker-plus-for-gmail/oeopbcgkkoapgobdbedcemjljbihmemj\"><strong>Checker Plus for Gmail™</strong></a></p>\n<p>  Gmail/Inbox插件，不用打开网页处理邮件</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/dark-reader/eimadpbcbfnmbkopoojfekhnkhdbieeh\"><strong>Dark Reader</strong></a></p>\n<p>  黑色主题，适用于任何网站。关爱眼睛，就使用Dark Reader进行夜间和日间浏览</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/extension-manager/gjldcdngmdknpinoemndlidpcabkggco\"><strong>扩展管理器（Extension Manager）</strong></a></p>\n<p>  扩展管理工具，可以对扩展进行分组，并进行批量快速的启用、禁用</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/wappalyzer/gppongmhjkpfnbhagpmjfkannfbllamg\"><strong>Wappalyzer</strong></a></p>\n<p>  探测当前网页正在使用的开源软件或者js类库</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/ghostery-%E2%80%93-privacy-ad-blo/mlomiejdfkolichcflejclcbmpeaniij\"><strong>Ghostery</strong></a></p>\n<p>  了解谁在跟踪您的网页浏览操作，并可禁用跟踪行为。</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/google-translate/aapbdbdomjkkjkaonfhkkikfgjllcleb\"><strong>Google翻译</strong></a></p>\n<p>支付在网页中划词翻译</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/lingocloud-web-translatio/jmpepeebcbihafjjadogphmbgiffiajh\"><strong>彩云小译</strong></a></p>\n<p>  网页翻译插件</p>\n</li>\n<li><p><strong>LastPass</strong></p>\n<p>  密码管理</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/tampermonkey/dhdgffkkebhmkfjojejmpbldmpobfkfo\"><strong>Tampermonkey</strong></a></p>\n<p> 给网站添加自定义脚本</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/stylus/clngdbkpkpeebahjckkjfobafhncgmne\"><strong>Stylus</strong></a></p>\n<p> 给网站添加自定义样式表</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/web-server-for-chrome/ofhbbkphhbklhfoeikjpcbhemlocgigb\"><strong>Web Server for Chrome</strong></a></p>\n<p> 快速搭建本地Web服务器(当然，你也可以<code>python -m http.server</code>)</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/octotree-github-code-tree/bkhaagjahfmjljalopjnoealnfndnagc\"><strong>Octotree</strong></a></p>\n<p> 在浏览器左侧树形展示Github代码。</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif\"><strong>Proxy SwitchyOmega</strong></a></p>\n<p> 你懂的</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/v2ex-plus/daeclijmnojoemooblcbfeeceopnkolo\"><strong>v2ex plus</strong></a></p>\n<p> 优雅便捷的 V2EX 扩展</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/toby-for-chrome/hddnkoipeenegfoeaoibdmnaalmgkpip\"><strong>Toby for Chrome</strong></a></p>\n<p> 标签页管理/稍后阅读/资料归档分类…</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/web-scraper-free-web-scra/jnhgnonknehpejjnehehllkliplmbmhn\"><strong>Web Scraper</strong></a></p>\n<p> 图形化创建爬虫，爬取网站数据</p>\n</li>\n<li><p><strong>惠惠购物助手/<a href=\"https://chrome.google.com/webstore/detail/%E8%B4%AD%E7%89%A9%E5%85%9A%E8%87%AA%E5%8A%A8%E6%AF%94%E4%BB%B7%E5%B7%A5%E5%85%B7/jgphnjokjhjlcnnajmfjlacjnjkhleah\">购物党自动比价工具</a></strong></p>\n<p> 在主流电商网站页面上提供商品的历史价格，及在同款商品在其它平台的价格比较。</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/google-keep-chrome-extens/lpcaedmchfhocbbapmcbpinfpgnhiddi\"><strong>Google Keep</strong></a></p>\n<p> 记事和清单</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/simpread-reader-view/ijllcpnolfcooahcekpamkbidhejabll\"><strong>简悦</strong></a></p>\n<p>  阅读模式 + 标注 + 稍后读，自己最常用的还是网页转阅读模式/网页转 Markdown 同步到坚果云，或是导出成PDF。</p>\n</li>\n<li><p><a href=\"https://chrome.google.com/webstore/detail/floccus-bookmarks-sync/fnaicdffflnofjppbagibeoednhnbjhg\"><strong>floccus bookmarks sync</strong></a></p>\n<p>  浏览器<strong>内置</strong>书签<strong>同步</strong>工具，目前支持Firefox、Chrome、Edge 和其它能装 Chrome 插件的浏览器，可配合坚果云使用。</p>\n</li>\n</ol>\n","raw":null,"categories":[{"name":"工具","path":"api/categories/工具.json"}],"tags":[{"name":"效率","path":"api/tags/效率.json"},{"name":"软件","path":"api/tags/软件.json"},{"name":"推荐","path":"api/tags/推荐.json"}]},{"title":"(猫)花木兰领养注意事项","slug":"adoption-cat-Hua-Mulan","date":"2019-09-17T03:22:04.000Z","updated":"2020-08-15T03:08:16.000Z","comments":true,"path":"api/articles/adoption-cat-Hua-Mulan.json","excerpt":" [Figure] ","cover":"/media/花木兰/15.jpg","content":"<html><head></head><body><p><img alt=\"\" data-src=\"/media/花木兰/15.jpg\"><br><span id=\"more\"></span></p>\n<section class=\"layout\" style=\"font-size: 16px; color: black; padding: 10px; line-height: 1.6; word-spacing: 0px; letter-spacing: 0px; word-break: break-word; word-wrap: break-word; text-align: left; font-family: Optima-Regular, Optima, PingFangSC-light, PingFangTC-light, 'PingFang SC', Cambria, Cochin, Georgia, Times, 'Times New Roman', serif;\"><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">成为猫奴前的准备</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><div class=\"note warning\">\n            <p>领养前请确认能否接受以下几点，如果否，不建议领养 </p>\n          </div><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">养猫请<strong style=\"font-weight: bold; color: black;\">不要半途而废</strong>，请不要让它变成流浪猫</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">相对于狗来说，猫掉毛很严重，房间经常要打扫，衣服每天都要用粘毛器粘毛</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫不像狗一样会听你的指令，绝大部分听不懂</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫每年要驱虫和打狂犬费用几百</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫如果生病去看病花费要比人生病花费大很多很多</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">绝育需要花费1~2k</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫会比较粘人，一般喜欢在人腿上或身上睡觉</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫呆的房间不能开窗</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">小猫信息</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">生日：2018年09月23日</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">性别：妹子</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">品种：英短银渐层+虎斑，有部分折耳基因</p><br><h3 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; font-size: 20px;\"><span>家族：</span></h3><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爷爷：英短银渐层</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">奶奶：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">爸爸：美短虎斑</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">妈妈：英短银渐层（有折耳基因）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">新家</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．刚带回家应该先放到猫砂里，拿它的爪子刨几 猫砂，让它知道那里是拉屎撒尿的地方，最好让小猫在里面待一会儿</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．如果小猫在其他地方拉屎撒尿了，把排泄物处理掉放到猫砂里去，让后把小猫也放到猫砂里，小猫闻到那气味让它知道应该在猫砂里厕所，然后用的爪子刨猫砂把排泄物盖起来</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">吃</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><ol style=\"margin-top: 8px; margin-bottom: 8px; padding-left: 20px; color: black; list-style-type: decimal;\"><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">主食一定是猫粮，猫粮选购请自己网上查询，这里不提供建议</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">不能喝生水最好倒是温水，凉开水也可以，猫喝的水每天换一次</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">猫粮倒碗里小猫自己会吃，不要太多也不要太少，一天的量就可以，太多了过夜不新鲜猫可能就不喜欢吃了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">10个月内都可以吃幼猫粮，后面可以换成成猫 粮，除了猫粮，也要给猫些吃湿粮、猫罐头、营养膏和其他猫零食，但不要给给猫吃太多，因为这些食物比较香，如果猫吃多了，可能就会挑食不喜欢吃猫粮了</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">平时也可以买点鸡胸肉，用清水煮熟，然后撕下 来喂猫吃。</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">尽量别给猫吃咸的东西或其它味道的人吃的东西</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">目前小猫已经可以不用喝奶了，不要给猫喝牛奶，牛奶里有乳糖，猫是不能消化乳糖的，如果喝了可能会腹泻，严重会致死</li><br><li style=\"margin-top: 5px; margin-bottom: 5px; line-height: 26px; text-align: left; color: black;\">其他东西给猫吃之前先网上查下能不能给猫吃</li><br></ol><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">用</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">1．可以买个猫抓盘或猫抓板猫喜欢到处抓东西，如果有纸箱子猫也会经常抓</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">2．可以买个猫爬架，让猫玩，猫喜欢爬高高</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">3．猫到夏天可能会掉毛比较多，网上买个猫毛梳子 或噜猫手套时常给猫去去毛</p><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">4．因为猫会掉毛，抱它玩了之后，衣服上经常会粘 上毛，可以淘宝买个粘毛滚筒粘衣服上或是其它地方的猫毛，十分有效</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">玩</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以买激光笔啊，逗猫棒之类的猫玩具，让小猫玩</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">洗澡</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">可以自己在家洗（容易被抓伤）或是带去宠物店（100多一次）</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">绝育</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">请在适当的时候带猫去做绝育</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">疫苗</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">猫的狂犬和驱虫每年要打，人的狂犬疫苗自己决定要不要打，不提供建议</p><br><h2 style=\"margin-top: 40px; margin-bottom: 20px; font-weight: bold; color: black; border-bottom: 2px solid rgb(239, 112, 96); font-size: 1.3em;\"><span style=\"display: inline-block; font-weight: bold; background: rgb(239, 112, 96); color: #ffffff; padding: 3px 10px 1px; border-top-right-radius: 3px; border-top-left-radius: 3px; margin-right: 3px;\">其它注意事项</span><span style=\"display: inline-block; vertical-align: bottom; border-bottom: 36px solid #efebe9; border-right: 20px solid transparent;\"> </span></h2><br><p style=\"font-size: 16px; padding-top: 8px; padding-bottom: 8px; margin: 0; line-height: 26px; color: black;\">前面说了，猫喜欢爬高高，所以猫能够跳上去或爬上去的窗户阳台要关掉，猫不知道高空危险，会跳楼的，很多猫都是坠楼死掉的</p><br></section>\n\n<div class=\"group-picture\"><div class=\"group-picture-container\"><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/1.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/2.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/3.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/4.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/5.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/6.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/7.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/8.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/9.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/10.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/11.jpg\"></div><div class=\"group-picture-column\" style=\"width: 33.333333333333336%;\"><img alt=\"\" data-src=\"/media/花木兰/12.jpg\"></div></div><div class=\"group-picture-row\"><div class=\"group-picture-column\" style=\"width: 50%;\"><img alt=\"\" data-src=\"/media/花木兰/13.jpg\"></div><div class=\"group-picture-column\" style=\"width: 50%;\"><img alt=\"\" data-src=\"/media/花木兰/14.jpg\"></div></div></div></div></body></html>","raw":null,"categories":[{"name":"猫","path":"api/categories/猫.json"}],"tags":[{"name":"猫","path":"api/tags/猫.json"},{"name":"cat","path":"api/tags/cat.json"}]},{"title":"Git后悔药","slug":"git-reset","date":"2019-07-25T10:33:09.000Z","updated":"2020-01-19T07:41:07.000Z","comments":true,"path":"api/articles/git-reset.json","excerpt":"使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。","cover":null,"content":"<p>使用git提交代码过程中有时会手抖提交错误代码，这时就需要用到git的后悔药reset操作。</p>\n<span id=\"more\"></span>\n<div id=\"sequence-0\"></div>\n\n<h3 id=\"差异（diff）\"><a href=\"#差异（diff）\" class=\"headerlink\" title=\"差异（diff）\"></a>差异（diff）</h3><p>工作区vs暂存区: <code>git diff</code></p>\n<p>暂存区vs本地仓库: <code>git diff —cached</code></p>\n<p>本地仓库vs远程仓库: <code>git diff &lt;分支名&gt; origin/&lt;分支名&gt;</code></p>\n<h3 id=\"撤消（reset）\"><a href=\"#撤消（reset）\" class=\"headerlink\" title=\"撤消（reset）\"></a>撤消（reset）</h3><p>撤消工作区修改: <code>git reset —hard</code></p>\n<p>撤消(1)<code>git add</code>: <code>git reset &amp;&amp; git checkout .</code>或<code>git reset —hard</code>(会还原所有修改)</p>\n<p>撤消(2) <code>git commit</code>: <code>git reset --hard origin/master</code>(使用远端的master分支恢复到本地)</p>\n<p>撤消(3) <code>git push</code>: <code>git reset --hard HEAD^ &amp;&amp; git push -f</code>(先在本地回到上一个版本，然后强推到远端)<script src=\"https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js\"></script><script src=\"https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js\"></script><textarea id=\"sequence-0-code\" style=\"display: none\">title: git reset\nparticipant 工作区\nparticipant 暂存区\nparticipant 本地仓库\nparticipant 远程仓库\n\n 工作区->暂存区:(1) git add\n 暂存区->本地仓库:(2) git commit\n 本地仓库->远程仓库:(3) git push</textarea><textarea id=\"sequence-0-options\" style=\"display: none\">{\"theme\":\"simple\"}</textarea><script>  var code = document.getElementById(\"sequence-0-code\").value;  var options = JSON.parse(decodeURIComponent(document.getElementById(\"sequence-0-options\").value));  var diagram = Diagram.parse(code);  diagram.drawSVG(\"sequence-0\", options);</script></p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"reset","path":"api/tags/reset.json"},{"name":"恢复","path":"api/tags/恢复.json"},{"name":"后悔","path":"api/tags/后悔.json"}]},{"title":"Git常用命令别名设置","slug":"git-alias","date":"2019-06-28T09:17:06.000Z","updated":"2020-10-29T17:16:23.000Z","comments":true,"path":"api/articles/git-alias.json","excerpt":"如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置","cover":"/media/git-lg效果图.png","content":"<html><head></head><body><p>如果平时使用git使用git命令多于GUI工具，则设置一些常用命令的别名有且于效率提升，以下是我平时使用较多的一些命令的别名设置</p>\n<span id=\"more\"></span>\n<p>Git别名设置</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global alias.st status</span><br><span class=\"line\">git config --global alias.co checkout</span><br><span class=\"line\">git config --global alias.ci commit</span><br><span class=\"line\">git config --global alias.br branch</span><br><span class=\"line\">git config --global alias.cp cherry-pick</span><br><span class=\"line\">git config --global alias.unstage <span class=\"string\">'reset HEAD'</span></span><br><span class=\"line\"><span class=\"comment\"># 可用git pull -r代替</span></span><br><span class=\"line\">git config --global alias.fr <span class=\"string\">'!f() { git fetch &amp;&amp; git rebase $@; }; f'</span>; </span><br><span class=\"line\"><span class=\"comment\"># git提交日志</span></span><br><span class=\"line\">git config --global alias.lg <span class=\"string\">\"log --color --graph --pretty=format:'%Cred%h%Creset - %Cgreen(%cd)%C(yellow)%d%Creset %s %C(blue)[%an/%cn]%Creset' --date=format:'%Y-%m-%d %H:%M:%S' --abbrev-commit\"</span></span><br></pre></td></tr></tbody></table></figure>\n<p>删除别名</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global --<span class=\"built_in\">unset</span> alias.xxx</span><br></pre></td></tr></tbody></table></figure>\n<p>以下两个命令设置git alias和zsh alias都失败，暂没找到方法可以设置别名</p>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 查看仓库提交者排名前 5</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --pretty=<span class=\"string\">'%aN'</span> | <span class=\"built_in\">sort</span> | <span class=\"built_in\">uniq</span> -c | <span class=\"built_in\">sort</span> -k1 -n -r | <span class=\"built_in\">head</span> -n 5</span><br></pre></td></tr></tbody></table></figure>\n<figure class=\"highlight bash\"><table><tbody><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计每个人增删行数</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> --format=<span class=\"string\">'%aN'</span> | <span class=\"built_in\">sort</span> -u | <span class=\"keyword\">while</span> <span class=\"built_in\">read</span> name; <span class=\"keyword\">do</span> <span class=\"built_in\">echo</span> -en <span class=\"string\">\"<span class=\"variable\">$name</span>\\t\"</span>; git <span class=\"built_in\">log</span> --author=<span class=\"string\">\"<span class=\"variable\">$name</span>\"</span> --pretty=tformat: --numstat | awk <span class=\"string\">'{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }'</span> -; <span class=\"keyword\">done</span></span><br></pre></td></tr></tbody></table></figure>\n<p>git lg命令效果图<br><img alt=\"git lg命令效果图\" data-src=\"/media/git-lg效果图.png\"></p>\n</body></html>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"git","path":"api/tags/git.json"},{"name":"教程","path":"api/tags/教程.json"}]},{"title":"Android真机调试常用命令","slug":"android真机调试常用命令","date":"2019-04-28T12:39:32.000Z","updated":"2020-08-15T03:08:21.000Z","comments":true,"path":"api/articles/android真机调试常用命令.json","excerpt":"使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。<br>","cover":null,"content":"<p>使用USB连接Android真机调试时，使用无线连接调试会方便很多，并使用电脑端用adb命令实现截图和录屏，方便调试和问题反馈。<br><span id=\"more\"></span></p>\n<h2 id=\"无线调试\"><a href=\"#无线调试\" class=\"headerlink\" title=\"无线调试\"></a>无线调试</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 前提条件：手机和电脑处理同一网段</span><br><span class=\"line\"># 第一次手机先使用USB连接电脑执行以下命令让手机上的某一端口处于监听状态</span><br><span class=\"line\">adb tcpip &lt;port&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 在手机上查看ip地址或使用以下命令查看ip</span><br><span class=\"line\">adb shell ifconfig </span><br><span class=\"line\"># 连接手机（在同一个环境下，一般手机/电脑不重启就会一直连接着）</span><br><span class=\"line\">adb connect &lt;ip&gt; :&lt;port&gt;</span><br><span class=\"line\"># 查看连接的设备</span><br><span class=\"line\">adb devices</span><br></pre></td></tr></table></figure>\n<h2 id=\"截图\"><a href=\"#截图\" class=\"headerlink\" title=\"截图\"></a>截图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 截图并保存到手机sd卡的下</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（截图并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi shot.sh</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android截图，定位和预览默认关闭，请取消注释</span><br><span class=\"line\"></span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screencap -p /sdcard/screenshot.png</span><br><span class=\"line\">adb pull /sdcard/screenshot.png</span><br><span class=\"line\">adb shell rm /sdcard/screenshot.png</span><br><span class=\"line\">mv screenshot.png $dd.png</span><br><span class=\"line\">echo &quot;截图已保存为当前目录下的&quot;$dd.png</span><br><span class=\"line\"># 修改图片尺寸，长或宽最大不超过960，等比缩放</span><br><span class=\"line\">echo &quot;压缩图片...&quot;</span><br><span class=\"line\">sips -Z 960 $pwd/$dd.png</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.png -R</span><br><span class=\"line\"># 打开预览</span><br><span class=\"line\">open -a Preview $dd.png</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &#x27;on run args&#x27; -e &#x27;set the clipboard to POSIX file (first item of args)&#x27; -e end $pwd/$dd.png</span><br><span class=\"line\">echo &quot;截图已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x shot.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./shot.sh</span><br></pre></td></tr></table></figure>\n<p>⌘+v试试</p>\n<p><em>可把命令添加alias别名</em></p>\n<h2 id=\"录屏\"><a href=\"#录屏\" class=\"headerlink\" title=\"录屏\"></a>录屏</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行录屏并保存到手机sd卡目录下（默认时长180s）</span><br><span class=\"line\"># 可配置参数</span><br><span class=\"line\"># --time-limit: 录制时长，单位秒</span><br><span class=\"line\"># --size: 分辨率，如1280*720，不指定默认使用手机的分辨率</span><br><span class=\"line\"># --bit-rate: 视频的比特率，如6Mbps为6000000</span><br><span class=\"line\"># --verbose: 命令行显示log</span><br><span class=\"line\">adb shell screenrecord /sdcard/demo.mp4</span><br></pre></td></tr></table></figure>\n<p>便捷脚本（录屏并自动复制到电脑剪切板/保存到电脑本地）</p>\n<blockquote>\n<p>因脚本里调用了linux/macOS的命令，所以只适用于macOS系统，windows请自行修改脚本。</p>\n</blockquote>\n<p><code>vi record.sh</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"># Android录屏</span><br><span class=\"line\">dd=`date +%Y-%m-%d-%H-%M-%S`&quot;-$1s&quot;</span><br><span class=\"line\">pwd=`pwd`</span><br><span class=\"line\">adb shell screenrecord --time-limit $1 /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb pull /sdcard/screenrecord.mp4</span><br><span class=\"line\">adb shell rm /sdcard/screenrecord.mp4</span><br><span class=\"line\">mv screenrecord.mp4 $dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已保存为当前目录下的&quot;$dd.mp4</span><br><span class=\"line\"># 定位到文件</span><br><span class=\"line\">open ./$dd.mp4 -R</span><br><span class=\"line\"># 复制到剪切板</span><br><span class=\"line\">osascript -e &#x27;on run args&#x27; -e &#x27;set the clipboard to POSIX file (first item of args)&#x27; -e end $pwd/$dd.mp4</span><br><span class=\"line\">echo &quot;$1秒视频已复制到剪切板&quot;</span><br></pre></td></tr></table></figure>\n<p>授予执行权限<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod a+x record.sh</span><br></pre></td></tr></table></figure></p>\n<p>使用方法<br><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 3为录制秒数，可修改</span><br><span class=\"line\">./record.sh 3</span><br></pre></td></tr></table></figure></p>\n","raw":null,"categories":[{"name":"程序员","path":"api/categories/程序员.json"}],"tags":[{"name":"android","path":"api/tags/android.json"},{"name":"macos","path":"api/tags/macos.json"},{"name":"命令","path":"api/tags/命令.json"},{"name":"效率","path":"api/tags/效率.json"},{"name":"无线","path":"api/tags/无线.json"},{"name":"调试","path":"api/tags/调试.json"},{"name":"adb","path":"api/tags/adb.json"},{"name":"usb","path":"api/tags/usb.json"}]},{"title":"JS笔记","slug":"js笔记","date":"2019-04-24T08:35:13.000Z","updated":"2020-08-15T03:06:50.000Z","comments":true,"path":"api/articles/js笔记.json","excerpt":"js中要用变量作为key的话使用方括号括住<br>例：this.searchKeyword<br>1<br>2<br>3<br>4<br>5<br>6<br>this.$http(&#123;<br>    url: this.searchUrl,<br>    method: this.remoteRequestMethod,<br>    params: Object.assign(&#123;&#125;, this.searchParams, this.pager),<br>    data: Object.assign(&#123; [this.searchKeyword]: query &#125;, this.searchBody, this.pager)<br>    &#125;)<br><br>","cover":null,"content":"<p>js中要用变量作为key的话使用方括号括住<br>例：<code>this.searchKeyword</code><br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.$http(&#123;</span><br><span class=\"line\">    <span class=\"attr\">url</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">searchUrl</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">remoteRequestMethod</span>,</span><br><span class=\"line\">    <span class=\"attr\">params</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123;&#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">searchParams</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">pager</span>),</span><br><span class=\"line\">    <span class=\"attr\">data</span>: <span class=\"title class_\">Object</span>.<span class=\"title function_\">assign</span>(&#123; [<span class=\"variable language_\">this</span>.<span class=\"property\">searchKeyword</span>]: query &#125;, <span class=\"variable language_\">this</span>.<span class=\"property\">searchBody</span>, <span class=\"variable language_\">this</span>.<span class=\"property\">pager</span>)</span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure><br><span id=\"more\"></span><br>全文完🙈</p>\n","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"js","path":"api/tags/js.json"}]},{"title":"SpringWebFlux使用笔记","slug":"SpringWebFlux","date":"2019-02-28T05:32:59.000Z","updated":"2020-08-15T03:07:21.000Z","comments":true,"path":"api/articles/SpringWebFlux.json","excerpt":"记录使用SpringWebFlux的一些笔记。","cover":null,"content":"<p>记录使用SpringWebFlux的一些笔记。</p>\n<span id=\"more\"></span>\n<h2 id=\"groupBy\"><a href=\"#groupBy\" class=\"headerlink\" title=\"groupBy\"></a>groupBy</h2><p>对flux进行分组。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channelOnlineCityBoFlux.sort((s1, s2) -&gt; Objects.requireNonNull(s1.getInitial()).compareTo(s2.getInitial()))</span><br><span class=\"line\">  .groupBy(city -&gt; city.getInitial().substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>).toUpperCase())</span><br><span class=\"line\">  .sort((s1, s2) -&gt; Objects.requireNonNull(s1.key()).compareTo(s2.key()))</span><br><span class=\"line\">  .flatMap(gf -&gt; gf.collectList()</span><br><span class=\"line\">          .map(cityList -&gt; &#123;</span><br><span class=\"line\">              <span class=\"type\">ChannelOnlineCityGroupByPinYinBo</span> <span class=\"variable\">cityGroupByPinYinBo</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ChannelOnlineCityGroupByPinYinBo</span>();</span><br><span class=\"line\">              cityGroupByPinYinBo.setLetter(gf.key());</span><br><span class=\"line\">              cityGroupByPinYinBo.setCities(cityList);</span><br><span class=\"line\">              <span class=\"keyword\">return</span> cityGroupByPinYinBo;</span><br><span class=\"line\">          &#125;));</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"handle\"><a href=\"#handle\" class=\"headerlink\" title=\"handle\"></a>handle</h2><p>handle作用相当于是filter和map的组合。</p>\n<iframe\n  src=\"https://carbon.now.sh/embed/?bg=rgba(171%2C184%2C195%2C100)&t=dracula&wt=none&l=text%2Fx-java&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=48px&ph=32px&ln=false&fm=Hack&fs=13px&lh=133%25&si=false&code=public%2520static%2520String%2520alphabet(int%2520letterNumber)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letterNumber%2520%253C%25201%2520%257C%257C%2520letterNumber%2520%253E%252026)%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520return%2520null%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%2520%2520%2520%2520int%2520letterIndexAscii%2520%253D%2520'A'%2520%252B%2520letterNumber%2520-%25201%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520return%2520%2522%2522%2520%252B%2520(char)%2520letterIndexAscii%253B%250A%2520%2520%2520%2520%257D%250A%250A%250Apublic%2520static%2520void%2520main(String%255B%255D%2520args)%2520%257B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25951%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux%253CString%253E%2520alphabet%2520%253D%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520alphabet.map(a%2520-%253E%2520a.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E5%2586%2599%25E6%25B3%25952%250A%2520%2520%2520%2520%2520%2520%2520%2520Flux.just(-1%252C%252030%252C%252013%252C%25209%252C%252020)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.handle((i%252C%2520sink)%2520-%253E%2520%257B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520String%2520letter%2520%253D%2520alphabet(i)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520if%2520(letter%2520!%253D%2520null)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520sink.next(letter)%253B%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%257D)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%252F%252F%2520%25E8%25BF%2599%25E9%2587%258C%25E9%259C%2580%25E8%25A6%2581%25E5%2581%259A%25E4%25B8%2580%25E6%25AC%25A1%25E5%25BC%25BA%25E5%2588%25B6%25E7%25B1%25BB%25E5%259E%258B%25E8%25BD%25AC%25E6%258D%25A2%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(a%2520-%253E%2520(String)%2520a)%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.map(sa%2520-%253E%2520sa.toLowerCase())%250A%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520%2520.subscribe(System.out%253A%253Aprintln)%253B%250A%250A%2520%2520%2520%2520%257D&es=2x&wm=false\"\n  style=\"transform:scale(1); width:600px; height:800px; border:0; overflow:hidden;\"\n  sandbox=\"allow-scripts allow-same-origin\"><br></iframe>","raw":null,"categories":[{"name":"程序猿","path":"api/categories/程序猿.json"}],"tags":[{"name":"java","path":"api/tags/java.json"},{"name":"reactive","path":"api/tags/reactive.json"}]}]}