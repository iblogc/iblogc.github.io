{"title":"Django Rest framework使用问题及解决方法","slug":"django-rest-framework使用问题及解决方法","date":"2016-12-17T06:58:04.000Z","updated":"2020-08-15T03:05:35.805Z","comments":true,"path":"api/articles/django-rest-framework使用问题及解决方法.json","excerpt":"<br><br>","covers":null,"content":"<p><br><br><a id=\"more\"></a></p>\n<h2 id=\"更新记录\"><a href=\"#更新记录\" class=\"headerlink\" title=\"更新记录\"></a>更新记录</h2><p>2016-01-29 初稿</p>\n<h2 id=\"问题1\"><a href=\"#问题1\" class=\"headerlink\" title=\"问题1\"></a>问题1</h2><p><code>ViewSet</code>没有写<code>serializer_class</code>属性，而是重写了<code>get_serializer_class()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Cannot use OrderingFilter on a view which does not have either a &apos;serializer_class&apos; or &apos;ordering_fields&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>原因：因为启用了<code>rest_framework.filters.OrderingFilter</code>而没有设置<code>ordering_fields</code><br>解决方法：<code>ViewSet</code>里加<code>ordering_fields</code>属性，可是禁用<code>rest_framework.filters.OrderingFilter</code></p>\n<h2 id=\"问题2\"><a href=\"#问题2\" class=\"headerlink\" title=\"问题2\"></a>问题2</h2><p><code>ViewSet</code>没有写<code>queryset</code>属性，而是重写了<code>get_queryset()</code>方法，出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&apos;base_name&apos; argument not specified, and could not automatically determine the name from the viewset, as it does not have a &apos;.queryset&apos; attribute.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法：需要在<code>urls.py</code>里给<code>ViewSet</code>注册<code>Router</code>时添加<code>base_name</code>（<code>base_name</code>为<code>router</code>为<code>ViewSet</code>注册url时自动添加的name前缀，如果未设置则从<code>ViewSet</code>的<code>queryset</code>里取，使用<code>ViewSet</code>自动生成的url name为&lt;base_name&gt;-list &lt;base_name&gt;-detail 等）<br>urls.py<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">router.register(r&apos;users&apos;, UserViewSet, base_name=&apos;user&apos;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"问题3\"><a href=\"#问题3\" class=\"headerlink\" title=\"问题3\"></a>问题3</h2><p>给url设置了<code>namespace</code><br>urls.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">url(<span class=\"string\">r'^api/'</span>, include(router.urls, namespace=<span class=\"string\">'api'</span>)),</span><br></pre></td></tr></table></figure></p>\n<p>访问部分接口出现<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Could not resolve URL for hyperlinked relationship using view name &quot;user-detail&quot;. You may have failed to include the related model in your API, or incorrectly configured the `lookup_field` attribute on this field.</span><br></pre></td></tr></table></figure></p>\n<p>解决方法1：给所有的<code>serializer</code>里包含的外键字段手动设置<code>view_name</code>值（注意，继承<code>HyperlinkedModelSerializer</code>，会隐式添加一个<code>HyperlinkedRelatedField</code>字段<code>url</code>，而所有的外键都会变成<code>HyperlinkedRelatedField</code>字段，所以需要对两种类型字段手动设置<code>view_name</code>值）<br>serializers.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ContactSerializer</span><span class=\"params\">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Meta</span>:</span></span><br><span class=\"line\">        model = Contact</span><br><span class=\"line\">        fields = <span class=\"string\">'__all__'</span></span><br><span class=\"line\">        extra_kwargs = &#123;</span><br><span class=\"line\">            <span class=\"string\">'url'</span>: &#123;<span class=\"string\">'view_name'</span>: <span class=\"string\">'api:contact-detail'</span>&#125;,</span><br><span class=\"line\">            <span class=\"string\">'user'</span>:&#123;<span class=\"string\">'view_name'</span>:<span class=\"string\">'api:user-detail'</span>&#125;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure></p>\n<p>解决方法2：启动drf基于<code>NameSpace</code>的版本控制<br>settings.py<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REST_FRAMEWORK = &#123;</span><br><span class=\"line\">    ……</span><br><span class=\"line\">    <span class=\"string\">'DEFAULT_VERSIONING_CLASS'</span>: <span class=\"string\">'rest_framework.versioning.NamespaceVersioning'</span>,</span><br><span class=\"line\">    ……</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":[],"tags":[{"name":"Django","path":"api/tags/Django.json"},{"name":"restful","path":"api/tags/restful.json"},{"name":"api","path":"api/tags/api.json"},{"name":"问题","path":"api/tags/问题.json"}]}